{
    "pipes": [],
    "interfaces": [
        {
            "name": "MenuItem",
            "id": "interface-MenuItem-43fd4c6f3583b518adcbea6bbf7401b63359e6f1822a0e499955d42a9c5dcaf3b0ca51f243f0a3f1305819f02a7a26df6ed4746e9375223673763dc63cbc4373",
            "file": "src/app/risk-dashboard/components/sidebar/sidebar.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, ElementRef, ViewChild } from '@angular/core';\r\nimport { MatExpansionModule } from '@angular/material/expansion';\r\nexport interface MenuItem {\r\n  icon: string;\r\n  label: string;\r\n  badge?: string;\r\n  highlight?: boolean;\r\n}\r\n\r\n@Component({\r\n  selector: 'app-sidebar',\r\n  imports: [MatExpansionModule],\r\n  templateUrl:'sidebar.component.html',\r\n  styleUrl: 'sidebar.component.scss'\r\n})\r\nexport class SidebarComponent {\r\n  @ViewChild('sidebar') sidebar!: ElementRef;\r\n  openSidebar() {\r\n    this.sidebar.nativeElement.classList.add('active');\r\n    document.body.classList.add('overflow-hidden');\r\n  }\r\n\r\n  hideSidebar() {\r\n    this.sidebar.nativeElement.classList.remove('active');\r\n    document.body.classList.remove('overflow-hidden');\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "badge",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "highlight",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "User",
            "id": "interface-User-23c11020a2831beb3fa02ee911a75b64009c31bb46f73a01145c2560cb13b7f7e641105b678bd8fb01a5a199117001f3da4a78351d29d85d213ed7b82982091f",
            "file": "src/stories/user.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface User {\r\n  name: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        }
    ],
    "injectables": [],
    "guards": [],
    "interceptors": [],
    "classes": [],
    "directives": [],
    "components": [
        {
            "name": "AnnualExposureDetailsComponent",
            "id": "component-AnnualExposureDetailsComponent-a0d96da3947e355b3e4d77421d2324cf67b78e80298454c2358315897e7243192065dd21686ad19133dda2da8d638a93b56de09a2629fc27d2e358c8863027d1",
            "file": "src/app/risk-dashboard/components/dashboard/components/annual-exposure-details/annual-exposure-details.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-annual-exposure-details",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./annual-exposure-details.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "annualExposure",
                    "defaultValue": "1200001.2",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "avgHedgeRate",
                    "defaultValue": "'--'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "currentHedge",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "currentHedgePercent",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "recommendedHedge",
                    "defaultValue": "720001",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "recommendedHedgePercent",
                    "defaultValue": "60",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "number",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "NgbTooltipModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\r\nimport { NgbTooltipModule } from '@ng-bootstrap/ng-bootstrap';\r\n@Component({\r\n  selector: 'app-annual-exposure-details',\r\n  imports: [NgbTooltipModule],\r\n  templateUrl: './annual-exposure-details.component.html',\r\n  styleUrl: './annual-exposure-details.component.scss'\r\n})\r\nexport class AnnualExposureDetailsComponent {\r\n  @Input() annualExposure: number = 1200001.2;\r\n  @Input() recommendedHedge: number = 720001;\r\n  @Input() recommendedHedgePercent: number = 60;\r\n  @Input() currentHedge: number = 0;\r\n  @Input() currentHedgePercent: number = 0;\r\n  @Input() avgHedgeRate: string = '--';\r\n}\r\n",
            "styleUrl": "./annual-exposure-details.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"annual-exposer-details\">\r\n    <h4 class=\"info-title\"><img src=\"images/exposure-virtual.svg\" alt=\"exposure\" />Annual exposure details</h4>\r\n    <div class=\"annual-wrap\">\r\n        <div class=\"annual-item exposer-item\">\r\n            <h4 class=\"item-title\">Annual exposure<img src=\"images/annual-title-help-icon.svg\" alt=\"help\" [ngbTooltip]=\"annualExposer\" placement=\"top-left\"\r\n                tooltipClass=\"risk-step3-tooltip--rm\"></h4>\r\n            <div class=\"price-sec\">\r\n                <span class=\"sign\">$</span>{{annualExposure}}\r\n                <!-- Static content used as a placeholder -->\r\n            </div>\r\n        </div>\r\n        <ng-template #annualExposer>\r\n            The total amount at risk over the specified time period, calculated as the sum of all\r\n            monthly exposures\r\n        </ng-template>\r\n        <ng-template #avgHedge>\r\n            The average exchange rate of your current hedging transactions\r\n        </ng-template>\r\n\r\n        <div class=\"hedge-item annual-item\">\r\n            <h4 class=\"item-title\">Our recommended hedge</h4>\r\n            <div class=\"price-sec\">\r\n                <span class=\"sign\">$</span>{{recommendedHedge}}\r\n                <span class=\"percent-tag\">{{recommendedHedgePercent}}%</span>\r\n            </div>\r\n        </div>\r\n\r\n        <div class=\"current-hedge-item annual-item\">\r\n            <h4 class=\"item-title\">Your current hedge</h4>\r\n            <div class=\"price-sec\">\r\n                <span class=\"sign\">$</span>{{currentHedge}}\r\n                <span class=\"percent-tag\">{{currentHedgePercent}}%</span>\r\n            </div>\r\n        </div>\r\n\r\n        <div class=\"avg-hedge-item annual-item\">\r\n            <h4 class=\"item-title\">AVG hedging rate<img src=\"images/annual-title-help-icon.svg\" alt=\"help\" [ngbTooltip]=\"avgHedge\" placement=\"top-right\" tooltipClass=\"risk-step3-tooltip--rm\"></h4>\r\n            <div class=\"price-sec\">\r\n                {{avgHedgeRate}}\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n"
        },
        {
            "name": "AppComponent",
            "id": "component-AppComponent-4a205b95b0a6ce9ae9bf75b3248e81f23797b046a3e5cb8b43e3f6e8e5c0211df52617e1fcfb3abb098d4214549fe35e8a83859d444ad4034701646bc780c71f",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "app.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "sidebar",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SidebarComponent",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "SidebarComponent"
                        }
                    ],
                    "modifierKind": [
                        170,
                        123
                    ]
                },
                {
                    "name": "title",
                    "defaultValue": "'angular-latest'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "methodsClass": [
                {
                    "name": "openSidebar",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "RouterOutlet"
                },
                {
                    "name": "HeaderComponent",
                    "type": "component"
                },
                {
                    "name": "SidebarComponent",
                    "type": "component"
                },
                {
                    "name": "DashboardComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, ViewChild } from '@angular/core';\r\nimport { RouterOutlet } from '@angular/router';\r\nimport { HeaderComponent } from \"./risk-dashboard/components/header/header.component\";\r\nimport { SidebarComponent } from \"./risk-dashboard/components/sidebar/sidebar.component\";\r\nimport { DashboardComponent } from \"./risk-dashboard/components/dashboard/dashboard.component\";\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  imports: [RouterOutlet, HeaderComponent, SidebarComponent, DashboardComponent],\r\n  templateUrl:'app.component.html',\r\n  styleUrl:'app.component.scss',\r\n})\r\nexport class AppComponent {\r\n  @ViewChild(SidebarComponent) private sidebar!: SidebarComponent;\r\n  title = 'angular-latest';\r\n  openSidebar() {\r\n    this.sidebar.openSidebar();\r\n  }\r\n}\r\n",
            "styleUrl": "app.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"layout\">\r\n    <app-header (openSidebar)=\"openSidebar()\"></app-header>\r\n    <app-sidebar></app-sidebar>\r\n    <div class=\"content-wrapper risk-manager\">\r\n        <router-outlet />\r\n        <app-dashboard></app-dashboard>\r\n    </div>\r\n</div>"
        },
        {
            "name": "BreadcrumbWalletComponent",
            "id": "component-BreadcrumbWalletComponent-a7daf20243617368d33633db183f6c5e4aa6365ba9481cf445542aa764891adf8d550d47f3e5b337d488156fc20aacdcd3d15846c06284aef6363c8c16e1559c",
            "file": "src/app/risk-dashboard/components/dashboard/components/breadcrumb-wallet/breadcrumb-wallet.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-breadcrumb-wallet",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./breadcrumb-wallet.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "baseCurrency",
                    "defaultValue": "'images/ils-flag.svg'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "cashFlowName",
                    "defaultValue": "'S.L ROBOTICS'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "fromCurrency",
                    "defaultValue": "'flags/us.svg'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "monthRange",
                    "defaultValue": "'Jan 24 - Dec 24'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-breadcrumb-wallet',\r\n  imports: [],\r\n  templateUrl: './breadcrumb-wallet.component.html',\r\n  styleUrl: './breadcrumb-wallet.component.scss'\r\n})\r\nexport class BreadcrumbWalletComponent {\r\n  @Input() baseCurrency: string = 'images/ils-flag.svg';\r\n  @Input() fromCurrency: string = 'flags/us.svg';\r\n  @Input() cashFlowName: string = 'S.L ROBOTICS';\r\n  @Input() monthRange: string = 'Jan 24 - Dec 24';\r\n}\r\n",
            "styleUrl": "./breadcrumb-wallet.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"risk-header\">\r\n    <div class=\"risk-nav\">\r\n        Dashboard / hedging / <b>risk analysis</b>\r\n    </div>\r\n    <div class=\"risk-header-bottom\">\r\n        <div class=\"left-sec\">\r\n            <button class=\"cash-flow-wrap\" tooltip=\"S.L ROBOTICS\" placement=\"auto\" tooltipClass=\"risk-dash-tooltip--rm1\" container=\"body\">\r\n                <div class=\"currency-pair\">\r\n                    <img [src]=\"fromCurrency\" class=\"from-currency\">\r\n                    <div class=\"base-currency-wrap\">\r\n                        <img [src]=\"baseCurrency\" class=\"base-currency\">\r\n                    </div>\r\n                </div>\r\n                <div class=\"cashflow-details\">\r\n                    <!-- Static content -->\r\n                    <h3 class=\"name\">{{cashFlowName}}</h3>\r\n                    <h5 class=\"month-range-text\">\r\n                        {{monthRange}}\r\n                    </h5>\r\n                </div>\r\n                <div class=\"selection-icons\">\r\n                    <!-- Add icons or leave it empty -->\r\n                </div>\r\n            </button>\r\n            <button class=\"add-flow\"><i class=\"fas fa-plus\"></i></button>\r\n        </div>\r\n        <div class=\"right-buttons\">\r\n            <!-- Static content for buttons -->\r\n            <button class=\"policy-btn\">\r\n                <img src=\"images/plus-icon-round.svg\"> Advanced Policy\r\n                <span class=\"notify-tag\"></span>\r\n            </button>\r\n        </div>\r\n    </div>\r\n</div>\r\n"
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-5747b2121bdc472b32e41e4e47db44dbd7601fe73e9c7b3d0f82e7d1aaf97be0d13d4880fee19b0e4d511178aa52a24a5a9ea3ee0034d204ffd659c0aae43e41",
            "file": "src/stories/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-button",
            "styleUrls": [
                "./button.css"
            ],
            "styles": [],
            "template": " <button  type=\"button\"\n  (click)=\"onClick.emit($event)\"\n  [ngClass]=\"classes\"\n  [ngStyle]=\"{ 'background-color': backgroundColor }\"\n>\n  {{ label }}\n</button>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nWhat background color to use",
                    "description": "<p>What background color to use</p>\n",
                    "line": 25,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "'Button'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 793,
                            "end": 807,
                            "kind": 327,
                            "id": 0,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "tagName": {
                                "pos": 794,
                                "end": 802,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "required"
                            },
                            "comment": ""
                        }
                    ],
                    "rawdescription": "\n\nButton contents\n\n",
                    "description": "<p>Button contents</p>\n",
                    "line": 37,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "primary",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nIs this the principal call to action on the page?",
                    "description": "<p>Is this the principal call to action on the page?</p>\n",
                    "line": 21,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nHow large should the button be?",
                    "description": "<p>How large should the button be?</p>\n",
                    "line": 29,
                    "type": "\"small\" | \"medium\" | \"large\"",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nOptional click handler",
                    "description": "<p>Optional click handler</p>\n",
                    "line": 41,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { Component, Input, Output, EventEmitter } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'storybook-button',\r\n  standalone: true,\r\n  imports: [CommonModule],\r\n  template: ` <button\r\n  type=\"button\"\r\n  (click)=\"onClick.emit($event)\"\r\n  [ngClass]=\"classes\"\r\n  [ngStyle]=\"{ 'background-color': backgroundColor }\"\r\n>\r\n  {{ label }}\r\n</button>`,\r\n  styleUrls: ['./button.css'],\r\n})\r\nexport class ButtonComponent {\r\n  /** Is this the principal call to action on the page? */\r\n  @Input()\r\n  primary = false;\r\n\r\n  /** What background color to use */\r\n  @Input()\r\n  backgroundColor?: string;\r\n\r\n  /** How large should the button be? */\r\n  @Input()\r\n  size: 'small' | 'medium' | 'large' = 'medium';\r\n\r\n  /**\r\n   * Button contents\r\n   *\r\n   * @required\r\n   */\r\n  @Input()\r\n  label = 'Button';\r\n\r\n  /** Optional click handler */\r\n  @Output()\r\n  onClick = new EventEmitter<Event>();\r\n\r\n  public get classes(): string[] {\r\n    const mode = this.primary ? 'storybook-button--primary' : 'storybook-button--secondary';\r\n\r\n    return ['storybook-button', `storybook-button--${this.size}`, mode];\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-button {\r\n  display: inline-block;\r\n  cursor: pointer;\r\n  border: 0;\r\n  border-radius: 3em;\r\n  font-weight: 700;\r\n  line-height: 1;\r\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\r\n}\r\n.storybook-button--primary {\r\n  background-color: #555ab9;\r\n  color: white;\r\n}\r\n.storybook-button--secondary {\r\n  box-shadow: rgba(0, 0, 0, 0.15) 0px 0px 0px 1px inset;\r\n  background-color: transparent;\r\n  color: #333;\r\n}\r\n.storybook-button--small {\r\n  padding: 10px 16px;\r\n  font-size: 12px;\r\n}\r\n.storybook-button--medium {\r\n  padding: 11px 20px;\r\n  font-size: 14px;\r\n}\r\n.storybook-button--large {\r\n  padding: 12px 24px;\r\n  font-size: 16px;\r\n}\r\n",
                    "styleUrl": "./button.css"
                }
            ],
            "stylesData": "",
            "extends": [],
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 43
                    }
                }
            }
        },
        {
            "name": "ButtonLinkComponent",
            "id": "component-ButtonLinkComponent-71c40cb5d243681808a5d97266e6878ffc5864c772c62f80e1c1351434a44663dd13478b9cbff3e9590271da5917cb7b915eb10089ea7f497f3ef3eeba817e44",
            "file": "src/app/button-link/button-link.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-button-link",
            "styleUrls": [
                "button-link.component.scss"
            ],
            "styles": [],
            "template": "    <button\n  type=\"button\"\n  (click)=\"onClick.emit($event)\"\n>\n  {{ label }}\n</button>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nWhat background color to use",
                    "description": "<p>What background color to use</p>\n",
                    "line": 22,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "'Button'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 596,
                            "end": 610,
                            "kind": 327,
                            "id": 0,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "tagName": {
                                "pos": 597,
                                "end": 605,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "required"
                            },
                            "comment": ""
                        }
                    ],
                    "rawdescription": "\n\nButton contents\n\n",
                    "description": "<p>Button contents</p>\n",
                    "line": 34,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "primary",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nHow large should the button be?",
                    "description": "<p>How large should the button be?</p>\n",
                    "line": 26,
                    "type": "\"small\" | \"medium\" | \"large\"",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nOptional click handler",
                    "description": "<p>Optional click handler</p>\n",
                    "line": 38,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-button-link',\r\n  imports: [],\r\n  template: `\r\n    <button\r\n  type=\"button\"\r\n  (click)=\"onClick.emit($event)\"\r\n>\r\n  {{ label }}\r\n</button>\r\n  `,\r\n  styleUrls: ['button-link.component.scss']\r\n})\r\nexport class ButtonLinkComponent {\r\n@Input()\r\n  primary = false;\r\n\r\n  /** What background color to use */\r\n  @Input()\r\n  backgroundColor?: string;\r\n\r\n  /** How large should the button be? */\r\n  @Input()\r\n  size: 'small' | 'medium' | 'large' = 'medium';\r\n\r\n  /**\r\n   * Button contents\r\n   *\r\n   * @required\r\n   */\r\n  @Input()\r\n  label = 'Button';\r\n\r\n  /** Optional click handler */\r\n  @Output()\r\n  onClick = new EventEmitter<Event>();\r\n\r\n  public get classes(): string[] {\r\n    const mode = this.primary ? 'app-button-link--primary' : 'app-button-link--secondary';\r\n\r\n    return ['app-button-link', `app-button-link--${this.size}`, mode];\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "button {\r\n  padding: 10px 32px;\r\n  margin: 0;\r\n  font-size: 16px;\r\n  line-height: 1.5;\r\n  border: none 0;\r\n  outline: 0;\r\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\r\n  color: #fff;\r\n  background-image: linear-gradient(277.88deg, #51b441 32.37%, #61c451 99.3%);\r\n  text-transform: uppercase;\r\n  border-radius: 4px;\r\n  box-shadow: 0px 1px 2px rgba(0, 0, 0, 0.15);\r\n  cursor: pointer;\r\n  transition: transform 0.1s ease, box-shadow 0.1s ease;\r\n}\r\n\r\n.app-button-link--primary {\r\n  background-color: hsl(237, 42%, 53%);\r\n  color: white;\r\n}\r\n\r\n.app-button-link--secondary {\r\n  box-shadow: rgba(0, 0, 0, 0.15) 0px 0px 0px 1px inset;\r\n  background-color: transparent;\r\n  color: #333;\r\n}\r\n\r\n.app-button-link--small {\r\n  padding: 10px 16px;\r\n  font-size: 12px;\r\n}\r\n\r\n.app-button-link--medium {\r\n  padding: 11px 20px;\r\n  font-size: 14px;\r\n}\r\n\r\n.app-button-link--large {\r\n  padding: 12px 24px;\r\n  font-size: 16px;\r\n}",
                    "styleUrl": "button-link.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 40
                    }
                }
            }
        },
        {
            "name": "CardComponent",
            "id": "component-CardComponent-5909d6d52d197a8153d5a689cd8d266fa585383d192bb9aee847027b2e278e2bad598631156ad57eb30d249ac0ff213149b7d60f648f7b6ba12c489bf817669c",
            "file": "src/app/card/card.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-card",
            "styleUrls": [
                "./card.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./card.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "defaultValue": "'#ffffff'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "descColor",
                    "defaultValue": "'#000000'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "description",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "fullWidth",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "hoverColor",
                    "defaultValue": "'#f0f0f0'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "imageSrc",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "isLiked",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "isSaved",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "subtitle",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "subtitleColor",
                    "defaultValue": "'#000000'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "title",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "titleColor",
                    "defaultValue": "'#000000'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "liked",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "EventEmitter<void>"
                },
                {
                    "name": "paid",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "EventEmitter<number>"
                },
                {
                    "name": "saved",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "EventEmitter<void>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "activeTab",
                    "defaultValue": "'description'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "counter",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "hover",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 28
                }
            ],
            "methodsClass": [
                {
                    "name": "pay",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "selectTab",
                    "args": [
                        {
                            "name": "tab",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "tab",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toggleLike",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "toggleSave",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { Component, EventEmitter, Input, Output } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-card',\r\n  standalone: true,\r\n  templateUrl: './card.component.html',\r\n  imports: [CommonModule], \r\n  styleUrls: ['./card.component.scss']\r\n})\r\nexport class CardComponent {\r\n  @Input() imageSrc: string = '';\r\n  @Input() title: string = '';\r\n  @Input() subtitle: string = '';\r\n  @Input() description: string = '';\r\n  @Input() backgroundColor: string = '#ffffff'; \r\n  @Input() titleColor: string = '#000000'; \r\n  @Input() subtitleColor: string = '#000000'; \r\n  @Input() descColor: string = '#000000'; \r\n  @Input() hoverColor: string = '#f0f0f0';\r\n  @Input() fullWidth: boolean = false;\r\n  @Input() isLiked: boolean = false;\r\n  @Input() isSaved: boolean = false; \r\n  @Output() liked: EventEmitter<void> = new EventEmitter();\r\n  @Output() saved: EventEmitter<void> = new EventEmitter();\r\n  @Output() paid: EventEmitter<number> = new EventEmitter();\r\n  counter: number = 0;\r\n  hover: boolean = false;\r\n  activeTab: string = 'description';\r\n  toggleLike() {\r\n    this.isLiked = !this.isLiked;\r\n    this.liked.emit();\r\n  }\r\n\r\n  toggleSave() {\r\n    this.isSaved = !this.isSaved;\r\n    this.saved.emit();\r\n  }\r\n\r\n  pay() {\r\n    if (confirm('Are you sure you want to pay?')) {\r\n      this.counter++;\r\n      this.paid.emit(this.counter);\r\n    }\r\n  }\r\n  selectTab(tab: string) {\r\n    this.activeTab = tab;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "html, body { height: 100%; }\r\nbody,p,h1,h2,h3,h4,h5 { margin: 0; font-family: Roboto, \"Helvetica Neue\", sans-serif; }\r\n\r\n.card {\r\n    background: white;\r\n    padding: 16px;\r\n    border-radius: 8px;\r\n    box-shadow: 0px 2px 4px rgba(0, 0, 0, 0.1);\r\n    width: 300px;\r\n    position: relative;\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: 10px;\r\n    transition: all 0.3s ease-in-out;\r\n    cursor: pointer;\r\n    &.full-width {\r\n        width: calc(100% - 30px);\r\n      }\r\n  &:hover {\r\n    box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.2);\r\n    transform: translateY(-5px);\r\n  }\r\n  /* Counter Badge */\r\n.counter-badge {\r\n    position: absolute;\r\n    top: 8px;\r\n    right: 8px;\r\n    background-color: red;\r\n    color: white;\r\n    font-size: 12px;\r\n    font-weight: bold;\r\n    padding: 4px 8px;\r\n    border-radius: 12px;\r\n  }\r\n  .card-footer {\r\n    margin-top: 10px;\r\n    display: flex;\r\n    gap: 10px;\r\n  }\r\n  \r\n  button {\r\n    border: none;\r\n    padding: 6px 12px;\r\n    cursor: pointer;\r\n    border-radius: 4px;\r\n    transition: background 0.3s;\r\n  }\r\n  \r\n  button:hover {\r\n    background: lightgray;\r\n  }\r\n  \r\n    .card-header {\r\n      display: flex;\r\n      align-items: center;\r\n      gap: 10px;\r\n  \r\n      .card-logo {\r\n        width: 40px;\r\n        height: 40px;\r\n        border-radius: 8px;\r\n      }\r\n  \r\n      .card-title {\r\n        h3 {\r\n          margin: 0;\r\n          font-size: 16px;\r\n        }\r\n        p {\r\n          margin: 0;\r\n          font-size: 12px;\r\n          color: gray;\r\n        }\r\n      }\r\n    }\r\n  \r\n    .card-description {\r\n      font-size: 14px;\r\n      color: #555;\r\n    }\r\n  \r\n    .card-icon {\r\n      align-self: flex-end;\r\n      width: 24px;\r\n      height: 24px;\r\n    }\r\n    .tabs {\r\n        display: flex;\r\n        gap: 10px;\r\n        margin-top: 10px;\r\n        \r\n        button {\r\n          background: none;\r\n          border: none;\r\n          color: #333;\r\n          font-size:14px;\r\n          padding: 8px;\r\n          cursor: pointer;\r\n          border-bottom: 2px solid transparent;\r\n          border-radius: 0;\r\n      \r\n          &.active {\r\n            border-bottom: 2px solid #666;\r\n          }\r\n        }\r\n      }\r\n      \r\n      .tab-content {\r\n        margin:0;\r\n        font-size:14px;\r\n        line-height: 1.5;\r\n        color: #111;\r\n      }\r\n    \r\n  }\r\n  ",
                    "styleUrl": "./card.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"card\" [ngClass]=\"{'full-width': fullWidth}\" [ngStyle]=\"{'background-color': hover ? hoverColor : backgroundColor}\" (mouseover)=\"hover = true\"\r\n(mouseleave)=\"hover = false\">\r\n<div class=\"counter-badge\" *ngIf=\"counter >= 0\">\r\n    {{ counter }}\r\n  </div>\r\n    <div class=\"card-header\">\r\n      <img [src]=\"imageSrc\" alt=\"Logo\" class=\"card-logo\" />\r\n      <div class=\"card-title\">\r\n        <h3 [ngStyle]=\"{'color': titleColor}\">{{ title }}</h3>\r\n        <p [ngStyle]=\"{'color': subtitleColor}\">By {{ subtitle }}</p>\r\n      </div>\r\n    </div>\r\n    <p class=\"card-description\" [ngStyle]=\"{'color': descColor}\">{{ description }}</p>\r\n    <div class=\"tabs\">\r\n        <button [class.active]=\"activeTab === 'description'\" (click)=\"selectTab('description')\">Description</button>\r\n        <button [class.active]=\"activeTab === 'materials'\" (click)=\"selectTab('materials')\">Materials</button>\r\n      </div>\r\n      <div class=\"tab-content\">\r\n        <div *ngIf=\"activeTab === 'description'\">\r\n          <p>{{ description }}</p>\r\n        </div>\r\n        <div *ngIf=\"activeTab === 'materials'\">\r\n          <p>Materials info will go here.</p>\r\n        </div>\r\n      </div>\r\n    <div class=\"card-footer\">\r\n        <button (click)=\"toggleLike(); $event.stopPropagation()\">{{ isLiked ? '❤️ Liked' : '♡ Like' }}</button>\r\n        <button (click)=\"toggleSave(); $event.stopPropagation()\">{{ isSaved ? '📌 Saved' : '📍 Save' }}</button>\r\n        <button (click)=\"pay(); $event.stopPropagation()\">💳 Pay</button>\r\n      </div>\r\n  </div>\r\n  \r\n  "
        },
        {
            "name": "CardListComponent",
            "id": "component-CardListComponent-c2c05c75a1f2077d976343fa71d1208bce63050f47f73fd56fa3ebbeaecf1c3763e8f8dc9227ba15ae340a4eb57bb7f4c2df4552c00e5916c60ed656991f7e00",
            "file": "src/app/card-list/card-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-card-list",
            "styleUrls": [
                "card-list.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "card-list.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "cards",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "any[]",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CardComponent",
                    "type": "component"
                },
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\r\nimport { CardComponent } from \"../card/card.component\";\r\nimport { CommonModule } from '@angular/common';\r\n\r\n@Component({\r\n  selector: 'app-card-list',\r\n  standalone: true,\r\n  templateUrl: 'card-list.component.html',\r\n  styleUrls: ['card-list.component.scss'],\r\n  imports: [CardComponent,CommonModule],\r\n})\r\nexport class CardListComponent {\r\n  @Input() cards: any[] = [];\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".card-list {\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n    gap: 16px;\r\n  }\r\n  ",
                    "styleUrl": "card-list.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"card-list\">\r\n    <app-card\r\n      *ngFor=\"let card of cards; let i = index\"\r\n      [imageSrc]=\"card.imageSrc\"\r\n      [title]=\"card.title\"\r\n      [subtitle]=\"card.subtitle\"\r\n      [description]=\"card.description\"\r\n      [backgroundColor]=\"card.backgroundColor\"\r\n      [titleColor]=\"card.titleColor\"\r\n      [hoverColor]=\"card.hoverColor\"\r\n      [fullWidth]=\"card.fullWidth\"\r\n      [isLiked]=\"card.isLiked\"\r\n      [isSaved]=\"card.isSaved\"\r\n      (liked)=\"card.isLiked = !card.isLiked\"\r\n            (saved)=\"card.isSaved = !card.isSaved\"\r\n            (paid)=\"card.counter = $event\"\r\n    ></app-card>\r\n  </div>\r\n  "
        },
        {
            "name": "ChartsTabsComponent",
            "id": "component-ChartsTabsComponent-0cc94dfddc5dba683ea5c9f41f03bc1ed53dcff3c995a472421b090598e86565332d479994660b2e25b43d7351a302892a2652045c24400ce514ff559423059b",
            "file": "src/app/risk-dashboard/components/dashboard/components/charts-tabs/charts-tabs.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-charts-tabs",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./charts-tabs.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "activeIndex",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "loadExposureChart",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "loadMonthChart",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "methodsClass": [
                {
                    "name": "onTabChange",
                    "args": [
                        {
                            "name": "event",
                            "type": "MatTabChangeEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "MatTabChangeEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "MatTabsModule",
                    "type": "module"
                },
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "MonthlyExposureChartComponent",
                    "type": "component"
                },
                {
                    "name": "ExposureRateChartComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { Component } from '@angular/core';\r\nimport { MatTabsModule, MatTabChangeEvent } from '@angular/material/tabs';\r\nimport { MonthlyExposureChartComponent } from \"../monthly-exposure-chart/monthly-exposure-chart.component\";\r\nimport { ExposureRateChartComponent } from \"../exposure-rate-chart/exposure-rate-chart.component\";\r\n@Component({\r\n  selector: 'app-charts-tabs',\r\n  imports: [MatTabsModule, CommonModule, MonthlyExposureChartComponent, ExposureRateChartComponent],\r\n  templateUrl: './charts-tabs.component.html',\r\n  styleUrl: './charts-tabs.component.scss'\r\n})\r\nexport class ChartsTabsComponent {\r\n  loadMonthChart: boolean = true;\r\n  loadExposureChart: boolean = false;\r\n  activeIndex: number = 0;\r\n  onTabChange(event: MatTabChangeEvent) {\r\n    const index = event.index;\r\n    this.activeIndex = index;\r\n    switch (index) {\r\n      case 0:\r\n        this.loadMonthChart = true;\r\n        this.loadExposureChart = false;\r\n        break;\r\n      case 1:\r\n        this.loadExposureChart = true;\r\n        this.loadMonthChart = false;\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  }\r\n}\r\n",
            "styleUrl": "./charts-tabs.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"monthly-analysis-charts\">\r\n    <div class=\"chart-head\">\r\n        <h4 class=\"info-title\"><img src=\"images/exposure-virtual.svg\" alt=\"exposure\" />Monthly\r\n            analysis</h4>\r\n            <div class=\"btn-right\">\r\n                <button class=\"edit-btn\" id=\"editexposureBtn__rmdb\">Edit</button>\r\n                <button class=\"hedge-btn\" id=\"quickHedge__rmdb\">Quick Hedge</button>\r\n            </div>\r\n    </div>\r\n    <div class=\"tab-wrap\">\r\n        <mat-tab-group mat-stretch-tabs=\"false\" class=\"chart-tabs-group\" mat-align-tabs=\"center\" (selectedTabChange)=\"onTabChange($event)\">\r\n            <mat-tab label=\"Monthly exposure\" class=\"chart-tab\">\r\n                <app-monthly-exposure-chart *ngIf=\"loadMonthChart\"></app-monthly-exposure-chart>\r\n            </mat-tab>\r\n            <mat-tab label=\"Exposure & rates\" class=\"chart-tab\">\r\n                <app-exposure-rate-chart *ngIf=\"loadExposureChart\"></app-exposure-rate-chart>\r\n            </mat-tab>\r\n        </mat-tab-group>\r\n    </div>\r\n</div>"
        },
        {
            "name": "DashboardComponent",
            "id": "component-DashboardComponent-fb53426dc5fc02e1cede8089f67e7658dc0af8eab7a11f96174a75a480f40b642c1642be1d1a77ced96dbefc5e8defd5cc1cbfb7985856202503464923bf952a",
            "file": "src/app/risk-dashboard/components/dashboard/dashboard.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-dashboard",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./dashboard.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "AnnualExposureDetailsComponent",
                    "type": "component"
                },
                {
                    "name": "BreadcrumbWalletComponent",
                    "type": "component"
                },
                {
                    "name": "ChartsTabsComponent",
                    "type": "component"
                },
                {
                    "name": "RiskEstimateChartComponent",
                    "type": "component"
                },
                {
                    "name": "TradeViewChartComponent",
                    "type": "component"
                },
                {
                    "name": "VolatilityChartComponent",
                    "type": "component"
                },
                {
                    "name": "MomentumIndicatorChartComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { AnnualExposureDetailsComponent } from \"./components/annual-exposure-details/annual-exposure-details.component\";\r\nimport { BreadcrumbWalletComponent } from './components/breadcrumb-wallet/breadcrumb-wallet.component';\r\nimport { ChartsTabsComponent } from \"./components/charts-tabs/charts-tabs.component\";\r\nimport { RiskEstimateChartComponent } from \"./components/risk-estimate-chart/risk-estimate-chart.component\";\r\nimport { TradeViewChartComponent } from \"./components/trade-view-chart/trade-view-chart.component\";\r\nimport { VolatilityChartComponent } from \"./components/volatility-chart/volatility-chart.component\";\r\nimport { MomentumIndicatorChartComponent } from \"./components/momentum-indicator-chart/momentum-indicator-chart.component\";\r\n\r\n@Component({\r\n  selector: 'app-dashboard',\r\n  imports: [AnnualExposureDetailsComponent, BreadcrumbWalletComponent, ChartsTabsComponent, RiskEstimateChartComponent, TradeViewChartComponent, VolatilityChartComponent, MomentumIndicatorChartComponent],\r\n  templateUrl: './dashboard.component.html',\r\n  styleUrl: './dashboard.component.scss'\r\n})\r\nexport class DashboardComponent {\r\n\r\n}",
            "styleUrl": "./dashboard.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"risk-dashboard\">\r\n    <app-breadcrumb-wallet></app-breadcrumb-wallet>\r\n    <div class=\"dashboard-sections\">\r\n        <div class=\"left-sec\">\r\n            <app-annual-exposure-details></app-annual-exposure-details>\r\n            <app-charts-tabs></app-charts-tabs>\r\n\r\n            <div class=\"left-two-part\">\r\n                <div class=\"left-haft-part\">\r\n                    <app-trade-view-chart></app-trade-view-chart>\r\n                </div>\r\n                <div class=\"left-haft-part\">\r\n                    <app-volatility-chart></app-volatility-chart>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        <div class=\"right-sec\">\r\n            <app-risk-estimate-chart></app-risk-estimate-chart>\r\n            <app-momentum-indicator-chart></app-momentum-indicator-chart>\r\n        </div>\r\n    </div>\r\n    <div class=\"dashboard-instruction\">\r\n        <p>The FX hedging services provided by Okoora do not constitute investment advice. Our recommendations are\r\n            based on the information provided by the client, and it is the client's responsibility to ensure that\r\n            all information provided to Okoora is accurate and complete. Okoora is not responsible for any losses or\r\n            damages arising from reliance on our recommendations, especially if based on incomplete or incorrect\r\n            information.</p>\r\n        <p>All decisions regarding the use of hedging strategies are made at your discretion. Clients should\r\n            evaluate their own financial situation and seek independent advice before implementing any hedging\r\n            strategies. Past performance is not indicative of future results, and all investments carry risk,\r\n            including potential loss.</p>\r\n        <p>By using Okoora's FX hedging services, you agree to this disclaimer.</p>\r\n    </div>\r\n</div>\r\n"
        },
        {
            "name": "DropdownComponent",
            "id": "component-DropdownComponent-a49c8a76331aa29bdd0e1d5eb201713216e81501154f81f638faeed564f575e5b663045d21038b67f020b0cfd3066570b117f1869d42f856aed738acee4f5a2d",
            "file": "src/app/components/currency/dropdown/dropdown.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-dropdown",
            "styleUrls": [
                "./dropdown.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./dropdown.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "options",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "literal type[]",
                    "decorators": []
                },
                {
                    "name": "selectedValue",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "searchQuery",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "methodsClass": [
                {
                    "name": "clearSearch",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getSelectedOption",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "MatSelectModule",
                    "type": "module"
                },
                {
                    "name": "MatFormFieldModule",
                    "type": "module"
                },
                {
                    "name": "MatOptionModule",
                    "type": "module"
                },
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "FormsModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { Component, Input } from '@angular/core';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { MatOptionModule } from '@angular/material/core';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatSelectModule } from '@angular/material/select';\r\n\r\n@Component({\r\n  selector: 'app-dropdown',\r\n  standalone: true,\r\n  imports: [MatSelectModule, MatFormFieldModule, MatOptionModule,CommonModule,FormsModule],\r\n  templateUrl:'./dropdown.component.html',\r\n  styleUrls: ['./dropdown.component.scss']\r\n})\r\nexport class DropdownComponent {\r\n  @Input() options: { flag: string; label: string; description: string; value: string }[] = [];\r\n  @Input() selectedValue: string = '';\r\n  @Input() disabled: boolean = false;\r\n  searchQuery: string = '';\r\n  getSelectedOption() {\r\n    return this.options.find(option => option.value === this.selectedValue);\r\n  }\r\n  get filteredOptions() {\r\n    return this.options.filter(option =>\r\n      option.label.toLowerCase().includes(this.searchQuery.toLowerCase()) ||\r\n      option.description.toLowerCase().includes(this.searchQuery.toLowerCase())\r\n    );\r\n  }\r\n  clearSearch(){\r\n    this.searchQuery = \"\";\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "::ng-deep {\r\n    .currency-dropdown-container {\r\n        width: 100%;\r\n        max-width: 515px;\r\n    }\r\n\r\n    .currency-dropdown {\r\n        display: flex;\r\n        font-family: \"Heebo\", sans-serif !important;\r\n        border-radius: 6px;\r\n        border: 1px solid #E5E7EB;\r\n\r\n        &[aria-expanded=\"true\"] {\r\n            border-color: #2563EB;\r\n\r\n            .mat-mdc-select-placeholder {\r\n                color: #2947F2;\r\n            }\r\n\r\n            .mat-mdc-select-arrow-wrapper {\r\n                .mat-mdc-select-arrow {\r\n                    background-image: url('../../../../assets/up-arrow.svg');\r\n                    background-repeat: no-repeat;\r\n                    background-size: cover;\r\n                }\r\n            }\r\n        }\r\n\r\n        &.mat-mdc-select-disabled {\r\n            pointer-events: none;\r\n            opacity: 0.5;\r\n            filter: grayscale(1);\r\n            background-color: #F9FAFB;\r\n        }\r\n\r\n        &:hover {\r\n            border-color: #2563EB;\r\n        }\r\n\r\n        .mat-mdc-select-trigger {\r\n            padding: 13px 15px;\r\n        }\r\n\r\n        .mat-mdc-select-placeholder {\r\n            color: #9CA3AF;\r\n            font-size: 16px;\r\n            font-weight: 400;\r\n            line-height: 32px;\r\n        }\r\n\r\n        mat-select-trigger {\r\n            .to-currency-section {\r\n                display: flex;\r\n                align-items: center;\r\n                gap: 9px;\r\n\r\n                .image-wrap {\r\n                    position: relative;\r\n\r\n                    .currency-image {\r\n                        display: inline-block;\r\n                        width: 28px;\r\n                        height: 28px;\r\n                        border-radius: 50%;\r\n                    }\r\n\r\n                    .tick-icn {\r\n                        background-color: #fff;\r\n                        border-radius: 50%;\r\n                        position: absolute;\r\n                        bottom: 0;\r\n                        right: 0;\r\n                    }\r\n                }\r\n\r\n                .currency-info {\r\n                    display: flex;\r\n                    flex-direction: column;\r\n\r\n                    .currency-code {\r\n                        color: #2947F2;\r\n                        font-size: 18px;\r\n                        font-style: normal;\r\n                        font-weight: 700;\r\n                        line-height: 23px;\r\n                        margin: 0;\r\n                    }\r\n\r\n                    .currency-name {\r\n                        color: #01031C;\r\n                        font-size: 12px;\r\n                        font-style: normal;\r\n                        font-weight: 700;\r\n                        line-height: 1;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        .mat-mdc-select-arrow-wrapper {\r\n            .mat-mdc-select-arrow {\r\n                background-image: url('../../../../assets/down-arrow.svg');\r\n                width: 24px;\r\n                height: 24px;\r\n                background-repeat: no-repeat;\r\n                background-size: cover;\r\n\r\n                svg {\r\n                    display: none;\r\n                }\r\n            }\r\n        }\r\n\r\n        @media screen and (max-width:1024px) {\r\n            .mat-mdc-select-trigger {\r\n                padding: 12px;\r\n            }\r\n\r\n            .mat-mdc-select-placeholder {\r\n                font-size: 14px;\r\n                line-height: 24px;\r\n            }\r\n\r\n            .mat-mdc-select-arrow-wrapper {\r\n                .mat-mdc-select-arrow {\r\n                    width: 20px;\r\n                    height: 20px;\r\n                }\r\n            }\r\n\r\n            mat-select-trigger {\r\n                .to-currency-section {\r\n                    gap: 5px;\r\n\r\n                    .image-wrap {\r\n                        .currency-image {\r\n                            width: 20px;\r\n                            height: 20px;\r\n                        }\r\n\r\n                        .tick-icn {\r\n                            width: 12px;\r\n                            height: 12px;\r\n                        }\r\n                    }\r\n\r\n                    .currency-info {\r\n                        .currency-code {\r\n                            font-size: 16px;\r\n                            line-height: 20px;\r\n                        }\r\n\r\n                        .currency-name {\r\n                            font-size: 10px;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        @media screen and (max-width:767px) {\r\n            .mat-mdc-select-trigger {\r\n                padding: 10px;\r\n            }\r\n\r\n            .mat-mdc-select-placeholder {\r\n                font-size: 12px;\r\n                line-height: 20px;\r\n            }\r\n\r\n            .mat-mdc-select-arrow-wrapper {\r\n                .mat-mdc-select-arrow {\r\n                    width: 16px;\r\n                    height: 16px;\r\n                }\r\n            }\r\n\r\n            mat-select-trigger {\r\n                .to-currency-section {\r\n                    gap: 5px;\r\n\r\n                    .image-wrap {\r\n                        .currency-image {\r\n                            width: 16px;\r\n                            height: 16px;\r\n                        }\r\n\r\n                        .tick-icn {\r\n                            width: 10px;\r\n                            height: 10px;\r\n                        }\r\n                    }\r\n\r\n                    .currency-info {\r\n                        .currency-code {\r\n                            font-size: 14px;\r\n                            line-height: 16px;\r\n                        }\r\n\r\n                        .currency-name {\r\n                            font-size: 8px;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    .mat-mdc-select-panel {\r\n        &.currency-dropdown-panel {\r\n            margin: 5px 0 0;\r\n            padding: 36px 22px 36px 36px;\r\n            border-radius: 6px;\r\n            box-shadow: 0px 25px 50px -12px rgba(0, 0, 0, 0.25);\r\n\r\n            .search-input-wrapper {\r\n                display: flex;\r\n                flex-direction: column;\r\n\r\n                .input-inner {\r\n                    display: flex;\r\n\r\n                    input {\r\n                        width: 100%;\r\n                        border-radius: 7px;\r\n                        border: 1px solid #2947F2;\r\n                        background: #FFF;\r\n                        box-shadow: 0px 6px 44px 0px rgba(65, 90, 235, 0.11);\r\n                        display: flex;\r\n                        height: 44px;\r\n                        padding: 0px 10px 0px 20px;\r\n                        align-items: center;\r\n                        gap: 10px;\r\n                        color: #5B5B66;\r\n                        font-size: 14px;\r\n                        font-weight: 400;\r\n\r\n                        &::placeholder {\r\n                            color: #5B5B66;\r\n                        }\r\n\r\n                        &:focus-visible {\r\n                            outline: none;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                .error-wrap {\r\n                    margin: 14px 0 0;\r\n                    padding: 9px 29px;\r\n\r\n                    .error-title {\r\n                        color: #01031C;\r\n                        font-size: 18px;\r\n                        font-weight: 400;\r\n                        line-height: 35px;\r\n                    }\r\n\r\n                    .desc {\r\n                        color: #585858;\r\n                        font-size: 14px;\r\n                        font-weight: 400;\r\n                        line-height: normal;\r\n\r\n                        .clear-search {\r\n                            background-color: transparent;\r\n                            color: #175CD3;\r\n                            font-size: 14px;\r\n                            font-weight: 400;\r\n                            line-height: normal;\r\n                            text-decoration-line: underline;\r\n                            border: none;\r\n                            cursor: pointer;\r\n                            padding: 0;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            .currency-option-list {\r\n                .mat-mdc-option {\r\n                    padding: 0;\r\n                    border-bottom: 1px dashed #D9DADD;\r\n                    background-color: transparent !important;\r\n\r\n                    .mdc-list-item__primary-text {\r\n                        display: flex;\r\n                        padding: 9px 29px;\r\n                        border-radius: 10px;\r\n                        gap: 18px;\r\n                        margin: 19px 0;\r\n                        width: 100%;\r\n                        align-items: center;\r\n\r\n                        .currency-image {\r\n                            width: 32px;\r\n                            height: 32px;\r\n                            padding: 1px;\r\n                            border-radius: 50%;\r\n                        }\r\n\r\n                        .currency-info {\r\n                            display: flex;\r\n                            flex-direction: column;\r\n\r\n                            .currency-code {\r\n                                color: #01031C;\r\n                                font-size: 18px;\r\n                                font-weight: 400;\r\n                                line-height: 32px;\r\n                            }\r\n\r\n                            .currency-name {\r\n                                color: #01031C;\r\n                                font-size: 14px;\r\n                                font-weight: 400;\r\n                                opacity: 0.7;\r\n                                line-height: 1;\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    &.mdc-list-item--selected {\r\n                        .mdc-list-item__primary-text {\r\n                            background: #F5F7FA;\r\n\r\n                            .currency-info {\r\n                                .currency-code {\r\n                                    color: #2947F2;\r\n                                    font-weight: 700;\r\n                                }\r\n\r\n                                .currency-name {\r\n                                    color: #01031C;\r\n                                    font-weight: 700;\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    &:hover {\r\n                        .mdc-list-item__primary-text {\r\n                            background: #F5F7FA;\r\n\r\n                            .currency-info {\r\n                                .currency-code {\r\n                                    color: #2947F2;\r\n                                }\r\n\r\n                                .currency-name {\r\n                                    color: #01031C;\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    mat-pseudo-checkbox {\r\n                        display: none;\r\n                    }\r\n                }\r\n            }\r\n\r\n            @media screen and (max-width:1024px) {\r\n                padding: 20px 10px 20px 20px;\r\n\r\n                .search-input-wrapper {\r\n                    .input-inner {\r\n                        input {\r\n                            height: 36px;\r\n                            padding: 0px 10px 0px 15px;\r\n                            font-size: 12px;\r\n                        }\r\n                    }\r\n\r\n                    .error-wrap{\r\n                        margin: 10px 0 0;\r\n                        padding: 5px 20px;\r\n                        .error-title{\r\n                            font-size: 16px;\r\n                            line-height: 1.2;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                .currency-option-list {\r\n                    .mat-mdc-option {\r\n                        .mdc-list-item__primary-text {\r\n                            padding: 9px 20px;\r\n                            gap: 10px;\r\n                            margin: 10px 0;\r\n\r\n                            .currency-image {\r\n                                width: 20px;\r\n                                height: 20px;\r\n                            }\r\n\r\n                            .currency-info {\r\n                                .currency-code {\r\n                                    font-size: 16px;\r\n                                    line-height: 20px;\r\n                                }\r\n\r\n                                .currency-name {\r\n                                    font-size: 12px;\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            @media screen and (max-width:767px) {\r\n                padding: 15px 10px 15px 15px;\r\n\r\n                .search-input-wrapper {\r\n                    .input-inner {\r\n                        input {\r\n                            padding: 0px 10px 0px 10px;\r\n                            font-size: 12px;\r\n                        }\r\n                    }\r\n\r\n                    .error-wrap{\r\n                        margin:8px 0 0;\r\n                        padding: 5px 10px;\r\n                        .error-title{\r\n                            font-size: 14px;\r\n                        }\r\n                        .desc{\r\n                            font-size: 12px;\r\n                            .clear-search{\r\n                                font-size: 12px;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n\r\n                .currency-option-list {\r\n                    .mat-mdc-option {\r\n                        .mdc-list-item__primary-text {\r\n                            padding: 9px 15px;\r\n                            gap: 5px;\r\n                            margin: 5px 0;\r\n\r\n                            .currency-image {\r\n                                width: 16px;\r\n                                height: 16px;\r\n                            }\r\n\r\n                            .currency-info {\r\n                                .currency-code {\r\n                                    font-size: 14px;\r\n                                    line-height: 16px;\r\n                                }\r\n\r\n                                .currency-name {\r\n                                    font-size: 10px;\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n}",
                    "styleUrl": "./dropdown.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "accessors": {
                "filteredOptions": {
                    "name": "filteredOptions",
                    "getSignature": {
                        "name": "filteredOptions",
                        "type": "",
                        "returnType": "",
                        "line": 23
                    }
                }
            },
            "templateData": "<div class=\"currency-dropdown-container\">\r\n    <mat-select [(value)]=\"selectedValue\" [disabled]=\"disabled\" panelClass=\"currency-dropdown-panel\" class=\"form-control currency-dropdown\" placeholder=\"Select\">\r\n      <mat-select-trigger>\r\n          <div *ngIf=\"selectedValue\" class=\"to-currency-section\">\r\n            <div class=\"image-wrap\">\r\n              <img class=\"currency-image\" [src]=\"getSelectedOption()?.flag\" alt=\"currency_flag\" />\r\n              <img src=\"tick-icon.svg\" alt=\"arrow\" class=\"tick-icn\" />\r\n            </div>\r\n            <div class=\"currency-info\">\r\n              <span class=\"currency-code\">{{ getSelectedOption()?.label }}</span>\r\n              <span class=\"currency-name\">{{ getSelectedOption()?.description }}</span>\r\n            </div>\r\n          </div>\r\n      </mat-select-trigger>\r\n      <div class=\"search-input-wrapper\">\r\n        <div class=\"input-inner\">\r\n          <input #searchBeneficiaryCountryInput [(ngModel)]=\"searchQuery\" class=\"filter-input\"\r\n            [ngClass]=\"filteredOptions.length == 0 ? 'error-input' : ''\" type=\"text\"\r\n            placeholder=\"Search\" id=\"search-input\">\r\n        </div>\r\n        <div class=\"error-wrap\" *ngIf=\"filteredOptions?.length == 0\">\r\n          <h3 class=\"error-title\">No currency were found</h3>\r\n          <p class=\"desc\">Try again with different keywords, <button (click)=\"clearSearch()\" class=\"clear-search\">Reset search</button></p>\r\n        </div>\r\n      </div>\r\n      <div class=\"currency-option-list\">\r\n        <mat-option *ngFor=\"let option of filteredOptions\" [value]=\"option.value\">\r\n          <img class=\"currency-image\" [src]=\"option.flag\" alt=\"currency_flag\" />\r\n          <div class=\"currency-info\">\r\n            <span class=\"currency-code\">{{ option.label }}</span>\r\n            <span class=\"currency-name\">{{ option.description }}</span>\r\n          </div>\r\n        </mat-option>\r\n      </div>\r\n    </mat-select>\r\n</div>"
        },
        {
            "name": "ExposureRateChartComponent",
            "id": "component-ExposureRateChartComponent-07080923def2874d1172287e6392c2ea96947d8490b540b179571a5857ba683bdf8a2f3f9f08d233c1ee9d131c1bd28b830d9b9bad5e4825630ca5156f4b4bcc",
            "file": "src/app/risk-dashboard/components/dashboard/components/exposure-rate-chart/exposure-rate-chart.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-exposure-rate-chart",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./exposure-rate-chart.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "annotations",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ApexAnnotations",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 44,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "budgetRate",
                    "defaultValue": "[4.0712,4.0712,4.0712,4.0712,4.0712,4.0712,4.0712,4.0712,4.0712,4.0712,4.0712,4.0712]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 54
                },
                {
                    "name": "cashFlowTableData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 46
                },
                {
                    "name": "chartOptions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ApexChart",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "chartSeries",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ApexAxisChartSeries",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "completedAdvancePolicy",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 61
                },
                {
                    "name": "currentHedge",
                    "defaultValue": "[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 53
                },
                {
                    "name": "currentPage",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 60
                },
                {
                    "name": "dataLabelsOptions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ApexDataLabels",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 38,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "fillOptions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ApexFill",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 43,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "hedgeRate",
                    "defaultValue": "[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 52
                },
                {
                    "name": "legendOptions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ApexLegend",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 39,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "liabilityRate",
                    "defaultValue": "[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 50
                },
                {
                    "name": "markersOptions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ApexMarkers",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 42,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "monthChartXAxixData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 45
                },
                {
                    "name": "monthlyExposure",
                    "defaultValue": "[25,10,15,18,20,16,14,12,8,17,13,10]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 48
                },
                {
                    "name": "originalSeries",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ApexAxisChartSeries",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "ourRecommendedHedge",
                    "defaultValue": "[10.50,8.5,6.3,5.5,2.5,8.3,4.6,3.8,4.9,7.5,3.6,2.3]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 49
                },
                {
                    "name": "pageSize",
                    "defaultValue": "12",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 59
                },
                {
                    "name": "paginatedSeries",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 58
                },
                {
                    "name": "paginator",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatPaginator",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "MatPaginator"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "plotOptions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ApexPlotOptions",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 41,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "resizeSubscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription | undefined",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 47
                },
                {
                    "name": "selectedRates",
                    "defaultValue": "['Spot']",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "spotRate",
                    "defaultValue": "[4.2110,4.2110,4.2110,4.2110,4.2110,4.2110,4.2110,4.2110,4.2110,4.2110,4.2110,4.2110]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 51
                },
                {
                    "name": "strokeOptions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ApexStroke",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 37,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "tooltipOptions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ApexTooltip",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "xAxisOptions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ApexXAxis",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "yAxisOptions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ApexYAxis",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "generateSeriesData",
                    "args": [
                        {
                            "name": "monthsCount",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ApexAxisChartSeries",
                    "typeParameters": [],
                    "line": 197,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "monthsCount",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getLineColors",
                    "args": [],
                    "optional": false,
                    "returnType": "string[]",
                    "typeParameters": [],
                    "line": 320,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getRandomValue",
                    "args": [
                        {
                            "name": "min",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "max",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 248,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "min",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "max",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleWindowResize",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 98,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "initializeChart",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 139,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 80,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 386,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 62,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onChipRemove",
                    "args": [
                        {
                            "name": "chipLabel",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 272,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "chipLabel",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onPageChange",
                    "args": [
                        {
                            "name": "event",
                            "type": "PageEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 85,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "PageEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onRateChange",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 263,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setAtLeastTwoZeroes",
                    "args": [
                        {
                            "name": "dataArray",
                            "type": "number[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 252,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "dataArray",
                            "type": "number[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setMarkerStrokeColors",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 104,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setupResizeListener",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 92,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "updateAnnotations",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 331,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "updateChart",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 281,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "updatePaginatedSeries",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 69,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "NgApexchartsModule",
                    "type": "module"
                },
                {
                    "name": "MatPaginatorModule",
                    "type": "module"
                },
                {
                    "name": "MatSelectModule",
                    "type": "module"
                },
                {
                    "name": "MatChipsModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectorRef, Component, OnInit, AfterViewInit, ViewChild, Input, SimpleChanges } from '@angular/core';\r\nimport {\r\n  ApexAxisChartSeries,\r\n  ApexChart,\r\n  ApexXAxis,\r\n  ApexDataLabels,\r\n  ApexStroke,\r\n  ApexMarkers,\r\n  ApexYAxis,\r\n  ApexLegend,\r\n  ApexTooltip,\r\n  ApexFill,\r\n  ApexPlotOptions,\r\n  ApexAnnotations,\r\n  NgApexchartsModule\r\n} from \"ng-apexcharts\";\r\nimport { debounceTime, fromEvent, Subscription } from 'rxjs';\r\nimport { MatPaginator, MatPaginatorModule, PageEvent } from '@angular/material/paginator';\r\nimport { CommonModule } from '@angular/common';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { MatChipsModule } from '@angular/material/chips';\r\n\r\n@Component({\r\n  selector: 'app-exposure-rate-chart',\r\n  imports: [CommonModule, NgApexchartsModule, MatPaginatorModule, MatSelectModule, MatChipsModule],\r\n  templateUrl: './exposure-rate-chart.component.html',\r\n  styleUrl: './exposure-rate-chart.component.scss',\r\n})\r\nexport class ExposureRateChartComponent implements OnInit, AfterViewInit{\r\n  @ViewChild(MatPaginator) paginator!: MatPaginator;\r\n  public chartSeries!: ApexAxisChartSeries;\r\n  public originalSeries!: ApexAxisChartSeries;\r\n  public selectedRates: string[] = ['Spot'];\r\n  public chartOptions!: ApexChart;\r\n  public xAxisOptions!: ApexXAxis;\r\n  public yAxisOptions!: ApexYAxis;\r\n  public strokeOptions!: ApexStroke;\r\n  public dataLabelsOptions!: ApexDataLabels;\r\n  public legendOptions!: ApexLegend;\r\n  public tooltipOptions!: ApexTooltip;\r\n  public plotOptions!: ApexPlotOptions;\r\n  public markersOptions!: ApexMarkers;\r\n  public fillOptions!: ApexFill;\r\n  public annotations!: ApexAnnotations;\r\n  monthChartXAxixData: any;\r\n  cashFlowTableData: any;\r\n  resizeSubscription: Subscription | undefined;\r\n  monthlyExposure: any = [25,10,15,18,20,16,14,12,8,17,13,10];\r\n  ourRecommendedHedge: any = [10.50,8.5,6.3,5.5,2.5,8.3,4.6,3.8,4.9,7.5,3.6,2.3];\r\n  liabilityRate: any = [0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0];\r\n  spotRate: any = [4.2110,4.2110,4.2110,4.2110,4.2110,4.2110,4.2110,4.2110,4.2110,4.2110,4.2110,4.2110];\r\n  hedgeRate: any = [0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0];\r\n  currentHedge: any = [0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0];\r\n  budgetRate: any = [4.0712,4.0712,4.0712,4.0712,4.0712,4.0712,4.0712,4.0712,4.0712,4.0712,4.0712,4.0712];\r\n  constructor(\r\n    private cdr: ChangeDetectorRef,\r\n  ) { }\r\n  paginatedSeries: any = [];\r\n  pageSize = 12;\r\n  currentPage = 0;\r\n  completedAdvancePolicy: boolean = true;\r\n  ngOnInit() {\r\n    setTimeout(() => {\r\n      this.initializeChart();\r\n      this.setupResizeListener();\r\n      this.updatePaginatedSeries();\r\n    }, 100);\r\n  }\r\n  updatePaginatedSeries() {\r\n    const startIndex = this.currentPage * this.pageSize;\r\n    const endIndex = startIndex + this.pageSize;\r\n    this.paginatedSeries = this.chartSeries.map(series => ({\r\n      ...series,\r\n      data: series?.data?.slice(startIndex, endIndex)\r\n    }));\r\n    this.xAxisOptions = {\r\n      categories: this.monthChartXAxixData?.slice(startIndex, endIndex),\r\n    };\r\n  }\r\n  ngAfterViewInit() {\r\n    this.initializeChart();\r\n    this.paginator?.page?.subscribe((event: PageEvent) => this.onPageChange(event));\r\n    this.updatePaginatedSeries();\r\n  }\r\n  onPageChange(event: PageEvent) {\r\n    this.pageSize = event.pageSize;\r\n    this.currentPage = event.pageIndex;\r\n    this.updatePaginatedSeries();\r\n    this.handleWindowResize();\r\n  }\r\n\r\n  setupResizeListener() {\r\n    this.resizeSubscription = fromEvent(window, 'resize')\r\n      .pipe(debounceTime(200))\r\n      .subscribe(() => this.handleWindowResize());\r\n  }\r\n\r\n  handleWindowResize() {\r\n    setTimeout(() => {\r\n      this.setMarkerStrokeColors();\r\n    }, 0);\r\n  }\r\n\r\n  setMarkerStrokeColors() {\r\n    const colors: { [key: string]: string } = {\r\n      'Hedged': '#05F2F2',\r\n      'Liability': '#2C4CF5',\r\n      'Spot': '#F9AE67',\r\n      'Budget': '#8BDDF4'\r\n    };\r\n\r\n    document.querySelectorAll('.apexcharts-series').forEach(seriesElement => {\r\n      const seriesName = seriesElement.getAttribute('seriesName');\r\n      if (seriesName && colors[seriesName]) {\r\n        const strokeColor = colors[seriesName];\r\n\r\n        // Set marker stroke colors\r\n        const markersWrap = seriesElement.querySelector('.apexcharts-series-markers-wrap');\r\n        if (markersWrap) {\r\n          const markers = markersWrap.querySelectorAll('.apexcharts-marker');\r\n          markers.forEach(marker => {\r\n            marker.setAttribute('stroke', strokeColor);\r\n          });\r\n        }\r\n\r\n        // Set line stroke colors\r\n        const lineElement = seriesElement.querySelector('.apexcharts-line');\r\n        if (lineElement) {\r\n          lineElement.setAttribute('stroke', strokeColor);\r\n\r\n          if (seriesName === 'Spot') {\r\n            lineElement.setAttribute('stroke-dasharray', '6');\r\n          }\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  initializeChart() {\r\n    this.monthChartXAxixData = ['Jan 24', 'Feb 24', 'Mar 24', 'Apr 24', 'May 24', 'Jun 24', 'Jul 24', 'Aug 24', 'Sep 24', 'Oct 24', 'Nov 24', 'Dec 24'];\r\n\r\n    this.originalSeries = this.generateSeriesData(this.monthChartXAxixData.length);\r\n    const spotRateLine = this.spotRate;\r\n    const currentSpotRate = spotRateLine[spotRateLine.length - 1];\r\n    const yAxisMax = currentSpotRate * 1.60;\r\n\r\n    this.chartOptions = {\r\n      type: \"line\",\r\n      height: 302,\r\n      zoom: {\r\n        enabled: false,\r\n      },\r\n      toolbar: {\r\n        show: false,\r\n        tools: {\r\n          zoom: false,\r\n          zoomin: false,\r\n          zoomout: false,\r\n          pan: false\r\n        }\r\n      }\r\n    };\r\n\r\n    this.xAxisOptions = {\r\n      categories: this.monthChartXAxixData,\r\n      labels: {\r\n        style: {\r\n          cssClass: 'apexcharts-xaxis-label'\r\n        }\r\n      }\r\n    };\r\n\r\n    const lineColors = this.getLineColors();\r\n    this.yAxisOptions = {\r\n      min: 0,\r\n      max: yAxisMax,\r\n      tickAmount: 6,\r\n      labels: {\r\n        formatter: function (value: number) {\r\n          return value.toFixed(2);\r\n        }\r\n      }\r\n    };\r\n\r\n    this.strokeOptions = { width: [3, 3, 3], colors: lineColors, curve: \"straight\", dashArray: [0, 0, 5] };\r\n    this.dataLabelsOptions = { enabled: false };\r\n    this.legendOptions = { show: false, position: \"top\" };\r\n    this.tooltipOptions = { enabled: true };\r\n    this.plotOptions = { bar: { horizontal: false, borderRadius: 0, rangeBarOverlap: false } };\r\n    this.markersOptions = { size: 4, colors: [\"#fff\"], strokeColors: lineColors, strokeWidth: 2, strokeOpacity: 1 };\r\n    this.fillOptions = { colors: [\"#D8E9FD\", \"#A9B5F9\", \"#2947F2\"], opacity: [0.2, 0.2, 0.2] };\r\n\r\n    this.updateChart();\r\n  }\r\n\r\n\r\n  generateSeriesData(monthsCount: number): ApexAxisChartSeries {\r\n    // Destructure Liability, spot, and hedgeRate for each month\r\n    const liabilityLine = this.liabilityRate;\r\n    const spotRateLine = this.spotRate;\r\n    const hedgeRateLine = this.hedgeRate;\r\n    const budgetRateLine = this.budgetRate;\r\n\r\n    const exposureBar = this.monthlyExposure;\r\n    const recommendedHedgeBar = this.ourRecommendedHedge;\r\n    const currentHedgeBar = this.currentHedge;\r\n    const chartData = [\r\n      {\r\n        name: \"Hedged\",\r\n        type: \"line\",\r\n        data: hedgeRateLine\r\n      },\r\n      {\r\n        name: \"Liability\",\r\n        type: \"line\",\r\n        data: liabilityLine\r\n      },\r\n      {\r\n        name: \"Spot\",\r\n        type: \"line\",\r\n        data: spotRateLine\r\n      },\r\n      {\r\n        name: \"Budget\",\r\n        type: \"line\",\r\n        data: budgetRateLine\r\n      },\r\n      {\r\n        name: \"Exposure\",\r\n        type: \"bar\",\r\n        data: exposureBar\r\n      },\r\n      {\r\n        name: \"Recommended hedging\",\r\n        type: \"bar\",\r\n        data: recommendedHedgeBar\r\n      },\r\n      {\r\n        name: \"Actual hedging\",\r\n        type: \"bar\",\r\n        data: currentHedgeBar\r\n      }\r\n    ];\r\n\r\n    return chartData;\r\n  }\r\n\r\n  getRandomValue(min: number, max: number): number {\r\n    return +(Math.random() * (max - min) + min).toFixed(2);\r\n  }\r\n\r\n  setAtLeastTwoZeroes(dataArray: number[]): void {\r\n    const zeroIndices: number[] = [];\r\n    while (zeroIndices.length < 2) {\r\n      const index = Math.floor(Math.random() * dataArray.length);\r\n      if (!zeroIndices.includes(index)) {\r\n        zeroIndices.push(index);\r\n      }\r\n    }\r\n    zeroIndices.forEach(index => dataArray[index] = 0);\r\n  }\r\n\r\n  onRateChange(event: any) {\r\n    const selectedRate = event.value;\r\n    if (!this.selectedRates.includes(selectedRate)) {\r\n      this.selectedRates.push(selectedRate);\r\n    }\r\n    this.updateChart();\r\n    this.updatePaginatedSeries();\r\n  }\r\n\r\n  onChipRemove(chipLabel: string) {\r\n    this.selectedRates = this.selectedRates.filter(rate => rate !== chipLabel);\r\n    if (this.selectedRates.length === 0) {\r\n      this.selectedRates = [];\r\n    }\r\n    this.updateChart();\r\n    this.updatePaginatedSeries();\r\n  }\r\n\r\n  updateChart() {\r\n    const barSeries = this.originalSeries.filter(series => series.type === 'bar');\r\n    const lineSeries = this.originalSeries.filter(series =>\r\n      series.type === 'line' && (series.name && this.selectedRates.includes(series.name))\r\n    );\r\n\r\n    this.plotOptions = {\r\n      bar: {\r\n        horizontal: false,\r\n        borderRadius: 0,\r\n        distributed: false,\r\n      }\r\n    };\r\n    this.chartSeries = [...barSeries, ...lineSeries];\r\n\r\n    const lineColors = this.getLineColors();\r\n\r\n    this.strokeOptions = {\r\n      width: lineSeries.map(() => 4),\r\n      colors: lineColors,\r\n      curve: \"straight\",\r\n      dashArray: [0, 0, 5]\r\n    };\r\n\r\n    this.markersOptions = {\r\n      size: 4,\r\n      colors: [\"#fff\"], // Marker fill color\r\n      strokeColors: lineColors, // Marker border color\r\n      strokeWidth: 2,\r\n      strokeOpacity: 1\r\n    };\r\n    this.updateAnnotations();\r\n    this.cdr.detectChanges();\r\n\r\n    setTimeout(() => {\r\n      this.setMarkerStrokeColors();\r\n    }, 0);\r\n  }\r\n\r\n  getLineColors(): string[] {\r\n    const colors: { [key: string]: string } = {\r\n      'Hedged': '#05F2F2',\r\n      'Liability': '#2C4CF5',\r\n      'Spot': '#F9AE67',\r\n      'Budget': '#8BDDF4'\r\n    };\r\n\r\n    return this.selectedRates.map(rate => colors[rate] || '#000');\r\n  }\r\n\r\n  updateAnnotations() {\r\n    const visibleLineSeries = this.chartSeries.filter(series => series.type === 'line');\r\n\r\n    const isSmallScreen = window.innerWidth <= 1440;\r\n    const fontSize = isSmallScreen ? '12px' : '14px';\r\n    const padding = isSmallScreen ? { top: 5, bottom: 5, left: 5, right: 5 } : { top: 10, bottom: 10, left: 10, right: 10 };\r\n\r\n    this.annotations = {\r\n      points: visibleLineSeries.map(series => {\r\n        const lastDataPointIndex = series.data.length - 1;\r\n        const lastDataPoint = Number(series.data[lastDataPointIndex]).toFixed(4);;\r\n        const seriesName = series.name;\r\n        let strokeColor = '';\r\n        let labelBackground = '';\r\n        let labelColor = '';\r\n\r\n        if (seriesName === 'Hedged') {\r\n          strokeColor = '#05F2F2';\r\n          labelBackground = '#05F2F2';\r\n          labelColor = '#2947F2';\r\n        } else if (seriesName === 'Liability') {\r\n          strokeColor = '#2C4CF5';\r\n          labelBackground = '#2C4CF5';\r\n          labelColor = '#FFFFFF';\r\n        } else if (seriesName === 'Spot') {\r\n          strokeColor = '#F9AE67';\r\n          labelBackground = '#FDE5CE';\r\n          labelColor = '#C46408';\r\n        } else if (seriesName === 'Budget') {\r\n          strokeColor = '#8BDDF4';\r\n          labelBackground = '#8BDDF4';\r\n          labelColor = '#2C2C2C';\r\n        }\r\n\r\n        return {\r\n          x: this.monthChartXAxixData[lastDataPointIndex],\r\n          y: Number(lastDataPoint),\r\n          marker: { size: 4, fillColor: '#fff', strokeColor: strokeColor, radius: 2 },\r\n          label: {\r\n            text: `${lastDataPoint}`,\r\n            borderColor: strokeColor,\r\n            offsetY: -10,\r\n            style: {\r\n              background: labelBackground,\r\n              color: labelColor,\r\n              fontSize: fontSize,\r\n              padding: padding,\r\n              fontFamily: 'Heebo'\r\n            },\r\n          }\r\n        };\r\n      })\r\n    };\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    if (this.resizeSubscription) {\r\n      this.resizeSubscription.unsubscribe();\r\n    }\r\n  }\r\n}\r\n",
            "styleUrl": "./exposure-rate-chart.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 54,
                "jsdoctags": [
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit",
                "AfterViewInit"
            ],
            "templateData": "    <div id=\"chart\" class=\"rm-exposure-rate-chart\">\r\n        <div class=\"legends-rm-exposure\">\r\n            <label class=\"title\">\r\n                <div class=\"legends-exposure\"></div> Exposure\r\n            </label>\r\n            <label class=\"title\">\r\n                <div class=\"recommended-hedging\"></div>Recommended hedging\r\n            </label>\r\n            <label class=\"title\">\r\n                <div class=\"actual-hedging\"></div> Actual hedging\r\n            </label>\r\n        </div>\r\n        <div class=\"chart-wrappper\">\r\n            <div class=\"filter-exposure-wrapper\">\r\n                <mat-select class=\"select-rate-exp\" panelClass=\"select-rate-exposure\" placeholder=\"Select rate\"\r\n                    id=\"selectRateExposure__rates\"\r\n                    [value]=\"selectedRates.length ? selectedRates[selectedRates.length - 1] : null\"\r\n                    (selectionChange)=\"onRateChange($event)\">\r\n                    <mat-option value=\"Hedged\">Hedged rate</mat-option>\r\n                    <mat-option value=\"Liability\">Liability rate</mat-option>\r\n                    <mat-option value=\"Spot\">Spot rate</mat-option>\r\n                    <mat-option value=\"Budget\" *ngIf=\"completedAdvancePolicy\">Budget rate</mat-option>\r\n                </mat-select>\r\n\r\n                <mat-chip-set class=\"filter-chart-chip-exp\">\r\n                    <ng-container *ngFor=\"let series of selectedRates\">\r\n                        <mat-chip id=\"chip-{{series.toLowerCase()}}\" class=\"chip-{{series.toLowerCase()}}\"\r\n                            [removable]=\"true\" (removed)=\"onChipRemove(series)\">\r\n                            {{ series }} rate\r\n                            <img class=\"close-chip\" src=\"images/close-chip-exposure.svg\" matChipRemove>\r\n                        </mat-chip>\r\n                    </ng-container>\r\n                </mat-chip-set>\r\n            </div>\r\n            <apx-chart [series]=\"paginatedSeries\" [chart]=\"chartOptions\" [xaxis]=\"xAxisOptions\" [yaxis]=\"yAxisOptions\"\r\n                [stroke]=\"strokeOptions\" [dataLabels]=\"dataLabelsOptions\" [legend]=\"legendOptions\"\r\n                [tooltip]=\"tooltipOptions\" [plotOptions]=\"plotOptions\" [markers]=\"markersOptions\" [fill]=\"fillOptions\"\r\n                [annotations]=\"annotations\"></apx-chart>\r\n            <div class=\"pagination-wrap\" *ngIf=\"monthChartXAxixData.length > 12\">\r\n                <mat-paginator id=\"paginationExposureRateChart\" [pageSize]=\"12\" [length]=\"monthChartXAxixData.length\"\r\n                    (page)=\"onPageChange($event)\" aria-label=\"Select page of users\"></mat-paginator>\r\n            </div>\r\n        </div>\r\n    </div>"
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-35575735b3444c6f049822f5234963ce3b046795ea9cdf6a15e8c7d72acd8ededb78ca25c4e1fbb5f0416c5855203a87ae0483f5d065c2dfa68d5329e347a84b",
            "file": "src/stories/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-header",
            "styleUrls": [
                "./header.css"
            ],
            "styles": [],
            "template": "<header>  <div class=\"storybook-header\">\n    <div>\n      <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n        <g fill=\"none\" fillRule=\"evenodd\">\n          <path\n            d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n            fill=\"#FFF\"\n          />\n          <path\n            d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n            fill=\"#555AB9\"\n          />\n          <path d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\" fill=\"#91BAF8\" />\n        </g>\n      </svg>\n      <h1>Acme</h1>\n    </div>\n    <div>\n      <div *ngIf=\"user\">\n        <span class=\"welcome\">\n          Welcome, <b>{{ user.name }}</b\n          >!\n        </span>\n        <storybook-button\n          *ngIf=\"user\"\n          size=\"small\"\n          (onClick)=\"onLogout.emit($event)\"\n          label=\"Log out\"\n        ></storybook-button>\n      </div>\n      <div *ngIf=\"!user\">\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          class=\"margin-left\"\n          (onClick)=\"onLogin.emit($event)\"\n          label=\"Log in\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          [primary]=\"true\"\n          class=\"margin-left\"\n          (onClick)=\"onCreateAccount.emit($event)\"\n          label=\"Sign up\"\n        ></storybook-button>\n      </div>\n    </div>\n  </div>\n</header>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 66,
                    "type": "User | null",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 75,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 69,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 72,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "ButtonComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { ButtonComponent } from './button.component';\r\nimport type { User } from './user';\r\n\r\n@Component({\r\n  selector: 'storybook-header',\r\n  standalone: true,\r\n  imports: [CommonModule, ButtonComponent],\r\n  template: `<header>\r\n  <div class=\"storybook-header\">\r\n    <div>\r\n      <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\r\n        <g fill=\"none\" fillRule=\"evenodd\">\r\n          <path\r\n            d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\r\n            fill=\"#FFF\"\r\n          />\r\n          <path\r\n            d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\r\n            fill=\"#555AB9\"\r\n          />\r\n          <path d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\" fill=\"#91BAF8\" />\r\n        </g>\r\n      </svg>\r\n      <h1>Acme</h1>\r\n    </div>\r\n    <div>\r\n      <div *ngIf=\"user\">\r\n        <span class=\"welcome\">\r\n          Welcome, <b>{{ user.name }}</b\r\n          >!\r\n        </span>\r\n        <storybook-button\r\n          *ngIf=\"user\"\r\n          size=\"small\"\r\n          (onClick)=\"onLogout.emit($event)\"\r\n          label=\"Log out\"\r\n        ></storybook-button>\r\n      </div>\r\n      <div *ngIf=\"!user\">\r\n        <storybook-button\r\n          *ngIf=\"!user\"\r\n          size=\"small\"\r\n          class=\"margin-left\"\r\n          (onClick)=\"onLogin.emit($event)\"\r\n          label=\"Log in\"\r\n        ></storybook-button>\r\n        <storybook-button\r\n          *ngIf=\"!user\"\r\n          size=\"small\"\r\n          [primary]=\"true\"\r\n          class=\"margin-left\"\r\n          (onClick)=\"onCreateAccount.emit($event)\"\r\n          label=\"Sign up\"\r\n        ></storybook-button>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</header>`,\r\n  styleUrls: ['./header.css'],\r\n})\r\nexport class HeaderComponent {\r\n  @Input()\r\n  user: User | null = null;\r\n\r\n  @Output()\r\n  onLogin = new EventEmitter<Event>();\r\n\r\n  @Output()\r\n  onLogout = new EventEmitter<Event>();\r\n\r\n  @Output()\r\n  onCreateAccount = new EventEmitter<Event>();\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-header {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\r\n  padding: 15px 20px;\r\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\r\n}\r\n\r\n.storybook-header svg {\r\n  display: inline-block;\r\n  vertical-align: top;\r\n}\r\n\r\n.storybook-header h1 {\r\n  display: inline-block;\r\n  vertical-align: top;\r\n  margin: 6px 0 6px 10px;\r\n  font-weight: 700;\r\n  font-size: 20px;\r\n  line-height: 1;\r\n}\r\n\r\n.storybook-header button + button {\r\n  margin-left: 10px;\r\n}\r\n\r\n.storybook-header .welcome {\r\n  margin-right: 10px;\r\n  color: #333;\r\n  font-size: 14px;\r\n}\r\n",
                    "styleUrl": "./header.css"
                }
            ],
            "stylesData": "",
            "extends": []
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-b1c539bbfab39667b474102707b2e96e836ec7fd277786cf082e7bac2d96e8ab1bb97577320d7380aaebd31724ae92b488f730a033025f5a03a03f66230138b4-1",
            "file": "src/app/risk-dashboard/components/header/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-header",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./header.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "openSidebar",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "openMenu",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "MatIconModule",
                    "type": "module"
                },
                {
                    "name": "MatMenuModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Output } from '@angular/core';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatMenuModule } from '@angular/material/menu';\r\n\r\n@Component({\r\n  selector: 'app-header',\r\n  standalone: true,\r\n  imports: [MatIconModule,MatMenuModule],\r\n  templateUrl: './header.component.html',\r\n  styleUrl: './header.component.scss'\r\n})\r\nexport class HeaderComponent {\r\n  @Output() openSidebar = new EventEmitter();\r\n  openMenu() {\r\n    this.openSidebar.emit();\r\n  }\r\n}\r\n",
            "styleUrl": "./header.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "HeaderComponent-1",
            "templateData": "<header>\r\n    <div class=\"topheder-business-users\">\r\n        <div class=\"header-inner\">\r\n            <button class=\"navbar-toggler\" type=\"button\" (click)=\"openMenu()\" id=\"db-header-8\">\r\n                <img src=\"images/side-menu.svg\">\r\n            </button>\r\n        </div>\r\n        <nav class=\"navbar main-nav\">\r\n            <div class=\"nav-inner\">\r\n                <div class=\"nav-left\">\r\n                    <div class=\"wallet-list-business\">\r\n                        <div class=\"flag\">\r\n                            <img src=\"images/ils-flag.svg\" alt=\"flag\">\r\n                        </div>\r\n                        <div class=\"currency-wrapper\">\r\n                            <div class=\"wallet-ammount\">\r\n                                3,200,000<span class=\"sub-part\">.00</span>\r\n                            </div>\r\n                            <button class=\"wallet-list-button\" mat-icon-button></button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div class=\"nav-option-right\">\r\n                    <div class=\"lang-wrapper\">\r\n                        <button type=\"button\" class=\"drop-down-btn lang-btn\" [matMenuTriggerFor]=\"langMenu\"\r\n                            id=\"dropdownForm2\">\r\n                            <img height=\"20px\" width=\"20px\" src=\"images/gloabe-icn.svg\" alt=\"language icon\">\r\n                        </button>\r\n                        <mat-menu #langMenu=\"matMenu\"\r\n                            class=\"header-menu-panel side-nav-wrapper language-wrapper animated fadeIn py-2 px-2\">\r\n                            <ul>\r\n                                <li>\r\n                                    <button class=\"drop-down-btn\" id=\"lang-list-1\">English</button>\r\n                                </li>\r\n                                <li>\r\n                                    <button class=\"drop-down-btn\" id=\"lang-list-2\">עברית</button>\r\n                                </li>\r\n                            </ul>\r\n                        </mat-menu>\r\n                    </div>\r\n                    <button class=\"header-btn download-app\">\r\n                        Download App\r\n                    </button>\r\n                    <a class=\"header-btn market-place\">\r\n                        <svg width=\"22\" height=\"20\" viewBox=\"0 0 22 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                            <path id=\"Vector\"\r\n                                d=\"M21.9483 6.58348C21.9248 6.53253 21.8963 6.48416 21.8632 6.43913C21.8382 6.31428 21.8046 6.19137 21.7628 6.0713C21.7577 6.05739 21.7526 6.04348 21.7458 6.02956L19.4031 0.521739C19.3369 0.366601 19.2277 0.234598 19.0891 0.141919C18.9505 0.049241 18.7884 -8.19612e-05 18.6228 1.02236e-07H3.30575C3.14011 -8.19612e-05 2.97804 0.049241 2.83943 0.141919C2.70082 0.234598 2.59169 0.366601 2.52543 0.521739L0.168309 6.07043C-0.056103 6.65243 -0.056103 7.29975 0.168309 7.88174C0.385115 8.3882 0.699203 8.84504 1.09196 9.22518C1.48472 9.60532 1.94815 9.90103 2.4548 10.0948V19.1304C2.4548 19.3611 2.54446 19.5822 2.70404 19.7453C2.86362 19.9084 3.08007 20 3.30575 20H18.6228C18.8485 20 19.0649 19.9084 19.2245 19.7453C19.3841 19.5822 19.4737 19.3611 19.4737 19.1304V10.0948C19.9803 9.90127 20.4436 9.60585 20.8364 9.22601C21.2291 8.84617 21.5433 8.38965 21.7602 7.88348C21.8304 7.70055 21.877 7.5091 21.8989 7.31391C21.9557 7.20211 21.9894 7.07959 21.9979 6.95393C22.0064 6.82828 21.9895 6.70219 21.9483 6.58348ZM8.41143 18.2609V13.0435H10.1133V18.2609H8.41143ZM11.8152 18.2609V13.0435H13.5171V18.2609H11.8152ZM17.7718 18.2609H15.219V12.1739C15.219 11.9433 15.1294 11.7221 14.9698 11.559C14.8102 11.396 14.5937 11.3043 14.3681 11.3043H7.56048C7.3348 11.3043 7.11836 11.396 6.95877 11.559C6.79919 11.7221 6.70954 11.9433 6.70954 12.1739V18.2609H4.1567V10.4348C4.80138 10.443 5.44005 10.3072 6.028 10.0369C6.61595 9.7665 7.13898 9.36811 7.56048 8.86957C7.9868 9.36234 8.51071 9.75693 9.09752 10.0272C9.68432 10.2974 10.3206 10.4372 10.9643 10.4372C11.6079 10.4372 12.2442 10.2974 12.831 10.0272C13.4178 9.75693 13.9417 9.36234 14.3681 8.86957C14.7896 9.36811 15.3126 9.7665 15.9005 10.0369C16.4885 10.3072 17.1272 10.443 17.7718 10.4348V18.2609ZM20.186 7.21739C19.9683 7.67738 19.6239 8.06235 19.195 8.32498C18.7661 8.5876 18.2714 8.71644 17.7718 8.69565C17.1525 8.74712 16.5381 8.54822 16.0608 8.14172C15.5834 7.73521 15.2812 7.15354 15.219 6.52174C15.219 6.29112 15.1294 6.06994 14.9698 5.90686C14.8102 5.74379 14.5937 5.65217 14.3681 5.65217C14.1424 5.65217 13.9259 5.74379 13.7663 5.90686C13.6068 6.06994 13.5171 6.29112 13.5171 6.52174C13.455 7.15354 13.1527 7.73521 12.6754 8.14172C12.198 8.54822 11.5836 8.74712 10.9643 8.69565C10.3449 8.74712 9.73054 8.54822 9.25318 8.14172C8.77581 7.73521 8.47358 7.15354 8.41143 6.52174C8.41143 6.29112 8.32178 6.06994 8.1622 5.90686C8.00261 5.74379 7.78617 5.65217 7.56048 5.65217C7.3348 5.65217 7.11836 5.74379 6.95877 5.90686C6.79919 6.06994 6.70954 6.29112 6.70954 6.52174C6.64739 7.15354 6.34516 7.73521 5.86779 8.14172C5.39043 8.54822 4.77604 8.74712 4.1567 8.69565C3.65699 8.7165 3.1622 8.5877 2.73316 8.32507C2.30412 8.06245 1.95952 7.67745 1.74171 7.21739C1.68468 7.05701 1.68468 6.88125 1.74171 6.72087L3.86397 1.73913H18.0646L20.1724 6.69565C20.2382 6.86222 20.2431 7.04747 20.186 7.21739Z\"\r\n                                fill=\"black\" />\r\n                        </svg>\r\n                        Marketplace\r\n                    </a>\r\n                    <button class=\"add-money\" mat-button id=\"db-header-10\">+ Add Money</button>\r\n                    <div class=\"user-profile\">\r\n                        <button class=\"profile-btn\" [matMenuTriggerFor]=\"accountsMenu\" id=\"db-header-11\">T</button>\r\n                        <button class=\"user-option\" mat-icon-button [matMenuTriggerFor]=\"profileMenu\" id=\"db-header-12\">\r\n                            <img src=\"images/menu-down-arrow.svg\">\r\n                        </button>\r\n                        <mat-menu #profileMenu=\"matMenu\" class=\"header-menu-panel\">\r\n                            <button mat-menu-item class=\"custom-menu-item\" id=\"db-header-13\">Logout</button>\r\n                        </mat-menu>\r\n                        <mat-menu #accountsMenu=\"matMenu\" class=\"header-menu-panel\">\r\n                            <button mat-menu-item class=\"custom-menu-item\" id=\"dbheader-company\">Tamir</button>\r\n                        </mat-menu>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </nav>\r\n    </div>\r\n</header>"
        },
        {
            "name": "MomentumIndicatorChartComponent",
            "id": "component-MomentumIndicatorChartComponent-725e4ee5a8b1cb9b3f68a42d3a062e45b63c73095098d60e441420d09cff83c01532f0f0cd8cacd6e47ea61fe1e080759b852047d9957516d939c74ba5a9da77",
            "file": "src/app/risk-dashboard/components/dashboard/components/momentum-indicator-chart/momentum-indicator-chart.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-momentum-indicator-chart",
            "styleUrls": [
                "./momentum-indicator-chart.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./momentum-indicator-chart.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "currencyPair",
                    "defaultValue": "'USD/EUR'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 35,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "momentumRankScore",
                    "defaultValue": "2",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 37,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "riskdirection",
                    "defaultValue": "1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 36,
                    "type": "number",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "chart",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ChartComponent",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'chart'"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "chartOptions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ChartOptions",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "chartValue",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "momentumRank",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 38
                }
            ],
            "methodsClass": [
                {
                    "name": "getChartOptions",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getMomentumRank",
                    "args": [],
                    "optional": false,
                    "returnType": "\"Decline Significantly\" | \"Decline Moderately\" | \"Rise Moderately\" | \"Rise Significantly\" | \"Not Found\"",
                    "typeParameters": [],
                    "line": 115,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 134,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 88,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "updateArrowRotation",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 140,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "updateSeries",
                    "args": [
                        {
                            "name": "series",
                            "type": "ApexNonAxisChartSeries",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 151,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "series",
                            "type": "ApexNonAxisChartSeries",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "NgbTooltipModule",
                    "type": "module"
                },
                {
                    "name": "NgApexchartsModule",
                    "type": "module"
                },
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from \"@angular/common\";\r\nimport { Component, ViewChild, AfterViewInit, OnInit, Input } from \"@angular/core\";\r\nimport { NgbTooltipModule } from \"@ng-bootstrap/ng-bootstrap\";\r\nimport {\r\n  ApexNonAxisChartSeries,\r\n  ApexPlotOptions,\r\n  ApexChart,\r\n  ApexFill,\r\n  ApexStroke,\r\n  ChartComponent,\r\n  NgApexchartsModule\r\n} from \"ng-apexcharts\";\r\n\r\nexport type ChartOptions = {\r\n  series: ApexNonAxisChartSeries;\r\n  chart: ApexChart;\r\n  labels: string[];\r\n  plotOptions: ApexPlotOptions;\r\n  fill: ApexFill;\r\n  stroke: ApexStroke;\r\n};\r\n\r\n@Component({\r\n  selector: 'app-momentum-indicator-chart',\r\n   imports: [NgbTooltipModule, NgApexchartsModule, CommonModule],\r\n   standalone: true,\r\n  templateUrl: './momentum-indicator-chart.component.html',\r\n  styleUrls: ['./momentum-indicator-chart.component.scss']\r\n})\r\nexport class MomentumIndicatorChartComponent implements OnInit, AfterViewInit {\r\n  @ViewChild(\"chart\") chart!: ChartComponent;\r\n\r\n  public chartOptions!: ChartOptions;\r\n  chartValue: number = 0;\r\n  @Input() currencyPair: string = 'USD/EUR';\r\n  @Input() riskdirection: number = 1;\r\n  @Input() momentumRankScore: number = 2;\r\n  momentumRank: string = ''\r\n\r\n  constructor() {\r\n    this.getChartOptions();\r\n  }\r\n\r\n  getChartOptions() {\r\n    this.chartOptions = {\r\n      series: [100], // Static value\r\n      chart: {\r\n        height: 350,\r\n        type: \"radialBar\",\r\n        offsetY: 0\r\n      },\r\n      plotOptions: {\r\n        radialBar: {\r\n          startAngle: 0,\r\n          endAngle: 180,\r\n          dataLabels: {\r\n            name: {\r\n              show: false\r\n            },\r\n            value: {\r\n              show: false\r\n            }\r\n          }\r\n        }\r\n      },\r\n      fill: {\r\n        type: \"gradient\",\r\n        gradient: {\r\n          shade: \"dark\",\r\n          shadeIntensity: 0.15,\r\n          inverseColors: false,\r\n          opacityFrom: 1,\r\n          opacityTo: 1,\r\n          gradientToColors: [\"#E4E7EC\"],\r\n          stops: [0, 100]\r\n        },\r\n        colors: [\"#F9FAFB\", \"#E4E7EC\"]\r\n      },\r\n      stroke: {\r\n        dashArray: 4,\r\n        width: 3,\r\n        colors: [\"#f9f9f9\"]\r\n      },\r\n      labels: []\r\n    };\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    const momentumRankScoreMap: { [key: number]: number } = {\r\n      0: 100,\r\n      1: 75,\r\n      2: 35,\r\n      3: 20\r\n    };\r\n    this.momentumRank = this.getMomentumRank();\r\n    const updateChart = (momentumRankScore: any) => {\r\n      this.chartOptions.series = [0];\r\n      this.chartValue = momentumRankScoreMap[momentumRankScore] ?? 0;\r\n      this.updateSeries([this.chartValue]);\r\n    };\r\n    if (this.riskdirection === 1 || this.riskdirection === 2) {\r\n      switch (this.momentumRankScore) {\r\n        case 3:\r\n        case 2:\r\n        case 1:\r\n        case 0:\r\n          updateChart(this.momentumRankScore);\r\n          break;\r\n        default:\r\n          console.error(\"Invalid momentumRankScore\");\r\n      }\r\n    }\r\n  }\r\n\r\n  getMomentumRank(){\r\n    if (this.riskdirection == 2) {\r\n      switch (this.momentumRankScore) {\r\n        case 0: return \"Decline Significantly\";\r\n        case 1: return \"Decline Moderately\";\r\n        case 2: return \"Rise Moderately\";\r\n        case 3: return \"Rise Significantly\";\r\n      }\r\n    } else if (this.riskdirection == 1) {\r\n      switch (this.momentumRankScore) {\r\n        case 0: return \"Decline Significantly\";\r\n        case 1: return \"Decline Moderately\";\r\n        case 2: return \"Rise Moderately\";\r\n        case 3: return \"Rise Significantly\";\r\n      }\r\n    }\r\n    return \"Not Found\";\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    if (this.chartValue > 10) {\r\n      this.updateArrowRotation();\r\n    }\r\n  }\r\n\r\n  updateArrowRotation() {\r\n    const value = this.chartValue;\r\n    const maxValue = 100;\r\n    const rotation = (value / maxValue) * 180;\r\n\r\n    const arrowElement = document.querySelector('.arrow-wrap') as HTMLElement;\r\n    if (arrowElement) {\r\n      arrowElement.style.transform = `rotate(${rotation}deg)`;\r\n    }\r\n  }\r\n\r\n  updateSeries(series: ApexNonAxisChartSeries) {\r\n    this.chartOptions.series = series;\r\n    this.chart?.updateSeries(series);\r\n\r\n    const updateIndicatorArrow = (fillColor: any, strokeColor: any) => {\r\n      const indicatorArrow = document.getElementById(\"m-indicator-arrow\");\r\n      if (indicatorArrow) {\r\n        const path = indicatorArrow.querySelector(\"path\");\r\n        if (path) {\r\n          path.style.stroke = strokeColor;\r\n          path.style.fill = fillColor;\r\n        }\r\n      } else {\r\n        console.error(\"Element with ID 'm-indicator-arrow' not found.\");\r\n      }\r\n    };\r\n    const updateChartOptions = (color: any) => {\r\n      this.chartOptions.fill = {\r\n        type: \"gradient\",\r\n        gradient: {\r\n          shade: \"dark\",\r\n          shadeIntensity: 0.15,\r\n          inverseColors: false,\r\n          opacityFrom: 1,\r\n          opacityTo: 1,\r\n          gradientToColors: [color],\r\n          stops: [0, 50, 65, 91]\r\n        },\r\n        colors: [color, \"#12B01C\"]\r\n      };\r\n    };\r\n    const handleRiskDirection = (riskDirection: any, momentumRankScore: any) => {\r\n      let fillColor, strokeColor;\r\n\r\n      if (riskDirection === 1) {\r\n        fillColor = strokeColor = (momentumRankScore === 3 || momentumRankScore === 2) ? \"#11AF1C\" : \"#EE0B0B\";\r\n      } else if (riskDirection === 2) {\r\n        fillColor = strokeColor = (momentumRankScore === 3 || momentumRankScore === 2) ? \"#EE0B0B\" : \"#11AF1C\";\r\n      } else {\r\n        console.error(\"Invalid riskDirection\");\r\n        return;\r\n      }\r\n\r\n      updateIndicatorArrow(fillColor, strokeColor);\r\n      updateChartOptions(fillColor);\r\n    };\r\n    if (this.riskdirection === 2 || this.riskdirection === 1) {\r\n      switch (this.momentumRankScore) {\r\n        case 3:\r\n        case 2:\r\n        case 1:\r\n        case 0:\r\n          handleRiskDirection(this.riskdirection, this.momentumRankScore);\r\n          break;\r\n        default:\r\n          console.error(\"Invalid momentumRankScore\");\r\n      }\r\n    }\r\n    if (this.chartValue > 20) {\r\n      this.updateArrowRotation();\r\n    }\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../../assets/scss/variable';\r\n\r\n::ng-deep {\r\n  .moment-chart-wrapper {\r\n    background-color: $white;\r\n    padding: 30px 30px 15px 45px;\r\n    border-radius: 10px;\r\n    display: flex;\r\n    justify-content: space-between;\r\n    position: relative;\r\n    .chart-desc {\r\n      .chart-head {\r\n        .info-title {\r\n          color: #344054;\r\n          font-family: $he_heebo;\r\n          font-size: 18px;\r\n          font-weight: 700;\r\n          line-height: 28px;\r\n          display: flex;\r\n          gap: 10px;\r\n          align-items: center;\r\n          margin: 0;\r\n          position: relative;\r\n          .title-tooltip{\r\n            cursor: pointer;\r\n            z-index: 1;\r\n          }\r\n        }\r\n      }\r\n      .desc {\r\n        margin: 20px 0 105px;\r\n        max-width: 237px;\r\n        min-height: 84px;\r\n\r\n        @media screen and (max-width: 1440px) {\r\n          min-height: 72px;\r\n        }\r\n        p {\r\n          margin: 0;\r\n          color: #344054;\r\n          font-family: $he_heebo;\r\n          font-size: 18px;\r\n          font-weight: 400;\r\n          line-height: 28px;\r\n          span {\r\n            color: #175CD3;\r\n            &.direction-2 {\r\n              &.declining-significantly {\r\n                color: #11AF1C;\r\n              }\r\n\r\n              &.declining-moderately {\r\n                color: #11AF1C;\r\n              }\r\n\r\n              &.rising-moderately {\r\n                color: #EE0B0B;\r\n              }\r\n\r\n              &.rising-significantly {\r\n                color: #EE0B0B;\r\n              }\r\n            }\r\n            &.direction-1 {\r\n              &.declining-significantly {\r\n                color: #EE0B0B;\r\n              }\r\n\r\n              &.declining-moderately {\r\n                color: #EE0B0B;\r\n              }\r\n\r\n              &.rising-moderately {\r\n                color: #11AF1C;\r\n              }\r\n\r\n              &.rising-significantly {\r\n                color: #11AF1C;\r\n              }\r\n            }\r\n            &.no-data {\r\n              color: #344054;\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    .moment-chart {\r\n      width: auto;\r\n      height: 100%;\r\n      margin:auto;\r\n      position: absolute;\r\n      top:-10px;\r\n      right:20px;\r\n      .apexcharts-radialbar-hollow {\r\n        stroke: #A28888;\r\n        clip-path: polygon(50% 0%, 100% 0%, 100% 100%, 50% 100%);\r\n        stroke-width: 0.25;\r\n      }\r\n      .chart-inner {\r\n        position: relative;\r\n        overflow: hidden;\r\n        .arrow-wrap {\r\n          position: absolute;\r\n          top: 0;\r\n          bottom: 0;\r\n          width: 100%;\r\n          height: 100%;\r\n          margin: auto;\r\n          content: \"\";\r\n          left: 0;\r\n          right: 0;\r\n          transition: transform 0.5s ease-in-out;\r\n          .blue-arrow {\r\n            position: absolute;\r\n            top: calc(50% - 44px);\r\n            left: 0;\r\n            right: 0;\r\n            margin: 0 auto;\r\n            width: 27px;\r\n            height: 54px;\r\n            transition: transform 0.5s ease-in-out;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    @media screen and (max-width:1800px) {\r\n      padding: 30px 20px;\r\n      .chart-desc {\r\n        .desc {\r\n          margin: 10px 0 55px;\r\n          p {\r\n            font-size: 16px;\r\n            line-height: 26px;\r\n          }\r\n        }\r\n      }\r\n      .moment-chart {\r\n        top:-20px;\r\n        right:0;\r\n        transform: scale(0.9);\r\n      }\r\n    }\r\n    @media screen and (max-width:1440px) {\r\n      padding: 20px;\r\n      .chart-desc {\r\n        .chart-head {\r\n          .info-title {\r\n            font-size: 16px;\r\n            line-height: 26px;\r\n            gap: 5px;\r\n            .title-img {\r\n              width: 24px;\r\n            }\r\n          }\r\n        }\r\n        .desc {\r\n          margin: 10px 0 62px;\r\n          max-width:230px;\r\n          p {\r\n            font-size: 14px;\r\n            line-height: 24px;\r\n          }\r\n        }\r\n      }\r\n      .moment-chart {\r\n        transform: scale(0.85);\r\n        transform-origin:top right;\r\n        top:0;\r\n        right:0;\r\n      }\r\n    }\r\n    @media screen and (max-width:1366px) {\r\n      .chart-desc {\r\n        .desc {\r\n          margin: 10px 0 63px;\r\n          max-width:180px;\r\n        }\r\n      }\r\n      .moment-chart {\r\n        top:0;\r\n        right:0;\r\n        transform: scale(0.85);\r\n      }\r\n    }\r\n    @media screen and (max-width:1280px) {\r\n      .moment-chart {\r\n        transform: scale(0.8);\r\n        top:20px;\r\n        right:-30px;\r\n      }\r\n    }\r\n    @media screen and (max-width:1199px) {\r\n      .chart-desc {\r\n        .desc {\r\n          max-width: 60%;\r\n          margin: 10px 0 30px;\r\n          p {\r\n            font-size: 14px;\r\n            line-height: 20px;\r\n          }\r\n        }\r\n      }\r\n      .moment-chart {\r\n        margin:auto;\r\n        transform: scale(0.75);\r\n        top:20px;\r\n        right:-20px;\r\n      }\r\n    }\r\n    @media screen and (max-width:1024px) {\r\n      .chart-desc {\r\n        .desc {\r\n          margin: 10px 0 95px;\r\n        }\r\n      }\r\n      .moment-chart {\r\n        margin:auto;\r\n        transform: scale(0.8);\r\n        top:0;\r\n        right:0;\r\n      }\r\n    }\r\n    @media screen and (max-width:767px) {\r\n      .chart-desc {\r\n        .desc {\r\n          p {\r\n            font-size: 12px;\r\n            line-height: 20px;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    @media screen and (max-width:640px) {\r\n      .chart-desc {\r\n        .desc {\r\n          p {\r\n            font-size: 14px;\r\n            line-height: 22px;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    @media screen and (max-width:420px) {\r\n      .chart-desc {\r\n        .desc {\r\n          margin: 10px 0 75px;\r\n        }\r\n      }\r\n      .moment-chart {\r\n        margin:auto;\r\n        transform: scale(0.8);\r\n        top:0;\r\n        right:0;\r\n      }\r\n    }\r\n  }\r\n}\r\n",
                    "styleUrl": "./momentum-indicator-chart.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 38
            },
            "extends": [],
            "implements": [
                "OnInit",
                "AfterViewInit"
            ],
            "templateData": "<div class=\"moment-chart-wrapper\">\r\n  <div class=\"chart-desc\">\r\n    <div class=\"chart-head\">\r\n      <h5 class=\"info-title\">\r\n        <img class=\"title-img\" src=\"images/trending_down.svg\" alt=\"Momentum Indicator\" />Momentum\r\n        Indicator<img src=\"images/annual-title-help-icon.svg\" [ngbTooltip]=\"momentTool\" placement=\"top-right\"\r\n          tooltipClass=\"risk-step3-tooltip--rm\" class=\"title-tooltip\" />\r\n      </h5>\r\n    </div>\r\n    <ng-template #momentTool> Measures the speed and strength of a trend, indicating the rate of price change over a\r\n      specific period.</ng-template>\r\n    <div class=\"desc\">\r\n      <p>The <span>{{ currencyPair }}</span> pair is\r\n        expected to <span [ngClass]=\"{\r\n            'declining-significantly': momentumRank === 'Decline Significantly',\r\n            'declining-moderately': momentumRank === 'Decline Moderately',\r\n            'rising-moderately': momentumRank === 'Rise Moderately',\r\n            'rising-significantly': momentumRank === 'Rise Significantly',\r\n            'direction-1': riskdirection === 1,\r\n            'direction-2': riskdirection === 2,\r\n            'not-found': momentumRank === 'Not Found'\r\n        }\">\r\n          {{ momentumRank }}\r\n        </span>\r\n        in the coming months</p>\r\n    </div>\r\n  </div>\r\n  <div class=\"moment-chart\">\r\n    <div class=\"chart-inner\">\r\n      <apx-chart #chart [series]=\"chartOptions.series\" [chart]=\"chartOptions.chart\"\r\n        [plotOptions]=\"chartOptions.plotOptions\" [fill]=\"chartOptions.fill\" [stroke]=\"chartOptions.stroke\"\r\n        [labels]=\"chartOptions.labels\"></apx-chart>\r\n      <div class=\"arrow-wrap\">\r\n        <svg class=\"blue-arrow\" id=\"m-indicator-arrow\" alt=\"blue arrow\" xmlns=\"http://www.w3.org/2000/svg\" width=\"31\"\r\n          height=\"60\" viewBox=\"0 0 31 60\" fill=\"none\">\r\n          <path\r\n            d=\"M13.2891 57.3745C13.2891 58.4791 14.1845 59.3745 15.2891 59.3745C16.3936 59.3745 17.2891 58.4791 17.2891 57.3745L13.2891 57.3745ZM16.7033 1.04947C15.9222 0.268421 14.6559 0.268421 13.8748 1.04947L1.14692 13.7774C0.365876 14.5584 0.365876 15.8248 1.14693 16.6058C1.92797 17.3869 3.1943 17.3869 3.97535 16.6058L15.2891 5.29211L26.6028 16.6058C27.3838 17.3869 28.6501 17.3869 29.4312 16.6058C30.2122 15.8248 30.2122 14.5584 29.4312 13.7774L16.7033 1.04947ZM17.2891 57.3745L17.2891 2.46368L13.2891 2.46368L13.2891 57.3745L17.2891 57.3745Z\"\r\n            fill=\"#175CD3\" />\r\n        </svg>\r\n        <!-- <img class=\"blue-arrow\" src=\"assets/icons/momentum-indicator-chart-line.svg\" /> -->\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>"
        },
        {
            "name": "MonthlyExposureChartComponent",
            "id": "component-MonthlyExposureChartComponent-a0085cafe077c659cfc660f1f610a5fac2ac9ecb72a54000e31c34c1ac790840d26a0e21b897aed14a1ebd9571e4c6d9fbe317c3e01aae94686cbb57bc48305d",
            "file": "src/app/risk-dashboard/components/dashboard/components/monthly-exposure-chart/monthly-exposure-chart.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-monthly-exposure-chart",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./monthly-exposure-chart.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "chart",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "chartOptions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ApexChart",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "chartSeries",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ApexAxisChartSeries",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "columnIndex",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "currentPage",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 45
                },
                {
                    "name": "dataLabelsOptions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ApexDataLabels",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "fillOptions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ApexFill",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "legendOptions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ApexLegend",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 37,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "monthChartXAxisData",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "pageSize",
                    "defaultValue": "12",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 44
                },
                {
                    "name": "paginatedSeries",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "paginator",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatPaginator",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "MatPaginator"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "paginatorElementRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "MatPaginator, {read: ElementRef}"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "plotOptions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ApexPlotOptions",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 39,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "strokeOptions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ApexStroke",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "tooltipIndex",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "tooltipOptions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ApexTooltip",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 38,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "xAxisOptions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ApexXAxis",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "yAxisOptions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ApexYAxis",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "getChartOptions",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 113,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "hideCustomTooltip",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 278,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngAfterContentInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 83,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 107,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onDocumentClick",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 285,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'document:mousemove', ['$event']"
                        }
                    ],
                    "modifierKind": [
                        170
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onDocumentScroll",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 292,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'document:scroll', ['$event']"
                        }
                    ],
                    "modifierKind": [
                        170
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onPageChange",
                    "args": [
                        {
                            "name": "event",
                            "type": "PageEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 102,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "PageEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "showCustomTooltip",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "config",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 218,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "config",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updatePaginatedSeries",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 202,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "document:mousemove",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 285
                },
                {
                    "name": "document:scroll",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 292
                }
            ],
            "standalone": false,
            "imports": [
                {
                    "name": "NgApexchartsModule",
                    "type": "module"
                },
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "MatPaginatorModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { AfterViewInit, ChangeDetectorRef, Component, ElementRef, HostListener, OnDestroy, OnInit, Renderer2, ViewChild } from '@angular/core';\r\nimport { MatPaginator, MatPaginatorModule, PageEvent } from '@angular/material/paginator';\r\nimport { NgApexchartsModule } from \"ng-apexcharts\";\r\nimport {\r\n  ApexAxisChartSeries,\r\n  ApexChart,\r\n  ApexXAxis,\r\n  ApexYAxis,\r\n  ApexStroke,\r\n  ApexDataLabels,\r\n  ApexLegend,\r\n  ApexTooltip,\r\n  ApexPlotOptions,\r\n  ApexFill\r\n} from 'ng-apexcharts';\r\n@Component({\r\n  selector: 'app-monthly-exposure-chart',\r\n  imports: [NgApexchartsModule, CommonModule, MatPaginatorModule],\r\n  templateUrl: './monthly-exposure-chart.component.html',\r\n  styleUrl: './monthly-exposure-chart.component.scss'\r\n})\r\nexport class MonthlyExposureChartComponent implements OnInit, OnDestroy, AfterViewInit {\r\n  @ViewChild(MatPaginator) paginator!: MatPaginator;\r\n  @ViewChild(MatPaginator, { read: ElementRef }) paginatorElementRef!: ElementRef;\r\n  chart: any;\r\n  tooltipIndex: number | null = null;\r\n  monthChartXAxisData: any = [];\r\n  constructor(private cdr: ChangeDetectorRef,\r\n    private renderer: Renderer2, private el: ElementRef) { }\r\n  public chartSeries!: ApexAxisChartSeries;\r\n  public chartOptions!: ApexChart;\r\n  public xAxisOptions!: ApexXAxis;\r\n  public yAxisOptions!: ApexYAxis;\r\n  public strokeOptions!: ApexStroke;\r\n  public dataLabelsOptions!: ApexDataLabels;\r\n  public legendOptions!: ApexLegend;\r\n  public tooltipOptions!: ApexTooltip;\r\n  public plotOptions!: ApexPlotOptions;\r\n  public fillOptions!: ApexFill;\r\n\r\n  columnIndex: any = [];\r\n  paginatedSeries: any = [];\r\n  pageSize = 12;\r\n  currentPage = 0;\r\n  ngOnInit() {\r\n    this.chartSeries = [\r\n      {\r\n        name: \"Exposure-negative\",\r\n        type: \"bar\",\r\n        group: \"exposer\",\r\n        data: [0, 0, 50000, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\r\n      },\r\n      {\r\n        name: \"Exposure\",\r\n        type: \"bar\",\r\n        group: \"exposer\",\r\n        data: [95000, 95000, 45000, 95000, 95000, 95000, 95000, 95000, 95000, 95000, 95000, 95000, 95000, 95000, 95000, 95000, 95000, 95000, 95000, 95000, 95000, 95000, 95000, 95000]\r\n      },\r\n      {\r\n        name: \"Recommended hedging\",\r\n        type: \"bar\",\r\n        group: \"rechedge\",\r\n        data: [60000, 60000, 60000, 60000, 60000, 60000, 60000, 60000, 60000, 60000, 60000, 60000, 60000, 60000, 60000, 60000, 60000, 60000, 60000, 60000, 60000, 60000, 60000, 60000]\r\n      },\r\n      {\r\n        name: \"Actual hedging\",\r\n        type: \"bar\",\r\n        group: \"acthedge\",\r\n        data: [1000, 1000, 1000, 20000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000]\r\n      }\r\n    ];\r\n  }\r\n  ngAfterViewInit() {\r\n    setTimeout(() => {\r\n      this.getChartOptions();\r\n      this.updatePaginatedSeries();\r\n    }, 100);\r\n    if (this.paginator) {\r\n      this.paginator?.page.subscribe((event: PageEvent) => this.onPageChange(event));\r\n    }\r\n  }\r\n  ngAfterContentInit() {\r\n    const checkPaginator = () => {\r\n      if (this.paginatorElementRef) {\r\n        const paginatorElement = this.paginatorElementRef.nativeElement;\r\n        const previousButton = paginatorElement.querySelector('.mat-mdc-paginator-navigation-previous');\r\n        const nextButton = paginatorElement.querySelector('.mat-mdc-paginator-navigation-next');\r\n\r\n        if (previousButton && nextButton) {\r\n          // Set the IDs for the buttons\r\n          previousButton.setAttribute('id', 'previousButton');\r\n          nextButton.setAttribute('id', 'nextButton');\r\n          clearInterval(interval); // Stop the polling once IDs are set\r\n        }\r\n      }\r\n    };\r\n\r\n    // Poll every 100ms until the paginator is available\r\n    const interval = setInterval(checkPaginator, 100);\r\n  }\r\n  onPageChange(event: PageEvent) {\r\n    this.pageSize = event.pageSize;\r\n    this.currentPage = event.pageIndex;\r\n    this.updatePaginatedSeries();\r\n  }\r\n  ngOnDestroy() {\r\n    // Destroy the chart to prevent memory leaks\r\n    if (this.chart) {\r\n      this.chart.destroy();\r\n    }\r\n  }\r\n  getChartOptions() {\r\n    this.chartOptions = {\r\n      type: \"bar\",\r\n      height: 319,\r\n      stacked: true,\r\n      toolbar: {\r\n        show: false\r\n      },\r\n      events: {\r\n        dataPointMouseEnter: (event, chartContext, config) => {\r\n          this.tooltipIndex = config.dataPointIndex;\r\n          this.showCustomTooltip(event, config);\r\n        },\r\n        dataPointMouseLeave: () => {\r\n          setTimeout(() => this.hideCustomTooltip(), 1500000000);\r\n        }\r\n      }\r\n    };\r\n\r\n    this.xAxisOptions = {\r\n      categories: ['Jan 24', 'Feb 24', 'Mar 24', 'Apr 24', 'May 24', 'Jun 24', 'Jul 24', 'Aug 24', 'Sep 24', 'Oct 24', 'Nov 24', 'Dec 24', 'Jan 25', 'Feb 25', 'Mar 25', 'Apr 25', 'May 25', 'Jun 25', 'Jul 25', 'Aug 25', 'Sep 25', 'Oct 25', 'Nov 25', 'Dec 25'],\r\n      labels: {\r\n        style: {\r\n          colors: '#98A2B3',\r\n          fontSize: '12px',\r\n          fontFamily: 'Inter'\r\n        },\r\n        rotate: -45,\r\n        hideOverlappingLabels: false,\r\n      },\r\n    };\r\n    this.monthChartXAxisData = this.xAxisOptions.categories;\r\n\r\n    this.yAxisOptions = {\r\n      min: 0,\r\n      max: 100000, // Round off the value\r\n      tickAmount: 5,\r\n      labels: {\r\n        formatter: function (val) {\r\n          return \"$\" + val;\r\n        },\r\n        style: {\r\n          colors: 'rgba(0, 0, 0, 0.70)',\r\n          fontSize: '12px',\r\n          fontFamily: 'Inter'\r\n        }\r\n      }\r\n    };\r\n\r\n\r\n    this.strokeOptions = {\r\n      width: 0,\r\n      curve: \"smooth\"\r\n    };\r\n\r\n    this.dataLabelsOptions = {\r\n      enabled: false\r\n    };\r\n\r\n    this.legendOptions = {\r\n      show: true,\r\n      position: \"top\",\r\n      markers: {\r\n        offsetX: 0,\r\n        offsetY: 0,\r\n        fillColors: [\"#D92D20\", \"#DCEAF7\", \"#A2B0FB\", \"#2947F2\"],\r\n        strokeWidth: 2\r\n      },\r\n      itemMargin: {\r\n        horizontal: 10,\r\n        vertical: 0\r\n      }\r\n    };\r\n\r\n    this.tooltipOptions = {\r\n      enabled: false, // Disable default tooltips\r\n    };\r\n\r\n    this.plotOptions = {\r\n      bar: {\r\n        horizontal: false,\r\n        columnWidth: '35px',\r\n      }\r\n    };\r\n\r\n    this.fillOptions = {\r\n      colors: [\"#D92D20\", \"#DCEAF7\", \"#A2B0FB\", \"#2947F2\"],\r\n    };\r\n  }\r\n  updatePaginatedSeries() {\r\n    const startIndex = this.currentPage * this.pageSize;\r\n    const endIndex = startIndex + this.pageSize;\r\n\r\n    if (this.chartSeries) {\r\n      this.paginatedSeries = this.chartSeries.map(series => ({\r\n        ...series,\r\n        data: series?.data?.slice(startIndex, endIndex)\r\n      }));\r\n\r\n      // Paginate the categories as well\r\n      this.xAxisOptions = {\r\n        categories: this.monthChartXAxisData?.slice(startIndex, endIndex),\r\n      };\r\n    }\r\n  }\r\n  showCustomTooltip(event: MouseEvent, config: any) {\r\n    let tooltip = document.getElementById('custom-tooltip');\r\n\r\n    if (tooltip) {\r\n      // const { seriesIndex, dataPointIndex } = config;\r\n      // const actualIndex = this.currentPage * this.pageSize + dataPointIndex;\r\n      // const data = this.chartSeries[seriesIndex].data[actualIndex];\r\n      // Adjust the tooltip content\r\n      this.renderer.setProperty(tooltip, 'innerHTML', `\r\n      <div class=\"inner-wrap\">\r\n        <div class=\"head-title\">January 2024</div>\r\n        <div class=\"item-wrap\">\r\n          <div class=\"tooltip-item\">\r\n            <div class=\"info-sec item-month\">\r\n              <h4 class=\"title\">Monthly exposure</h4>\r\n              <div class=\"amount\"><span class=\"negative-value\">-$10,000</span> / $100,000</div>\r\n              <div class=\"neg-text\">Reverse exposure</div>\r\n            </div>\r\n            <button class=\"edit-button\">Edit</button>\r\n          </div>\r\n          <div class=\"tooltip-item\">\r\n            <div class=\"info-sec item-hedge\">\r\n              <h4 class=\"title\">Recommended hedge</h4>\r\n              <div class=\"amount\">$60,000</div>\r\n            </div>\r\n          </div>\r\n          <div class=\"tooltip-item\">\r\n            <div class=\"info-sec item-fund\">\r\n              <h4 class=\"title\">Hedged funds</h4>\r\n              <div class=\"amount\">$0</div>\r\n            </div>\r\n            <button class=\"hedge-button\">Hedge</button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    `);\r\n\r\n\r\n      if (!document.body.contains(tooltip)) {\r\n        this.renderer.appendChild(document.body, tooltip);\r\n      }\r\n      tooltip.style.left = `${event.pageX}px`;\r\n      tooltip.style.top = `${event.pageY / 2.5}px`;\r\n      tooltip.style.display = 'block';\r\n\r\n      this.cdr.detectChanges();\r\n\r\n      // tooltip.addEventListener('click', (e: Event) => {\r\n      //   const target = e.target as HTMLElement;\r\n      //   if (target.classList.contains('edit-button')) {\r\n      //     const index = target.getAttribute('data-index');\r\n      //     if (index !== null) {\r\n      //       this.editValue(parseInt(index, 10));\r\n      //     }\r\n      //   } else if (target.classList.contains('hedge-button')) {\r\n      //     this.router.navigate([localStorage.getItem('subSite') ? localStorage.getItem('subSite') + 'risk-manager/hedging-proposal' : '/risk-manager/hedging-proposal']);\r\n      //   }\r\n      // });\r\n    }\r\n  }\r\n  hideCustomTooltip() {\r\n    const tooltip = document.getElementById('custom-tooltip');\r\n    if (tooltip) {\r\n      tooltip.style.display = 'none';\r\n    }\r\n  }\r\n  @HostListener('document:mousemove', ['$event'])\r\n  onDocumentClick(event: MouseEvent): void {\r\n    const clickedInside = this.el.nativeElement.contains(event.target);\r\n    if (!clickedInside) {\r\n      this.hideCustomTooltip();\r\n    }\r\n  }\r\n  @HostListener('document:scroll', ['$event'])\r\n  onDocumentScroll(event: Event): void {\r\n    this.hideCustomTooltip();\r\n  }\r\n}\r\n",
            "styleUrl": "./monthly-exposure-chart.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 28,
                "jsdoctags": [
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit",
                "OnDestroy",
                "AfterViewInit"
            ],
            "templateData": "<div class=\"exposer-chart\">\r\n    <!-- Tooltip Container -->\r\n    <div id=\"custom-tooltip\" class=\"monthly-exposer-tooltip\" style=\"display: none;\"></div>\r\n    <div class=\"legends-rm-exposure\">\r\n      <label class=\"title\"> <div class=\"legends-exposure\"></div> Exposure</label>\r\n      <label class=\"title\"> <div class=\"recommended-hedging\"></div>Recommended hedging</label>\r\n      <label class=\"title\"> <div class=\"actual-hedging\"></div> Actual hedging</label>\r\n    </div>\r\n    <!-- ApexCharts Component -->\r\n    <div class=\"chart-wrapper\">\r\n      <apx-chart\r\n       *ngIf=\"paginatedSeries?.length\"\r\n        [series]=\"paginatedSeries\"\r\n        [chart]=\"chartOptions\"\r\n        [xaxis]=\"xAxisOptions\"\r\n        [yaxis]=\"yAxisOptions\"\r\n        [stroke]=\"strokeOptions\"\r\n        [dataLabels]=\"dataLabelsOptions\"\r\n        [legend]=\"legendOptions\"\r\n        [tooltip]=\"tooltipOptions\"\r\n        [plotOptions]=\"plotOptions\"\r\n        [fill]=\"fillOptions\">\r\n      </apx-chart>\r\n      <div class=\"pagination-wrap\" *ngIf=\"chartSeries[1].data.length > 12\">\r\n        <mat-paginator id=\"paginationMonthlyExposureChart\" [pageSize]=\"12\" [length]=\"chartSeries[1].data.length\" (page)=\"onPageChange($event)\" aria-label=\"Select page of users\"></mat-paginator>\r\n      </div>\r\n    </div>\r\n  </div>\r\n  "
        },
        {
            "name": "PageComponent",
            "id": "component-PageComponent-79bfb042a722f49579739dfd01d8f1b67681d0272a72a283c14edeb22f0462775c80ba4f7c1eb0fa4bd5fa1844083da0140980e75b5500cd98cc26421ec6d569",
            "file": "src/stories/page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-page",
            "styleUrls": [
                "./page.css"
            ],
            "styles": [],
            "template": "<article>  <storybook-header\n    [user]=\"user\"\n    (onLogout)=\"doLogout()\"\n    (onLogin)=\"doLogin()\"\n    (onCreateAccount)=\"doCreateAccount()\"\n  ></storybook-header>\n  <section class=\"storybook-page\">\n    <h2>Pages in Storybook</h2>\n    <p>\n      We recommend building UIs with a\n      <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n        <strong>component-driven</strong>\n      </a>\n      process starting with atomic components and ending with pages.\n    </p>\n    <p>\n      Render pages with mock data. This makes it easy to build and review page states without\n      needing to navigate to them in your app. Here are some handy patterns for managing page data\n      in Storybook:\n    </p>\n    <ul>\n      <li>\n        Use a higher-level connected component. Storybook helps you compose such data from the\n        \"args\" of child component stories\n      </li>\n      <li>\n        Assemble data in the page component from your services. You can mock these services out\n        using Storybook.\n      </li>\n    </ul>\n    <p>\n      Get a guided tutorial on component-driven development at\n      <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n        Storybook tutorials\n      </a>\n      . Read more in the\n      <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n      .\n    </p>\n    <div class=\"tip-wrapper\">\n      <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n      <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n        <g fill=\"none\" fillRule=\"evenodd\">\n          <path\n            d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n            id=\"a\"\n            fill=\"#999\"\n          />\n        </g>\n      </svg>\n      Viewports addon in the toolbar\n    </div>\n  </section>\n</article>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "User | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 69
                }
            ],
            "methodsClass": [
                {
                    "name": "doCreateAccount",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 79,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "doLogin",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "doLogout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "HeaderComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { HeaderComponent } from './header.component';\r\nimport type { User } from './user';\r\n\r\n@Component({\r\n  selector: 'storybook-page',\r\n  standalone: true,\r\n  imports: [CommonModule, HeaderComponent],\r\n  template: `<article>\r\n  <storybook-header\r\n    [user]=\"user\"\r\n    (onLogout)=\"doLogout()\"\r\n    (onLogin)=\"doLogin()\"\r\n    (onCreateAccount)=\"doCreateAccount()\"\r\n  ></storybook-header>\r\n  <section class=\"storybook-page\">\r\n    <h2>Pages in Storybook</h2>\r\n    <p>\r\n      We recommend building UIs with a\r\n      <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n        <strong>component-driven</strong>\r\n      </a>\r\n      process starting with atomic components and ending with pages.\r\n    </p>\r\n    <p>\r\n      Render pages with mock data. This makes it easy to build and review page states without\r\n      needing to navigate to them in your app. Here are some handy patterns for managing page data\r\n      in Storybook:\r\n    </p>\r\n    <ul>\r\n      <li>\r\n        Use a higher-level connected component. Storybook helps you compose such data from the\r\n        \"args\" of child component stories\r\n      </li>\r\n      <li>\r\n        Assemble data in the page component from your services. You can mock these services out\r\n        using Storybook.\r\n      </li>\r\n    </ul>\r\n    <p>\r\n      Get a guided tutorial on component-driven development at\r\n      <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n        Storybook tutorials\r\n      </a>\r\n      . Read more in the\r\n      <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\r\n      .\r\n    </p>\r\n    <div class=\"tip-wrapper\">\r\n      <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\r\n      <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\r\n        <g fill=\"none\" fillRule=\"evenodd\">\r\n          <path\r\n            d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\r\n            id=\"a\"\r\n            fill=\"#999\"\r\n          />\r\n        </g>\r\n      </svg>\r\n      Viewports addon in the toolbar\r\n    </div>\r\n  </section>\r\n</article>`,\r\n  styleUrls: ['./page.css'],\r\n})\r\nexport class PageComponent {\r\n  user: User | null = null;\r\n\r\n  doLogout() {\r\n    this.user = null;\r\n  }\r\n\r\n  doLogin() {\r\n    this.user = { name: 'Jane Doe' };\r\n  }\r\n\r\n  doCreateAccount() {\r\n    this.user = { name: 'Jane Doe' };\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-page {\r\n  margin: 0 auto;\r\n  padding: 48px 20px;\r\n  max-width: 600px;\r\n  color: #333;\r\n  font-size: 14px;\r\n  line-height: 24px;\r\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\r\n}\r\n\r\n.storybook-page h2 {\r\n  display: inline-block;\r\n  vertical-align: top;\r\n  margin: 0 0 4px;\r\n  font-weight: 700;\r\n  font-size: 32px;\r\n  line-height: 1;\r\n}\r\n\r\n.storybook-page p {\r\n  margin: 1em 0;\r\n}\r\n\r\n.storybook-page a {\r\n  color: inherit;\r\n}\r\n\r\n.storybook-page ul {\r\n  margin: 1em 0;\r\n  padding-left: 30px;\r\n}\r\n\r\n.storybook-page li {\r\n  margin-bottom: 8px;\r\n}\r\n\r\n.storybook-page .tip {\r\n  display: inline-block;\r\n  vertical-align: top;\r\n  margin-right: 10px;\r\n  border-radius: 1em;\r\n  background: #e7fdd8;\r\n  padding: 4px 12px;\r\n  color: #357a14;\r\n  font-weight: 700;\r\n  font-size: 11px;\r\n  line-height: 12px;\r\n}\r\n\r\n.storybook-page .tip-wrapper {\r\n  margin-top: 40px;\r\n  margin-bottom: 40px;\r\n  font-size: 13px;\r\n  line-height: 20px;\r\n}\r\n\r\n.storybook-page .tip-wrapper svg {\r\n  display: inline-block;\r\n  vertical-align: top;\r\n  margin-top: 3px;\r\n  margin-right: 4px;\r\n  width: 12px;\r\n  height: 12px;\r\n}\r\n\r\n.storybook-page .tip-wrapper svg path {\r\n  fill: #1ea7fd;\r\n}\r\n",
                    "styleUrl": "./page.css"
                }
            ],
            "stylesData": "",
            "extends": []
        },
        {
            "name": "RiskEstimateChartComponent",
            "id": "component-RiskEstimateChartComponent-98bdb5d2716dabeb08ca5fefa8f46ad2dbfba89024e7ebb5dff3212146c01c41b1d95a0ead7e0826554708ccdfac9223899170d86be1edb59ea14175a43fca0c",
            "file": "src/app/risk-dashboard/components/dashboard/components/risk-estimate-chart/risk-estimate-chart.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-risk-estimate-chart",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./risk-estimate-chart.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "annualLoss",
                    "defaultValue": "'₪4,476,001.2'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "avgbenchmarkloss",
                    "defaultValue": "'₪3,170,001.2'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 32,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "avginitialloss",
                    "defaultValue": "'₪5,220,001.2'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 31,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "avgmyloss",
                    "defaultValue": "'₪5,220,001.2'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 33,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "benchmarkloss",
                    "defaultValue": "'₪2,685,001.2'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "benchmarkRotate",
                    "defaultValue": "65",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "initialloss",
                    "defaultValue": "'₪4,476,001.2'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "myloss",
                    "defaultValue": "'₪4,476,001.2'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 30,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "selectedYear",
                    "defaultValue": "'Y10'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "totalRiskLevel",
                    "defaultValue": "'HIGH'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "graphtooltip",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NgbTooltip",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'graphtooltip', {static: false}"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "MatFormFieldModule",
                    "type": "module"
                },
                {
                    "name": "MatSelectModule",
                    "type": "module"
                },
                {
                    "name": "MatCardModule",
                    "type": "module"
                },
                {
                    "name": "MatTableModule",
                    "type": "module"
                },
                {
                    "name": "MatButtonModule",
                    "type": "module"
                },
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "NgbTooltipModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { Component, Input, ViewChild } from '@angular/core';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatCardModule } from '@angular/material/card';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { MatTableModule } from '@angular/material/table';\r\nimport { NgbTooltip, NgbTooltipModule } from '@ng-bootstrap/ng-bootstrap';\r\n\r\n@Component({\r\n  selector: 'app-risk-estimate-chart',\r\n  imports: [MatFormFieldModule,\r\n    MatSelectModule,\r\n    MatCardModule,\r\n    MatTableModule,\r\n    MatButtonModule,\r\n    CommonModule,\r\n    NgbTooltipModule],\r\n  templateUrl: './risk-estimate-chart.component.html',\r\n  styleUrl: './risk-estimate-chart.component.scss'\r\n})\r\nexport class RiskEstimateChartComponent {\r\n  @ViewChild('graphtooltip', { static: false }) graphtooltip!: NgbTooltip;\r\n  @Input() selectedYear: string = 'Y10';\r\n  @Input() totalRiskLevel: string = 'HIGH';\r\n  @Input() benchmarkRotate: number = 65;\r\n  @Input() annualLoss: string = '₪4,476,001.2';\r\n  @Input() initialloss: string = '₪4,476,001.2';\r\n  @Input() benchmarkloss: string = '₪2,685,001.2';\r\n  @Input() myloss: string = '₪4,476,001.2';\r\n  @Input() avginitialloss: string = '₪5,220,001.2';\r\n  @Input() avgbenchmarkloss: string = '₪3,170,001.2';\r\n  @Input() avgmyloss: string = '₪5,220,001.2';\r\n  ngAfterViewInit(): void {\r\n    setTimeout(() => {\r\n      this.graphtooltip.open(); // Open the tooltip by default\r\n    }, 100);\r\n  }\r\n  \r\n  public get riskColor() : string {\r\n    if(this.totalRiskLevel == 'HIGH'){\r\n      return '#d92d20';\r\n    }else if(this.totalRiskLevel == 'MEDIUM'){\r\n      return '#DC6803'\r\n    }else if(this.totalRiskLevel == 'LOW'){\r\n      return '#079455'\r\n    }else{\r\n      return '#d92d20'\r\n    }\r\n  }\r\n  public get benchmark() : string {\r\n    if(this.totalRiskLevel == 'HIGH'){\r\n      return 'above';\r\n    }else if(this.totalRiskLevel == 'MEDIUM'){\r\n      return 'similar'\r\n    }else if(this.totalRiskLevel == 'LOW'){\r\n      return 'below'\r\n    }else{\r\n      return 'above'\r\n    }\r\n  }\r\n  public get riskangle() : number {\r\n    if(this.totalRiskLevel == 'HIGH'){\r\n      return 130;\r\n    }else if(this.totalRiskLevel == 'MEDIUM'){\r\n      return 66\r\n    }else if(this.totalRiskLevel == 'LOW'){\r\n      return 0\r\n    }else{\r\n      return 130\r\n    }\r\n  }\r\n}\r\n",
            "styleUrl": "./risk-estimate-chart.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "accessors": {
                "riskColor": {
                    "name": "riskColor",
                    "getSignature": {
                        "name": "riskColor",
                        "type": "string",
                        "returnType": "string",
                        "line": 40
                    }
                },
                "benchmark": {
                    "name": "benchmark",
                    "getSignature": {
                        "name": "benchmark",
                        "type": "string",
                        "returnType": "string",
                        "line": 51
                    }
                },
                "riskangle": {
                    "name": "riskangle",
                    "getSignature": {
                        "name": "riskangle",
                        "type": "number",
                        "returnType": "number",
                        "line": 62
                    }
                }
            },
            "templateData": "<div class=\"loader-wrapper\">\r\n    <div class=\"risk-estimate-wrapper\">\r\n        <div class=\"estimate-head\">\r\n            <h3 class=\"head-title\">What is my risk estimate?</h3>\r\n            <p class=\"head-sub\">You are at risk when the <span class=\"risk-up\">USD goes up </span> <img src=\"images/cross-arrow-icon.svg\"\r\n                    alt=\"Arrow\"></p>\r\n        </div>\r\n        <ng-template #graphtool>\r\n            Benchmark\r\n        </ng-template>\r\n        <ng-template #minlose>\r\n            Minimal expected loss under extreme conditions\r\n        </ng-template>\r\n        <ng-template #avglose>\r\n            Average expected loss under extreme conditions\r\n        </ng-template>\r\n\r\n        <div class=\"risk-esti-chart-wrapper\">\r\n            <div class=\"chart-inner\">\r\n                <img src=\"images/risk-estimate-circle.svg\" alt=\"Risk Estimate Circle\">\r\n                <div class=\"benchmark-circle\" [style.transform]=\"'rotate(' + benchmarkRotate + 'deg)'\">\r\n                    <div class=\"benchmark-pointer\"\r\n                        [ngbTooltip]=\"graphtool\"\r\n                        [autoClose]=\"false\"\r\n                        #graphtooltip=\"ngbTooltip\"\r\n                        placement=\"top\"\r\n                        triggers=\"manual\"\r\n                        tooltipClass=\"risk-dash-tooltip-benchmark\"\r\n                        container=\"body\">\r\n                      <svg width=\"17\" height=\"25\" viewBox=\"0 0 17 25\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                        <path\r\n                          d=\"M16.4238 0.703854L14.4981 24.824L11.8892 24.6157L13.815 0.495527L16.4238 0.703854ZM9.89539 0.287289L9.25246 24.4758L6.636 24.4062L7.27907 0.217773L9.89539 0.287289ZM3.94499 24.4062L1.32867 24.4758L0.685593 0.287289L3.30206 0.217773L3.94499 24.4062Z\"\r\n                          fill=\"#344054\" />\r\n                      </svg>\r\n                    </div>\r\n                  </div>\r\n                <div class=\"chart-circle\" [style.transform]=\"'rotate(' + riskangle + 'deg)'\">\r\n                    <svg class=\"circle-pointer\" width=\"41\" height=\"74\" viewBox=\"0 0 41 74\" fill=\"none\"\r\n                        xmlns=\"http://www.w3.org/2000/svg\">\r\n                        <path d=\"M37.9327 28.5146L31.4657 37.682L26.7599 27.4977L37.9327 28.5146Z\" [style.fill]=\"riskColor\" />\r\n                        <path d=\"M36.7194 71.1411C36.7194 42.6422 23.2795 17.4227 2.66016 2.0228\" [style.stroke]=\"riskColor\"\r\n                            stroke-width=\"4\" stroke-miterlimit=\"10\" stroke-linecap=\"round\" />\r\n                    </svg>\r\n                </div>\r\n\r\n                <div class=\"chart-info\">\r\n                    <div class=\"desc\">\r\n                        <h4 class=\"risk-level-text\">Total Risk Level</h4>\r\n                        <h3 class=\"risk-label\" [style.color]=\"riskColor\">{{totalRiskLevel}}</h3>\r\n                        <p class=\"info\">and <span [style.color]=\"riskColor\">{{benchmark}}</span> the benchmark</p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n        <div class=\"risk-estimate-info-wrapper\">\r\n            <div class=\"lose-info\">\r\n                <h4 class=\"info-title\"> <img src=\"images/risk-warn-icon.svg\" alt=\"Warning\">How much can I lose?</h4>\r\n                <div class=\"lose-desc\">\r\n                    <p><span class=\"desc\">Under extreme conditions, </span> <span class=\"every\">once every </span>\r\n                        <mat-select class=\"year-selector\" [(value)]=\"selectedYear\" panelClass=\"risk-estimate-chart-ddl\">\r\n                            <mat-option value=\"Y5\">5 years</mat-option>\r\n                            <mat-option value=\"Y10\" selected>10 years</mat-option>\r\n                            <mat-option value=\"Y20\">20 years</mat-option>\r\n                        </mat-select>,\r\n                    </p>\r\n                    <p class=\"annual-lose\">your annual loss will exceed <span>{{annualLoss}}</span></p>\r\n                </div>\r\n            </div>\r\n\r\n            <div class=\"lose-wrapper\">\r\n                <div class=\"min-expected-lose\">\r\n                    <h4 class=\"item-title\">Minimum expected lost <img src=\"images/annual-title-help-icon.svg\"\r\n                            alt=\"Help\" [ngbTooltip]=\"minlose\" placement=\"top\" tooltipClass=\"risk-dash-tooltip--rm\"></h4>\r\n\r\n                    <div class=\"lose-item\">\r\n                        <h5 class=\"exceed-title\">Initial loss level</h5>\r\n                        <div class=\"initial lose-bar\" style=\"width: 100%\" \r\n                        ngbTooltip=\"$4,476\" placement=\"top\"\r\n                        tooltipClass=\"risk-dash-tooltip--rm\">{{initialloss}}</div>\r\n                    </div>\r\n\r\n                    <div class=\"lose-item\">\r\n                        <h5 class=\"exceed-title\">Benchmark loss level</h5>\r\n                        <div class=\"benchmark lose-bar\" style=\"width: 80%\"\r\n                        ngbTooltip=\"$3,476\" placement=\"top\"\r\n                        tooltipClass=\"risk-dash-tooltip--rm\">{{benchmarkloss}}</div>\r\n                    </div>\r\n\r\n                    <div class=\"lose-item\">\r\n                        <h5 class=\"exceed-title\">My loss level</h5>\r\n                        <div class=\"my lose-bar\" style=\"width: 100%\"\r\n                        ngbTooltip=\"$4,476\" placement=\"top\"\r\n                        tooltipClass=\"risk-dash-tooltip--rm\">{{myloss}}</div>\r\n                    </div>\r\n                </div>\r\n                \r\n                <div class=\"average-expected-lose\">\r\n                    <h4 class=\"item-title\">Average expected lost <img src=\"images/annual-title-help-icon.svg\"\r\n                        alt=\"Help\" [ngbTooltip]=\"avglose\" placement=\"auto\" tooltipClass=\"risk-dash-tooltip--rm\"></h4>\r\n\r\n                    <div class=\"lose-item\">\r\n                        <div class=\"initial lose-bar\" style=\"width: 100%\"\r\n                        ngbTooltip=\"$4,476\" placement=\"top\"\r\n                        tooltipClass=\"risk-dash-tooltip--rm\">{{avginitialloss}}</div>\r\n                    </div>\r\n\r\n                    <div class=\"lose-item\">\r\n                        <div class=\"benchmark lose-bar\" style=\"width: 80%\"\r\n                        ngbTooltip=\"$4,476\" placement=\"top\"\r\n                        tooltipClass=\"risk-dash-tooltip--rm\">{{avgbenchmarkloss}}</div>\r\n                    </div>\r\n\r\n                    <div class=\"lose-item\">\r\n                        <div class=\"my lose-bar\" style=\"width: 95%\"\r\n                        ngbTooltip=\"$4,476\" placement=\"top\"\r\n                        tooltipClass=\"risk-dash-tooltip--rm\">{{avgmyloss}}</div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>"
        },
        {
            "name": "SidebarComponent",
            "id": "component-SidebarComponent-43fd4c6f3583b518adcbea6bbf7401b63359e6f1822a0e499955d42a9c5dcaf3b0ca51f243f0a3f1305819f02a7a26df6ed4746e9375223673763dc63cbc4373",
            "file": "src/app/risk-dashboard/components/sidebar/sidebar.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-sidebar",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "sidebar.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "sidebar",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'sidebar'"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "hideSidebar",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "openSidebar",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "MatExpansionModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, ElementRef, ViewChild } from '@angular/core';\r\nimport { MatExpansionModule } from '@angular/material/expansion';\r\nexport interface MenuItem {\r\n  icon: string;\r\n  label: string;\r\n  badge?: string;\r\n  highlight?: boolean;\r\n}\r\n\r\n@Component({\r\n  selector: 'app-sidebar',\r\n  imports: [MatExpansionModule],\r\n  templateUrl:'sidebar.component.html',\r\n  styleUrl: 'sidebar.component.scss'\r\n})\r\nexport class SidebarComponent {\r\n  @ViewChild('sidebar') sidebar!: ElementRef;\r\n  openSidebar() {\r\n    this.sidebar.nativeElement.classList.add('active');\r\n    document.body.classList.add('overflow-hidden');\r\n  }\r\n\r\n  hideSidebar() {\r\n    this.sidebar.nativeElement.classList.remove('active');\r\n    document.body.classList.remove('overflow-hidden');\r\n  }\r\n}\r\n",
            "styleUrl": "sidebar.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"sidebar-background\" #sidebar>\r\n  <div class=\"sidebar\">\r\n    <!-- Logo -->\r\n    <div class=\"close-btn\">\r\n      <button class=\"men-close-btn\" (click)=\"hideSidebar()\">\r\n        <img src=\"images/close-icon.svg\" class=\"close-icn\" alt=\"close\">\r\n      </button>\r\n    </div>\r\n    <div class=\"side-bar-wrapper\">\r\n      <div class=\"logo\">\r\n        <img src=\"images/okoora-logo.svg\" class=\"main-logo\" alt=\"Logo\" />\r\n        <img src=\"images/logo-abcm-small.svg\" class=\"small-logo\" alt=\"Logo\" />\r\n      </div>\r\n      <div class=\"menu-list\">\r\n        <div class=\"first-divider\"></div>\r\n        <!-- Navigation -->\r\n        <a class=\"menu-item\"><i class=\"icon-dashboard\"></i> <span class=\"menu-text\">Dashboard</span></a>\r\n        <a class=\"menu-item\"><i class=\"icon-payments\"></i> <span class=\"menu-text\">Payments</span></a>\r\n        <a class=\"menu-item\"><i class=\"icon-funds\"></i> <span class=\"menu-text\">Received Funds</span></a>\r\n        <a class=\"menu-item\"><i class=\"icon-purchases\"></i> <span class=\"menu-text\">Purchases</span></a>\r\n        <a class=\"menu-item active\">\r\n          <i class=\"icon-risk\"></i> <span class=\"menu-text\">Risk Manager</span> <span class=\"new-badge\">New</span>\r\n        </a>\r\n        <div class=\"second-divider\"></div>\r\n        <mat-accordion id=\"navReports\">\r\n          <mat-expansion-panel class=\"shadow-none mb-3 reports-expansion-panel\">\r\n            <mat-expansion-panel-header id=\"navReportsExpansion\" class=\"header-reports\">\r\n              <mat-panel-title class=\"panel-item\">\r\n                <i class=\"icon-reports\"></i> <span class=\"menu-text\">Reports</span>\r\n              </mat-panel-title>\r\n            </mat-expansion-panel-header>\r\n            <mat-panel-description class=\"sub-tabs-reports\">\r\n              <a id=\"all-transactions-link\">\r\n                <p class=\"submenu-name\">All transactions</p>\r\n              </a>\r\n              <a id=\"smartConvert-link\">\r\n                <p class=\"submenu-name\">Period end balance</p>\r\n              </a>\r\n              <hr class=\"bottom-line\">\r\n            </mat-panel-description>\r\n          </mat-expansion-panel>\r\n        </mat-accordion>\r\n        <a class=\"menu-item\"><i class=\"icon-alerts\"></i> <span class=\"menu-text\">Alerts</span></a>\r\n        <a class=\"menu-item\"><i class=\"icon-contacts\"></i> <span class=\"menu-text\">Contacts</span></a>\r\n        <a class=\"menu-item\"><i class=\"icon-help\"></i> <span class=\"menu-text\">Help</span></a>\r\n        <a class=\"menu-item marketplace\">\r\n          <i class=\"market-place\"></i> <span class=\"menu-text\">Marketplace</span>\r\n        </a>\r\n        <button id=\"downloadApp\" class=\"download-app\">\r\n          Download App\r\n        </button>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>"
        },
        {
            "name": "TagComponent",
            "id": "component-TagComponent-4b75c14f8ca210ef7389413375c35c8fc330c28db75c905d24c47824da468261bdeaa6a5ce28835a97287c38f8bcfef1ed5a9b0cd03006dee1ef9423ccbfc1d6",
            "file": "src/app/tag/tag.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-tag",
            "styleUrls": [
                "tag.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "tag.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "label",
                    "defaultValue": "'Label'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "removable",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "\"small\" | \"medium\" | \"large\"",
                    "decorators": []
                },
                {
                    "name": "state",
                    "defaultValue": "'inactive'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "\"inactive\" | \"active\" | \"removable\" | \"deactivated\"",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "onClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "removeTag",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { Component, Input } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-tag',\r\n  imports: [CommonModule],\r\n  templateUrl:'tag.component.html',\r\n  styleUrls: ['tag.component.scss']\r\n})\r\nexport class TagComponent {\r\n  @Input() label: string = 'Label';\r\n  @Input() size: 'small' | 'medium' | 'large' = 'medium';\r\n  @Input() state: 'inactive' | 'active' | 'removable' | 'deactivated' = 'inactive';\r\n  @Input() removable: boolean = false;\r\n\r\n  onClick() {\r\n    if (this.state === 'deactivated') {\r\n      return;\r\n    }\r\n    console.log('Tag clicked:', this.label);\r\n  }\r\n\r\n  removeTag(event: Event) {\r\n    event.stopPropagation();\r\n    console.log('Tag removed:', this.label);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".tag {\r\n    display: inline-flex;\r\n    align-items: center;\r\n    padding:7px;\r\n    border-radius: 50px;\r\n    font-size: 14px;\r\n    font-family: 'Heebo', sans-serif;\r\n    font-weight: 400;\r\n    line-height: 16px;\r\n    cursor: pointer;\r\n    transition: 0.3s;\r\n    width: auto;\r\n    min-width: 71px;\r\n    justify-content: center;\r\n}\r\n\r\n.small {\r\n    padding:7px;\r\n}\r\n\r\n.medium {\r\n    padding: 9px 17px;\r\n    min-width: 91px;\r\n}\r\n\r\n.large {\r\n    padding:12px 17px;\r\n    min-width: 91px;\r\n}\r\n\r\n.inactive {\r\n    border: 1px solid #2563EB;\r\n    background-color: #EFF6FF;\r\n    color: #111827;\r\n}\r\n\r\n.active {\r\n    background-color: #2947F2;\r\n    border: 1px solid #2947F2;\r\n    color: #fff;\r\n}\r\n\r\n.removable {\r\n    border: 1px solid #E5E7EB;\r\n    background: #fff;\r\n    color: #111827;\r\n}\r\n\r\n.deactivated {\r\n    background: #E5E7EB;\r\n    color: #D1D5DB;\r\n    border: 1px solid #E5E7EB;\r\n    pointer-events: none;\r\n}\r\n\r\n.close-btn {\r\n    background: none;\r\n    border: none;\r\n    margin-left: 10px;\r\n    cursor: pointer;\r\n    font-size: 10px;\r\n    width: 10px;\r\n    height: 10px;\r\n    position: relative;\r\n}\r\n\r\n.close-btn::before,\r\n.close-btn::after {\r\n    content: '';\r\n    position: absolute;\r\n    top: 50%;\r\n    left: 50%;\r\n    width: 9px;\r\n    height: 2px;\r\n    background-color: #111827;\r\n    transform: translate(-50%, -50%) rotate(45deg);\r\n}\r\n\r\n.close-btn::after {\r\n    transform: translate(-50%, -50%) rotate(-45deg);\r\n}\r\n\r\n.inactive {\r\n    .close-btn::before,\r\n    .close-btn::after {\r\n        background-color: #111827;\r\n    }\r\n}\r\n.active {\r\n    .close-btn::before,\r\n    .close-btn::after {\r\n        background-color: #fff;\r\n    }\r\n}\r\n.removable {\r\n    .close-btn::before,\r\n    .close-btn::after {\r\n        background-color: #2947F2;\r\n    }\r\n}\r\n.deactivated {\r\n    .close-btn::before,\r\n    .close-btn::after {\r\n        background-color: #D1D5DB;\r\n    }\r\n}\r\n",
                    "styleUrl": "tag.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"tag-container\">\r\n    <button class=\"tag\" [ngClass]=\"[size, state]\" (click)=\"onClick()\">\r\n        {{ label }}\r\n        <span *ngIf=\"removable\" class=\"close-btn\" (click)=\"removeTag($event)\"></span>\r\n    </button>\r\n</div>"
        },
        {
            "name": "TradeViewChartComponent",
            "id": "component-TradeViewChartComponent-6876426098e969e790f607af79b194a22d07aa6b9222067bfad9571439a180bc3d5904b9b8e8afb2b2b7377a45eb8c5d3919de0ea8e1aa91c8ca8f43ee5ff422",
            "file": "src/app/risk-dashboard/components/dashboard/components/trade-view-chart/trade-view-chart.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-trade-view-chart",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./trade-view-chart.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "baseCurrency",
                    "defaultValue": "\"ILS\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "firstCurrency",
                    "defaultValue": "\"USD\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "selectedPeriod",
                    "defaultValue": "'1M'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "tradeRate",
                    "defaultValue": "3.4324",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_renderer2",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Renderer2",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "cashFlowExposureData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "currencyPair",
                    "defaultValue": "this.firstCurrency + this.baseCurrency",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "tradeViewChartRate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "tradingSource",
                    "defaultValue": "{\r\n    USDILS: \"SAXO:USDILS\",\r\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "methodsClass": [
                {
                    "name": "getExposureDetails",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "loadTradingViewScripts",
                    "args": [
                        {
                            "name": "currencyPair",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "period",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "currencyPair",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "period",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onPeriodChange",
                    "args": [
                        {
                            "name": "period",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "period",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "MatSelectModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectorRef, Component, Input, Renderer2, RendererFactory2 } from '@angular/core';\r\nimport { MatSelectModule } from '@angular/material/select';\r\n\r\n@Component({\r\n  selector: 'app-trade-view-chart',\r\n  imports: [MatSelectModule],\r\n  templateUrl: './trade-view-chart.component.html',\r\n  styleUrl: './trade-view-chart.component.scss'\r\n})\r\nexport class TradeViewChartComponent {\r\n  private _renderer2: Renderer2;\r\n  tradingSource: any = {\r\n    USDILS: \"SAXO:USDILS\",\r\n  };\r\n  @Input() tradeRate: any = 3.4324;\r\n  @Input() firstCurrency: string = \"USD\";\r\n  @Input() baseCurrency: string = \"ILS\";\r\n  currencyPair: string = this.firstCurrency + this.baseCurrency;\r\n  @Input() selectedPeriod: string = '1M';\r\n  tradeViewChartRate: any;\r\n  cashFlowExposureData: any;\r\n\r\n  constructor(private cd: ChangeDetectorRef, rendererFactory: RendererFactory2) {\r\n    this._renderer2 = rendererFactory.createRenderer(null, null);\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.getExposureDetails();\r\n  }\r\n\r\n  getExposureDetails() {\r\n    this.tradingSource = this.tradingSource;\r\n    this.loadTradingViewScripts(this.currencyPair, this.selectedPeriod);\r\n  }\r\n\r\n\r\n  onPeriodChange(period: string) {\r\n    this.selectedPeriod = period;\r\n    this.loadTradingViewScripts(this.currencyPair, period);\r\n  }\r\n\r\n  loadTradingViewScripts(currencyPair: string, period: string) {\r\n    const existingScript = document.getElementById(\"tradingViewScript\");\r\n    if (existingScript) {\r\n      existingScript.remove();\r\n    }\r\n\r\n    const script = this._renderer2.createElement(\"script\");\r\n    script.id = \"tradingViewScript\";\r\n    script.src = \"https://s3.tradingview.com/external-embedding/embed-widget-symbol-overview.js\";\r\n    script.type = \"text/javascript\";\r\n    script.async = true;\r\n    script.text = `\r\n        {\r\n          \"symbols\": [\r\n            [\r\n              \"${this.tradingSource[currencyPair]}|${period}\"\r\n            ]\r\n          ],\r\n          \"chartOnly\": true,\r\n          \"locale\": \"en\",\r\n          \"colorTheme\": \"light\",\r\n          \"autosize\": true,\r\n          \"showVolume\": false,\r\n          \"hideMA\": true,\r\n          \"hideDateRanges\": true,\r\n          \"hideMarketStatus\": true,\r\n          \"hideSymbolLogo\": false,\r\n          \"scalePosition\": \"right\",\r\n          \"scaleMode\": \"Normal\",\r\n          \"fontFamily\": \"-apple-system, BlinkMacSystemFont, Trebuchet MS, Roboto, Ubuntu, sans-serif\",\r\n          \"fontSize\": \"10\",\r\n          \"noTimeScale\": false,\r\n          \"valuesTracking\": \"1\",\r\n          \"changeMode\": \"price-and-percent\",\r\n          \"chartType\": \"area\",\r\n          \"maLineColor\": \"#089981\",\r\n          \"maLineWidth\": 1,\r\n          \"maLength\": 9,\r\n          \"lineWidth\": 1,\r\n          \"lineType\": 0,\r\n          \"lineColor\": \"#089981\",\r\n          \"topColor\": \"rgba(8,153,129, 0)\",\r\n          \"bottomColor\": \"rgba(8,153,129, 0)\",\r\n          \"isTransparent\": true\r\n        }`;\r\n\r\n    const chartContainer = document.getElementById(\"tradeViewChart\");\r\n    this._renderer2.appendChild(chartContainer, script);\r\n    this.cd.detectChanges();\r\n  }\r\n}\r\n",
            "styleUrl": "./trade-view-chart.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "rendererFactory",
                        "type": "RendererFactory2",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 21,
                "jsdoctags": [
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "rendererFactory",
                        "type": "RendererFactory2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<div class=\"trading-view-chart-container\">\r\n    <div class=\"tradeview-details\">\r\n      <div class=\"pair-container\">\r\n        <h3>{{ firstCurrency }}/{{ baseCurrency }}</h3>\r\n        <mat-select class=\"month-selector\" [(value)]=\"selectedPeriod\" panelClass=\"trading-view-chart-ddl\" placeholder=\"Select month\" (selectionChange)=\"onPeriodChange($event.value)\">\r\n          <mat-option value=\"1D\">1 Day</mat-option>\r\n          <mat-option value=\"1M\">1 Month</mat-option>\r\n          <mat-option value=\"3M\">3 Months</mat-option>\r\n          <mat-option value=\"1Y\">1 Year</mat-option>\r\n          <mat-option value=\"60M\">5 Years</mat-option>\r\n          <mat-option value=\"all\">All</mat-option>\r\n        </mat-select>\r\n      </div>\r\n      <h2>{{tradeRate}} <span>{{ baseCurrency }}</span></h2>\r\n    </div>\r\n    <div id=\"tradeViewChart\">\r\n    </div>\r\n  </div>"
        },
        {
            "name": "VolatilityChartComponent",
            "id": "component-VolatilityChartComponent-995dbe6b9095db8052d03d02485ab9687baae059c2207ee14c740293beff5f3cde7caf1d74d678b2b6e6e41158251f5b3758550fe660a8c45e89e8f8ac4867ef",
            "file": "src/app/risk-dashboard/components/dashboard/components/volatility-chart/volatility-chart.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-volatility-chart",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./volatility-chart.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "currentIndicatorValue",
                    "defaultValue": "11",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "maxVolatility",
                    "defaultValue": "15",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "minVolatility",
                    "defaultValue": "7",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "volatilityRank",
                    "defaultValue": "'volatile'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "currentDegree",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "degree",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "displayIndicatorValue",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "methodsClass": [
                {
                    "name": "animateIndicatorValue",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "animateNeedle",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "calculateDegree",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "NgbTooltipModule",
                    "type": "module"
                },
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { Component, Input } from '@angular/core';\r\nimport { NgbTooltipModule } from '@ng-bootstrap/ng-bootstrap';\r\n\r\n@Component({\r\n  selector: 'app-volatility-chart',\r\n  imports: [NgbTooltipModule, CommonModule],\r\n  templateUrl: './volatility-chart.component.html',\r\n  styleUrl: './volatility-chart.component.scss'\r\n})\r\nexport class VolatilityChartComponent {\r\n  @Input() currentIndicatorValue: number = 11;\r\n  displayIndicatorValue: number = 0;  // Will start from minVolatility and increment to currentIndicatorValue\r\n  @Input() minVolatility: number = 7;\r\n  @Input() maxVolatility: number = 15;\r\n\r\n  degree: number = 0;         // The target degree based on calculation\r\n  currentDegree: number = 0;  // This will incrementally change for smooth animation\r\n  @Input() volatilityRank: string = 'volatile';\r\n\r\n  ngOnInit() {\r\n    this.calculateDegree();\r\n    this.animateNeedle();\r\n    this.animateIndicatorValue();\r\n  }\r\n\r\n  calculateDegree() {\r\n    if (this.minVolatility && this.maxVolatility && this.currentIndicatorValue) {\r\n      // Calculate the degree based on the formula\r\n      this.degree = ((this.currentIndicatorValue - this.minVolatility) /\r\n        (this.maxVolatility - this.minVolatility)) * 180;\r\n    }\r\n  }\r\n\r\n  animateNeedle() {\r\n    const step = (this.degree - this.currentDegree) / 60; // Smooth steps\r\n    const interval = setInterval(() => {\r\n      if (Math.abs(this.currentDegree - this.degree) < Math.abs(step)) {\r\n        this.currentDegree = this.degree;\r\n        clearInterval(interval);  // Stop the animation when we reach the target degree\r\n      } else {\r\n        this.currentDegree += step;\r\n      }\r\n    }, 3);  // Update every ~16ms for smooth transition\r\n  }\r\n\r\n  animateIndicatorValue() {\r\n    const step = (this.currentIndicatorValue - this.displayIndicatorValue) / 60;  // Smooth steps for percentage increment\r\n    const interval = setInterval(() => {\r\n      if (Math.abs(this.displayIndicatorValue - this.currentIndicatorValue) < Math.abs(step)) {\r\n        this.displayIndicatorValue = this.currentIndicatorValue;\r\n        clearInterval(interval);  // Stop animation when we reach the target percentage\r\n      } else {\r\n        this.displayIndicatorValue += step;\r\n      }\r\n    }, 3);  // Update every 50ms for slower number increment\r\n  }\r\n\r\n}\r\n",
            "styleUrl": "./volatility-chart.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"vola-chart-wrapper\">\r\n    <div class=\"chart-desc\">\r\n      <div class=\"chart-head\">\r\n        <h5 class=\"info-title\">\r\n          <img class=\"title-img\" src=\"images/trending_down.svg\" alt=\"Volatility\" />\r\n          Volatility\r\n          <img src=\"images/annual-title-help-icon.svg\" \r\n               [ngbTooltip]=\"volatilityTool\"\r\n               placement=\"top-left\"\r\n               tooltipClass=\"risk-step3-tooltip--rm\" \r\n               class=\"title-tooltip\" />\r\n\r\n            <ng-template #volatilityTool>\r\n                Implied volatility measures the degree<br> of price fluctuations over time,<br> indicating the level of risk or uncertainty in the market\r\n            </ng-template>\r\n        </h5>\r\n      </div>\r\n      <div class=\"desc\">\r\n        <p>In the next few months the market is expected to be \r\n          <span [ngStyle]=\"{'color': volatilityRank.toLowerCase() === 'volatile' ? '#EE0C0C' : (volatilityRank.toLowerCase() === 'moderate' ? '#DAA61F' : '#079455')}\">\r\n            {{volatilityRank}}\r\n          </span>\r\n        </p>\r\n      </div>\r\n    </div>\r\n  \r\n    <div class=\"vola-chart\">\r\n      <div class=\"chart-inner\">\r\n        <img class=\"chart-round\" src=\"images/volatility-chart-img.svg\" alt=\"volatility_chart\" />\r\n        \r\n        <!-- Needle pointer with fixed rotation -->\r\n        <div class=\"indicator-wrap\" [style.transform]=\"'rotate(' + currentDegree + 'deg)'\">\r\n          <div class=\"pointer-wrap\">\r\n            <img class=\"pointer\" src=\"images/volatility-pointer.svg\" alt=\"volatility_chart\" />\r\n          </div>\r\n         \r\n          <div class=\"indicator-value\">\r\n            <p [style.transform]=\"'rotate(' + '-' + currentDegree + 'deg)'\"> \r\n              Current <span class=\"value\">{{currentIndicatorValue}}<span>%</span></span>\r\n            </p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n  \r\n      <div class=\"chart-info\">\r\n        <div class=\"info\">\r\n          <p class=\"year-text\">2 Years</p>\r\n          <p class=\"year-text\"><b>MIN</b> volatility</p>\r\n          <p class=\"per-text\">{{minVolatility == 0 ? 0 : minVolatility.toFixed(2) }}<span>%</span></p>\r\n        </div>\r\n        <div class=\"info right\">\r\n          <p class=\"year-text\">2 Years</p>\r\n          <p class=\"year-text\"><b>MAX</b> volatility</p>\r\n          <p class=\"per-text\">{{minVolatility == 0 ? 0 : maxVolatility.toFixed(2) }}<span>%</span></p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n  "
        }
    ],
    "modules": [],
    "miscellaneous": {
        "variables": [
            {
                "name": "appConfig",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/app.config.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ApplicationConfig",
                "defaultValue": "{\r\n  providers: [provideZoneChangeDetection({ eventCoalescing: true }), provideRouter(routes)]\r\n}"
            }
        ],
        "functions": [],
        "typealiases": [
            {
                "name": "ChartOptions",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/risk-dashboard/components/dashboard/components/momentum-indicator-chart/momentum-indicator-chart.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 187
            }
        ],
        "enumerations": [],
        "groupedVariables": {
            "src/app/app.config.ts": [
                {
                    "name": "appConfig",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/app.config.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ApplicationConfig",
                    "defaultValue": "{\r\n  providers: [provideZoneChangeDetection({ eventCoalescing: true }), provideRouter(routes)]\r\n}"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {},
        "groupedTypeAliases": {
            "src/app/risk-dashboard/components/dashboard/components/momentum-indicator-chart/momentum-indicator-chart.component.ts": [
                {
                    "name": "ChartOptions",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/risk-dashboard/components/dashboard/components/momentum-indicator-chart/momentum-indicator-chart.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 187
                }
            ]
        }
    },
    "routes": [],
    "coverage": {
        "count": 5,
        "status": "low",
        "files": [
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/app.config.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "appConfig",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/button-link/button-link.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonLinkComponent",
                "coveragePercent": 66,
                "coverageCount": "4/6",
                "status": "good"
            },
            {
                "filePath": "src/app/card-list/card-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CardListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/card/card.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/23",
                "status": "low"
            },
            {
                "filePath": "src/app/components/currency/dropdown/dropdown.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DropdownComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/risk-dashboard/components/dashboard/components/annual-exposure-details/annual-exposure-details.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AnnualExposureDetailsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/risk-dashboard/components/dashboard/components/breadcrumb-wallet/breadcrumb-wallet.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BreadcrumbWalletComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/risk-dashboard/components/dashboard/components/charts-tabs/charts-tabs.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ChartsTabsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/risk-dashboard/components/dashboard/components/exposure-rate-chart/exposure-rate-chart.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ExposureRateChartComponent",
                "coveragePercent": 0,
                "coverageCount": "0/48",
                "status": "low"
            },
            {
                "filePath": "src/app/risk-dashboard/components/dashboard/components/momentum-indicator-chart/momentum-indicator-chart.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MomentumIndicatorChartComponent",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "src/app/risk-dashboard/components/dashboard/components/momentum-indicator-chart/momentum-indicator-chart.component.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "ChartOptions",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/risk-dashboard/components/dashboard/components/monthly-exposure-chart/monthly-exposure-chart.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MonthlyExposureChartComponent",
                "coveragePercent": 0,
                "coverageCount": "0/34",
                "status": "low"
            },
            {
                "filePath": "src/app/risk-dashboard/components/dashboard/components/risk-estimate-chart/risk-estimate-chart.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "RiskEstimateChartComponent",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/risk-dashboard/components/dashboard/components/trade-view-chart/trade-view-chart.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TradeViewChartComponent",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "src/app/risk-dashboard/components/dashboard/components/volatility-chart/volatility-chart.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "VolatilityChartComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/risk-dashboard/components/dashboard/dashboard.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DashboardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/risk-dashboard/components/header/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/risk-dashboard/components/sidebar/sidebar.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SidebarComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/risk-dashboard/components/sidebar/sidebar.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "MenuItem",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/tag/tag.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TagComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/stories/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 83,
                "coverageCount": "5/6",
                "status": "very-good"
            },
            {
                "filePath": "src/stories/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/stories/page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/stories/user.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "User",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            }
        ]
    }
}