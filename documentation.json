{
    "pipes": [],
    "interfaces": [
        {
            "name": "AdvancePolicyModel",
            "id": "interface-AdvancePolicyModel-93993cf456cf2f10f79a60c48ea83599d3b25547480707e168679f8b9aa71f6fd19c4a2e61b7b064d6764f75e622069685a7d16c535b31c391fbb6d68c6578a1",
            "file": "src/app/risk-dashboard/components/model/advance-policy-model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface AdvancePolicyModel {\r\n  firstheading: string;\r\n  questions: string;\r\n  className: string;\r\n  selectAnswer: string;\r\n  bottomDesc:string,\r\n  Ans: Answer[];\r\n}\r\n\r\nexport interface Answer {\r\n  a1?: string;\r\n  a2: string;\r\n  a3: string;\r\n  a4: string;\r\n  a5: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "Ans",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Answer[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "bottomDesc",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "className",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "firstheading",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "questions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "selectAnswer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "Answer",
            "id": "interface-Answer-93993cf456cf2f10f79a60c48ea83599d3b25547480707e168679f8b9aa71f6fd19c4a2e61b7b064d6764f75e622069685a7d16c535b31c391fbb6d68c6578a1",
            "file": "src/app/risk-dashboard/components/model/advance-policy-model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface AdvancePolicyModel {\r\n  firstheading: string;\r\n  questions: string;\r\n  className: string;\r\n  selectAnswer: string;\r\n  bottomDesc:string,\r\n  Ans: Answer[];\r\n}\r\n\r\nexport interface Answer {\r\n  a1?: string;\r\n  a2: string;\r\n  a3: string;\r\n  a4: string;\r\n  a5: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "a1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "a2",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "a3",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "a4",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "a5",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "CountriesData",
            "id": "interface-CountriesData-4be3965b61c6750fdb457d02af50ca9948932d9dac9a359fe5373f67d4d48177c6f65e31e07dc2869b478042f33f268366a2f3e3b2fff039d385df02641f3863",
            "file": "src/app/sign-up/kyc.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IStepsObj {\r\n    currentStep: number,\r\n    maxSteps: number,\r\n    minSteps: number\r\n}\r\n\r\nexport interface IKycData {\r\n    businessTypes: 'companyAcc' | 'privateAcc' | 'invitedAcc';\r\n}\r\n\r\nexport interface IKYCFormGroups {\r\n    step_1: {\r\n        companyAcc: {isActive:boolean, countrySelected:string},\r\n        privateAcc:{isActive:boolean, countrySelected:string},\r\n        invitedAcc:{isActive:boolean}\r\n    },\r\n    step_2: {\r\n        email: string\r\n    }\r\n}\r\n\r\nexport enum EBusinessType {\r\n    companyAccount = \"companyAcc\",\r\n    privateAccount = \"privateAcc\",\r\n    invitedAccount = \"invitedAcc\"\r\n}\r\nexport enum EKycStatus {\r\n    basicKYC = 1,\r\n    partialKYC = 2,\r\n    fullKYC = 3\r\n}\r\n\r\nexport type TBusinessTypes = EBusinessType.companyAccount | EBusinessType.privateAccount;\r\nexport enum EDetailsToShowNames {\r\n    DEFAULT = \"DEFAULT\",\r\n    companyAcc = \"companyAcc\",\r\n    privateAcc = \"privateAcc\",\r\n    invitedAcc = \"invitedAcc\",\r\n    email = \"email\",\r\n    emailConfirmation = \"emailConfirmation\",\r\n    phone=  \"phone\",\r\n    phoneConfirmation = \"phoneConfirmation\",\r\n    createdPassword = \"createdPassword\",\r\n    personalDetails = \"personalDetails\",\r\n    personalAddress = \"personalAddress\",\r\n}\r\n\r\nexport enum EStepNumber {\r\n    typeOfBusiness = 1,\r\n    email = 2,\r\n    emailConfirmation = 3,\r\n    phone = 4,\r\n    phoneConfirmation = 5,\r\n    createPassword = 6,\r\n    personalDetails = 7,\r\n    personalAddress = 8\r\n}\r\n\r\nexport enum VerificationReturnType\r\n{\r\n    Success = 1,\r\n    GeneralError = 2,\r\n    PassedLimitError = 3,\r\n}\r\n\r\nexport enum SiteSource\r\n{\r\n    Ofakim = 1,\r\n    Okoora = 2\r\n}\r\n\r\nexport type EmailVerificationPerCustomerResponse = { SiteSource :any}\r\n\r\nexport type VerificationReturnTypeOptions = VerificationReturnType.Success | VerificationReturnType.GeneralError | VerificationReturnType.PassedLimitError;\r\nexport type TSiteSource = SiteSource.Ofakim | SiteSource.Okoora;\r\nexport type TSendMailResponse = {\r\n    Success:VerificationReturnTypeOptions, \r\n    SiteSource: TSiteSource,\r\n    PassedLimitError?:VerificationReturnTypeOptions\r\n}\r\n\r\nexport interface ICheckEmailVerification {\r\n    action: 'CHECK_EMAIL_VERIFICATION',\r\n    payload: {\r\n        email: string,\r\n        onFinalize?: ()=>void\r\n    }\r\n}\r\nexport interface ISendEmailVerification {\r\n    action: 'SEND_EMAIL_VERIFICATION',\r\n    payload: {\r\n        email: string,\r\n        onFinalize?: ()=>void\r\n    }\r\n}\r\nexport interface ICheckPhoneVerification {\r\n    action: 'CHECK_PHONE_VERIFICATION',\r\n    payload: {\r\n        phone: string,\r\n        onFinalize?: ()=>void\r\n    }\r\n}\r\nexport interface ISendPhoneVerification {\r\n    action: 'SEND_PHONE_VERIFICATION',\r\n    payload: {\r\n        phone: string,\r\n        onFinalize?: ()=>void\r\n    }\r\n}\r\nexport type IPerformVerification = ICheckEmailVerification | ISendEmailVerification | ICheckPhoneVerification | ISendPhoneVerification;\r\n\r\nexport type TVerificationCodeStatus =  'DEFAULT' | 'INCORRECT' | 'VALID' | 'PASSED_LIMIT';\r\nexport enum EErrorMessages {\r\n    SomethingWentWrong = 'Something went wrong.',\r\n    FillAllFields = 'Please fill all fields in order to continue',\r\n}\r\nexport interface IErrorData {hasError:boolean,msg:string}\r\nexport interface CountriesData  {\r\n    phoneCode:number,\r\n    countryCode: string,\r\n    countryName:string\r\n}",
            "properties": [
                {
                    "name": "countryCode",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 120
                },
                {
                    "name": "countryName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 121
                },
                {
                    "name": "phoneCode",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 119
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "CountriesData",
            "id": "interface-CountriesData-e3047e083ba4458a0a7ccedf55580dcd3b45fff66ec0b4fd1c065bc906803fb5c80f18e5ca74e28f76749dd06204e6ed3727f9496c6e88e6ef23f103b65f048c-1",
            "file": "src/app/sign-up/models/kyc.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IStepsObj {\r\n    currentStep: number,\r\n    maxSteps: number,\r\n    minSteps: number\r\n}\r\n\r\nexport interface IKycData {\r\n    businessTypes: 'companyAcc' | 'privateAcc' | 'invitedAcc';\r\n}\r\n\r\nexport interface IKYCFormGroups {\r\n    step_1: {\r\n        companyAcc: {isActive:boolean, countrySelected:string},\r\n        privateAcc:{isActive:boolean, countrySelected:string},\r\n        invitedAcc:{isActive:boolean}\r\n    },\r\n    step_2: {\r\n        email: string\r\n    }\r\n}\r\n\r\nexport enum EBusinessType {\r\n    companyAccount = \"companyAcc\",\r\n    privateAccount = \"privateAcc\",\r\n    invitedAccount = \"invitedAcc\"\r\n}\r\nexport enum EKycStatus {\r\n    basicKYC = 1,\r\n    partialKYC = 2,\r\n    fullKYC = 3\r\n}\r\n\r\nexport type TBusinessTypes = EBusinessType.companyAccount | EBusinessType.privateAccount;\r\nexport enum EDetailsToShowNames {\r\n    DEFAULT = \"DEFAULT\",\r\n    companyAcc = \"companyAcc\",\r\n    privateAcc = \"privateAcc\",\r\n    invitedAcc = \"invitedAcc\",\r\n    email = \"email\",\r\n    emailConfirmation = \"emailConfirmation\",\r\n    phone=  \"phone\",\r\n    phoneConfirmation = \"phoneConfirmation\",\r\n    createdPassword = \"createdPassword\",\r\n    personalDetails = \"personalDetails\",\r\n    personalAddress = \"personalAddress\",\r\n}\r\nexport interface IDetailsToShow {\r\n    step_1: {\r\n        detailName: IKycData['businessTypes'] | EDetailsToShowNames.DEFAULT,\r\n    },\r\n    step_2: {\r\n        detailName: EDetailsToShowNames.email\r\n    },\r\n    step_3: {\r\n        detailName:  EDetailsToShowNames.emailConfirmation\r\n    },\r\n    step_4: {\r\n        detailName:  EDetailsToShowNames.phone\r\n    },\r\n    step_5: {\r\n        detailName:  EDetailsToShowNames.phoneConfirmation\r\n    },\r\n    step_6: {\r\n        detailName:  EDetailsToShowNames.createdPassword\r\n    },\r\n    step_7: {\r\n        detailName:  EDetailsToShowNames.personalDetails\r\n    },\r\n    step_8: {\r\n        detailName: EDetailsToShowNames.personalAddress\r\n    }\r\n}\r\n\r\nexport const detailsToShow: IDetailsToShow = {\r\n    step_1: {\r\n        detailName: EDetailsToShowNames.DEFAULT,\r\n    },\r\n    step_2: {\r\n        detailName: EDetailsToShowNames.email,\r\n    },\r\n    step_3: {\r\n        detailName: EDetailsToShowNames.emailConfirmation,\r\n    },\r\n    step_4:{\r\n        detailName: EDetailsToShowNames.phone,\r\n    },\r\n    step_5: {\r\n        detailName: EDetailsToShowNames.phoneConfirmation,\r\n    },\r\n    step_6: {\r\n        detailName: EDetailsToShowNames.createdPassword\r\n    },\r\n    step_7: {\r\n        detailName: EDetailsToShowNames.personalDetails\r\n    },\r\n    step_8: {\r\n        detailName: EDetailsToShowNames.personalAddress\r\n    },\r\n}\r\n\r\nexport enum EStepNumber {\r\n    typeOfBusiness = 1,\r\n    email = 2,\r\n    emailConfirmation = 3,\r\n    phone = 4,\r\n    phoneConfirmation = 5,\r\n    createPassword = 6,\r\n    personalDetails = 7,\r\n    personalAddress = 8\r\n}\r\n\r\nexport enum VerificationReturnType\r\n{\r\n    Success = 1,\r\n    GeneralError = 2,\r\n    PassedLimitError = 3,\r\n}\r\n\r\nexport enum SiteSource\r\n{\r\n    Ofakim = 1,\r\n    Okoora = 2\r\n}\r\n\r\nexport type EmailVerificationPerCustomerResponse = { SiteSource :any}\r\n\r\nexport type VerificationReturnTypeOptions = VerificationReturnType.Success | VerificationReturnType.GeneralError | VerificationReturnType.PassedLimitError;\r\nexport type TSiteSource = SiteSource.Ofakim | SiteSource.Okoora;\r\nexport type TSendMailResponse = {\r\n    Success:VerificationReturnTypeOptions, \r\n    SiteSource: TSiteSource,\r\n    PassedLimitError?:VerificationReturnTypeOptions\r\n}\r\n\r\nexport interface ICheckEmailVerification {\r\n    action: 'CHECK_EMAIL_VERIFICATION',\r\n    payload: {\r\n        email: string,\r\n        onFinalize?: ()=>void\r\n    }\r\n}\r\nexport interface ISendEmailVerification {\r\n    action: 'SEND_EMAIL_VERIFICATION',\r\n    payload: {\r\n        email: string,\r\n        onFinalize?: ()=>void\r\n    }\r\n}\r\nexport interface ICheckPhoneVerification {\r\n    action: 'CHECK_PHONE_VERIFICATION',\r\n    payload: {\r\n        phone: string,\r\n        onFinalize?: ()=>void\r\n    }\r\n}\r\nexport interface ISendPhoneVerification {\r\n    action: 'SEND_PHONE_VERIFICATION',\r\n    payload: {\r\n        phone: string,\r\n        onFinalize?: ()=>void\r\n    }\r\n}\r\nexport type IPerformVerification = ICheckEmailVerification | ISendEmailVerification | ICheckPhoneVerification | ISendPhoneVerification;\r\n\r\nexport type TVerificationCodeStatus =  'DEFAULT' | 'INCORRECT' | 'VALID' | 'PASSED_LIMIT';\r\nexport enum EErrorMessages {\r\n    SomethingWentWrong = 'Something went wrong.',\r\n    FillAllFields = 'Please fill all fields in order to continue',\r\n}\r\nexport interface IErrorData {hasError:boolean,msg:string}\r\nexport interface CountriesData  {\r\n    phoneCode:number,\r\n    countryCode: string,\r\n    countryName:string\r\n}",
            "properties": [
                {
                    "name": "countryCode",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 173
                },
                {
                    "name": "countryName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 174
                },
                {
                    "name": "phoneCode",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 172
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "CountriesData-1"
        },
        {
            "name": "ICheckEmailVerification",
            "id": "interface-ICheckEmailVerification-4be3965b61c6750fdb457d02af50ca9948932d9dac9a359fe5373f67d4d48177c6f65e31e07dc2869b478042f33f268366a2f3e3b2fff039d385df02641f3863",
            "file": "src/app/sign-up/kyc.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IStepsObj {\r\n    currentStep: number,\r\n    maxSteps: number,\r\n    minSteps: number\r\n}\r\n\r\nexport interface IKycData {\r\n    businessTypes: 'companyAcc' | 'privateAcc' | 'invitedAcc';\r\n}\r\n\r\nexport interface IKYCFormGroups {\r\n    step_1: {\r\n        companyAcc: {isActive:boolean, countrySelected:string},\r\n        privateAcc:{isActive:boolean, countrySelected:string},\r\n        invitedAcc:{isActive:boolean}\r\n    },\r\n    step_2: {\r\n        email: string\r\n    }\r\n}\r\n\r\nexport enum EBusinessType {\r\n    companyAccount = \"companyAcc\",\r\n    privateAccount = \"privateAcc\",\r\n    invitedAccount = \"invitedAcc\"\r\n}\r\nexport enum EKycStatus {\r\n    basicKYC = 1,\r\n    partialKYC = 2,\r\n    fullKYC = 3\r\n}\r\n\r\nexport type TBusinessTypes = EBusinessType.companyAccount | EBusinessType.privateAccount;\r\nexport enum EDetailsToShowNames {\r\n    DEFAULT = \"DEFAULT\",\r\n    companyAcc = \"companyAcc\",\r\n    privateAcc = \"privateAcc\",\r\n    invitedAcc = \"invitedAcc\",\r\n    email = \"email\",\r\n    emailConfirmation = \"emailConfirmation\",\r\n    phone=  \"phone\",\r\n    phoneConfirmation = \"phoneConfirmation\",\r\n    createdPassword = \"createdPassword\",\r\n    personalDetails = \"personalDetails\",\r\n    personalAddress = \"personalAddress\",\r\n}\r\n\r\nexport enum EStepNumber {\r\n    typeOfBusiness = 1,\r\n    email = 2,\r\n    emailConfirmation = 3,\r\n    phone = 4,\r\n    phoneConfirmation = 5,\r\n    createPassword = 6,\r\n    personalDetails = 7,\r\n    personalAddress = 8\r\n}\r\n\r\nexport enum VerificationReturnType\r\n{\r\n    Success = 1,\r\n    GeneralError = 2,\r\n    PassedLimitError = 3,\r\n}\r\n\r\nexport enum SiteSource\r\n{\r\n    Ofakim = 1,\r\n    Okoora = 2\r\n}\r\n\r\nexport type EmailVerificationPerCustomerResponse = { SiteSource :any}\r\n\r\nexport type VerificationReturnTypeOptions = VerificationReturnType.Success | VerificationReturnType.GeneralError | VerificationReturnType.PassedLimitError;\r\nexport type TSiteSource = SiteSource.Ofakim | SiteSource.Okoora;\r\nexport type TSendMailResponse = {\r\n    Success:VerificationReturnTypeOptions, \r\n    SiteSource: TSiteSource,\r\n    PassedLimitError?:VerificationReturnTypeOptions\r\n}\r\n\r\nexport interface ICheckEmailVerification {\r\n    action: 'CHECK_EMAIL_VERIFICATION',\r\n    payload: {\r\n        email: string,\r\n        onFinalize?: ()=>void\r\n    }\r\n}\r\nexport interface ISendEmailVerification {\r\n    action: 'SEND_EMAIL_VERIFICATION',\r\n    payload: {\r\n        email: string,\r\n        onFinalize?: ()=>void\r\n    }\r\n}\r\nexport interface ICheckPhoneVerification {\r\n    action: 'CHECK_PHONE_VERIFICATION',\r\n    payload: {\r\n        phone: string,\r\n        onFinalize?: ()=>void\r\n    }\r\n}\r\nexport interface ISendPhoneVerification {\r\n    action: 'SEND_PHONE_VERIFICATION',\r\n    payload: {\r\n        phone: string,\r\n        onFinalize?: ()=>void\r\n    }\r\n}\r\nexport type IPerformVerification = ICheckEmailVerification | ISendEmailVerification | ICheckPhoneVerification | ISendPhoneVerification;\r\n\r\nexport type TVerificationCodeStatus =  'DEFAULT' | 'INCORRECT' | 'VALID' | 'PASSED_LIMIT';\r\nexport enum EErrorMessages {\r\n    SomethingWentWrong = 'Something went wrong.',\r\n    FillAllFields = 'Please fill all fields in order to continue',\r\n}\r\nexport interface IErrorData {hasError:boolean,msg:string}\r\nexport interface CountriesData  {\r\n    phoneCode:number,\r\n    countryCode: string,\r\n    countryName:string\r\n}",
            "properties": [
                {
                    "name": "action",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 83
                },
                {
                    "name": "payload",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 84
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "ICheckEmailVerification",
            "id": "interface-ICheckEmailVerification-e3047e083ba4458a0a7ccedf55580dcd3b45fff66ec0b4fd1c065bc906803fb5c80f18e5ca74e28f76749dd06204e6ed3727f9496c6e88e6ef23f103b65f048c-1",
            "file": "src/app/sign-up/models/kyc.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IStepsObj {\r\n    currentStep: number,\r\n    maxSteps: number,\r\n    minSteps: number\r\n}\r\n\r\nexport interface IKycData {\r\n    businessTypes: 'companyAcc' | 'privateAcc' | 'invitedAcc';\r\n}\r\n\r\nexport interface IKYCFormGroups {\r\n    step_1: {\r\n        companyAcc: {isActive:boolean, countrySelected:string},\r\n        privateAcc:{isActive:boolean, countrySelected:string},\r\n        invitedAcc:{isActive:boolean}\r\n    },\r\n    step_2: {\r\n        email: string\r\n    }\r\n}\r\n\r\nexport enum EBusinessType {\r\n    companyAccount = \"companyAcc\",\r\n    privateAccount = \"privateAcc\",\r\n    invitedAccount = \"invitedAcc\"\r\n}\r\nexport enum EKycStatus {\r\n    basicKYC = 1,\r\n    partialKYC = 2,\r\n    fullKYC = 3\r\n}\r\n\r\nexport type TBusinessTypes = EBusinessType.companyAccount | EBusinessType.privateAccount;\r\nexport enum EDetailsToShowNames {\r\n    DEFAULT = \"DEFAULT\",\r\n    companyAcc = \"companyAcc\",\r\n    privateAcc = \"privateAcc\",\r\n    invitedAcc = \"invitedAcc\",\r\n    email = \"email\",\r\n    emailConfirmation = \"emailConfirmation\",\r\n    phone=  \"phone\",\r\n    phoneConfirmation = \"phoneConfirmation\",\r\n    createdPassword = \"createdPassword\",\r\n    personalDetails = \"personalDetails\",\r\n    personalAddress = \"personalAddress\",\r\n}\r\nexport interface IDetailsToShow {\r\n    step_1: {\r\n        detailName: IKycData['businessTypes'] | EDetailsToShowNames.DEFAULT,\r\n    },\r\n    step_2: {\r\n        detailName: EDetailsToShowNames.email\r\n    },\r\n    step_3: {\r\n        detailName:  EDetailsToShowNames.emailConfirmation\r\n    },\r\n    step_4: {\r\n        detailName:  EDetailsToShowNames.phone\r\n    },\r\n    step_5: {\r\n        detailName:  EDetailsToShowNames.phoneConfirmation\r\n    },\r\n    step_6: {\r\n        detailName:  EDetailsToShowNames.createdPassword\r\n    },\r\n    step_7: {\r\n        detailName:  EDetailsToShowNames.personalDetails\r\n    },\r\n    step_8: {\r\n        detailName: EDetailsToShowNames.personalAddress\r\n    }\r\n}\r\n\r\nexport const detailsToShow: IDetailsToShow = {\r\n    step_1: {\r\n        detailName: EDetailsToShowNames.DEFAULT,\r\n    },\r\n    step_2: {\r\n        detailName: EDetailsToShowNames.email,\r\n    },\r\n    step_3: {\r\n        detailName: EDetailsToShowNames.emailConfirmation,\r\n    },\r\n    step_4:{\r\n        detailName: EDetailsToShowNames.phone,\r\n    },\r\n    step_5: {\r\n        detailName: EDetailsToShowNames.phoneConfirmation,\r\n    },\r\n    step_6: {\r\n        detailName: EDetailsToShowNames.createdPassword\r\n    },\r\n    step_7: {\r\n        detailName: EDetailsToShowNames.personalDetails\r\n    },\r\n    step_8: {\r\n        detailName: EDetailsToShowNames.personalAddress\r\n    },\r\n}\r\n\r\nexport enum EStepNumber {\r\n    typeOfBusiness = 1,\r\n    email = 2,\r\n    emailConfirmation = 3,\r\n    phone = 4,\r\n    phoneConfirmation = 5,\r\n    createPassword = 6,\r\n    personalDetails = 7,\r\n    personalAddress = 8\r\n}\r\n\r\nexport enum VerificationReturnType\r\n{\r\n    Success = 1,\r\n    GeneralError = 2,\r\n    PassedLimitError = 3,\r\n}\r\n\r\nexport enum SiteSource\r\n{\r\n    Ofakim = 1,\r\n    Okoora = 2\r\n}\r\n\r\nexport type EmailVerificationPerCustomerResponse = { SiteSource :any}\r\n\r\nexport type VerificationReturnTypeOptions = VerificationReturnType.Success | VerificationReturnType.GeneralError | VerificationReturnType.PassedLimitError;\r\nexport type TSiteSource = SiteSource.Ofakim | SiteSource.Okoora;\r\nexport type TSendMailResponse = {\r\n    Success:VerificationReturnTypeOptions, \r\n    SiteSource: TSiteSource,\r\n    PassedLimitError?:VerificationReturnTypeOptions\r\n}\r\n\r\nexport interface ICheckEmailVerification {\r\n    action: 'CHECK_EMAIL_VERIFICATION',\r\n    payload: {\r\n        email: string,\r\n        onFinalize?: ()=>void\r\n    }\r\n}\r\nexport interface ISendEmailVerification {\r\n    action: 'SEND_EMAIL_VERIFICATION',\r\n    payload: {\r\n        email: string,\r\n        onFinalize?: ()=>void\r\n    }\r\n}\r\nexport interface ICheckPhoneVerification {\r\n    action: 'CHECK_PHONE_VERIFICATION',\r\n    payload: {\r\n        phone: string,\r\n        onFinalize?: ()=>void\r\n    }\r\n}\r\nexport interface ISendPhoneVerification {\r\n    action: 'SEND_PHONE_VERIFICATION',\r\n    payload: {\r\n        phone: string,\r\n        onFinalize?: ()=>void\r\n    }\r\n}\r\nexport type IPerformVerification = ICheckEmailVerification | ISendEmailVerification | ICheckPhoneVerification | ISendPhoneVerification;\r\n\r\nexport type TVerificationCodeStatus =  'DEFAULT' | 'INCORRECT' | 'VALID' | 'PASSED_LIMIT';\r\nexport enum EErrorMessages {\r\n    SomethingWentWrong = 'Something went wrong.',\r\n    FillAllFields = 'Please fill all fields in order to continue',\r\n}\r\nexport interface IErrorData {hasError:boolean,msg:string}\r\nexport interface CountriesData  {\r\n    phoneCode:number,\r\n    countryCode: string,\r\n    countryName:string\r\n}",
            "properties": [
                {
                    "name": "action",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 136
                },
                {
                    "name": "payload",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 137
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "ICheckEmailVerification-1"
        },
        {
            "name": "ICheckPhoneVerification",
            "id": "interface-ICheckPhoneVerification-4be3965b61c6750fdb457d02af50ca9948932d9dac9a359fe5373f67d4d48177c6f65e31e07dc2869b478042f33f268366a2f3e3b2fff039d385df02641f3863",
            "file": "src/app/sign-up/kyc.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IStepsObj {\r\n    currentStep: number,\r\n    maxSteps: number,\r\n    minSteps: number\r\n}\r\n\r\nexport interface IKycData {\r\n    businessTypes: 'companyAcc' | 'privateAcc' | 'invitedAcc';\r\n}\r\n\r\nexport interface IKYCFormGroups {\r\n    step_1: {\r\n        companyAcc: {isActive:boolean, countrySelected:string},\r\n        privateAcc:{isActive:boolean, countrySelected:string},\r\n        invitedAcc:{isActive:boolean}\r\n    },\r\n    step_2: {\r\n        email: string\r\n    }\r\n}\r\n\r\nexport enum EBusinessType {\r\n    companyAccount = \"companyAcc\",\r\n    privateAccount = \"privateAcc\",\r\n    invitedAccount = \"invitedAcc\"\r\n}\r\nexport enum EKycStatus {\r\n    basicKYC = 1,\r\n    partialKYC = 2,\r\n    fullKYC = 3\r\n}\r\n\r\nexport type TBusinessTypes = EBusinessType.companyAccount | EBusinessType.privateAccount;\r\nexport enum EDetailsToShowNames {\r\n    DEFAULT = \"DEFAULT\",\r\n    companyAcc = \"companyAcc\",\r\n    privateAcc = \"privateAcc\",\r\n    invitedAcc = \"invitedAcc\",\r\n    email = \"email\",\r\n    emailConfirmation = \"emailConfirmation\",\r\n    phone=  \"phone\",\r\n    phoneConfirmation = \"phoneConfirmation\",\r\n    createdPassword = \"createdPassword\",\r\n    personalDetails = \"personalDetails\",\r\n    personalAddress = \"personalAddress\",\r\n}\r\n\r\nexport enum EStepNumber {\r\n    typeOfBusiness = 1,\r\n    email = 2,\r\n    emailConfirmation = 3,\r\n    phone = 4,\r\n    phoneConfirmation = 5,\r\n    createPassword = 6,\r\n    personalDetails = 7,\r\n    personalAddress = 8\r\n}\r\n\r\nexport enum VerificationReturnType\r\n{\r\n    Success = 1,\r\n    GeneralError = 2,\r\n    PassedLimitError = 3,\r\n}\r\n\r\nexport enum SiteSource\r\n{\r\n    Ofakim = 1,\r\n    Okoora = 2\r\n}\r\n\r\nexport type EmailVerificationPerCustomerResponse = { SiteSource :any}\r\n\r\nexport type VerificationReturnTypeOptions = VerificationReturnType.Success | VerificationReturnType.GeneralError | VerificationReturnType.PassedLimitError;\r\nexport type TSiteSource = SiteSource.Ofakim | SiteSource.Okoora;\r\nexport type TSendMailResponse = {\r\n    Success:VerificationReturnTypeOptions, \r\n    SiteSource: TSiteSource,\r\n    PassedLimitError?:VerificationReturnTypeOptions\r\n}\r\n\r\nexport interface ICheckEmailVerification {\r\n    action: 'CHECK_EMAIL_VERIFICATION',\r\n    payload: {\r\n        email: string,\r\n        onFinalize?: ()=>void\r\n    }\r\n}\r\nexport interface ISendEmailVerification {\r\n    action: 'SEND_EMAIL_VERIFICATION',\r\n    payload: {\r\n        email: string,\r\n        onFinalize?: ()=>void\r\n    }\r\n}\r\nexport interface ICheckPhoneVerification {\r\n    action: 'CHECK_PHONE_VERIFICATION',\r\n    payload: {\r\n        phone: string,\r\n        onFinalize?: ()=>void\r\n    }\r\n}\r\nexport interface ISendPhoneVerification {\r\n    action: 'SEND_PHONE_VERIFICATION',\r\n    payload: {\r\n        phone: string,\r\n        onFinalize?: ()=>void\r\n    }\r\n}\r\nexport type IPerformVerification = ICheckEmailVerification | ISendEmailVerification | ICheckPhoneVerification | ISendPhoneVerification;\r\n\r\nexport type TVerificationCodeStatus =  'DEFAULT' | 'INCORRECT' | 'VALID' | 'PASSED_LIMIT';\r\nexport enum EErrorMessages {\r\n    SomethingWentWrong = 'Something went wrong.',\r\n    FillAllFields = 'Please fill all fields in order to continue',\r\n}\r\nexport interface IErrorData {hasError:boolean,msg:string}\r\nexport interface CountriesData  {\r\n    phoneCode:number,\r\n    countryCode: string,\r\n    countryName:string\r\n}",
            "properties": [
                {
                    "name": "action",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 97
                },
                {
                    "name": "payload",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 98
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "ICheckPhoneVerification",
            "id": "interface-ICheckPhoneVerification-e3047e083ba4458a0a7ccedf55580dcd3b45fff66ec0b4fd1c065bc906803fb5c80f18e5ca74e28f76749dd06204e6ed3727f9496c6e88e6ef23f103b65f048c-1",
            "file": "src/app/sign-up/models/kyc.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IStepsObj {\r\n    currentStep: number,\r\n    maxSteps: number,\r\n    minSteps: number\r\n}\r\n\r\nexport interface IKycData {\r\n    businessTypes: 'companyAcc' | 'privateAcc' | 'invitedAcc';\r\n}\r\n\r\nexport interface IKYCFormGroups {\r\n    step_1: {\r\n        companyAcc: {isActive:boolean, countrySelected:string},\r\n        privateAcc:{isActive:boolean, countrySelected:string},\r\n        invitedAcc:{isActive:boolean}\r\n    },\r\n    step_2: {\r\n        email: string\r\n    }\r\n}\r\n\r\nexport enum EBusinessType {\r\n    companyAccount = \"companyAcc\",\r\n    privateAccount = \"privateAcc\",\r\n    invitedAccount = \"invitedAcc\"\r\n}\r\nexport enum EKycStatus {\r\n    basicKYC = 1,\r\n    partialKYC = 2,\r\n    fullKYC = 3\r\n}\r\n\r\nexport type TBusinessTypes = EBusinessType.companyAccount | EBusinessType.privateAccount;\r\nexport enum EDetailsToShowNames {\r\n    DEFAULT = \"DEFAULT\",\r\n    companyAcc = \"companyAcc\",\r\n    privateAcc = \"privateAcc\",\r\n    invitedAcc = \"invitedAcc\",\r\n    email = \"email\",\r\n    emailConfirmation = \"emailConfirmation\",\r\n    phone=  \"phone\",\r\n    phoneConfirmation = \"phoneConfirmation\",\r\n    createdPassword = \"createdPassword\",\r\n    personalDetails = \"personalDetails\",\r\n    personalAddress = \"personalAddress\",\r\n}\r\nexport interface IDetailsToShow {\r\n    step_1: {\r\n        detailName: IKycData['businessTypes'] | EDetailsToShowNames.DEFAULT,\r\n    },\r\n    step_2: {\r\n        detailName: EDetailsToShowNames.email\r\n    },\r\n    step_3: {\r\n        detailName:  EDetailsToShowNames.emailConfirmation\r\n    },\r\n    step_4: {\r\n        detailName:  EDetailsToShowNames.phone\r\n    },\r\n    step_5: {\r\n        detailName:  EDetailsToShowNames.phoneConfirmation\r\n    },\r\n    step_6: {\r\n        detailName:  EDetailsToShowNames.createdPassword\r\n    },\r\n    step_7: {\r\n        detailName:  EDetailsToShowNames.personalDetails\r\n    },\r\n    step_8: {\r\n        detailName: EDetailsToShowNames.personalAddress\r\n    }\r\n}\r\n\r\nexport const detailsToShow: IDetailsToShow = {\r\n    step_1: {\r\n        detailName: EDetailsToShowNames.DEFAULT,\r\n    },\r\n    step_2: {\r\n        detailName: EDetailsToShowNames.email,\r\n    },\r\n    step_3: {\r\n        detailName: EDetailsToShowNames.emailConfirmation,\r\n    },\r\n    step_4:{\r\n        detailName: EDetailsToShowNames.phone,\r\n    },\r\n    step_5: {\r\n        detailName: EDetailsToShowNames.phoneConfirmation,\r\n    },\r\n    step_6: {\r\n        detailName: EDetailsToShowNames.createdPassword\r\n    },\r\n    step_7: {\r\n        detailName: EDetailsToShowNames.personalDetails\r\n    },\r\n    step_8: {\r\n        detailName: EDetailsToShowNames.personalAddress\r\n    },\r\n}\r\n\r\nexport enum EStepNumber {\r\n    typeOfBusiness = 1,\r\n    email = 2,\r\n    emailConfirmation = 3,\r\n    phone = 4,\r\n    phoneConfirmation = 5,\r\n    createPassword = 6,\r\n    personalDetails = 7,\r\n    personalAddress = 8\r\n}\r\n\r\nexport enum VerificationReturnType\r\n{\r\n    Success = 1,\r\n    GeneralError = 2,\r\n    PassedLimitError = 3,\r\n}\r\n\r\nexport enum SiteSource\r\n{\r\n    Ofakim = 1,\r\n    Okoora = 2\r\n}\r\n\r\nexport type EmailVerificationPerCustomerResponse = { SiteSource :any}\r\n\r\nexport type VerificationReturnTypeOptions = VerificationReturnType.Success | VerificationReturnType.GeneralError | VerificationReturnType.PassedLimitError;\r\nexport type TSiteSource = SiteSource.Ofakim | SiteSource.Okoora;\r\nexport type TSendMailResponse = {\r\n    Success:VerificationReturnTypeOptions, \r\n    SiteSource: TSiteSource,\r\n    PassedLimitError?:VerificationReturnTypeOptions\r\n}\r\n\r\nexport interface ICheckEmailVerification {\r\n    action: 'CHECK_EMAIL_VERIFICATION',\r\n    payload: {\r\n        email: string,\r\n        onFinalize?: ()=>void\r\n    }\r\n}\r\nexport interface ISendEmailVerification {\r\n    action: 'SEND_EMAIL_VERIFICATION',\r\n    payload: {\r\n        email: string,\r\n        onFinalize?: ()=>void\r\n    }\r\n}\r\nexport interface ICheckPhoneVerification {\r\n    action: 'CHECK_PHONE_VERIFICATION',\r\n    payload: {\r\n        phone: string,\r\n        onFinalize?: ()=>void\r\n    }\r\n}\r\nexport interface ISendPhoneVerification {\r\n    action: 'SEND_PHONE_VERIFICATION',\r\n    payload: {\r\n        phone: string,\r\n        onFinalize?: ()=>void\r\n    }\r\n}\r\nexport type IPerformVerification = ICheckEmailVerification | ISendEmailVerification | ICheckPhoneVerification | ISendPhoneVerification;\r\n\r\nexport type TVerificationCodeStatus =  'DEFAULT' | 'INCORRECT' | 'VALID' | 'PASSED_LIMIT';\r\nexport enum EErrorMessages {\r\n    SomethingWentWrong = 'Something went wrong.',\r\n    FillAllFields = 'Please fill all fields in order to continue',\r\n}\r\nexport interface IErrorData {hasError:boolean,msg:string}\r\nexport interface CountriesData  {\r\n    phoneCode:number,\r\n    countryCode: string,\r\n    countryName:string\r\n}",
            "properties": [
                {
                    "name": "action",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 150
                },
                {
                    "name": "payload",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 151
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "ICheckPhoneVerification-1"
        },
        {
            "name": "IDetailsToShow",
            "id": "interface-IDetailsToShow-e3047e083ba4458a0a7ccedf55580dcd3b45fff66ec0b4fd1c065bc906803fb5c80f18e5ca74e28f76749dd06204e6ed3727f9496c6e88e6ef23f103b65f048c",
            "file": "src/app/sign-up/models/kyc.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IStepsObj {\r\n    currentStep: number,\r\n    maxSteps: number,\r\n    minSteps: number\r\n}\r\n\r\nexport interface IKycData {\r\n    businessTypes: 'companyAcc' | 'privateAcc' | 'invitedAcc';\r\n}\r\n\r\nexport interface IKYCFormGroups {\r\n    step_1: {\r\n        companyAcc: {isActive:boolean, countrySelected:string},\r\n        privateAcc:{isActive:boolean, countrySelected:string},\r\n        invitedAcc:{isActive:boolean}\r\n    },\r\n    step_2: {\r\n        email: string\r\n    }\r\n}\r\n\r\nexport enum EBusinessType {\r\n    companyAccount = \"companyAcc\",\r\n    privateAccount = \"privateAcc\",\r\n    invitedAccount = \"invitedAcc\"\r\n}\r\nexport enum EKycStatus {\r\n    basicKYC = 1,\r\n    partialKYC = 2,\r\n    fullKYC = 3\r\n}\r\n\r\nexport type TBusinessTypes = EBusinessType.companyAccount | EBusinessType.privateAccount;\r\nexport enum EDetailsToShowNames {\r\n    DEFAULT = \"DEFAULT\",\r\n    companyAcc = \"companyAcc\",\r\n    privateAcc = \"privateAcc\",\r\n    invitedAcc = \"invitedAcc\",\r\n    email = \"email\",\r\n    emailConfirmation = \"emailConfirmation\",\r\n    phone=  \"phone\",\r\n    phoneConfirmation = \"phoneConfirmation\",\r\n    createdPassword = \"createdPassword\",\r\n    personalDetails = \"personalDetails\",\r\n    personalAddress = \"personalAddress\",\r\n}\r\nexport interface IDetailsToShow {\r\n    step_1: {\r\n        detailName: IKycData['businessTypes'] | EDetailsToShowNames.DEFAULT,\r\n    },\r\n    step_2: {\r\n        detailName: EDetailsToShowNames.email\r\n    },\r\n    step_3: {\r\n        detailName:  EDetailsToShowNames.emailConfirmation\r\n    },\r\n    step_4: {\r\n        detailName:  EDetailsToShowNames.phone\r\n    },\r\n    step_5: {\r\n        detailName:  EDetailsToShowNames.phoneConfirmation\r\n    },\r\n    step_6: {\r\n        detailName:  EDetailsToShowNames.createdPassword\r\n    },\r\n    step_7: {\r\n        detailName:  EDetailsToShowNames.personalDetails\r\n    },\r\n    step_8: {\r\n        detailName: EDetailsToShowNames.personalAddress\r\n    }\r\n}\r\n\r\nexport const detailsToShow: IDetailsToShow = {\r\n    step_1: {\r\n        detailName: EDetailsToShowNames.DEFAULT,\r\n    },\r\n    step_2: {\r\n        detailName: EDetailsToShowNames.email,\r\n    },\r\n    step_3: {\r\n        detailName: EDetailsToShowNames.emailConfirmation,\r\n    },\r\n    step_4:{\r\n        detailName: EDetailsToShowNames.phone,\r\n    },\r\n    step_5: {\r\n        detailName: EDetailsToShowNames.phoneConfirmation,\r\n    },\r\n    step_6: {\r\n        detailName: EDetailsToShowNames.createdPassword\r\n    },\r\n    step_7: {\r\n        detailName: EDetailsToShowNames.personalDetails\r\n    },\r\n    step_8: {\r\n        detailName: EDetailsToShowNames.personalAddress\r\n    },\r\n}\r\n\r\nexport enum EStepNumber {\r\n    typeOfBusiness = 1,\r\n    email = 2,\r\n    emailConfirmation = 3,\r\n    phone = 4,\r\n    phoneConfirmation = 5,\r\n    createPassword = 6,\r\n    personalDetails = 7,\r\n    personalAddress = 8\r\n}\r\n\r\nexport enum VerificationReturnType\r\n{\r\n    Success = 1,\r\n    GeneralError = 2,\r\n    PassedLimitError = 3,\r\n}\r\n\r\nexport enum SiteSource\r\n{\r\n    Ofakim = 1,\r\n    Okoora = 2\r\n}\r\n\r\nexport type EmailVerificationPerCustomerResponse = { SiteSource :any}\r\n\r\nexport type VerificationReturnTypeOptions = VerificationReturnType.Success | VerificationReturnType.GeneralError | VerificationReturnType.PassedLimitError;\r\nexport type TSiteSource = SiteSource.Ofakim | SiteSource.Okoora;\r\nexport type TSendMailResponse = {\r\n    Success:VerificationReturnTypeOptions, \r\n    SiteSource: TSiteSource,\r\n    PassedLimitError?:VerificationReturnTypeOptions\r\n}\r\n\r\nexport interface ICheckEmailVerification {\r\n    action: 'CHECK_EMAIL_VERIFICATION',\r\n    payload: {\r\n        email: string,\r\n        onFinalize?: ()=>void\r\n    }\r\n}\r\nexport interface ISendEmailVerification {\r\n    action: 'SEND_EMAIL_VERIFICATION',\r\n    payload: {\r\n        email: string,\r\n        onFinalize?: ()=>void\r\n    }\r\n}\r\nexport interface ICheckPhoneVerification {\r\n    action: 'CHECK_PHONE_VERIFICATION',\r\n    payload: {\r\n        phone: string,\r\n        onFinalize?: ()=>void\r\n    }\r\n}\r\nexport interface ISendPhoneVerification {\r\n    action: 'SEND_PHONE_VERIFICATION',\r\n    payload: {\r\n        phone: string,\r\n        onFinalize?: ()=>void\r\n    }\r\n}\r\nexport type IPerformVerification = ICheckEmailVerification | ISendEmailVerification | ICheckPhoneVerification | ISendPhoneVerification;\r\n\r\nexport type TVerificationCodeStatus =  'DEFAULT' | 'INCORRECT' | 'VALID' | 'PASSED_LIMIT';\r\nexport enum EErrorMessages {\r\n    SomethingWentWrong = 'Something went wrong.',\r\n    FillAllFields = 'Please fill all fields in order to continue',\r\n}\r\nexport interface IErrorData {hasError:boolean,msg:string}\r\nexport interface CountriesData  {\r\n    phoneCode:number,\r\n    countryCode: string,\r\n    countryName:string\r\n}",
            "properties": [
                {
                    "name": "step_1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 48
                },
                {
                    "name": "step_2",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 51
                },
                {
                    "name": "step_3",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 54
                },
                {
                    "name": "step_4",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 57
                },
                {
                    "name": "step_5",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 60
                },
                {
                    "name": "step_6",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 63
                },
                {
                    "name": "step_7",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 66
                },
                {
                    "name": "step_8",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 69
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "IErrorData",
            "id": "interface-IErrorData-4be3965b61c6750fdb457d02af50ca9948932d9dac9a359fe5373f67d4d48177c6f65e31e07dc2869b478042f33f268366a2f3e3b2fff039d385df02641f3863",
            "file": "src/app/sign-up/kyc.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IStepsObj {\r\n    currentStep: number,\r\n    maxSteps: number,\r\n    minSteps: number\r\n}\r\n\r\nexport interface IKycData {\r\n    businessTypes: 'companyAcc' | 'privateAcc' | 'invitedAcc';\r\n}\r\n\r\nexport interface IKYCFormGroups {\r\n    step_1: {\r\n        companyAcc: {isActive:boolean, countrySelected:string},\r\n        privateAcc:{isActive:boolean, countrySelected:string},\r\n        invitedAcc:{isActive:boolean}\r\n    },\r\n    step_2: {\r\n        email: string\r\n    }\r\n}\r\n\r\nexport enum EBusinessType {\r\n    companyAccount = \"companyAcc\",\r\n    privateAccount = \"privateAcc\",\r\n    invitedAccount = \"invitedAcc\"\r\n}\r\nexport enum EKycStatus {\r\n    basicKYC = 1,\r\n    partialKYC = 2,\r\n    fullKYC = 3\r\n}\r\n\r\nexport type TBusinessTypes = EBusinessType.companyAccount | EBusinessType.privateAccount;\r\nexport enum EDetailsToShowNames {\r\n    DEFAULT = \"DEFAULT\",\r\n    companyAcc = \"companyAcc\",\r\n    privateAcc = \"privateAcc\",\r\n    invitedAcc = \"invitedAcc\",\r\n    email = \"email\",\r\n    emailConfirmation = \"emailConfirmation\",\r\n    phone=  \"phone\",\r\n    phoneConfirmation = \"phoneConfirmation\",\r\n    createdPassword = \"createdPassword\",\r\n    personalDetails = \"personalDetails\",\r\n    personalAddress = \"personalAddress\",\r\n}\r\n\r\nexport enum EStepNumber {\r\n    typeOfBusiness = 1,\r\n    email = 2,\r\n    emailConfirmation = 3,\r\n    phone = 4,\r\n    phoneConfirmation = 5,\r\n    createPassword = 6,\r\n    personalDetails = 7,\r\n    personalAddress = 8\r\n}\r\n\r\nexport enum VerificationReturnType\r\n{\r\n    Success = 1,\r\n    GeneralError = 2,\r\n    PassedLimitError = 3,\r\n}\r\n\r\nexport enum SiteSource\r\n{\r\n    Ofakim = 1,\r\n    Okoora = 2\r\n}\r\n\r\nexport type EmailVerificationPerCustomerResponse = { SiteSource :any}\r\n\r\nexport type VerificationReturnTypeOptions = VerificationReturnType.Success | VerificationReturnType.GeneralError | VerificationReturnType.PassedLimitError;\r\nexport type TSiteSource = SiteSource.Ofakim | SiteSource.Okoora;\r\nexport type TSendMailResponse = {\r\n    Success:VerificationReturnTypeOptions, \r\n    SiteSource: TSiteSource,\r\n    PassedLimitError?:VerificationReturnTypeOptions\r\n}\r\n\r\nexport interface ICheckEmailVerification {\r\n    action: 'CHECK_EMAIL_VERIFICATION',\r\n    payload: {\r\n        email: string,\r\n        onFinalize?: ()=>void\r\n    }\r\n}\r\nexport interface ISendEmailVerification {\r\n    action: 'SEND_EMAIL_VERIFICATION',\r\n    payload: {\r\n        email: string,\r\n        onFinalize?: ()=>void\r\n    }\r\n}\r\nexport interface ICheckPhoneVerification {\r\n    action: 'CHECK_PHONE_VERIFICATION',\r\n    payload: {\r\n        phone: string,\r\n        onFinalize?: ()=>void\r\n    }\r\n}\r\nexport interface ISendPhoneVerification {\r\n    action: 'SEND_PHONE_VERIFICATION',\r\n    payload: {\r\n        phone: string,\r\n        onFinalize?: ()=>void\r\n    }\r\n}\r\nexport type IPerformVerification = ICheckEmailVerification | ISendEmailVerification | ICheckPhoneVerification | ISendPhoneVerification;\r\n\r\nexport type TVerificationCodeStatus =  'DEFAULT' | 'INCORRECT' | 'VALID' | 'PASSED_LIMIT';\r\nexport enum EErrorMessages {\r\n    SomethingWentWrong = 'Something went wrong.',\r\n    FillAllFields = 'Please fill all fields in order to continue',\r\n}\r\nexport interface IErrorData {hasError:boolean,msg:string}\r\nexport interface CountriesData  {\r\n    phoneCode:number,\r\n    countryCode: string,\r\n    countryName:string\r\n}",
            "properties": [
                {
                    "name": "hasError",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 117
                },
                {
                    "name": "msg",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 117
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "IErrorData",
            "id": "interface-IErrorData-e3047e083ba4458a0a7ccedf55580dcd3b45fff66ec0b4fd1c065bc906803fb5c80f18e5ca74e28f76749dd06204e6ed3727f9496c6e88e6ef23f103b65f048c-1",
            "file": "src/app/sign-up/models/kyc.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IStepsObj {\r\n    currentStep: number,\r\n    maxSteps: number,\r\n    minSteps: number\r\n}\r\n\r\nexport interface IKycData {\r\n    businessTypes: 'companyAcc' | 'privateAcc' | 'invitedAcc';\r\n}\r\n\r\nexport interface IKYCFormGroups {\r\n    step_1: {\r\n        companyAcc: {isActive:boolean, countrySelected:string},\r\n        privateAcc:{isActive:boolean, countrySelected:string},\r\n        invitedAcc:{isActive:boolean}\r\n    },\r\n    step_2: {\r\n        email: string\r\n    }\r\n}\r\n\r\nexport enum EBusinessType {\r\n    companyAccount = \"companyAcc\",\r\n    privateAccount = \"privateAcc\",\r\n    invitedAccount = \"invitedAcc\"\r\n}\r\nexport enum EKycStatus {\r\n    basicKYC = 1,\r\n    partialKYC = 2,\r\n    fullKYC = 3\r\n}\r\n\r\nexport type TBusinessTypes = EBusinessType.companyAccount | EBusinessType.privateAccount;\r\nexport enum EDetailsToShowNames {\r\n    DEFAULT = \"DEFAULT\",\r\n    companyAcc = \"companyAcc\",\r\n    privateAcc = \"privateAcc\",\r\n    invitedAcc = \"invitedAcc\",\r\n    email = \"email\",\r\n    emailConfirmation = \"emailConfirmation\",\r\n    phone=  \"phone\",\r\n    phoneConfirmation = \"phoneConfirmation\",\r\n    createdPassword = \"createdPassword\",\r\n    personalDetails = \"personalDetails\",\r\n    personalAddress = \"personalAddress\",\r\n}\r\nexport interface IDetailsToShow {\r\n    step_1: {\r\n        detailName: IKycData['businessTypes'] | EDetailsToShowNames.DEFAULT,\r\n    },\r\n    step_2: {\r\n        detailName: EDetailsToShowNames.email\r\n    },\r\n    step_3: {\r\n        detailName:  EDetailsToShowNames.emailConfirmation\r\n    },\r\n    step_4: {\r\n        detailName:  EDetailsToShowNames.phone\r\n    },\r\n    step_5: {\r\n        detailName:  EDetailsToShowNames.phoneConfirmation\r\n    },\r\n    step_6: {\r\n        detailName:  EDetailsToShowNames.createdPassword\r\n    },\r\n    step_7: {\r\n        detailName:  EDetailsToShowNames.personalDetails\r\n    },\r\n    step_8: {\r\n        detailName: EDetailsToShowNames.personalAddress\r\n    }\r\n}\r\n\r\nexport const detailsToShow: IDetailsToShow = {\r\n    step_1: {\r\n        detailName: EDetailsToShowNames.DEFAULT,\r\n    },\r\n    step_2: {\r\n        detailName: EDetailsToShowNames.email,\r\n    },\r\n    step_3: {\r\n        detailName: EDetailsToShowNames.emailConfirmation,\r\n    },\r\n    step_4:{\r\n        detailName: EDetailsToShowNames.phone,\r\n    },\r\n    step_5: {\r\n        detailName: EDetailsToShowNames.phoneConfirmation,\r\n    },\r\n    step_6: {\r\n        detailName: EDetailsToShowNames.createdPassword\r\n    },\r\n    step_7: {\r\n        detailName: EDetailsToShowNames.personalDetails\r\n    },\r\n    step_8: {\r\n        detailName: EDetailsToShowNames.personalAddress\r\n    },\r\n}\r\n\r\nexport enum EStepNumber {\r\n    typeOfBusiness = 1,\r\n    email = 2,\r\n    emailConfirmation = 3,\r\n    phone = 4,\r\n    phoneConfirmation = 5,\r\n    createPassword = 6,\r\n    personalDetails = 7,\r\n    personalAddress = 8\r\n}\r\n\r\nexport enum VerificationReturnType\r\n{\r\n    Success = 1,\r\n    GeneralError = 2,\r\n    PassedLimitError = 3,\r\n}\r\n\r\nexport enum SiteSource\r\n{\r\n    Ofakim = 1,\r\n    Okoora = 2\r\n}\r\n\r\nexport type EmailVerificationPerCustomerResponse = { SiteSource :any}\r\n\r\nexport type VerificationReturnTypeOptions = VerificationReturnType.Success | VerificationReturnType.GeneralError | VerificationReturnType.PassedLimitError;\r\nexport type TSiteSource = SiteSource.Ofakim | SiteSource.Okoora;\r\nexport type TSendMailResponse = {\r\n    Success:VerificationReturnTypeOptions, \r\n    SiteSource: TSiteSource,\r\n    PassedLimitError?:VerificationReturnTypeOptions\r\n}\r\n\r\nexport interface ICheckEmailVerification {\r\n    action: 'CHECK_EMAIL_VERIFICATION',\r\n    payload: {\r\n        email: string,\r\n        onFinalize?: ()=>void\r\n    }\r\n}\r\nexport interface ISendEmailVerification {\r\n    action: 'SEND_EMAIL_VERIFICATION',\r\n    payload: {\r\n        email: string,\r\n        onFinalize?: ()=>void\r\n    }\r\n}\r\nexport interface ICheckPhoneVerification {\r\n    action: 'CHECK_PHONE_VERIFICATION',\r\n    payload: {\r\n        phone: string,\r\n        onFinalize?: ()=>void\r\n    }\r\n}\r\nexport interface ISendPhoneVerification {\r\n    action: 'SEND_PHONE_VERIFICATION',\r\n    payload: {\r\n        phone: string,\r\n        onFinalize?: ()=>void\r\n    }\r\n}\r\nexport type IPerformVerification = ICheckEmailVerification | ISendEmailVerification | ICheckPhoneVerification | ISendPhoneVerification;\r\n\r\nexport type TVerificationCodeStatus =  'DEFAULT' | 'INCORRECT' | 'VALID' | 'PASSED_LIMIT';\r\nexport enum EErrorMessages {\r\n    SomethingWentWrong = 'Something went wrong.',\r\n    FillAllFields = 'Please fill all fields in order to continue',\r\n}\r\nexport interface IErrorData {hasError:boolean,msg:string}\r\nexport interface CountriesData  {\r\n    phoneCode:number,\r\n    countryCode: string,\r\n    countryName:string\r\n}",
            "properties": [
                {
                    "name": "hasError",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 170
                },
                {
                    "name": "msg",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 170
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "IErrorData-1"
        },
        {
            "name": "IGlobalData",
            "id": "interface-IGlobalData-f59e90aecfb8ee934a7557f1ed6c1c297e18b119f4d1f13d5ecbbc5376b8253648263db15f36e8f25be2fbed528c832145ef78629825a5a1f890401f442b8d43",
            "file": "src/app/sign-up/models/general.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IGlobalData {\r\n    appLanguages: ['he', 'en'],\r\n}\r\n",
            "properties": [
                {
                    "name": "appLanguages",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[\"he\", \"en\"]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "IKycData",
            "id": "interface-IKycData-4be3965b61c6750fdb457d02af50ca9948932d9dac9a359fe5373f67d4d48177c6f65e31e07dc2869b478042f33f268366a2f3e3b2fff039d385df02641f3863",
            "file": "src/app/sign-up/kyc.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IStepsObj {\r\n    currentStep: number,\r\n    maxSteps: number,\r\n    minSteps: number\r\n}\r\n\r\nexport interface IKycData {\r\n    businessTypes: 'companyAcc' | 'privateAcc' | 'invitedAcc';\r\n}\r\n\r\nexport interface IKYCFormGroups {\r\n    step_1: {\r\n        companyAcc: {isActive:boolean, countrySelected:string},\r\n        privateAcc:{isActive:boolean, countrySelected:string},\r\n        invitedAcc:{isActive:boolean}\r\n    },\r\n    step_2: {\r\n        email: string\r\n    }\r\n}\r\n\r\nexport enum EBusinessType {\r\n    companyAccount = \"companyAcc\",\r\n    privateAccount = \"privateAcc\",\r\n    invitedAccount = \"invitedAcc\"\r\n}\r\nexport enum EKycStatus {\r\n    basicKYC = 1,\r\n    partialKYC = 2,\r\n    fullKYC = 3\r\n}\r\n\r\nexport type TBusinessTypes = EBusinessType.companyAccount | EBusinessType.privateAccount;\r\nexport enum EDetailsToShowNames {\r\n    DEFAULT = \"DEFAULT\",\r\n    companyAcc = \"companyAcc\",\r\n    privateAcc = \"privateAcc\",\r\n    invitedAcc = \"invitedAcc\",\r\n    email = \"email\",\r\n    emailConfirmation = \"emailConfirmation\",\r\n    phone=  \"phone\",\r\n    phoneConfirmation = \"phoneConfirmation\",\r\n    createdPassword = \"createdPassword\",\r\n    personalDetails = \"personalDetails\",\r\n    personalAddress = \"personalAddress\",\r\n}\r\n\r\nexport enum EStepNumber {\r\n    typeOfBusiness = 1,\r\n    email = 2,\r\n    emailConfirmation = 3,\r\n    phone = 4,\r\n    phoneConfirmation = 5,\r\n    createPassword = 6,\r\n    personalDetails = 7,\r\n    personalAddress = 8\r\n}\r\n\r\nexport enum VerificationReturnType\r\n{\r\n    Success = 1,\r\n    GeneralError = 2,\r\n    PassedLimitError = 3,\r\n}\r\n\r\nexport enum SiteSource\r\n{\r\n    Ofakim = 1,\r\n    Okoora = 2\r\n}\r\n\r\nexport type EmailVerificationPerCustomerResponse = { SiteSource :any}\r\n\r\nexport type VerificationReturnTypeOptions = VerificationReturnType.Success | VerificationReturnType.GeneralError | VerificationReturnType.PassedLimitError;\r\nexport type TSiteSource = SiteSource.Ofakim | SiteSource.Okoora;\r\nexport type TSendMailResponse = {\r\n    Success:VerificationReturnTypeOptions, \r\n    SiteSource: TSiteSource,\r\n    PassedLimitError?:VerificationReturnTypeOptions\r\n}\r\n\r\nexport interface ICheckEmailVerification {\r\n    action: 'CHECK_EMAIL_VERIFICATION',\r\n    payload: {\r\n        email: string,\r\n        onFinalize?: ()=>void\r\n    }\r\n}\r\nexport interface ISendEmailVerification {\r\n    action: 'SEND_EMAIL_VERIFICATION',\r\n    payload: {\r\n        email: string,\r\n        onFinalize?: ()=>void\r\n    }\r\n}\r\nexport interface ICheckPhoneVerification {\r\n    action: 'CHECK_PHONE_VERIFICATION',\r\n    payload: {\r\n        phone: string,\r\n        onFinalize?: ()=>void\r\n    }\r\n}\r\nexport interface ISendPhoneVerification {\r\n    action: 'SEND_PHONE_VERIFICATION',\r\n    payload: {\r\n        phone: string,\r\n        onFinalize?: ()=>void\r\n    }\r\n}\r\nexport type IPerformVerification = ICheckEmailVerification | ISendEmailVerification | ICheckPhoneVerification | ISendPhoneVerification;\r\n\r\nexport type TVerificationCodeStatus =  'DEFAULT' | 'INCORRECT' | 'VALID' | 'PASSED_LIMIT';\r\nexport enum EErrorMessages {\r\n    SomethingWentWrong = 'Something went wrong.',\r\n    FillAllFields = 'Please fill all fields in order to continue',\r\n}\r\nexport interface IErrorData {hasError:boolean,msg:string}\r\nexport interface CountriesData  {\r\n    phoneCode:number,\r\n    countryCode: string,\r\n    countryName:string\r\n}",
            "properties": [
                {
                    "name": "businessTypes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"companyAcc\" | \"privateAcc\" | \"invitedAcc\"",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "IKycData",
            "id": "interface-IKycData-e3047e083ba4458a0a7ccedf55580dcd3b45fff66ec0b4fd1c065bc906803fb5c80f18e5ca74e28f76749dd06204e6ed3727f9496c6e88e6ef23f103b65f048c-1",
            "file": "src/app/sign-up/models/kyc.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IStepsObj {\r\n    currentStep: number,\r\n    maxSteps: number,\r\n    minSteps: number\r\n}\r\n\r\nexport interface IKycData {\r\n    businessTypes: 'companyAcc' | 'privateAcc' | 'invitedAcc';\r\n}\r\n\r\nexport interface IKYCFormGroups {\r\n    step_1: {\r\n        companyAcc: {isActive:boolean, countrySelected:string},\r\n        privateAcc:{isActive:boolean, countrySelected:string},\r\n        invitedAcc:{isActive:boolean}\r\n    },\r\n    step_2: {\r\n        email: string\r\n    }\r\n}\r\n\r\nexport enum EBusinessType {\r\n    companyAccount = \"companyAcc\",\r\n    privateAccount = \"privateAcc\",\r\n    invitedAccount = \"invitedAcc\"\r\n}\r\nexport enum EKycStatus {\r\n    basicKYC = 1,\r\n    partialKYC = 2,\r\n    fullKYC = 3\r\n}\r\n\r\nexport type TBusinessTypes = EBusinessType.companyAccount | EBusinessType.privateAccount;\r\nexport enum EDetailsToShowNames {\r\n    DEFAULT = \"DEFAULT\",\r\n    companyAcc = \"companyAcc\",\r\n    privateAcc = \"privateAcc\",\r\n    invitedAcc = \"invitedAcc\",\r\n    email = \"email\",\r\n    emailConfirmation = \"emailConfirmation\",\r\n    phone=  \"phone\",\r\n    phoneConfirmation = \"phoneConfirmation\",\r\n    createdPassword = \"createdPassword\",\r\n    personalDetails = \"personalDetails\",\r\n    personalAddress = \"personalAddress\",\r\n}\r\nexport interface IDetailsToShow {\r\n    step_1: {\r\n        detailName: IKycData['businessTypes'] | EDetailsToShowNames.DEFAULT,\r\n    },\r\n    step_2: {\r\n        detailName: EDetailsToShowNames.email\r\n    },\r\n    step_3: {\r\n        detailName:  EDetailsToShowNames.emailConfirmation\r\n    },\r\n    step_4: {\r\n        detailName:  EDetailsToShowNames.phone\r\n    },\r\n    step_5: {\r\n        detailName:  EDetailsToShowNames.phoneConfirmation\r\n    },\r\n    step_6: {\r\n        detailName:  EDetailsToShowNames.createdPassword\r\n    },\r\n    step_7: {\r\n        detailName:  EDetailsToShowNames.personalDetails\r\n    },\r\n    step_8: {\r\n        detailName: EDetailsToShowNames.personalAddress\r\n    }\r\n}\r\n\r\nexport const detailsToShow: IDetailsToShow = {\r\n    step_1: {\r\n        detailName: EDetailsToShowNames.DEFAULT,\r\n    },\r\n    step_2: {\r\n        detailName: EDetailsToShowNames.email,\r\n    },\r\n    step_3: {\r\n        detailName: EDetailsToShowNames.emailConfirmation,\r\n    },\r\n    step_4:{\r\n        detailName: EDetailsToShowNames.phone,\r\n    },\r\n    step_5: {\r\n        detailName: EDetailsToShowNames.phoneConfirmation,\r\n    },\r\n    step_6: {\r\n        detailName: EDetailsToShowNames.createdPassword\r\n    },\r\n    step_7: {\r\n        detailName: EDetailsToShowNames.personalDetails\r\n    },\r\n    step_8: {\r\n        detailName: EDetailsToShowNames.personalAddress\r\n    },\r\n}\r\n\r\nexport enum EStepNumber {\r\n    typeOfBusiness = 1,\r\n    email = 2,\r\n    emailConfirmation = 3,\r\n    phone = 4,\r\n    phoneConfirmation = 5,\r\n    createPassword = 6,\r\n    personalDetails = 7,\r\n    personalAddress = 8\r\n}\r\n\r\nexport enum VerificationReturnType\r\n{\r\n    Success = 1,\r\n    GeneralError = 2,\r\n    PassedLimitError = 3,\r\n}\r\n\r\nexport enum SiteSource\r\n{\r\n    Ofakim = 1,\r\n    Okoora = 2\r\n}\r\n\r\nexport type EmailVerificationPerCustomerResponse = { SiteSource :any}\r\n\r\nexport type VerificationReturnTypeOptions = VerificationReturnType.Success | VerificationReturnType.GeneralError | VerificationReturnType.PassedLimitError;\r\nexport type TSiteSource = SiteSource.Ofakim | SiteSource.Okoora;\r\nexport type TSendMailResponse = {\r\n    Success:VerificationReturnTypeOptions, \r\n    SiteSource: TSiteSource,\r\n    PassedLimitError?:VerificationReturnTypeOptions\r\n}\r\n\r\nexport interface ICheckEmailVerification {\r\n    action: 'CHECK_EMAIL_VERIFICATION',\r\n    payload: {\r\n        email: string,\r\n        onFinalize?: ()=>void\r\n    }\r\n}\r\nexport interface ISendEmailVerification {\r\n    action: 'SEND_EMAIL_VERIFICATION',\r\n    payload: {\r\n        email: string,\r\n        onFinalize?: ()=>void\r\n    }\r\n}\r\nexport interface ICheckPhoneVerification {\r\n    action: 'CHECK_PHONE_VERIFICATION',\r\n    payload: {\r\n        phone: string,\r\n        onFinalize?: ()=>void\r\n    }\r\n}\r\nexport interface ISendPhoneVerification {\r\n    action: 'SEND_PHONE_VERIFICATION',\r\n    payload: {\r\n        phone: string,\r\n        onFinalize?: ()=>void\r\n    }\r\n}\r\nexport type IPerformVerification = ICheckEmailVerification | ISendEmailVerification | ICheckPhoneVerification | ISendPhoneVerification;\r\n\r\nexport type TVerificationCodeStatus =  'DEFAULT' | 'INCORRECT' | 'VALID' | 'PASSED_LIMIT';\r\nexport enum EErrorMessages {\r\n    SomethingWentWrong = 'Something went wrong.',\r\n    FillAllFields = 'Please fill all fields in order to continue',\r\n}\r\nexport interface IErrorData {hasError:boolean,msg:string}\r\nexport interface CountriesData  {\r\n    phoneCode:number,\r\n    countryCode: string,\r\n    countryName:string\r\n}",
            "properties": [
                {
                    "name": "businessTypes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"companyAcc\" | \"privateAcc\" | \"invitedAcc\"",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "IKycData-1"
        },
        {
            "name": "IKYCFormGroups",
            "id": "interface-IKYCFormGroups-4be3965b61c6750fdb457d02af50ca9948932d9dac9a359fe5373f67d4d48177c6f65e31e07dc2869b478042f33f268366a2f3e3b2fff039d385df02641f3863",
            "file": "src/app/sign-up/kyc.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IStepsObj {\r\n    currentStep: number,\r\n    maxSteps: number,\r\n    minSteps: number\r\n}\r\n\r\nexport interface IKycData {\r\n    businessTypes: 'companyAcc' | 'privateAcc' | 'invitedAcc';\r\n}\r\n\r\nexport interface IKYCFormGroups {\r\n    step_1: {\r\n        companyAcc: {isActive:boolean, countrySelected:string},\r\n        privateAcc:{isActive:boolean, countrySelected:string},\r\n        invitedAcc:{isActive:boolean}\r\n    },\r\n    step_2: {\r\n        email: string\r\n    }\r\n}\r\n\r\nexport enum EBusinessType {\r\n    companyAccount = \"companyAcc\",\r\n    privateAccount = \"privateAcc\",\r\n    invitedAccount = \"invitedAcc\"\r\n}\r\nexport enum EKycStatus {\r\n    basicKYC = 1,\r\n    partialKYC = 2,\r\n    fullKYC = 3\r\n}\r\n\r\nexport type TBusinessTypes = EBusinessType.companyAccount | EBusinessType.privateAccount;\r\nexport enum EDetailsToShowNames {\r\n    DEFAULT = \"DEFAULT\",\r\n    companyAcc = \"companyAcc\",\r\n    privateAcc = \"privateAcc\",\r\n    invitedAcc = \"invitedAcc\",\r\n    email = \"email\",\r\n    emailConfirmation = \"emailConfirmation\",\r\n    phone=  \"phone\",\r\n    phoneConfirmation = \"phoneConfirmation\",\r\n    createdPassword = \"createdPassword\",\r\n    personalDetails = \"personalDetails\",\r\n    personalAddress = \"personalAddress\",\r\n}\r\n\r\nexport enum EStepNumber {\r\n    typeOfBusiness = 1,\r\n    email = 2,\r\n    emailConfirmation = 3,\r\n    phone = 4,\r\n    phoneConfirmation = 5,\r\n    createPassword = 6,\r\n    personalDetails = 7,\r\n    personalAddress = 8\r\n}\r\n\r\nexport enum VerificationReturnType\r\n{\r\n    Success = 1,\r\n    GeneralError = 2,\r\n    PassedLimitError = 3,\r\n}\r\n\r\nexport enum SiteSource\r\n{\r\n    Ofakim = 1,\r\n    Okoora = 2\r\n}\r\n\r\nexport type EmailVerificationPerCustomerResponse = { SiteSource :any}\r\n\r\nexport type VerificationReturnTypeOptions = VerificationReturnType.Success | VerificationReturnType.GeneralError | VerificationReturnType.PassedLimitError;\r\nexport type TSiteSource = SiteSource.Ofakim | SiteSource.Okoora;\r\nexport type TSendMailResponse = {\r\n    Success:VerificationReturnTypeOptions, \r\n    SiteSource: TSiteSource,\r\n    PassedLimitError?:VerificationReturnTypeOptions\r\n}\r\n\r\nexport interface ICheckEmailVerification {\r\n    action: 'CHECK_EMAIL_VERIFICATION',\r\n    payload: {\r\n        email: string,\r\n        onFinalize?: ()=>void\r\n    }\r\n}\r\nexport interface ISendEmailVerification {\r\n    action: 'SEND_EMAIL_VERIFICATION',\r\n    payload: {\r\n        email: string,\r\n        onFinalize?: ()=>void\r\n    }\r\n}\r\nexport interface ICheckPhoneVerification {\r\n    action: 'CHECK_PHONE_VERIFICATION',\r\n    payload: {\r\n        phone: string,\r\n        onFinalize?: ()=>void\r\n    }\r\n}\r\nexport interface ISendPhoneVerification {\r\n    action: 'SEND_PHONE_VERIFICATION',\r\n    payload: {\r\n        phone: string,\r\n        onFinalize?: ()=>void\r\n    }\r\n}\r\nexport type IPerformVerification = ICheckEmailVerification | ISendEmailVerification | ICheckPhoneVerification | ISendPhoneVerification;\r\n\r\nexport type TVerificationCodeStatus =  'DEFAULT' | 'INCORRECT' | 'VALID' | 'PASSED_LIMIT';\r\nexport enum EErrorMessages {\r\n    SomethingWentWrong = 'Something went wrong.',\r\n    FillAllFields = 'Please fill all fields in order to continue',\r\n}\r\nexport interface IErrorData {hasError:boolean,msg:string}\r\nexport interface CountriesData  {\r\n    phoneCode:number,\r\n    countryCode: string,\r\n    countryName:string\r\n}",
            "properties": [
                {
                    "name": "step_1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "step_2",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "IKYCFormGroups",
            "id": "interface-IKYCFormGroups-e3047e083ba4458a0a7ccedf55580dcd3b45fff66ec0b4fd1c065bc906803fb5c80f18e5ca74e28f76749dd06204e6ed3727f9496c6e88e6ef23f103b65f048c-1",
            "file": "src/app/sign-up/models/kyc.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IStepsObj {\r\n    currentStep: number,\r\n    maxSteps: number,\r\n    minSteps: number\r\n}\r\n\r\nexport interface IKycData {\r\n    businessTypes: 'companyAcc' | 'privateAcc' | 'invitedAcc';\r\n}\r\n\r\nexport interface IKYCFormGroups {\r\n    step_1: {\r\n        companyAcc: {isActive:boolean, countrySelected:string},\r\n        privateAcc:{isActive:boolean, countrySelected:string},\r\n        invitedAcc:{isActive:boolean}\r\n    },\r\n    step_2: {\r\n        email: string\r\n    }\r\n}\r\n\r\nexport enum EBusinessType {\r\n    companyAccount = \"companyAcc\",\r\n    privateAccount = \"privateAcc\",\r\n    invitedAccount = \"invitedAcc\"\r\n}\r\nexport enum EKycStatus {\r\n    basicKYC = 1,\r\n    partialKYC = 2,\r\n    fullKYC = 3\r\n}\r\n\r\nexport type TBusinessTypes = EBusinessType.companyAccount | EBusinessType.privateAccount;\r\nexport enum EDetailsToShowNames {\r\n    DEFAULT = \"DEFAULT\",\r\n    companyAcc = \"companyAcc\",\r\n    privateAcc = \"privateAcc\",\r\n    invitedAcc = \"invitedAcc\",\r\n    email = \"email\",\r\n    emailConfirmation = \"emailConfirmation\",\r\n    phone=  \"phone\",\r\n    phoneConfirmation = \"phoneConfirmation\",\r\n    createdPassword = \"createdPassword\",\r\n    personalDetails = \"personalDetails\",\r\n    personalAddress = \"personalAddress\",\r\n}\r\nexport interface IDetailsToShow {\r\n    step_1: {\r\n        detailName: IKycData['businessTypes'] | EDetailsToShowNames.DEFAULT,\r\n    },\r\n    step_2: {\r\n        detailName: EDetailsToShowNames.email\r\n    },\r\n    step_3: {\r\n        detailName:  EDetailsToShowNames.emailConfirmation\r\n    },\r\n    step_4: {\r\n        detailName:  EDetailsToShowNames.phone\r\n    },\r\n    step_5: {\r\n        detailName:  EDetailsToShowNames.phoneConfirmation\r\n    },\r\n    step_6: {\r\n        detailName:  EDetailsToShowNames.createdPassword\r\n    },\r\n    step_7: {\r\n        detailName:  EDetailsToShowNames.personalDetails\r\n    },\r\n    step_8: {\r\n        detailName: EDetailsToShowNames.personalAddress\r\n    }\r\n}\r\n\r\nexport const detailsToShow: IDetailsToShow = {\r\n    step_1: {\r\n        detailName: EDetailsToShowNames.DEFAULT,\r\n    },\r\n    step_2: {\r\n        detailName: EDetailsToShowNames.email,\r\n    },\r\n    step_3: {\r\n        detailName: EDetailsToShowNames.emailConfirmation,\r\n    },\r\n    step_4:{\r\n        detailName: EDetailsToShowNames.phone,\r\n    },\r\n    step_5: {\r\n        detailName: EDetailsToShowNames.phoneConfirmation,\r\n    },\r\n    step_6: {\r\n        detailName: EDetailsToShowNames.createdPassword\r\n    },\r\n    step_7: {\r\n        detailName: EDetailsToShowNames.personalDetails\r\n    },\r\n    step_8: {\r\n        detailName: EDetailsToShowNames.personalAddress\r\n    },\r\n}\r\n\r\nexport enum EStepNumber {\r\n    typeOfBusiness = 1,\r\n    email = 2,\r\n    emailConfirmation = 3,\r\n    phone = 4,\r\n    phoneConfirmation = 5,\r\n    createPassword = 6,\r\n    personalDetails = 7,\r\n    personalAddress = 8\r\n}\r\n\r\nexport enum VerificationReturnType\r\n{\r\n    Success = 1,\r\n    GeneralError = 2,\r\n    PassedLimitError = 3,\r\n}\r\n\r\nexport enum SiteSource\r\n{\r\n    Ofakim = 1,\r\n    Okoora = 2\r\n}\r\n\r\nexport type EmailVerificationPerCustomerResponse = { SiteSource :any}\r\n\r\nexport type VerificationReturnTypeOptions = VerificationReturnType.Success | VerificationReturnType.GeneralError | VerificationReturnType.PassedLimitError;\r\nexport type TSiteSource = SiteSource.Ofakim | SiteSource.Okoora;\r\nexport type TSendMailResponse = {\r\n    Success:VerificationReturnTypeOptions, \r\n    SiteSource: TSiteSource,\r\n    PassedLimitError?:VerificationReturnTypeOptions\r\n}\r\n\r\nexport interface ICheckEmailVerification {\r\n    action: 'CHECK_EMAIL_VERIFICATION',\r\n    payload: {\r\n        email: string,\r\n        onFinalize?: ()=>void\r\n    }\r\n}\r\nexport interface ISendEmailVerification {\r\n    action: 'SEND_EMAIL_VERIFICATION',\r\n    payload: {\r\n        email: string,\r\n        onFinalize?: ()=>void\r\n    }\r\n}\r\nexport interface ICheckPhoneVerification {\r\n    action: 'CHECK_PHONE_VERIFICATION',\r\n    payload: {\r\n        phone: string,\r\n        onFinalize?: ()=>void\r\n    }\r\n}\r\nexport interface ISendPhoneVerification {\r\n    action: 'SEND_PHONE_VERIFICATION',\r\n    payload: {\r\n        phone: string,\r\n        onFinalize?: ()=>void\r\n    }\r\n}\r\nexport type IPerformVerification = ICheckEmailVerification | ISendEmailVerification | ICheckPhoneVerification | ISendPhoneVerification;\r\n\r\nexport type TVerificationCodeStatus =  'DEFAULT' | 'INCORRECT' | 'VALID' | 'PASSED_LIMIT';\r\nexport enum EErrorMessages {\r\n    SomethingWentWrong = 'Something went wrong.',\r\n    FillAllFields = 'Please fill all fields in order to continue',\r\n}\r\nexport interface IErrorData {hasError:boolean,msg:string}\r\nexport interface CountriesData  {\r\n    phoneCode:number,\r\n    countryCode: string,\r\n    countryName:string\r\n}",
            "properties": [
                {
                    "name": "step_1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "step_2",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "IKYCFormGroups-1"
        },
        {
            "name": "ISendEmailVerification",
            "id": "interface-ISendEmailVerification-4be3965b61c6750fdb457d02af50ca9948932d9dac9a359fe5373f67d4d48177c6f65e31e07dc2869b478042f33f268366a2f3e3b2fff039d385df02641f3863",
            "file": "src/app/sign-up/kyc.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IStepsObj {\r\n    currentStep: number,\r\n    maxSteps: number,\r\n    minSteps: number\r\n}\r\n\r\nexport interface IKycData {\r\n    businessTypes: 'companyAcc' | 'privateAcc' | 'invitedAcc';\r\n}\r\n\r\nexport interface IKYCFormGroups {\r\n    step_1: {\r\n        companyAcc: {isActive:boolean, countrySelected:string},\r\n        privateAcc:{isActive:boolean, countrySelected:string},\r\n        invitedAcc:{isActive:boolean}\r\n    },\r\n    step_2: {\r\n        email: string\r\n    }\r\n}\r\n\r\nexport enum EBusinessType {\r\n    companyAccount = \"companyAcc\",\r\n    privateAccount = \"privateAcc\",\r\n    invitedAccount = \"invitedAcc\"\r\n}\r\nexport enum EKycStatus {\r\n    basicKYC = 1,\r\n    partialKYC = 2,\r\n    fullKYC = 3\r\n}\r\n\r\nexport type TBusinessTypes = EBusinessType.companyAccount | EBusinessType.privateAccount;\r\nexport enum EDetailsToShowNames {\r\n    DEFAULT = \"DEFAULT\",\r\n    companyAcc = \"companyAcc\",\r\n    privateAcc = \"privateAcc\",\r\n    invitedAcc = \"invitedAcc\",\r\n    email = \"email\",\r\n    emailConfirmation = \"emailConfirmation\",\r\n    phone=  \"phone\",\r\n    phoneConfirmation = \"phoneConfirmation\",\r\n    createdPassword = \"createdPassword\",\r\n    personalDetails = \"personalDetails\",\r\n    personalAddress = \"personalAddress\",\r\n}\r\n\r\nexport enum EStepNumber {\r\n    typeOfBusiness = 1,\r\n    email = 2,\r\n    emailConfirmation = 3,\r\n    phone = 4,\r\n    phoneConfirmation = 5,\r\n    createPassword = 6,\r\n    personalDetails = 7,\r\n    personalAddress = 8\r\n}\r\n\r\nexport enum VerificationReturnType\r\n{\r\n    Success = 1,\r\n    GeneralError = 2,\r\n    PassedLimitError = 3,\r\n}\r\n\r\nexport enum SiteSource\r\n{\r\n    Ofakim = 1,\r\n    Okoora = 2\r\n}\r\n\r\nexport type EmailVerificationPerCustomerResponse = { SiteSource :any}\r\n\r\nexport type VerificationReturnTypeOptions = VerificationReturnType.Success | VerificationReturnType.GeneralError | VerificationReturnType.PassedLimitError;\r\nexport type TSiteSource = SiteSource.Ofakim | SiteSource.Okoora;\r\nexport type TSendMailResponse = {\r\n    Success:VerificationReturnTypeOptions, \r\n    SiteSource: TSiteSource,\r\n    PassedLimitError?:VerificationReturnTypeOptions\r\n}\r\n\r\nexport interface ICheckEmailVerification {\r\n    action: 'CHECK_EMAIL_VERIFICATION',\r\n    payload: {\r\n        email: string,\r\n        onFinalize?: ()=>void\r\n    }\r\n}\r\nexport interface ISendEmailVerification {\r\n    action: 'SEND_EMAIL_VERIFICATION',\r\n    payload: {\r\n        email: string,\r\n        onFinalize?: ()=>void\r\n    }\r\n}\r\nexport interface ICheckPhoneVerification {\r\n    action: 'CHECK_PHONE_VERIFICATION',\r\n    payload: {\r\n        phone: string,\r\n        onFinalize?: ()=>void\r\n    }\r\n}\r\nexport interface ISendPhoneVerification {\r\n    action: 'SEND_PHONE_VERIFICATION',\r\n    payload: {\r\n        phone: string,\r\n        onFinalize?: ()=>void\r\n    }\r\n}\r\nexport type IPerformVerification = ICheckEmailVerification | ISendEmailVerification | ICheckPhoneVerification | ISendPhoneVerification;\r\n\r\nexport type TVerificationCodeStatus =  'DEFAULT' | 'INCORRECT' | 'VALID' | 'PASSED_LIMIT';\r\nexport enum EErrorMessages {\r\n    SomethingWentWrong = 'Something went wrong.',\r\n    FillAllFields = 'Please fill all fields in order to continue',\r\n}\r\nexport interface IErrorData {hasError:boolean,msg:string}\r\nexport interface CountriesData  {\r\n    phoneCode:number,\r\n    countryCode: string,\r\n    countryName:string\r\n}",
            "properties": [
                {
                    "name": "action",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 90
                },
                {
                    "name": "payload",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 91
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "ISendEmailVerification",
            "id": "interface-ISendEmailVerification-e3047e083ba4458a0a7ccedf55580dcd3b45fff66ec0b4fd1c065bc906803fb5c80f18e5ca74e28f76749dd06204e6ed3727f9496c6e88e6ef23f103b65f048c-1",
            "file": "src/app/sign-up/models/kyc.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IStepsObj {\r\n    currentStep: number,\r\n    maxSteps: number,\r\n    minSteps: number\r\n}\r\n\r\nexport interface IKycData {\r\n    businessTypes: 'companyAcc' | 'privateAcc' | 'invitedAcc';\r\n}\r\n\r\nexport interface IKYCFormGroups {\r\n    step_1: {\r\n        companyAcc: {isActive:boolean, countrySelected:string},\r\n        privateAcc:{isActive:boolean, countrySelected:string},\r\n        invitedAcc:{isActive:boolean}\r\n    },\r\n    step_2: {\r\n        email: string\r\n    }\r\n}\r\n\r\nexport enum EBusinessType {\r\n    companyAccount = \"companyAcc\",\r\n    privateAccount = \"privateAcc\",\r\n    invitedAccount = \"invitedAcc\"\r\n}\r\nexport enum EKycStatus {\r\n    basicKYC = 1,\r\n    partialKYC = 2,\r\n    fullKYC = 3\r\n}\r\n\r\nexport type TBusinessTypes = EBusinessType.companyAccount | EBusinessType.privateAccount;\r\nexport enum EDetailsToShowNames {\r\n    DEFAULT = \"DEFAULT\",\r\n    companyAcc = \"companyAcc\",\r\n    privateAcc = \"privateAcc\",\r\n    invitedAcc = \"invitedAcc\",\r\n    email = \"email\",\r\n    emailConfirmation = \"emailConfirmation\",\r\n    phone=  \"phone\",\r\n    phoneConfirmation = \"phoneConfirmation\",\r\n    createdPassword = \"createdPassword\",\r\n    personalDetails = \"personalDetails\",\r\n    personalAddress = \"personalAddress\",\r\n}\r\nexport interface IDetailsToShow {\r\n    step_1: {\r\n        detailName: IKycData['businessTypes'] | EDetailsToShowNames.DEFAULT,\r\n    },\r\n    step_2: {\r\n        detailName: EDetailsToShowNames.email\r\n    },\r\n    step_3: {\r\n        detailName:  EDetailsToShowNames.emailConfirmation\r\n    },\r\n    step_4: {\r\n        detailName:  EDetailsToShowNames.phone\r\n    },\r\n    step_5: {\r\n        detailName:  EDetailsToShowNames.phoneConfirmation\r\n    },\r\n    step_6: {\r\n        detailName:  EDetailsToShowNames.createdPassword\r\n    },\r\n    step_7: {\r\n        detailName:  EDetailsToShowNames.personalDetails\r\n    },\r\n    step_8: {\r\n        detailName: EDetailsToShowNames.personalAddress\r\n    }\r\n}\r\n\r\nexport const detailsToShow: IDetailsToShow = {\r\n    step_1: {\r\n        detailName: EDetailsToShowNames.DEFAULT,\r\n    },\r\n    step_2: {\r\n        detailName: EDetailsToShowNames.email,\r\n    },\r\n    step_3: {\r\n        detailName: EDetailsToShowNames.emailConfirmation,\r\n    },\r\n    step_4:{\r\n        detailName: EDetailsToShowNames.phone,\r\n    },\r\n    step_5: {\r\n        detailName: EDetailsToShowNames.phoneConfirmation,\r\n    },\r\n    step_6: {\r\n        detailName: EDetailsToShowNames.createdPassword\r\n    },\r\n    step_7: {\r\n        detailName: EDetailsToShowNames.personalDetails\r\n    },\r\n    step_8: {\r\n        detailName: EDetailsToShowNames.personalAddress\r\n    },\r\n}\r\n\r\nexport enum EStepNumber {\r\n    typeOfBusiness = 1,\r\n    email = 2,\r\n    emailConfirmation = 3,\r\n    phone = 4,\r\n    phoneConfirmation = 5,\r\n    createPassword = 6,\r\n    personalDetails = 7,\r\n    personalAddress = 8\r\n}\r\n\r\nexport enum VerificationReturnType\r\n{\r\n    Success = 1,\r\n    GeneralError = 2,\r\n    PassedLimitError = 3,\r\n}\r\n\r\nexport enum SiteSource\r\n{\r\n    Ofakim = 1,\r\n    Okoora = 2\r\n}\r\n\r\nexport type EmailVerificationPerCustomerResponse = { SiteSource :any}\r\n\r\nexport type VerificationReturnTypeOptions = VerificationReturnType.Success | VerificationReturnType.GeneralError | VerificationReturnType.PassedLimitError;\r\nexport type TSiteSource = SiteSource.Ofakim | SiteSource.Okoora;\r\nexport type TSendMailResponse = {\r\n    Success:VerificationReturnTypeOptions, \r\n    SiteSource: TSiteSource,\r\n    PassedLimitError?:VerificationReturnTypeOptions\r\n}\r\n\r\nexport interface ICheckEmailVerification {\r\n    action: 'CHECK_EMAIL_VERIFICATION',\r\n    payload: {\r\n        email: string,\r\n        onFinalize?: ()=>void\r\n    }\r\n}\r\nexport interface ISendEmailVerification {\r\n    action: 'SEND_EMAIL_VERIFICATION',\r\n    payload: {\r\n        email: string,\r\n        onFinalize?: ()=>void\r\n    }\r\n}\r\nexport interface ICheckPhoneVerification {\r\n    action: 'CHECK_PHONE_VERIFICATION',\r\n    payload: {\r\n        phone: string,\r\n        onFinalize?: ()=>void\r\n    }\r\n}\r\nexport interface ISendPhoneVerification {\r\n    action: 'SEND_PHONE_VERIFICATION',\r\n    payload: {\r\n        phone: string,\r\n        onFinalize?: ()=>void\r\n    }\r\n}\r\nexport type IPerformVerification = ICheckEmailVerification | ISendEmailVerification | ICheckPhoneVerification | ISendPhoneVerification;\r\n\r\nexport type TVerificationCodeStatus =  'DEFAULT' | 'INCORRECT' | 'VALID' | 'PASSED_LIMIT';\r\nexport enum EErrorMessages {\r\n    SomethingWentWrong = 'Something went wrong.',\r\n    FillAllFields = 'Please fill all fields in order to continue',\r\n}\r\nexport interface IErrorData {hasError:boolean,msg:string}\r\nexport interface CountriesData  {\r\n    phoneCode:number,\r\n    countryCode: string,\r\n    countryName:string\r\n}",
            "properties": [
                {
                    "name": "action",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 143
                },
                {
                    "name": "payload",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 144
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "ISendEmailVerification-1"
        },
        {
            "name": "ISendPhoneVerification",
            "id": "interface-ISendPhoneVerification-4be3965b61c6750fdb457d02af50ca9948932d9dac9a359fe5373f67d4d48177c6f65e31e07dc2869b478042f33f268366a2f3e3b2fff039d385df02641f3863",
            "file": "src/app/sign-up/kyc.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IStepsObj {\r\n    currentStep: number,\r\n    maxSteps: number,\r\n    minSteps: number\r\n}\r\n\r\nexport interface IKycData {\r\n    businessTypes: 'companyAcc' | 'privateAcc' | 'invitedAcc';\r\n}\r\n\r\nexport interface IKYCFormGroups {\r\n    step_1: {\r\n        companyAcc: {isActive:boolean, countrySelected:string},\r\n        privateAcc:{isActive:boolean, countrySelected:string},\r\n        invitedAcc:{isActive:boolean}\r\n    },\r\n    step_2: {\r\n        email: string\r\n    }\r\n}\r\n\r\nexport enum EBusinessType {\r\n    companyAccount = \"companyAcc\",\r\n    privateAccount = \"privateAcc\",\r\n    invitedAccount = \"invitedAcc\"\r\n}\r\nexport enum EKycStatus {\r\n    basicKYC = 1,\r\n    partialKYC = 2,\r\n    fullKYC = 3\r\n}\r\n\r\nexport type TBusinessTypes = EBusinessType.companyAccount | EBusinessType.privateAccount;\r\nexport enum EDetailsToShowNames {\r\n    DEFAULT = \"DEFAULT\",\r\n    companyAcc = \"companyAcc\",\r\n    privateAcc = \"privateAcc\",\r\n    invitedAcc = \"invitedAcc\",\r\n    email = \"email\",\r\n    emailConfirmation = \"emailConfirmation\",\r\n    phone=  \"phone\",\r\n    phoneConfirmation = \"phoneConfirmation\",\r\n    createdPassword = \"createdPassword\",\r\n    personalDetails = \"personalDetails\",\r\n    personalAddress = \"personalAddress\",\r\n}\r\n\r\nexport enum EStepNumber {\r\n    typeOfBusiness = 1,\r\n    email = 2,\r\n    emailConfirmation = 3,\r\n    phone = 4,\r\n    phoneConfirmation = 5,\r\n    createPassword = 6,\r\n    personalDetails = 7,\r\n    personalAddress = 8\r\n}\r\n\r\nexport enum VerificationReturnType\r\n{\r\n    Success = 1,\r\n    GeneralError = 2,\r\n    PassedLimitError = 3,\r\n}\r\n\r\nexport enum SiteSource\r\n{\r\n    Ofakim = 1,\r\n    Okoora = 2\r\n}\r\n\r\nexport type EmailVerificationPerCustomerResponse = { SiteSource :any}\r\n\r\nexport type VerificationReturnTypeOptions = VerificationReturnType.Success | VerificationReturnType.GeneralError | VerificationReturnType.PassedLimitError;\r\nexport type TSiteSource = SiteSource.Ofakim | SiteSource.Okoora;\r\nexport type TSendMailResponse = {\r\n    Success:VerificationReturnTypeOptions, \r\n    SiteSource: TSiteSource,\r\n    PassedLimitError?:VerificationReturnTypeOptions\r\n}\r\n\r\nexport interface ICheckEmailVerification {\r\n    action: 'CHECK_EMAIL_VERIFICATION',\r\n    payload: {\r\n        email: string,\r\n        onFinalize?: ()=>void\r\n    }\r\n}\r\nexport interface ISendEmailVerification {\r\n    action: 'SEND_EMAIL_VERIFICATION',\r\n    payload: {\r\n        email: string,\r\n        onFinalize?: ()=>void\r\n    }\r\n}\r\nexport interface ICheckPhoneVerification {\r\n    action: 'CHECK_PHONE_VERIFICATION',\r\n    payload: {\r\n        phone: string,\r\n        onFinalize?: ()=>void\r\n    }\r\n}\r\nexport interface ISendPhoneVerification {\r\n    action: 'SEND_PHONE_VERIFICATION',\r\n    payload: {\r\n        phone: string,\r\n        onFinalize?: ()=>void\r\n    }\r\n}\r\nexport type IPerformVerification = ICheckEmailVerification | ISendEmailVerification | ICheckPhoneVerification | ISendPhoneVerification;\r\n\r\nexport type TVerificationCodeStatus =  'DEFAULT' | 'INCORRECT' | 'VALID' | 'PASSED_LIMIT';\r\nexport enum EErrorMessages {\r\n    SomethingWentWrong = 'Something went wrong.',\r\n    FillAllFields = 'Please fill all fields in order to continue',\r\n}\r\nexport interface IErrorData {hasError:boolean,msg:string}\r\nexport interface CountriesData  {\r\n    phoneCode:number,\r\n    countryCode: string,\r\n    countryName:string\r\n}",
            "properties": [
                {
                    "name": "action",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 104
                },
                {
                    "name": "payload",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 105
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "ISendPhoneVerification",
            "id": "interface-ISendPhoneVerification-e3047e083ba4458a0a7ccedf55580dcd3b45fff66ec0b4fd1c065bc906803fb5c80f18e5ca74e28f76749dd06204e6ed3727f9496c6e88e6ef23f103b65f048c-1",
            "file": "src/app/sign-up/models/kyc.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IStepsObj {\r\n    currentStep: number,\r\n    maxSteps: number,\r\n    minSteps: number\r\n}\r\n\r\nexport interface IKycData {\r\n    businessTypes: 'companyAcc' | 'privateAcc' | 'invitedAcc';\r\n}\r\n\r\nexport interface IKYCFormGroups {\r\n    step_1: {\r\n        companyAcc: {isActive:boolean, countrySelected:string},\r\n        privateAcc:{isActive:boolean, countrySelected:string},\r\n        invitedAcc:{isActive:boolean}\r\n    },\r\n    step_2: {\r\n        email: string\r\n    }\r\n}\r\n\r\nexport enum EBusinessType {\r\n    companyAccount = \"companyAcc\",\r\n    privateAccount = \"privateAcc\",\r\n    invitedAccount = \"invitedAcc\"\r\n}\r\nexport enum EKycStatus {\r\n    basicKYC = 1,\r\n    partialKYC = 2,\r\n    fullKYC = 3\r\n}\r\n\r\nexport type TBusinessTypes = EBusinessType.companyAccount | EBusinessType.privateAccount;\r\nexport enum EDetailsToShowNames {\r\n    DEFAULT = \"DEFAULT\",\r\n    companyAcc = \"companyAcc\",\r\n    privateAcc = \"privateAcc\",\r\n    invitedAcc = \"invitedAcc\",\r\n    email = \"email\",\r\n    emailConfirmation = \"emailConfirmation\",\r\n    phone=  \"phone\",\r\n    phoneConfirmation = \"phoneConfirmation\",\r\n    createdPassword = \"createdPassword\",\r\n    personalDetails = \"personalDetails\",\r\n    personalAddress = \"personalAddress\",\r\n}\r\nexport interface IDetailsToShow {\r\n    step_1: {\r\n        detailName: IKycData['businessTypes'] | EDetailsToShowNames.DEFAULT,\r\n    },\r\n    step_2: {\r\n        detailName: EDetailsToShowNames.email\r\n    },\r\n    step_3: {\r\n        detailName:  EDetailsToShowNames.emailConfirmation\r\n    },\r\n    step_4: {\r\n        detailName:  EDetailsToShowNames.phone\r\n    },\r\n    step_5: {\r\n        detailName:  EDetailsToShowNames.phoneConfirmation\r\n    },\r\n    step_6: {\r\n        detailName:  EDetailsToShowNames.createdPassword\r\n    },\r\n    step_7: {\r\n        detailName:  EDetailsToShowNames.personalDetails\r\n    },\r\n    step_8: {\r\n        detailName: EDetailsToShowNames.personalAddress\r\n    }\r\n}\r\n\r\nexport const detailsToShow: IDetailsToShow = {\r\n    step_1: {\r\n        detailName: EDetailsToShowNames.DEFAULT,\r\n    },\r\n    step_2: {\r\n        detailName: EDetailsToShowNames.email,\r\n    },\r\n    step_3: {\r\n        detailName: EDetailsToShowNames.emailConfirmation,\r\n    },\r\n    step_4:{\r\n        detailName: EDetailsToShowNames.phone,\r\n    },\r\n    step_5: {\r\n        detailName: EDetailsToShowNames.phoneConfirmation,\r\n    },\r\n    step_6: {\r\n        detailName: EDetailsToShowNames.createdPassword\r\n    },\r\n    step_7: {\r\n        detailName: EDetailsToShowNames.personalDetails\r\n    },\r\n    step_8: {\r\n        detailName: EDetailsToShowNames.personalAddress\r\n    },\r\n}\r\n\r\nexport enum EStepNumber {\r\n    typeOfBusiness = 1,\r\n    email = 2,\r\n    emailConfirmation = 3,\r\n    phone = 4,\r\n    phoneConfirmation = 5,\r\n    createPassword = 6,\r\n    personalDetails = 7,\r\n    personalAddress = 8\r\n}\r\n\r\nexport enum VerificationReturnType\r\n{\r\n    Success = 1,\r\n    GeneralError = 2,\r\n    PassedLimitError = 3,\r\n}\r\n\r\nexport enum SiteSource\r\n{\r\n    Ofakim = 1,\r\n    Okoora = 2\r\n}\r\n\r\nexport type EmailVerificationPerCustomerResponse = { SiteSource :any}\r\n\r\nexport type VerificationReturnTypeOptions = VerificationReturnType.Success | VerificationReturnType.GeneralError | VerificationReturnType.PassedLimitError;\r\nexport type TSiteSource = SiteSource.Ofakim | SiteSource.Okoora;\r\nexport type TSendMailResponse = {\r\n    Success:VerificationReturnTypeOptions, \r\n    SiteSource: TSiteSource,\r\n    PassedLimitError?:VerificationReturnTypeOptions\r\n}\r\n\r\nexport interface ICheckEmailVerification {\r\n    action: 'CHECK_EMAIL_VERIFICATION',\r\n    payload: {\r\n        email: string,\r\n        onFinalize?: ()=>void\r\n    }\r\n}\r\nexport interface ISendEmailVerification {\r\n    action: 'SEND_EMAIL_VERIFICATION',\r\n    payload: {\r\n        email: string,\r\n        onFinalize?: ()=>void\r\n    }\r\n}\r\nexport interface ICheckPhoneVerification {\r\n    action: 'CHECK_PHONE_VERIFICATION',\r\n    payload: {\r\n        phone: string,\r\n        onFinalize?: ()=>void\r\n    }\r\n}\r\nexport interface ISendPhoneVerification {\r\n    action: 'SEND_PHONE_VERIFICATION',\r\n    payload: {\r\n        phone: string,\r\n        onFinalize?: ()=>void\r\n    }\r\n}\r\nexport type IPerformVerification = ICheckEmailVerification | ISendEmailVerification | ICheckPhoneVerification | ISendPhoneVerification;\r\n\r\nexport type TVerificationCodeStatus =  'DEFAULT' | 'INCORRECT' | 'VALID' | 'PASSED_LIMIT';\r\nexport enum EErrorMessages {\r\n    SomethingWentWrong = 'Something went wrong.',\r\n    FillAllFields = 'Please fill all fields in order to continue',\r\n}\r\nexport interface IErrorData {hasError:boolean,msg:string}\r\nexport interface CountriesData  {\r\n    phoneCode:number,\r\n    countryCode: string,\r\n    countryName:string\r\n}",
            "properties": [
                {
                    "name": "action",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 157
                },
                {
                    "name": "payload",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 158
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "ISendPhoneVerification-1"
        },
        {
            "name": "IStepsObj",
            "id": "interface-IStepsObj-4be3965b61c6750fdb457d02af50ca9948932d9dac9a359fe5373f67d4d48177c6f65e31e07dc2869b478042f33f268366a2f3e3b2fff039d385df02641f3863",
            "file": "src/app/sign-up/kyc.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IStepsObj {\r\n    currentStep: number,\r\n    maxSteps: number,\r\n    minSteps: number\r\n}\r\n\r\nexport interface IKycData {\r\n    businessTypes: 'companyAcc' | 'privateAcc' | 'invitedAcc';\r\n}\r\n\r\nexport interface IKYCFormGroups {\r\n    step_1: {\r\n        companyAcc: {isActive:boolean, countrySelected:string},\r\n        privateAcc:{isActive:boolean, countrySelected:string},\r\n        invitedAcc:{isActive:boolean}\r\n    },\r\n    step_2: {\r\n        email: string\r\n    }\r\n}\r\n\r\nexport enum EBusinessType {\r\n    companyAccount = \"companyAcc\",\r\n    privateAccount = \"privateAcc\",\r\n    invitedAccount = \"invitedAcc\"\r\n}\r\nexport enum EKycStatus {\r\n    basicKYC = 1,\r\n    partialKYC = 2,\r\n    fullKYC = 3\r\n}\r\n\r\nexport type TBusinessTypes = EBusinessType.companyAccount | EBusinessType.privateAccount;\r\nexport enum EDetailsToShowNames {\r\n    DEFAULT = \"DEFAULT\",\r\n    companyAcc = \"companyAcc\",\r\n    privateAcc = \"privateAcc\",\r\n    invitedAcc = \"invitedAcc\",\r\n    email = \"email\",\r\n    emailConfirmation = \"emailConfirmation\",\r\n    phone=  \"phone\",\r\n    phoneConfirmation = \"phoneConfirmation\",\r\n    createdPassword = \"createdPassword\",\r\n    personalDetails = \"personalDetails\",\r\n    personalAddress = \"personalAddress\",\r\n}\r\n\r\nexport enum EStepNumber {\r\n    typeOfBusiness = 1,\r\n    email = 2,\r\n    emailConfirmation = 3,\r\n    phone = 4,\r\n    phoneConfirmation = 5,\r\n    createPassword = 6,\r\n    personalDetails = 7,\r\n    personalAddress = 8\r\n}\r\n\r\nexport enum VerificationReturnType\r\n{\r\n    Success = 1,\r\n    GeneralError = 2,\r\n    PassedLimitError = 3,\r\n}\r\n\r\nexport enum SiteSource\r\n{\r\n    Ofakim = 1,\r\n    Okoora = 2\r\n}\r\n\r\nexport type EmailVerificationPerCustomerResponse = { SiteSource :any}\r\n\r\nexport type VerificationReturnTypeOptions = VerificationReturnType.Success | VerificationReturnType.GeneralError | VerificationReturnType.PassedLimitError;\r\nexport type TSiteSource = SiteSource.Ofakim | SiteSource.Okoora;\r\nexport type TSendMailResponse = {\r\n    Success:VerificationReturnTypeOptions, \r\n    SiteSource: TSiteSource,\r\n    PassedLimitError?:VerificationReturnTypeOptions\r\n}\r\n\r\nexport interface ICheckEmailVerification {\r\n    action: 'CHECK_EMAIL_VERIFICATION',\r\n    payload: {\r\n        email: string,\r\n        onFinalize?: ()=>void\r\n    }\r\n}\r\nexport interface ISendEmailVerification {\r\n    action: 'SEND_EMAIL_VERIFICATION',\r\n    payload: {\r\n        email: string,\r\n        onFinalize?: ()=>void\r\n    }\r\n}\r\nexport interface ICheckPhoneVerification {\r\n    action: 'CHECK_PHONE_VERIFICATION',\r\n    payload: {\r\n        phone: string,\r\n        onFinalize?: ()=>void\r\n    }\r\n}\r\nexport interface ISendPhoneVerification {\r\n    action: 'SEND_PHONE_VERIFICATION',\r\n    payload: {\r\n        phone: string,\r\n        onFinalize?: ()=>void\r\n    }\r\n}\r\nexport type IPerformVerification = ICheckEmailVerification | ISendEmailVerification | ICheckPhoneVerification | ISendPhoneVerification;\r\n\r\nexport type TVerificationCodeStatus =  'DEFAULT' | 'INCORRECT' | 'VALID' | 'PASSED_LIMIT';\r\nexport enum EErrorMessages {\r\n    SomethingWentWrong = 'Something went wrong.',\r\n    FillAllFields = 'Please fill all fields in order to continue',\r\n}\r\nexport interface IErrorData {hasError:boolean,msg:string}\r\nexport interface CountriesData  {\r\n    phoneCode:number,\r\n    countryCode: string,\r\n    countryName:string\r\n}",
            "properties": [
                {
                    "name": "currentStep",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "maxSteps",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "minSteps",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "IStepsObj",
            "id": "interface-IStepsObj-e3047e083ba4458a0a7ccedf55580dcd3b45fff66ec0b4fd1c065bc906803fb5c80f18e5ca74e28f76749dd06204e6ed3727f9496c6e88e6ef23f103b65f048c-1",
            "file": "src/app/sign-up/models/kyc.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IStepsObj {\r\n    currentStep: number,\r\n    maxSteps: number,\r\n    minSteps: number\r\n}\r\n\r\nexport interface IKycData {\r\n    businessTypes: 'companyAcc' | 'privateAcc' | 'invitedAcc';\r\n}\r\n\r\nexport interface IKYCFormGroups {\r\n    step_1: {\r\n        companyAcc: {isActive:boolean, countrySelected:string},\r\n        privateAcc:{isActive:boolean, countrySelected:string},\r\n        invitedAcc:{isActive:boolean}\r\n    },\r\n    step_2: {\r\n        email: string\r\n    }\r\n}\r\n\r\nexport enum EBusinessType {\r\n    companyAccount = \"companyAcc\",\r\n    privateAccount = \"privateAcc\",\r\n    invitedAccount = \"invitedAcc\"\r\n}\r\nexport enum EKycStatus {\r\n    basicKYC = 1,\r\n    partialKYC = 2,\r\n    fullKYC = 3\r\n}\r\n\r\nexport type TBusinessTypes = EBusinessType.companyAccount | EBusinessType.privateAccount;\r\nexport enum EDetailsToShowNames {\r\n    DEFAULT = \"DEFAULT\",\r\n    companyAcc = \"companyAcc\",\r\n    privateAcc = \"privateAcc\",\r\n    invitedAcc = \"invitedAcc\",\r\n    email = \"email\",\r\n    emailConfirmation = \"emailConfirmation\",\r\n    phone=  \"phone\",\r\n    phoneConfirmation = \"phoneConfirmation\",\r\n    createdPassword = \"createdPassword\",\r\n    personalDetails = \"personalDetails\",\r\n    personalAddress = \"personalAddress\",\r\n}\r\nexport interface IDetailsToShow {\r\n    step_1: {\r\n        detailName: IKycData['businessTypes'] | EDetailsToShowNames.DEFAULT,\r\n    },\r\n    step_2: {\r\n        detailName: EDetailsToShowNames.email\r\n    },\r\n    step_3: {\r\n        detailName:  EDetailsToShowNames.emailConfirmation\r\n    },\r\n    step_4: {\r\n        detailName:  EDetailsToShowNames.phone\r\n    },\r\n    step_5: {\r\n        detailName:  EDetailsToShowNames.phoneConfirmation\r\n    },\r\n    step_6: {\r\n        detailName:  EDetailsToShowNames.createdPassword\r\n    },\r\n    step_7: {\r\n        detailName:  EDetailsToShowNames.personalDetails\r\n    },\r\n    step_8: {\r\n        detailName: EDetailsToShowNames.personalAddress\r\n    }\r\n}\r\n\r\nexport const detailsToShow: IDetailsToShow = {\r\n    step_1: {\r\n        detailName: EDetailsToShowNames.DEFAULT,\r\n    },\r\n    step_2: {\r\n        detailName: EDetailsToShowNames.email,\r\n    },\r\n    step_3: {\r\n        detailName: EDetailsToShowNames.emailConfirmation,\r\n    },\r\n    step_4:{\r\n        detailName: EDetailsToShowNames.phone,\r\n    },\r\n    step_5: {\r\n        detailName: EDetailsToShowNames.phoneConfirmation,\r\n    },\r\n    step_6: {\r\n        detailName: EDetailsToShowNames.createdPassword\r\n    },\r\n    step_7: {\r\n        detailName: EDetailsToShowNames.personalDetails\r\n    },\r\n    step_8: {\r\n        detailName: EDetailsToShowNames.personalAddress\r\n    },\r\n}\r\n\r\nexport enum EStepNumber {\r\n    typeOfBusiness = 1,\r\n    email = 2,\r\n    emailConfirmation = 3,\r\n    phone = 4,\r\n    phoneConfirmation = 5,\r\n    createPassword = 6,\r\n    personalDetails = 7,\r\n    personalAddress = 8\r\n}\r\n\r\nexport enum VerificationReturnType\r\n{\r\n    Success = 1,\r\n    GeneralError = 2,\r\n    PassedLimitError = 3,\r\n}\r\n\r\nexport enum SiteSource\r\n{\r\n    Ofakim = 1,\r\n    Okoora = 2\r\n}\r\n\r\nexport type EmailVerificationPerCustomerResponse = { SiteSource :any}\r\n\r\nexport type VerificationReturnTypeOptions = VerificationReturnType.Success | VerificationReturnType.GeneralError | VerificationReturnType.PassedLimitError;\r\nexport type TSiteSource = SiteSource.Ofakim | SiteSource.Okoora;\r\nexport type TSendMailResponse = {\r\n    Success:VerificationReturnTypeOptions, \r\n    SiteSource: TSiteSource,\r\n    PassedLimitError?:VerificationReturnTypeOptions\r\n}\r\n\r\nexport interface ICheckEmailVerification {\r\n    action: 'CHECK_EMAIL_VERIFICATION',\r\n    payload: {\r\n        email: string,\r\n        onFinalize?: ()=>void\r\n    }\r\n}\r\nexport interface ISendEmailVerification {\r\n    action: 'SEND_EMAIL_VERIFICATION',\r\n    payload: {\r\n        email: string,\r\n        onFinalize?: ()=>void\r\n    }\r\n}\r\nexport interface ICheckPhoneVerification {\r\n    action: 'CHECK_PHONE_VERIFICATION',\r\n    payload: {\r\n        phone: string,\r\n        onFinalize?: ()=>void\r\n    }\r\n}\r\nexport interface ISendPhoneVerification {\r\n    action: 'SEND_PHONE_VERIFICATION',\r\n    payload: {\r\n        phone: string,\r\n        onFinalize?: ()=>void\r\n    }\r\n}\r\nexport type IPerformVerification = ICheckEmailVerification | ISendEmailVerification | ICheckPhoneVerification | ISendPhoneVerification;\r\n\r\nexport type TVerificationCodeStatus =  'DEFAULT' | 'INCORRECT' | 'VALID' | 'PASSED_LIMIT';\r\nexport enum EErrorMessages {\r\n    SomethingWentWrong = 'Something went wrong.',\r\n    FillAllFields = 'Please fill all fields in order to continue',\r\n}\r\nexport interface IErrorData {hasError:boolean,msg:string}\r\nexport interface CountriesData  {\r\n    phoneCode:number,\r\n    countryCode: string,\r\n    countryName:string\r\n}",
            "properties": [
                {
                    "name": "currentStep",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "maxSteps",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "minSteps",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "IStepsObj-1"
        },
        {
            "name": "MenuItem",
            "id": "interface-MenuItem-1bb3e4e56296aa3b81d206ef4dd37e9b3326f2dac9c67dba18a9c82daa7ae6754ea178887855fc8bd1603433dc3c3470580692db955e3b35410bbeeb873c4c13",
            "file": "src/app/risk-dashboard/components/sidebar/sidebar.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, ElementRef, ViewChild } from '@angular/core';\r\nimport { MatExpansionModule } from '@angular/material/expansion';\r\nimport { Router, RouterModule } from '@angular/router';\r\nexport interface MenuItem {\r\n  icon: string;\r\n  label: string;\r\n  badge?: string;\r\n  highlight?: boolean;\r\n}\r\n\r\n@Component({\r\n  selector: 'app-sidebar',\r\n  imports: [MatExpansionModule,RouterModule],\r\n  templateUrl:'sidebar.component.html',\r\n  styleUrl: 'sidebar.component.scss'\r\n})\r\nexport class SidebarComponent {\r\n  @ViewChild('sidebar') sidebar!: ElementRef;\r\n  constructor(private router:Router){\r\n\r\n  }\r\n  openSidebar() {\r\n    this.sidebar.nativeElement.classList.add('active');\r\n    document.body.classList.add('overflow-hidden');\r\n  }\r\n\r\n  hideSidebar() {\r\n    this.sidebar.nativeElement.classList.remove('active');\r\n    document.body.classList.remove('overflow-hidden');\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "badge",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "highlight",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "PeriodicElement",
            "id": "interface-PeriodicElement-9427c758b282ec071bec8c898b2fd38385161944083f8b0b6c00c61f34ed4fb832613f2ddb20870983572872a77746fd93e740b70773f5f435144ec9d15c525c",
            "file": "src/app/risk-dashboard/components/hedging-proposal/hedging-proposal.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { SelectionModel } from '@angular/cdk/collections';\r\nimport { Component, ViewChildren, QueryList, ChangeDetectorRef, ViewChild, AfterViewInit, ElementRef } from '@angular/core';\r\nimport { MatDatepicker, MatDatepickerModule } from '@angular/material/datepicker';\r\nimport { MatMomentDateModule } from '@angular/material-moment-adapter';\r\nimport { MatTableDataSource, MatTableModule } from '@angular/material/table';\r\nimport { MatDrawer } from '@angular/material/sidenav';\r\nimport moment from 'moment';\r\nimport { Subscription, take, tap, timer } from 'rxjs';\r\nimport { HedgingType } from '../enums/hedgingData';\r\nimport { CommonModule } from '@angular/common';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { NgbTooltipModule } from '@ng-bootstrap/ng-bootstrap';\r\nimport { MatSliderModule } from '@angular/material/slider';\r\nimport { MatCheckboxModule } from '@angular/material/checkbox';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { HedgingDataService } from './hedging-data.service';\r\nimport { hedgeData } from './hedging-static-data';\r\n\r\nexport interface PeriodicElement {\r\n  disabledColumn: boolean;\r\n  hedgeRate: number;\r\n  protectAmount: number;\r\n  date?: Date;\r\n  expiryDate?: any;\r\n  month?: string;\r\n  year?: number;\r\n  dayOfExpiry?: string;\r\n  Month?: string;\r\n  openEditForSelling?: boolean;\r\n  collateral?: number;\r\n  saveActivate?: boolean;\r\n  maxHedgeAmount?: number;\r\n  strategyId?: number;\r\n  hedge?: any;\r\n  alreadyHedge?: any;\r\n  status?: any\r\n  requiredCollateral?: any;\r\n}\r\n@Component({\r\n  selector: 'app-hedging-proposal',\r\n  imports: [CommonModule, MatInputModule,MatDatepickerModule,NgbTooltipModule,MatMomentDateModule,MatSliderModule, MatSelectModule, MatCheckboxModule, MatIconModule, MatTableModule, FormsModule],\r\n  templateUrl: './hedging-proposal.component.html',\r\n  styleUrl: './hedging-proposal.component.scss'\r\n})\r\nexport class HedgingProposalComponent implements AfterViewInit {\r\n  @ViewChildren(MatDatepicker) datepickers!: QueryList<MatDatepicker<any>>;\r\n  @ViewChild('drawer') drawer!: MatDrawer;\r\n  @ViewChild('slider') slider!: ElementRef;\r\n  selectedHedgeData!: PeriodicElement;\r\n  displayedColumns: string[] = ['select', 'expiryDate', 'hedgeRate', 'setHedgeAmount', 'hedgeAmount', 'hedged'];\r\n  dataSource = new MatTableDataSource<PeriodicElement>([]);\r\n  selection = new SelectionModel<PeriodicElement>(true, this.dataSource.data);\r\n  openEditSellingIndex: number | null = null;\r\n  hedgeAmountForEdit: any;\r\n  hedgeDetails = hedgeData;\r\n  hedgedMonthsfromAPI: any;\r\n  showLoader: boolean = false;\r\n  private proposalMessageTimerSubscription!: Subscription;\r\n  showHedgeProposalMessage: boolean = false;\r\n  selectedHedgeType: HedgingType = 1;\r\n  hedgeTypes: HedgingType[] = Object.values(HedgingType).filter(value => typeof value === 'number') as HedgingType[];\r\n\r\n  HedgingTypeDisplayNames = {\r\n    [HedgingType.Forward]: 'Forward',\r\n    [HedgingType.Vanilla]: 'Vanilla',\r\n    [HedgingType.Range]: 'Range',\r\n  };\r\n  showSaveButton: boolean = false;\r\n  saveButtonDisable: boolean = false;\r\n  errorMessage = false;\r\n  hedgedCurrencySign: any;\r\n  updatedId: any;\r\n  wallet_Amount: any;\r\n  updateAfterGetting: boolean = false;\r\n  arrOfIds: any[] = [];\r\n  constructor(private cd: ChangeDetectorRef, private hedgeService: HedgingDataService) {\r\n\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.proposalMessageTimerSubscription = timer(0, 60000).pipe(\r\n      take(1),\r\n      tap(() => {\r\n        this.showHedgeProposalMessage = true;\r\n      })\r\n    ).subscribe();\r\n    this.getHedgesFromPolicyData();\r\n  }\r\n\r\n  checkForAvailableBalance(currency: string) {\r\n    this.wallet_Amount = 10000.51;\r\n    // this.riskManagerService?.getBalanceByCurrency(currency).subscribe({\r\n    //   next: (result) => {\r\n    //     // console.log(result);\r\n    //     this.riskManagerService?.walletAmountInfoSubject.next(this.wallet_Amount);\r\n    //   },\r\n    //   error: (err) => {\r\n    //   }\r\n    // })\r\n  }\r\n\r\n\r\n  getHedgesFromPolicyData(hedgeType?: HedgingType) {\r\n    this.showLoader = true;\r\n    const collateralAndPriceCurrency = this.hedgeDetails?.collateralAndPriceCur?.code;\r\n    this.checkForAvailableBalance(collateralAndPriceCurrency);\r\n    this.selectedHedgeType = this.hedgeDetails.hedgingType;\r\n    this.hedgedCurrencySign = this.hedgeDetails?.hedgeCurrency?.sign,\r\n      this.hedgedMonthsfromAPI = this.hedgeDetails.monthlyHedge.map((item: any) => ({\r\n        expiryDate: item.hedge?.expiryDate || item.date || '----',\r\n        hedgeRate: item.hedge?.hedgeRate || '--',\r\n        protectAmount: item.hedge?.protectAmount || 0,\r\n        recommendedHedgeAmount: item?.recomendedHedgeAmount || 0,\r\n        maxHedge_amount: item.maxHedgeAmount || 0,\r\n        collateral: item.hedge?.collateral || 0,\r\n        totalExposureAmount: item.totalExposure || 0,\r\n        openEditForSelling: false,\r\n        ...item\r\n      }));\r\n    this.dataSource.data = this.hedgedMonthsfromAPI;\r\n    this.showLoader = false;\r\n    this.selection.select(...this.dataSource.data);\r\n  }\r\n\r\n  changeSelectedHedgeType(event: any) {\r\n    const selectedType = event.value;\r\n    this.selectedHedgeType = selectedType;\r\n    if (this.hedgeDetails) {\r\n      this.hedgeDetails.totalHedgeAmount = 0;\r\n    }\r\n    this.selection?.clear();\r\n    this.getHedgesFromPolicyData(selectedType);\r\n    this.calculateTotalHedgeAmount();\r\n  }\r\n\r\n  isAllSelected(): boolean {\r\n    const numSelected = this.selection.selected.length;\r\n    const numRows = this.dataSource.data.length;\r\n    return numSelected === numRows;\r\n  }\r\n\r\n  commaseparate(e: any, fraction: any) {\r\n    if (e) {\r\n      const actualNumber = +e?.toString()?.replace(/,/g, '')\r\n      const formatted = actualNumber?.toLocaleString('en-US', { maximumFractionDigits: fraction })\r\n      return formatted\r\n    } else {\r\n      if (e == 0) {\r\n        return '0';\r\n      } else {\r\n        return e;\r\n      }\r\n    }\r\n  }\r\n\r\n  editSelling(element: any, index: number) {\r\n    if (this.openEditSellingIndex === index) {\r\n      this.openEditSellingIndex = null;\r\n      element.openEditForSelling = false;\r\n    } else {\r\n      this.dataSource.data.forEach(el => (el.openEditForSelling = false));\r\n      this.openEditSellingIndex = index;\r\n      element.openEditForSelling = true;\r\n      this.hedgeAmountForEdit = this.commaseprate(element.protectAmount, 2);\r\n    }\r\n  }\r\n\r\n  clearInput(index: number) {\r\n    this.hedgeAmountForEdit = 0;\r\n  }\r\n  cancelEditSelling(element: any, index: number) {\r\n    element.openEditForSelling = false;\r\n    this.openEditSellingIndex = null;\r\n  }\r\n\r\n  saveEditSelling(element: any, index: number): void {\r\n    const formattedValue = this.hedgeAmountForEdit?.replace(/,/g, ''); // Remove commas\r\n    const numericValue = parseFloat(formattedValue);\r\n    if (!isNaN(numericValue) && numericValue >= 0) {\r\n      // Check if the value has changed\r\n      if (element.protectAmount !== numericValue) {\r\n        element.saveActivate = true;\r\n        element.protectAmount = numericValue; // Update protectAmount\r\n      }\r\n\r\n      // Reset editing mode\r\n      element.openEditForSelling = false;\r\n      this.openEditSellingIndex = null;\r\n\r\n      // Recalculate the total hedge amount\r\n      this.calculateTotalHedgeAmount();\r\n    } else {\r\n      // Handle invalid input\r\n      this.errorMessage = true; // Show error message if needed\r\n    }\r\n  }\r\n\r\n  toggleAllRows(): void {\r\n    this.isAllSelected() ? this.selection.clear() : this.selection.select(...this.dataSource.data);\r\n    this.calculateTotalHedgeAmount();\r\n  }\r\n\r\n  checkboxLabel(row?: PeriodicElement): string {\r\n    if (!row) {\r\n      return `${this.isAllSelected() ? 'Deselect' : 'Select'} all`;\r\n    }\r\n    return `${this.selection.isSelected(row) ? 'Deselect' : 'Select'} row ${row.hedgeRate}`;\r\n  }\r\n\r\n  openExpiryDateCalendar(element: PeriodicElement, index: number): void {\r\n    if (!element?.expiryDate) {\r\n      return;\r\n    }\r\n    const [day, month, year] = element.expiryDate.split('/').map(Number);\r\n    element.date = new Date(year, month - 1, day);\r\n\r\n    const datepicker = this.datepickers.toArray()[index];\r\n    this.cd.detectChanges();\r\n\r\n    if (datepicker) {\r\n      datepicker.open();\r\n    }\r\n  }\r\n\r\n  applyDate(index: number, element: PeriodicElement): void {\r\n    if (!element.date || !moment(element.date).isValid()) {\r\n      console.error('Invalid date:', element.date);\r\n      return;\r\n    }\r\n\r\n    const selectedDate = moment(element.date);\r\n    element.expiryDate = selectedDate.format('DD/MM/YYYY');\r\n    element.saveActivate = true;\r\n  }\r\n\r\n\r\n  onSliderInput(event: Event, element: PeriodicElement) {\r\n    element.saveActivate = true;\r\n    const sliderValue = (event.target as HTMLInputElement).value;\r\n    element.protectAmount = Number(sliderValue);\r\n    this.dataSource.data = [...this.dataSource.data];\r\n    this.calculateTotalHedgeAmount();\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    // this.selection.select(...this.dataSource.data);\r\n    // this.calculateTotalHedgeAmount();\r\n  }\r\n\r\n  calculateTotalHedgeAmount() {\r\n    if (this.hedgeDetails) {\r\n      this.hedgeDetails.totalHedgeAmount = this.selection.selected.reduce((sum, current) => sum + Number(current.protectAmount), 0);\r\n    }\r\n  }\r\n\r\n  toggleRow(row: PeriodicElement): void {\r\n    this.selection.toggle(row);\r\n    this.calculateTotalHedgeAmount();\r\n  }\r\n\r\n\r\n  hedgeAllProposals() {\r\n    this.hedgeService.closeQuickHedgeDrawer();\r\n    this.hedgeService.openHedgeAllDrawer();\r\n    this.showHedgeProposalMessage = false;  // Hide the message immediately\r\n\r\n    // Clean up any existing subscriptions\r\n    if (this.proposalMessageTimerSubscription) {\r\n      this.proposalMessageTimerSubscription.unsubscribe();\r\n    }\r\n\r\n    // Filter out rows where row.hedge is null and ensure row is selected\r\n    const selectedRows = this.selection.selected.filter(row =>\r\n      this.selection.isSelected(row) && row.hedge !== null\r\n    );\r\n    if (selectedRows.length > 0) {\r\n      // this.riskManagerService.hedgeAllActionDispatched.next(true);\r\n      // this.riskManagerService.setSelectedHedgeData(selectedRows);\r\n      // this.riskManagerService.openQuickHedgeSidebar(true);\r\n    } else {\r\n      // The below code changes are for DV-2884\r\n      const protectPendingRows = this.selection.selected.filter(row => row.maxHedgeAmount! > 0)\r\n      if (protectPendingRows.length > 0) {\r\n        // this.riskManagerService.confirmHasMaxHedgeAmountRows(true);\r\n      }\r\n      // this.riskManagerService.hedgeAllActionDispatched.next(true);\r\n      // this.riskManagerService.setSelectedHedgeData(protectPendingRows);\r\n      // this.riskManagerService.openQuickHedgeSidebar(true);\r\n    }\r\n\r\n    this.cd.detectChanges();\r\n    // Start the cycle of hiding and showing the message\r\n    this.startRepeatingMessage();\r\n  }\r\n\r\n\r\n\r\n  startRepeatingMessage() {\r\n    // Show message after 1 minute and repeat every 1 minute after that\r\n    setInterval(() => {\r\n      this.showHedgeProposalMessage = !this.showHedgeProposalMessage; // Toggle visibility\r\n      this.cd.detectChanges();  // Trigger change detection to update the UI\r\n    }, 60000);  // 60000 ms = 1 minute\r\n  }\r\n\r\n  openQuickHedgeDrawer(element: PeriodicElement): void {\r\n    this.hedgeService?.openQuickHedgeDrawer();\r\n    this.refreshHedging(element);\r\n    this.selectedHedgeData = element;\r\n    // this.riskManagerService.triggerQuickHedgeButtonClick();\r\n    // this.riskManagerService.setSelectedHedgeData([element]);\r\n    // this.riskManagerService.openQuickHedgeSidebar(true);\r\n  }\r\n\r\n\r\n  calculateImagePosition(recommended: number, i: number): number {\r\n    const min = 0;\r\n    const max = this.hedgedMonthsfromAPI?.[i]?.maxHedge_amount;\r\n    const sliderWidth = 200;\r\n    const originalPercentage = ((recommended - min) / (max - min)) * 100;\r\n    const clampedPercentage = Math.max(0, Math.min(originalPercentage, 100));\r\n    const pixelPosition = (clampedPercentage / 100) * sliderWidth;\r\n    return pixelPosition;\r\n  }\r\n\r\n  resetToCollateral(element: PeriodicElement, i: number): void {\r\n    element.protectAmount = this.hedgedMonthsfromAPI?.[i]?.recomendedHedgeAmount;\r\n    this.dataSource.data = [...this.dataSource.data];\r\n    this.calculateTotalHedgeAmount();\r\n  }\r\n\r\n\r\n  shouldShowError(i: number): boolean {\r\n    return this.hedgeDetails?.monthlyHedge?.[i]?.hedgeError == true;\r\n  }\r\n\r\n  refreshPageInError(element: any) {\r\n    this.showLoader = true;\r\n    this.refreshHedging(element);\r\n  }\r\n\r\n  refreshHedging(element: any) {\r\n    this.showLoader = true;\r\n    let createPayloadHedge = [];\r\n    const uniqueIds = new Set<number>();\r\n    const strategyId = element?.hedge?.strategyId;\r\n    // Construct common hedge details for the current element\r\n    const hedgeDetails = {\r\n      amount: element?.protectAmount,\r\n      productType: strategyId ? element?.hedge?.productType : this.selectedHedgeType,\r\n      expiryDate: element?.expiryDate || element?.hedge?.expiryDate,\r\n      currencyPair: this.hedgeDetails.currencyPair?.replace(/\\//g, ''),\r\n      direction: this.hedgeDetails.direction,\r\n      id: strategyId || undefined\r\n    };\r\n\r\n    // Add the primary hedge details to the payload\r\n    createPayloadHedge.push({ hedgeByCategory: hedgeDetails });\r\n\r\n    this.dataSource.data.forEach(row => {\r\n      const rowId = row?.hedge?.strategyId;\r\n      if (\r\n        row?.hedge !== null && // Ensure hedge is not null\r\n        rowId &&\r\n        !uniqueIds.has(rowId) &&\r\n        rowId !== strategyId &&\r\n        this.selection.isSelected(row)\r\n      ) {\r\n        uniqueIds.add(rowId);\r\n        createPayloadHedge.push({\r\n          id: rowId,\r\n        });\r\n      }\r\n    });\r\n\r\n    // Send the payload to the API\r\n    // this.riskManagerService.UpdateHedgesRequestData(createPayloadHedge).subscribe({\r\n    //   next: (result) => {\r\n    //     this.showLoader = false;\r\n    //     this.hedgeDetails = result.body;\r\n    //     this.updatedId = result.body?.monthlyHedge[0]?.hedge?.strategyId;\r\n    //     // Next three line of changes are from DV-2884\r\n    //     this.arrOfIds.push(this.updatedId);\r\n    //     this.riskManagerService.arrOfIdsSubject.next(this.arrOfIds);\r\n    //     this.dataSource.data = this.dataSource.data.map(row => {\r\n    //       if (row?.hedge && row.hedge.strategyId === strategyId) {\r\n    //         row.hedge.strategyId = this.updatedId;\r\n    //       }\r\n    //       return row;\r\n    //     });\r\n\r\n\r\n    //     this.riskManagerService.setUpdatedId(this.updatedId);\r\n        this.updateAfterGetting = true;\r\n\r\n    //     const extractedData = {\r\n    //       price: this.hedgeDetails.price,\r\n    //       requiredCollateral: this.hedgeDetails.requiredCollateral,\r\n    //       totalHedgeAmount: this.hedgeDetails.totalHedgeAmount,\r\n    //       totalHedgePercent: this.hedgeDetails.totalHedgePercent,\r\n    //       avgHedgeRate: this.hedgeDetails.avgHedgeRate,\r\n    //       liabilityRate: this.hedgeDetails?.liabilityRate\r\n    //     };\r\n\r\n    //     this.riskManagerService.hedgeDataSubject.next(extractedData);\r\n\r\n    //     // Update data source with the response data\r\n    //     this.hedgeDetails?.monthlyHedge?.map((item: any) => {\r\n    //       ({\r\n    //         expiryDate: item?.hedge?.expiryDate,\r\n    //         hedgeRate: item.hedge?.hedgeRate || '--',\r\n    //         protectAmount: item.hedge?.protectAmount || 0,\r\n    //         recommendedHedgeAmount: item?.recomendedHedgeAmount || 0,\r\n    //         maxHedge_amount: item.maxHedgeAmount || 0,\r\n    //         collateral: item.hedge?.collateral || 0,\r\n    //         totalExposureAmount: item.totalExposure || 0,\r\n    //         openEditForSelling: false,\r\n    //         ...item\r\n    //       })\r\n    //     }) || [];\r\n    //     this.dataSource.data = this.dataSource.data.map(row => {\r\n    //       const updatedRow = this.hedgeDetails?.monthlyHedge?.find((updated: any) => {\r\n    //         updated.hedge?.strategyId === row.hedge?.strategyId\r\n    //       });\r\n    //       return updatedRow ? updatedRow : row;\r\n    //     });\r\n\r\n    //     // this.hedgeDetails = this.dataSource.data;\r\n    //     this.showLoader = false;\r\n    //     this.selection.select(...this.dataSource.data.filter(row => this.selection.isSelected(row)));\r\n    //   },\r\n    //   error: (err) => {\r\n    //     this.showLoader = false;\r\n    //   }\r\n    // });\r\n\r\n    element.saveActivate = false;\r\n  }\r\n\r\n\r\n  checkMaximumValue(element: PeriodicElement, event: Event) {\r\n    const input = event.target as HTMLInputElement;\r\n    let value = input.value.replace(/,/g, '');\r\n    this.errorMessage = false;\r\n    // Handle empty input case\r\n    if (value === '') {\r\n      this.hedgeAmountForEdit = '0';\r\n      this.saveButtonDisable = true;\r\n      return;\r\n    }\r\n    // Ensure no more than two decimal places\r\n    if (value.includes('.')) {\r\n      const [integerPart, decimalPart] = value.split('.');\r\n      if (decimalPart.length > 2) {\r\n        value = `${integerPart}.${decimalPart.slice(0, 2)}`;\r\n      }\r\n    }\r\n    // Convert and format the input\r\n    // Parse the numeric value\r\n    const actualNumber = parseFloat(value);\r\n    if (!isNaN(actualNumber)) {\r\n      // Store the numeric value for comparison\r\n      const numericValue = actualNumber;\r\n\r\n      // Validate against the maximum allowed value\r\n      const isMaxHedgeAmountValid =\r\n        element?.maxHedgeAmount !== undefined &&\r\n        element.maxHedgeAmount >= numericValue;\r\n\r\n      this.saveButtonDisable = !isMaxHedgeAmountValid;\r\n      this.errorMessage = !isMaxHedgeAmountValid;\r\n\r\n      // Format the input for display\r\n      this.hedgeAmountForEdit = numericValue.toLocaleString('en-US', {\r\n        maximumFractionDigits: 2,\r\n      });\r\n    }\r\n  }\r\n\r\n  getHedgeMonthsCount(): number {\r\n    return this.hedgeDetails?.monthlyHedge?.filter((item: { status: { type: number; }; }) => item.status?.type !== 2 && item.status?.type !== 4).length || 0;\r\n  }\r\n\r\n  commaseprate(e: any, fraction: any) {\r\n    if (e || e === 0) {\r\n      const actualNumber = +e?.toString()?.replace(/,/g, '');\r\n      const fixedNumber = Number(actualNumber.toFixed(fraction)); // Maintain precision without rounding\r\n      const formatted = fixedNumber.toLocaleString('en-US', {\r\n        minimumFractionDigits: fraction,\r\n        maximumFractionDigits: fraction\r\n      });\r\n      return formatted;\r\n    } else {\r\n      return e;\r\n    }\r\n  }\r\n\r\n  onMakeDeposit() {\r\n    // Trigger the header method from this component\r\n    // this.headerCommService.triggerHeaderMethod();\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    if (this.proposalMessageTimerSubscription) {\r\n      this.proposalMessageTimerSubscription.unsubscribe();  // Clean up when component is destroyed\r\n    }\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "alreadyHedge",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "collateral",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "date",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "dayOfExpiry",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "disabledColumn",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "expiryDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "hedge",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "hedgeRate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "maxHedgeAmount",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "month",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "Month",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "openEditForSelling",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "protectAmount",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "requiredCollateral",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "saveActivate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "status",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "strategyId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "year",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 28
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        }
    ],
    "injectables": [
        {
            "name": "CustomDateAdapter",
            "id": "injectable-CustomDateAdapter-c3ddb0399e84b5fd157b85647020d8bd00d546df9965f5c8a093dac6bedf3091beb32330da8fc2f304f7c1e1c33022e5a828b04a8b501a3493eb18aafa89171a",
            "file": "src/app/risk-dashboard/components/cashflow-exposure/components/cashflow-exposure-details/cashflow-exposure-details.component.ts",
            "properties": [],
            "methods": [
                {
                    "name": "format",
                    "args": [
                        {
                            "name": "date",
                            "type": "moment.Moment",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "displayFormat",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        164
                    ],
                    "jsdoctags": [
                        {
                            "name": "date",
                            "type": "moment.Moment",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "displayFormat",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getDayOfWeekNames",
                    "args": [],
                    "optional": false,
                    "returnType": "string[]",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        164
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Component, ElementRef, Inject, QueryList, ViewChild, ViewChildren, ChangeDetectorRef, Injectable, Input, Renderer2 } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\n\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatDatepicker, MatDatepickerModule } from '@angular/material/datepicker';\r\nimport { MatNativeDateModule, MAT_DATE_FORMATS, MAT_DATE_LOCALE, DateAdapter } from '@angular/material/core';\r\nimport { MatMomentDateModule, MomentDateAdapter } from '@angular/material-moment-adapter';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatTableModule } from '@angular/material/table';\r\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\r\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\r\nimport { NgbTooltip, NgbTooltipModule } from '@ng-bootstrap/ng-bootstrap';\r\nimport { MonthlyExposureDetailsComponent } from '../monthly-exposure-details/monthly-exposure-details.component';\r\nimport { cashflowExposureRows } from '../cashflow-exposure-data';\r\nimport { Router } from '@angular/router';\r\nimport { MatStepper } from '@angular/material/stepper';\r\nimport { HedgingDataService } from '../../../hedging-proposal/hedging-data.service';\r\n\r\n@Injectable()\r\nexport class CustomDateAdapter extends MomentDateAdapter {\r\n  constructor(@Inject(MAT_DATE_LOCALE) locale: string) {\r\n    super(locale);\r\n  }\r\n\r\n  override format(date: moment.Moment, displayFormat: string): string {\r\n    if (displayFormat === 'MMMM YYYY') {\r\n      const formatted = date.format(displayFormat);\r\n      return formatted.charAt(0).toUpperCase() + formatted.slice(1).toLowerCase();\r\n    }\r\n    return date.format(displayFormat);\r\n  }\r\n\r\n  override getDayOfWeekNames(): string[] {\r\n    return ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\r\n  }\r\n}\r\n\r\nexport const MATERIAL_DATEPICKER_FORMATS = {\r\n  parse: {\r\n    dateInput: 'DD/MMM/YYYY',\r\n  },\r\n  display: {\r\n    dateInput: 'DD/MMM/YYYY',\r\n    monthYearLabel: 'MMMM YYYY',\r\n    dateA11yLabel: 'DD/MMM/YYYY',\r\n    monthYearA11yLabel: 'MMMM YYYY',\r\n  },\r\n};\r\n\r\n@Component({\r\n  selector: 'app-cashflow-exposure-details',\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    MatInputModule,\r\n    MatFormFieldModule,\r\n    MatDatepickerModule,\r\n    MatNativeDateModule,\r\n    MatMomentDateModule,\r\n    MatButtonModule,\r\n    MatIconModule,\r\n    MatTableModule,\r\n    MatProgressBarModule,\r\n    MatSlideToggleModule,\r\n    NgbTooltipModule,\r\n    MonthlyExposureDetailsComponent,\r\n  ],\r\n  templateUrl: './cashflow-exposure-details.component.html',\r\n  styleUrl: './cashflow-exposure-details.component.scss',\r\n  providers: [\r\n    { provide: DateAdapter, useClass: CustomDateAdapter, deps: [MAT_DATE_LOCALE] },\r\n    { provide: MAT_DATE_FORMATS, useValue: MATERIAL_DATEPICKER_FORMATS },\r\n  ],\r\n})\r\nexport class CashflowExposureDetailsComponent {\r\n  @ViewChildren(MatDatepicker) datepickers!: QueryList<MatDatepicker<any>>;\r\n  @ViewChild('cashflowDateColumn', { static: false }) cashflowDateColumn!: ElementRef;\r\n  @Input() stepper!: MatStepper;\r\n  cashflowExposureRows = cashflowExposureRows;\r\n  monthlyExposureObject = {\r\n    pair: \"USD/ILS\",\r\n    sign: \"$\",\r\n    toCurrency: \"USD\",\r\n    selectedExposure: \"Selling\",\r\n    monthlyAmount: 100000,\r\n    monthlyPeriod: 12,\r\n    flag: \"https://okoora-stage-api2023.azurewebsites.net/Images/Flags/USD.png\",\r\n    code: \"USD\",\r\n    baseCurrencyFlag: \"https://okoora-stage-api2023.azurewebsites.net/Images/Flags/EUR.png\",\r\n    baseCurrency: \"ILS\",\r\n    baseCurrencySign: \"₪\"\r\n  };;\r\n\r\n  displayedColumns: string[] = ['Month', 'Selling', 'Buying', 'TotalNet', 'DisableMonth'];\r\n  staticMonthNames = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\r\n  @ViewChild('riskAlert', { static: false }) riskAlert!: NgbTooltip;\r\n  openEditSellingIndex: number | null = null;\r\n  openEditBuyingIndex: number | null = null;\r\n  errorMessage: string | null = null;\r\n  errrMsgForBuyingAndSelling: any;\r\n  monthlyPeriod: any;\r\n  maxLengthError: any;\r\n  sellingValueForedit: any;\r\n  buyingValueForedit: any;\r\n  addRowBlinkIndex!: number;\r\n  buyingFlag!: boolean;\r\n  tempcashflowExposureRows: any;\r\n  isCurrentMonthIncrement: boolean = false;\r\n  exposureAmount!: number;\r\n  exposureAmountFloor!: string;\r\n  exposureAmountCeil!: string;\r\n  exposureBaseCurrency!: string;\r\n  exposureToCurrency!: string;\r\n  \r\n  constructor(private cd: ChangeDetectorRef, private renderer: Renderer2, private router: Router, private hedgeDataService: HedgingDataService) {}\r\n\r\n  ngAfterViewInit() {\r\n    this.riskAlert.open();\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.hedgeDataService.openCashflowDateTooltip.subscribe(res => {\r\n      if (res) {\r\n        setTimeout(() => {\r\n          this.riskAlert.open();\r\n        }, 1000);\r\n      }\r\n    });\r\n    this.renderer.listen('document', 'click', (event) => {\r\n      if (!this.cashflowDateColumn.nativeElement.contains(event.target)) {\r\n        this.riskAlert.close();\r\n      }\r\n    });\r\n    this.hedgeDataService.getExposureFormValue.subscribe((res: any) => {\r\n      this.isCurrentMonthIncrement = false;\r\n      this.cashflowExposureRows = []\r\n      this.monthlyExposureObject = res\r\n      localStorage.setItem('cashFlowExposureData', JSON.stringify(this.monthlyExposureObject));\r\n      this.exposureAmount = this.monthlyExposureObject?.monthlyAmount;\r\n      this.exposureAmountFloor = this.exposureAmount.toString().split(\".\")[0];\r\n      this.exposureAmountCeil = this.exposureAmount.toString().split(\".\")[1];\r\n      this.exposureBaseCurrency = this.monthlyExposureObject?.pair.toString().split(\"/\")[1];\r\n      this.exposureToCurrency = this.monthlyExposureObject?.pair.toString().split(\"/\")[0];\r\n      this.buyingFlag = this.monthlyExposureObject?.selectedExposure == \"Buying\" ? true : false;\r\n      this.monthlyPeriod = this.monthlyExposureObject?.monthlyPeriod;\r\n      this.getNext12MonthNamesWithYear(this.monthlyPeriod);\r\n      this.cd.detectChanges();\r\n    });\r\n    this.monthlyPeriod = this.monthlyExposureObject.monthlyPeriod;\r\n  }\r\n\r\n  addSixMonth() {\r\n      this.monthlyPeriod += 6;\r\n    this.tempcashflowExposureRows = this.cashflowExposureRows;\r\n    this.cashflowExposureRows = []\r\n      this.isCurrentMonthIncrement = true;\r\n      this.getNext12MonthNamesWithYear(this.monthlyPeriod);\r\n    this.cashflowExposureRows?.splice(0, this.tempcashflowExposureRows?.length);\r\n    this.cashflowExposureRows = [...this.tempcashflowExposureRows, ...this.cashflowExposureRows]\r\n    // for (let index = 6; index < 12; index++) {\r\n    //   this.cashflowExposureRows.index = index;\r\n    // }\r\n  }\r\n  \r\n  chooseCashflowDate(index: number, year: number, month: string, day: number): void {\r\n    this.riskAlert.close();\r\n    const monthIndex = this.staticMonthNames.findIndex((m) => m === month);\r\n    const selectedDate = new Date(year, monthIndex, day);\r\n    this.cashflowExposureRows[index].date = selectedDate;\r\n    this.cd.detectChanges();\r\n\r\n    const datepicker = this.datepickers.toArray()[index];\r\n    if (datepicker) {\r\n      datepicker.open();\r\n    }\r\n  }\r\n\r\n  setMonthlyDate(index: number, element: any) {\r\n    const selectedDate = new Date(element.date);\r\n    const year = selectedDate.getFullYear();\r\n    const month = selectedDate.getMonth();\r\n    const date = selectedDate.getDate();\r\n  \r\n    const monthName = this.staticMonthNames[month];\r\n    const monthDisplay = (month + 1).toString().padStart(2, '0');\r\n    const dateDisplay = date.toString().padStart(2, '0');\r\n    element.year = year;\r\n    element.cashflowDate = date;\r\n    element.month = monthName;\r\n    element.Month = `${dateDisplay}/${monthDisplay}/${year}`;\r\n    element.dayOfExpity = dateDisplay;\r\n    this.cashflowExposureRows[index] = { ...element };\r\n  }\r\n\r\n  valueWithComma(e: any, fraction: any) {\r\n    if (e) {\r\n      const actualNumber = +e?.toString()?.replace(/,/g, '')\r\n      const formatted = actualNumber?.toLocaleString('en-US', { maximumFractionDigits: fraction })\r\n      return formatted\r\n    } else {\r\n      if (e == 0) {\r\n        return '0';\r\n      } else {\r\n        return false;\r\n      }\r\n    }\r\n  }\r\n\r\n  editSelling(element: any, index: any) {\r\n    this.openEditSellingIndex = index;\r\n    this.cashflowExposureRows[index].openEditForSelling = true\r\n    this.sellingValueForedit = this.valueWithComma(this.cashflowExposureRows[index].selling, 2);\r\n    this.cashflowExposureRows[index].errMsgForsellingFlag = false\r\n    this.cashflowExposureRows[index].openEditForBuying = false\r\n    delete this.errrMsgForBuyingAndSelling\r\n    this.cashflowExposureRows = [...this.cashflowExposureRows]\r\n  }\r\n\r\n  cancelEditSelling(element: any, index: any) {\r\n    this.cashflowExposureRows[index].openEditForSelling = false\r\n    this.cashflowExposureRows = [...this.cashflowExposureRows]\r\n  }\r\n\r\n  saveEditSelling(element: any, index: any) {\r\n    this.addRowBlinkIndex = -1;\r\n\r\n    if (this.sellingValueForedit === '') {\r\n        this.cashflowExposureRows[index].errMsgForsellingFlag = true;\r\n        this.cashflowExposureRows[index].openEditForSelling = true;\r\n        this.cashflowExposureRows = [...this.cashflowExposureRows];\r\n        this.errrMsgForBuyingAndSelling = \"Please enter only 0-9 numbers\";\r\n    } else {\r\n        const rawSellingValue = this.sellingValueForedit.replace(/\\,/g, '');\r\n        const sellingNumber = parseFloat(rawSellingValue);\r\n\r\n        const regex = /^\\d*\\.?\\d*$/;\r\n\r\n        if (regex.test(rawSellingValue)) {\r\n            if (sellingNumber > 100000000) {\r\n                this.cashflowExposureRows[index].errMsgForsellingFlag = true;\r\n                this.cashflowExposureRows[index].openEditForSelling = true;\r\n                this.errrMsgForBuyingAndSelling = \"Maximum amount allowed is 100,000,000\";\r\n            } else {\r\n                const formattedValue = this.valueWithComma(rawSellingValue, 2);\r\n                this.cashflowExposureRows[index].selling = formattedValue !== false ? formattedValue : '';\r\n                this.cashflowExposureRows[index].totalNetValue = sellingNumber - parseFloat(this.cashflowExposureRows[index].buying.toString()?.replace(/\\,/g, '') || '0');\r\n\r\n                this.cashflowExposureRows[index].errMsgForsellingFlag = false;\r\n                this.cashflowExposureRows[index].openEditForSelling = false;\r\n                this.cashflowExposureRows = [...this.cashflowExposureRows];\r\n            }\r\n        } else {\r\n            this.cashflowExposureRows[index].errMsgForsellingFlag = true;\r\n            this.cashflowExposureRows = [...this.cashflowExposureRows];\r\n            this.errrMsgForBuyingAndSelling = \"Please enter only 0-9 numbers\";\r\n        }\r\n    }\r\n  }\r\n\r\n  clearSellingZeroValue(element: any, index: any) {\r\n    this.sellingValueForedit = element.selling == \"0\" ? '' : this.valueWithComma(this.cashflowExposureRows[index].selling, 2);\r\n  }\r\n\r\n  editBuying(element: any, index: any) {\r\n    this.openEditBuyingIndex = index;\r\n    this.cashflowExposureRows[index].openEditForBuying = true\r\n    this.buyingValueForedit = this.valueWithComma(element?.buying, 2);\r\n    this.cashflowExposureRows[index].errMsgForbuyingFlag = false\r\n    this.cashflowExposureRows[index].openEditForSelling = false\r\n    delete this.errrMsgForBuyingAndSelling\r\n    this.cashflowExposureRows = [...this.cashflowExposureRows]\r\n  }\r\n\r\n  ClearBuyingZeroValue(element: any, index: any) {\r\n    this.buyingValueForedit = element.buying == \"0\" ? '' : this.valueWithComma(element?.buying, 2);\r\n  }\r\n\r\n  cancelEditBuying(element: any, index: any) {\r\n    this.cashflowExposureRows[index].openEditForBuying = false\r\n    this.cashflowExposureRows = [...this.cashflowExposureRows]\r\n  }\r\n  saveEditBuying(element: any, index: any) {\r\n    this.addRowBlinkIndex = -1;\r\n    if (this.buyingValueForedit === '') {\r\n        this.cashflowExposureRows[index].errMsgForbuyingFlag = true;\r\n        this.cashflowExposureRows[index].openEditForBuying = true;\r\n        this.cashflowExposureRows = [...this.cashflowExposureRows];\r\n        this.errrMsgForBuyingAndSelling = \"Please enter only 0-9 numbers\";\r\n    } else {\r\n        const rawBuyingValue = this.buyingValueForedit.replace(/\\,/g, '');\r\n        const buyingNumber = parseFloat(rawBuyingValue);\r\n\r\n        const regex = /^\\d*\\.?\\d*$/;\r\n\r\n        if (regex.test(rawBuyingValue)) {\r\n            if (buyingNumber > 100000000) {\r\n                this.cashflowExposureRows[index].errMsgForbuyingFlag = true;\r\n                this.cashflowExposureRows[index].openEditForBuying = true;\r\n                this.errrMsgForBuyingAndSelling = \"Maximum amount allowed is 100,000,000\";\r\n            } else {\r\n                const formattedValue = this.valueWithComma(rawBuyingValue, 2);\r\n                this.cashflowExposureRows[index].buying = formattedValue !== false ? formattedValue : '';\r\n                this.cashflowExposureRows[index].totalNetValue = buyingNumber - parseFloat(this.cashflowExposureRows[index].selling.toString()?.replace(/\\,/g, ''));\r\n\r\n                this.cashflowExposureRows[index].errMsgForbuyingFlag = false;\r\n                this.cashflowExposureRows[index].openEditForBuying = false;\r\n                this.cashflowExposureRows = [...this.cashflowExposureRows];\r\n            }\r\n        } else {\r\n            this.cashflowExposureRows[index].errMsgForbuyingFlag = true;\r\n            this.cashflowExposureRows = [...this.cashflowExposureRows];\r\n            this.errrMsgForBuyingAndSelling = \"Please enter only 0-9 numbers\";\r\n        }\r\n    }\r\n  }\r\n\r\n  onSwitchToggle(event?: any, element?: any, index?: any) {\r\n    this.cashflowExposureRows[index].disabledColumn = !this.cashflowExposureRows[index].disabledColumn;\r\n    this.cashflowExposureRows[index].postPoneFlag = false;\r\n    this.cashflowExposureRows[index].postPoneInactiveFlag = event.checked ? false : true;\r\n    this.cashflowExposureRows[index].openEditForBuying = false\r\n    this.cashflowExposureRows[index].openEditForSelling = false\r\n    this.cashflowExposureRows[index].buying =  this.cashflowExposureRows[index].disabledColumn ? '0' : this.buyingFlag ? this.monthlyExposureObject.monthlyAmount.toString() : '0';\r\n    this.cashflowExposureRows[index].selling = this.cashflowExposureRows[index].disabledColumn ? '0' : !this.buyingFlag ? this.monthlyExposureObject.monthlyAmount.toString() : '0';\r\n    this.cashflowExposureRows[index].totalNetValue = this.cashflowExposureRows[index].disabledColumn ? 0 : \r\n      parseFloat(this.cashflowExposureRows[index].selling.toString().replace(/,/g, '')) - \r\n      parseFloat(this.cashflowExposureRows[index].buying.toString().replace(/,/g, ''));\r\n    this.cashflowExposureRows = [...this.cashflowExposureRows]\r\n  }\r\n\r\n  formatValue(event: Event, valueType: 'sellingValueForedit' | 'buyingValueForedit'): void {\r\n    const input = event.target as HTMLInputElement;\r\n    let value = input.value.replace(/,/g, '');\r\n    this.maxLengthError = false;\r\n    if (value === '') {\r\n      this[valueType] = '0';\r\n      return;\r\n    }\r\n    if (value.includes('.')) {\r\n      const [integerPart, decimalPart] = value.split('.');\r\n      if (decimalPart.length > 2) {\r\n        value = integerPart + '.' + decimalPart?.slice(0, 2);\r\n      }\r\n    }\r\n    const actualNumber = parseFloat(value);\r\n    if (!isNaN(actualNumber)) {\r\n      this[valueType] = actualNumber.toLocaleString('en-US', { maximumFractionDigits: 2 });\r\n    }\r\n  }\r\n\r\n  restrictLength(event: KeyboardEvent): void {\r\n    const input = event.target as HTMLInputElement;\r\n    const valueWithoutCommas = input.value.replace(/,/g, '');\r\n    const cursorPosition = input.selectionStart;\r\n    const parts = valueWithoutCommas.split('.');\r\n    const integerPart = parts[0];\r\n    const decimalPart = parts[1] || '';\r\n\r\n    if (event.key === '.' && valueWithoutCommas.includes('.')) {\r\n      event.preventDefault();\r\n    }\r\n\r\n    if (valueWithoutCommas.includes('.') && cursorPosition! > valueWithoutCommas.indexOf('.') && decimalPart.length >= 2 && event.key !== 'Backspace' && event.key !== 'Delete') {\r\n      event.preventDefault();\r\n    }\r\n\r\n    if (!/^[0-9.]$/.test(event.key) && event.key !== 'Backspace' && event.key !== 'Delete' && !event.key.includes('Arrow')) {\r\n      event.preventDefault();\r\n    }\r\n  }\r\n\r\n  preventDecimalValue(event: KeyboardEvent) {\r\n    if (event.key === '.') {\r\n      event.preventDefault();\r\n      return false;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  clearInput(number: any) {\r\n    if (number == 1) {\r\n      this.buyingValueForedit = \"\"\r\n    }\r\n    if (number == 2) {\r\n      this.sellingValueForedit = \"\"\r\n    }\r\n  }\r\n\r\n  addOneMore() {\r\n    this.monthlyPeriod++\r\n    this.tempcashflowExposureRows = this.cashflowExposureRows;\r\n    this.cashflowExposureRows = [];\r\n    this.addRowBlinkIndex = -1;\r\n    this.isCurrentMonthIncrement = true;\r\n    this.getNext12MonthNamesWithYear(this.monthlyPeriod);\r\n    this.cashflowExposureRows?.splice(0, this.tempcashflowExposureRows?.length);\r\n    this.cashflowExposureRows = [...this.tempcashflowExposureRows, ...this.cashflowExposureRows]\r\n    // this.cashflowExposureRows[this.cashflowExposureRows.length - 1].blinkRowIndex = this.cashflowExposureRows.length - 1;\r\n  }\r\n\r\n  getNext12MonthNamesWithYear(monthlyPeriod: any) {\r\n    var now = new Date();\r\n    var month = now.getMonth();\r\n    var year = now.getFullYear();\r\n    var todayDate = now.getDate();\r\n\r\n    var names = this.staticMonthNames = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun',\r\n      'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\r\n    var res = [];\r\n\r\n    for (var i = 0; i < monthlyPeriod; ++i) {\r\n      let buyingValueRaw: any = this.buyingFlag ? this.monthlyExposureObject.monthlyAmount : \"0\";\r\n      let sellingValueRaw: any = this.buyingFlag ? \"0\" : this.monthlyExposureObject.monthlyAmount;\r\n      let buyingValue: number = parseFloat(buyingValueRaw.toString().replace(/,/g, '')) || 0;\r\n      let sellingValue: number = parseFloat(sellingValueRaw.toString().replace(/,/g, '')) || 0;\r\n      let totalNetValueNumber = sellingValue - buyingValue;\r\n      let totalNetValue = this.valueWithComma(totalNetValueNumber, 2);\r\n      let getMonthNumberFromName = new Date(`${names[month]} 1, ${year}`).getMonth() + 1;\r\n      let lastDayDD = new Date(year, getMonthNumberFromName, 0).getDate();\r\n\r\n      const startDate = new Date(`${names[month]} 1, ${year}`);\r\n      const endDate = new Date(`${names[month]} ${lastDayDD}, ${year}`);\r\n\r\n      const midDayDD = new Date((startDate.getTime() + endDate.getTime()) / 2);\r\n      let monthFormate: any = month + 1\r\n      \r\n      const newElement: any = {\r\n        month: this.cashflowExposureRows[i]?.month ? this.cashflowExposureRows[i]?.month : names[month],\r\n        year: this.cashflowExposureRows[i]?.year ? this.cashflowExposureRows[i]?.year : year,\r\n        buying: this.valueWithComma(this.cashflowExposureRows[i]?.buying ? this.cashflowExposureRows[i]?.buying : buyingValue, 2),\r\n        selling: this.valueWithComma(this.cashflowExposureRows[i]?.selling ? this.cashflowExposureRows[i]?.selling : sellingValue, 2),\r\n        totalNetValue: this.cashflowExposureRows[i]?.totalNetValue ? this.cashflowExposureRows[i]?.totalNetValue : totalNetValue,\r\n        lastDay: this.cashflowExposureRows[i]?.lastDay ? this.cashflowExposureRows[i]?.lastDay : lastDayDD,\r\n        midDay: this.cashflowExposureRows[i]?.midDay ? this.cashflowExposureRows[i]?.midDay : midDayDD.getDate(),\r\n        openEditForBuying: this.cashflowExposureRows[i]?.openEditForBuying ? this.cashflowExposureRows[i]?.openEditForBuying : false,\r\n        openEditForSelling: this.cashflowExposureRows[i]?.openEditForSelling ? this.cashflowExposureRows[i]?.openEditForSelling : false,\r\n        errMsgForbuyingFlag: this.cashflowExposureRows[i]?.errMsgForbuyingFlag ? this.cashflowExposureRows[i]?.errMsgForbuyingFlag : false,\r\n        errMsgForsellingFlag: this.cashflowExposureRows[i]?.errMsgForsellingFlag ? this.cashflowExposureRows[i]?.errMsgForsellingFlag : false,\r\n        postPoneFlag: this.cashflowExposureRows[i]?.postPoneFlag ? this.cashflowExposureRows[i]?.postPoneFlag : false,\r\n        postPoneInactiveFlag: this.cashflowExposureRows[i]?.postPoneInactiveFlag ? this.cashflowExposureRows[i]?.postPoneInactiveFlag : true,\r\n        postPoneMonth: this.cashflowExposureRows[i]?.postPoneMonth ? this.cashflowExposureRows[i]?.postPoneMonth : names[month],\r\n        monthNumber: month,\r\n      };\r\n      if (now.getMonth() == month) {\r\n        if (this.isCurrentMonthIncrement) {\r\n          newElement['cashflowDate'] = 15;\r\n        }\r\n        if (!this.isCurrentMonthIncrement) {\r\n          if (todayDate <= 15) {\r\n            newElement['cashflowDate'] = 15;\r\n          } else {\r\n            newElement['cashflowDate'] = todayDate;\r\n          }\r\n        }\r\n      } else {\r\n        newElement['cashflowDate'] = 15;\r\n      }\r\n      newElement['Month'] = `${newElement['cashflowDate'].toString().length == 1 ? \"0\" + newElement['cashflowDate'] : newElement['cashflowDate']}/${monthFormate?.toString().length == 1 ? \"0\" + monthFormate : monthFormate}/${year}`,\r\n        newElement['dayOfExpity'] = `${newElement['cashflowDate'].toString().length == 1 ? \"0\" + newElement['cashflowDate'] : newElement['cashflowDate']}`,\r\n\r\n        this.cashflowExposureRows = [...this.cashflowExposureRows, newElement];\r\n      res.push(names[month] + ' ' + year);\r\n      if (++month === 12) {\r\n        month = 0;\r\n        ++year;\r\n      }\r\n    }\r\n    return res;\r\n  }\r\n  \r\n  exposureDetailsNextStep() {\r\n    this.router.navigate(['/dashboard']);\r\n    window.scrollTo({ top: 0, behavior: 'auto' });\r\n  }\r\n\r\n  backToPrevious() {\r\n    this.stepper.previous();\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "locale",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 23,
                "jsdoctags": [
                    {
                        "name": "locale",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [
                "MomentDateAdapter"
            ],
            "type": "injectable"
        },
        {
            "name": "HedgingDataService",
            "id": "injectable-HedgingDataService-1b52f145c3b43a1a1fdb2aec7aa8b0af500558f138344dbe64d2234b1804e068bde1fa70273d2dc90249c2446f6ee77492281abd30dda7db8a800d189ed84969",
            "file": "src/app/risk-dashboard/components/hedging-proposal/hedging-data.service.ts",
            "properties": [
                {
                    "name": "advancePolicyCompleted$",
                    "defaultValue": "this.isAdvancePolicyCompletedSubject.asObservable()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "advancePolicyFlag$",
                    "defaultValue": "this.advancePolicyFlagSubject.asObservable()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "advancePolicyFlagSubject",
                    "defaultValue": "new BehaviorSubject<boolean>(false)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "getAdvancePolicyBudgetRate",
                    "defaultValue": "this.setAdvancePolicyBudgetRate.asObservable()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "getAdvancePolicyStep2Data",
                    "defaultValue": "this.setAdvancePolicyStep2Data.asObservable()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "getAdvancePolicyStepperIndex",
                    "defaultValue": "this.setAdvancePolicyStepperIndex.asObservable()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "getExposureFormValue",
                    "defaultValue": "this.setExposureFormValue.asObservable()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "hedgeAllDrawerState",
                    "defaultValue": "new BehaviorSubject<boolean>(false)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "hedgeAllDrawerState$",
                    "defaultValue": "this.hedgeAllDrawerState.asObservable()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "isAdvancePolicyCompletedSubject",
                    "defaultValue": "new BehaviorSubject<boolean>(false)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "openCashflowDateTooltip",
                    "defaultValue": "new BehaviorSubject<boolean>(false)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "quickHedgeDrawerState",
                    "defaultValue": "new BehaviorSubject<boolean>(false)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "quickHedgeDrawerState$",
                    "defaultValue": "this.quickHedgeDrawerState.asObservable()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "setAdvancePolicyBudgetRate",
                    "defaultValue": "new BehaviorSubject<any>({})",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "setAdvancePolicyStep2Data",
                    "defaultValue": "new BehaviorSubject<any>([])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "setAdvancePolicyStepperIndex",
                    "defaultValue": "new BehaviorSubject<number>(-1)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "setExposureFormValue",
                    "defaultValue": "new BehaviorSubject<any>({})",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "step2LastIndex",
                    "defaultValue": "new BehaviorSubject<boolean>(false)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 30
                }
            ],
            "methods": [
                {
                    "name": "closeHedgeAllDrawer",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "closeQuickHedgeDrawer",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "navigateToAdvancePolicyStepper",
                    "args": [
                        {
                            "name": "stepperIndex",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 65,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "stepperIndex",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "openHedgeAllDrawer",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "openQuickHedgeDrawer",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setAdvancePolicyFlag",
                    "args": [
                        {
                            "name": "value",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setAdvancePolicyFormvalue",
                    "args": [
                        {
                            "name": "formValue",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "formValue",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setAdvancePolicyStep2Formvalue",
                    "args": [
                        {
                            "name": "formValue",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 62,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "formValue",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject } from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class HedgingDataService {\r\n  constructor() { }\r\n\r\n  private hedgeAllDrawerState = new BehaviorSubject<boolean>(false);\r\n  hedgeAllDrawerState$ = this.hedgeAllDrawerState.asObservable();\r\n\r\n  private quickHedgeDrawerState = new BehaviorSubject<boolean>(false);\r\n  quickHedgeDrawerState$ = this.quickHedgeDrawerState.asObservable();\r\n\r\n  public setExposureFormValue = new BehaviorSubject<any>({});\r\n  getExposureFormValue = this.setExposureFormValue.asObservable();\r\n\r\n  openCashflowDateTooltip = new BehaviorSubject<boolean>(false);\r\n\r\n  public setAdvancePolicyStepperIndex = new BehaviorSubject<number>(-1);\r\n  getAdvancePolicyStepperIndex = this.setAdvancePolicyStepperIndex.asObservable();  \r\n\r\n  public setAdvancePolicyBudgetRate = new BehaviorSubject<any>({});\r\n  getAdvancePolicyBudgetRate = this.setAdvancePolicyBudgetRate.asObservable();\r\n\r\n  private advancePolicyFlagSubject = new BehaviorSubject<boolean>(false);\r\n  advancePolicyFlag$ = this.advancePolicyFlagSubject.asObservable();\r\n\r\n  step2LastIndex = new BehaviorSubject<boolean>(false);\r\n\r\n  public setAdvancePolicyStep2Data = new BehaviorSubject<any>([]);\r\n  getAdvancePolicyStep2Data = this.setAdvancePolicyStep2Data.asObservable();\r\n\r\n  isAdvancePolicyCompletedSubject = new BehaviorSubject<boolean>(false);\r\n  advancePolicyCompleted$ = this.isAdvancePolicyCompletedSubject.asObservable();\r\n\r\n  setAdvancePolicyFormvalue(formValue: any) {\r\n    this.setAdvancePolicyBudgetRate.next(formValue);\r\n  }\r\n\r\n  setAdvancePolicyFlag(value: boolean) {\r\n    this.advancePolicyFlagSubject.next(value);\r\n  }\r\n\r\n  openQuickHedgeDrawer() {\r\n    this.quickHedgeDrawerState.next(true);\r\n  }\r\n\r\n  closeQuickHedgeDrawer() {\r\n    this.quickHedgeDrawerState.next(false);\r\n  }\r\n\r\n  openHedgeAllDrawer() {\r\n    this.hedgeAllDrawerState.next(true);\r\n  }\r\n\r\n  closeHedgeAllDrawer() {\r\n    this.hedgeAllDrawerState.next(false);\r\n  }\r\n\r\n  setAdvancePolicyStep2Formvalue(formValue: any) {\r\n    this.setAdvancePolicyStep2Data.next(formValue);\r\n  }\r\n  navigateToAdvancePolicyStepper(stepperIndex: any) {\r\n    this.setAdvancePolicyStepperIndex.next(stepperIndex);\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 7
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "KycService",
            "id": "injectable-KycService-b484dfbcaf5dcfb924b01a7bd2bf189abea415582a6af6f6270b5dd3572df30abff92ab73384c51427be070dd77891ab3cd8c718dce55443a4235e87b9ec172a",
            "file": "src/app/sign-up/services/kyc.service.ts",
            "properties": [
                {
                    "name": "allCountries$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<CountriesData[]>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "allCountriesDataArr",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "allCountriesDataMap",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Map<string | >",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "errorOverlayTryAgainClicked$",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "handleResetCountries$",
                    "defaultValue": "new Subject<boolean>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "isClickOnRenewKYCDlg",
                    "defaultValue": "new BehaviorSubject(false)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "loading$",
                    "defaultValue": "new Subject<boolean>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "refreshKycTooltip",
                    "defaultValue": "new BehaviorSubject(false)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 45
                },
                {
                    "name": "removeDocumentVerificationDlg",
                    "defaultValue": "new BehaviorSubject(false)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 44
                },
                {
                    "name": "selectedAccountType$",
                    "defaultValue": "new BehaviorSubject(null)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "showError$",
                    "defaultValue": "new Subject<IErrorData>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "shuftiData",
                    "defaultValue": "new BehaviorSubject<any>(null)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "verificationCodeStatus",
                    "defaultValue": "new BehaviorSubject<TVerificationCodeStatus>('DEFAULT')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 36
                }
            ],
            "methods": [
                {
                    "name": "calcMinAgeFromToday",
                    "args": [
                        {
                            "name": "age",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "18"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 151,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "age",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "18",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getllCountriesDataArr",
                    "args": [],
                    "optional": false,
                    "returnType": "[]",
                    "typeParameters": [],
                    "line": 166,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getNewAccessToken",
                    "args": [
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<string>",
                    "typeParameters": [],
                    "line": 286,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getSumSubApplicant",
                    "args": [
                        {
                            "name": "applicantId",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 283,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "applicantId",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleCountrySearch",
                    "args": [
                        {
                            "name": "data",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 116,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "launchWebSdk",
                    "args": [
                        {
                            "name": "accessToken",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "phone",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 257,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "accessToken",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "phone",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "stepOneValidations",
                    "args": [
                        {
                            "name": "newVal",
                            "type": "IKYCFormGroups",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "kycForm",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 61,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "newVal",
                            "type": "IKYCFormGroups",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "kycForm",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "verifyID",
                    "args": [
                        {
                            "name": "file",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 221,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "file",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { AbstractControl, FormGroup } from '@angular/forms';\r\nimport { BehaviorSubject, Observable, Subject } from 'rxjs';\r\nimport { debounceTime, takeWhile } from 'rxjs/operators';\r\n// import { TAccountPackageDto } from 'src/app/activate-account/models/user';\r\n// import { ApiMap } from 'src/app/common/api.map';\r\n// import { CommonService } from 'src/app/common/services/common.service';\r\n// import { DataService } from 'src/app/core/services/data.service';\r\n// import { environment } from 'src/environments/environment';\r\nimport snsWebSdk from '@sumsub/websdk';\r\nimport {\r\n    CountriesData,\r\n    CountryData,\r\n    CountryDataType,\r\n    EBusinessType,\r\n    EStepNumber,\r\n    IErrorData,\r\n    IKYCFormGroups,\r\n    SupportedCountries,\r\n    TBusinessTypes,\r\n    TSendMailResponse,\r\n    TVerificationCodeStatus,\r\n    VerificationReturnType\r\n} from '../models/index';\r\nimport { countryData } from '../fields/country-data';\r\n// import {minAgeForKyc} from \"../../models\";\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class KycService {\r\n    allCountriesDataMap: Map<string, CountryDataType[any]>;\r\n    allCountriesDataArr: CountryDataType[any][];\r\n    loading$ = new Subject<boolean>();\r\n    verificationCodeStatus = new BehaviorSubject<TVerificationCodeStatus>('DEFAULT');\r\n    showError$ = new Subject<IErrorData>();\r\n    allCountries$!: BehaviorSubject<CountriesData[]>;\r\n    handleResetCountries$ = new Subject<boolean>();\r\n    errorOverlayTryAgainClicked$ = new Subject();\r\n    selectedAccountType$ = new BehaviorSubject(null);\r\n    shuftiData = new BehaviorSubject<any>(null);\r\n    isClickOnRenewKYCDlg = new BehaviorSubject(false);\r\n    removeDocumentVerificationDlg = new BehaviorSubject(false);\r\n    refreshKycTooltip = new BehaviorSubject(false);\r\n\r\n    constructor(\r\n        private http: HttpClient,\r\n        // private dataService: DataService,\r\n        // private _commonService: CommonService\r\n    ) {\r\n\r\n        this.allCountriesDataMap = new Map(Object.entries(CountryData));\r\n        this.allCountriesDataArr = [...this.allCountriesDataMap.values()];\r\n        this.allCountries$ = new BehaviorSubject<CountriesData[]>([]);\r\n\r\n        const countries: any = countryData;\r\n        this.allCountries$.next(countries);\r\n          \r\n    }\r\n    stepOneValidations(newVal: IKYCFormGroups, kycForm: any) {\r\n        if (\r\n            !newVal.step_1.companyAcc.isActive &&\r\n            !newVal.step_1.privateAcc.isActive\r\n        ) {\r\n            kycForm.controls.step_1.setErrors({ required: true });\r\n        } else {\r\n            kycForm.controls.step_1.setErrors(null);\r\n        }\r\n\r\n        Object.keys(newVal.step_1).forEach((bt) => {\r\n            if (bt === EBusinessType.invitedAccount) return;\r\n\r\n            let step1Control: any = kycForm.controls.step_1.get(bt) as AbstractControl<any, any>;\r\n            if (!step1Control) return; // Add null check\r\n\r\n            const countrySelected = step1Control.get('countrySelected');\r\n\r\n            if (step1Control.get('isActive').value) {\r\n                if (!countrySelected.value) {\r\n                    countrySelected.setErrors({ required: true });\r\n                } else if (newVal.step_1?.companyAcc?.countrySelected == null) {\r\n                    // if (!SupportedCountries.includes(countrySelected.value?.toLowerCase())) {\r\n                    //     countrySelected.setErrors({\r\n                    //         not_supported_country: {\r\n                    //             message: `Okoora is currently not available in ${countrySelected.value}`,\r\n                    //         },\r\n                    //     });\r\n                    // }\r\n                }\r\n                else if (newVal.step_1?.companyAcc?.countrySelected != null) {\r\n                    let finalObject:any;\r\n                    this.allCountries$.subscribe(\r\n                        (data) => {\r\n                            data.map((item: any) => {\r\n                                if (item.countryName == newVal.step_1.companyAcc.countrySelected) {\r\n                                    finalObject = item\r\n                                }\r\n                            })\r\n                        })\r\n                    //    if(finalObject?.canRegister == 0){\r\n                    //     if (!SupportedCountries.includes(countrySelected.value?.toLowerCase())) {\r\n                    //         countrySelected.setErrors({\r\n                    //             not_supported_country: {\r\n                    //                 message: `Okoora is currently not available in ${countrySelected.value}`,\r\n                    //             },\r\n                    //         });\r\n                    //     }\r\n                    //    }\r\n                }\r\n            } else {\r\n                step1Control.get('countrySelected').setErrors(null);\r\n            }\r\n        });\r\n    }// #stepOneValidations\r\n    handleCountrySearch(data: { event: Event, action: 'PHONE_CODE' | 'NAME' }): any {\r\n        const { value } = <HTMLInputElement>data.event.target;\r\n        let { action } = data;\r\n\r\n        if (!value) {\r\n            return this.allCountries$.getValue();\r\n        }\r\n\r\n        switch (action) {\r\n            case 'PHONE_CODE':\r\n                return this.allCountries$.getValue().filter((cData: any) => {\r\n                    if (!isNaN(+value) && typeof +value === typeof Number()) {\r\n                        return cData.phoneCode?.toString()?.includes(value);\r\n                    } else if (typeof value === typeof String()) {\r\n                        return cData.countryName.toLowerCase().includes(\r\n                            value.toLowerCase()\r\n                        );\r\n                    }\r\n                })\r\n\r\n            case 'NAME':\r\n                return this.allCountries$.getValue().filter(cData => {\r\n                    return cData.countryName.toLowerCase().includes(\r\n                        value.toLowerCase()\r\n                    );\r\n                })\r\n\r\n            default:\r\n                const exhaustCheck: never = action;\r\n                console.error(`unhandled action occured ${exhaustCheck}`);\r\n                break;\r\n        }\r\n\r\n    }// # handleCountrySearch\r\n\r\n    calcMinAgeFromToday(age: number = 18) {\r\n        if (typeof age !== typeof Number()) {\r\n            console.error(`age must be number`);\r\n            return null;\r\n        }\r\n\r\n        const today = new Date();\r\n        let todayDate = today.getDate() < 18 ? `0${today.getDate()}` : today.getDate();\r\n        const todayMonth = today.getMonth() < 18 ? `0${today.getMonth() + 1}` : today.getMonth() + 1;\r\n        const year = new Date().getFullYear() - age;\r\n\r\n        const minDate = new Date(`${todayMonth}/${todayDate}/${year}`);\r\n\r\n        return minDate;\r\n    }\r\n    getllCountriesDataArr(): CountryDataType[any][] {\r\n        return [...this.allCountriesDataMap.values()];\r\n    }\r\n    // createUserWithReferal(value: any, refAff: number) {\r\n    //     return this.http.post<boolean>(environment.baseApiUrl + `/Signup/CreateNewUser?refAff=${refAff}`, value);\r\n    // }\r\n    // createUser(value: any) {\r\n        \r\n    //     const headers = new HttpHeaders({\r\n    //         'X-Client-Url': window.location.href // Send full URL\r\n    //       });\r\n\r\n    //       return this.http.post<boolean>(\r\n    //         `${environment.baseApiUrl}/Signup/CreateNewUser`,\r\n    //         value,\r\n    //         { headers }\r\n    //       );\r\n    // }\r\n    // sendMailVerification(email: any) {\r\n    //     let params : any = { 'number': '0' ,'email':email}; \r\n    //     return this.dataService.postWithQueryParams<{ result: any }>(environment.baseApiUrl + '/Signup/SendEmailVerificationCode', params)  \r\n    // }\r\n    // SendEmailVerificationCode(email: any) {\r\n    //     return this.http.post<any>(`${environment.baseApiUrl}/Account/SendEmailVerificationCode?email=${email}`,null);\r\n    // }\r\n\r\n    // PrivateKYCCountry(country: any) {\r\n    //     return this.http.post<any>(`${environment.baseApiUrl}/Signup/AddCountryRegisterUserOutsideIsrael?country=${country}`,null);\r\n    // }\r\n    \r\n    // CheckMailVertification(code: any, email: any) {\r\n    //     const body = {\r\n    //         email,\r\n    //         verificationCode: code\r\n    //     }\r\n    //     return this.http.post<boolean>(environment.baseApiUrl + '/Signup/CheckEmailVerificationCode', body);\r\n    // }\r\n    // CheckSMSVertification(code: any, phone: any) {\r\n    //     const body = {\r\n    //         phoneNumber: phone,\r\n    //         verificationCode: code\r\n    //     }\r\n    //     return this.http.post<boolean>(environment.baseApiUrl + '/Signup/CheckSmsVerificationCode', body);\r\n    // }\r\n    // sendSMSVerification(phone: any) {\r\n    //     let params : any = { 'number': phone};\r\n    //     return this.dataService.postWithQueryParams<{ result: any }>(environment.baseApiUrl + '/Signup/SendSmsVerificationCode', params)\r\n    // }\r\n    // UpdateRegistrationPersonalDetails(value: any, autoApproved: any) {\r\n    //     return this.http.post<boolean>(`${environment.baseApiUrl}/Signup/UpdateRegistrationPersonalDetails?isAutoApprove=${autoApproved}`, value);\r\n    // }\r\n    // GetCountries() {\r\n    //     return this.dataService.getRequest<{ result: any }>(ApiMap.getCountries.url);\r\n\r\n    // }\r\n    verifyID(file: any) {\r\n        return this.http.post('api.shuftipro.com', { headers: { 'Content-Type': 'application/json' } }, file);\r\n    }\r\n    // checkIdDuplication(id: any) {\r\n    //     return this.http.get<boolean>(`${environment.baseApiUrl}/Signup/CheckClientIdDuplication?id=${id}`);\r\n    // }\r\n    // shuftiProVareficationResponse() {\r\n    //     return this.http.post(`${environment.baseApiUrl}/Signup/ShuftiProClientVerification`, {});\r\n    // }\r\n    // getAccountType$(): Observable<TBusinessTypes> {\r\n    //     return this.selectedAccountType$.asObservable()\r\n    //         .pipe(\r\n    //             takeWhile((bt): bt is TBusinessTypes => bt !== null),\r\n    //             debounceTime(500)\r\n    //         );\r\n    // }\r\n    // notNow() {\r\n    //     return this.dataService.getRequest<{ result: any }>(ApiMap.GetStopUserPlanPurchaseAlert.url);\r\n    // }\r\n    // EmbeddedKYC_clientId(){\r\n    //     return environment.EmbeddedKYCAWClientId;\r\n    // }\r\n    // EmbeddedKYC_Env(){\r\n    //     return environment.EmbeddedKYCAWEnv;\r\n    // }\r\n    \r\n    // PayMePlanPurchase(AccountPackageDto: TAccountPackageDto) {\r\n    //     return this.dataService.postWithQueryParams<boolean>(ApiMap.PayMePlanPurchase.url, AccountPackageDto);\r\n    // }\r\n    // getSumSubApplicant(applicantId: string) {\r\n    //     return this.http.get<any>(environment.baseApiUrl + '/Kyc/GetApplicantData?applicantId=' + applicantId);\r\n    // }\r\n    // getSumSubAccessToken(email: string) {\r\n    //         return this.http.get<any>(environment.baseApiUrl + '/Kyc/GetSumSubAccessToken?email=' + email);\r\n    // }\r\n\r\n    launchWebSdk(accessToken: any, phone: string, email: string) {\r\n        let snsWebSdkInstance = snsWebSdk.init(\r\n                accessToken,\r\n                () => this.getNewAccessToken(email)\r\n            )\r\n            .withConf({\r\n                lang: 'en',\r\n                email: email,\r\n                phone: phone,\r\n            })\r\n            .on('idCheck.onStepCompleted', (payload) => {\r\n\r\n            })\r\n            .on('idCheck.onError', (error) => {\r\n            })\r\n            .onMessage((type, payload:any) => {\r\n                if(type as string == \"idCheck.onApplicantLoaded\" ){\r\n                    this.getSumSubApplicant(payload.applicantId)\r\n                }\r\n\r\n            })\r\n\r\n            .build();\r\n\r\n        snsWebSdkInstance.launch('#sumsub-websdk-container')\r\n      }\r\n    getSumSubApplicant(applicantId: any) {\r\n        throw new Error('Method not implemented.');\r\n    }\r\n    getNewAccessToken(email: string): Promise<string> {\r\n        throw new Error('Method not implemented.');\r\n    }\r\n}\r\n\r\n    //   getNewAccessToken(email: string) {\r\n    //     return this.getSumSubAccessToken(email)\r\n    //         .toPromise()\r\n    //         .then((accessToken: string | undefined) => {\r\n    //             if (typeof accessToken === 'string') {\r\n    //                 return accessToken;\r\n    //             } else {\r\n    //                 throw new Error('Access token is not a valid string');\r\n    //             }\r\n    //         })\r\n    //         .catch((error: any) => {\r\n    //             console.error('Error getting a new access token:', error);\r\n    //             throw error;\r\n    //         });\r\n    // }\r\n\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 45,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "SubjectService",
            "id": "injectable-SubjectService-3cf528e503ef0433c582ce7c2e598ae86ed0758705855354a1f59b635fb2d0b07a46598b83c58554faeb39d2e6fd924d3be7e7fc42d6b5339bfaf40b3fac6138",
            "file": "src/app/sign-up/services/subject.service.ts",
            "properties": [
                {
                    "name": "_idValidation",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        123,
                        126
                    ]
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {Injectable} from '@angular/core';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class SubjectService {\r\n    private static _idValidation = true;\r\n\r\n    constructor() {\r\n    }\r\n\r\n    static get idValidation() {\r\n        return this._idValidation;\r\n    }\r\n\r\n    set idValidation(value: boolean) {\r\n        SubjectService._idValidation = value;\r\n    }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 7
            },
            "accessors": {
                "idValidation": {
                    "name": "idValidation",
                    "setSignature": {
                        "name": "idValidation",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 16,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "idValidation",
                        "type": "",
                        "returnType": "",
                        "line": 12
                    }
                }
            },
            "extends": [],
            "type": "injectable"
        }
    ],
    "guards": [],
    "interceptors": [],
    "classes": [],
    "directives": [],
    "components": [
        {
            "name": "ActiveProtectionTraderoomComponent",
            "id": "component-ActiveProtectionTraderoomComponent-661e0f639ee5b4c359cc4303392e4f33fe3e462092da6d9086ae416ce21a72ad8646056f8071d2518ed36ab56acaefd56c7c8bbcec0209e681080bb1a3a09658",
            "file": "src/app/risk-dashboard/components/hedging-proposal/components/traderoom-components/active-protection-traderoom/active-protection-traderoom.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-active-protection-traderoom",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./active-protection-traderoom.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "collateralAmount",
                    "defaultValue": "1200.00",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "expiryDate",
                    "defaultValue": "'Jan 15, 2025'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "hedgeStatus",
                    "defaultValue": "6",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "price",
                    "defaultValue": "300",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "primaryCurrencySign",
                    "defaultValue": "'₪'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "primaryFlag",
                    "defaultValue": "'/flags/ils-flag.svg'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "string | string[]",
                    "decorators": []
                },
                {
                    "name": "protectedAmount",
                    "defaultValue": "10000.00",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "secondaryCurrencySign",
                    "defaultValue": "'$'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "secondaryFlag",
                    "defaultValue": "'/flags/usd-flag.svg'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "string | string[]",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "wantToPurchaseDeal",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 31
                }
            ],
            "methodsClass": [
                {
                    "name": "backToDashboard",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "closeDialog",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "continueHedging",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 64,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "formatValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "ConnectingTraderoomComponent",
                    "type": "component"
                },
                {
                    "name": "ConnectedTraderoomComponent",
                    "type": "component"
                },
                {
                    "name": "CancelledTraderoomComponent",
                    "type": "component"
                },
                {
                    "name": "AgentsBusyTraderoomComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { Component, Input } from '@angular/core';\r\nimport { ConnectingTraderoomComponent } from \"../connecting-traderoom/connecting-traderoom.component\";\r\nimport { ConnectedTraderoomComponent } from '../connected-traderoom/connected-traderoom.component';\r\nimport { CancelledTraderoomComponent } from \"../cancelled-traderoom/cancelled-traderoom.component\";\r\nimport { AgentsBusyTraderoomComponent } from '../agents-busy-traderoom/agents-busy-traderoom.component';\r\nimport { MatDialogRef } from '@angular/material/dialog';\r\nimport { HedgingDataService } from '../../../hedging-data.service';\r\n\r\n@Component({\r\n  selector: 'app-active-protection-traderoom',\r\n  imports: [CommonModule, ConnectingTraderoomComponent, ConnectedTraderoomComponent, CancelledTraderoomComponent, AgentsBusyTraderoomComponent],\r\n  templateUrl: './active-protection-traderoom.component.html',\r\n  styleUrl: './active-protection-traderoom.component.scss'\r\n})\r\nexport class ActiveProtectionTraderoomComponent {\r\n  @Input() hedgeStatus: number = 6;\r\n  @Input() protectedAmount: number = 10000.00;\r\n  @Input() primaryFlag: string | string[] = '/flags/ils-flag.svg';\r\n  @Input() secondaryFlag: string | string[] = '/flags/usd-flag.svg';\r\n  @Input() primaryCurrencySign: string = '₪';\r\n  @Input() secondaryCurrencySign: string = '$';\r\n  @Input() collateralAmount: number = 1200.00;\r\n  @Input() price: number = 300;\r\n  @Input() expiryDate: string = 'Jan 15, 2025';\r\n  // 2: Connecting, \r\n  // 3: Connected, \r\n  // 4: Cancelled, \r\n  // 6: Active Protection, \r\n  // 7: Agents Busy\r\n  wantToPurchaseDeal: any;\r\n  formatValue(value:any) {\r\n    // Convert to float and fix to two decimal places\r\n    const num = parseFloat(value).toFixed(2);\r\n  \r\n    // Split integer and decimal parts\r\n    const [integerPart, decimalPart] = num.split(\".\");\r\n  \r\n    // Add comma after every two digits from the right (Indian style)\r\n    let lastThree = integerPart.slice(-3);\r\n    let otherNumbers = integerPart.slice(0, -3);\r\n    if (otherNumbers !== '') {\r\n      lastThree = ',' + lastThree;\r\n    }\r\n    const formattedInt = otherNumbers.replace(/\\B(?=(\\d{2})+(?!\\d))/g, \",\") + lastThree;\r\n  \r\n    return formattedInt + \".\" + decimalPart;\r\n  }\r\n\r\n  constructor(private dialogRef: MatDialogRef<ActiveProtectionTraderoomComponent>, private hedgeService: HedgingDataService) { \r\n\r\n  }\r\n\r\n  closeDialog() {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n  backToDashboard() {\r\n    this.dialogRef.close();\r\n    this.hedgeService.closeHedgeAllDrawer();\r\n    this.hedgeService.closeQuickHedgeDrawer();\r\n  }\r\n\r\n  continueHedging() { \r\n    this.dialogRef.close();\r\n  }\r\n\r\n}\r\n",
            "styleUrl": "./active-protection-traderoom.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<ActiveProtectionTraderoomComponent>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "hedgeService",
                        "type": "HedgingDataService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 48,
                "jsdoctags": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<ActiveProtectionTraderoomComponent>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "hedgeService",
                        "type": "HedgingDataService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<div class=\"lock-rate-modal\">\r\n    <div class=\"lock-rate-close-btn\">\r\n        <button mat-dialog-close class=\"close-btn\" (click)=\"closeDialog()\">\r\n            <img src=\"images/white-close.svg\" *ngIf=\"hedgeStatus !== 6\" alt=\"Close\">\r\n            <img src=\"images/grey-close-icon.svg\" *ngIf=\"hedgeStatus === 6\" alt=\"Close\">\r\n        </button>\r\n    </div>\r\n\r\n    <div class=\"lock-rate-modal-container\" \r\n    [ngClass]=\"{'bg-blue': hedgeStatus === 7,'success-model': hedgeStatus === 6 }\">\r\n        <div class=\"lock-rate-modal-left-inner\" [ngClass]=\"{'centered': hedgeStatus === 6}\">\r\n            <div class=\"lock-rate-new-body\" [ngSwitch]=\"hedgeStatus\">\r\n                <div *ngSwitchCase=\"2\">\r\n                    <app-connecting-traderoom></app-connecting-traderoom>\r\n                </div>\r\n\r\n                <div *ngSwitchCase=\"3\">\r\n                    <app-connected-traderoom></app-connected-traderoom>\r\n                </div>\r\n\r\n                <div *ngSwitchCase=\"4\">\r\n                    <app-cancelled-traderoom></app-cancelled-traderoom>\r\n                </div>\r\n\r\n                <div *ngSwitchCase=\"6\">\r\n                    <div class=\"container active-protection-container\">\r\n                        <div class=\"column\">\r\n                            <p class=\"title traderoom-connect-title\">Protection Amount</p>\r\n                            <div class=\"content\">\r\n                                <p class=\"value price\">{{secondaryCurrencySign}}{{formatValue(protectedAmount)}}</p>\r\n                                <span><img height=\"25\" [src]=\"secondaryFlag\" alt=\"notional\" /></span>\r\n                            </div>\r\n                            <div class=\"divider\"></div>\r\n                        </div>\r\n\r\n                        <div class=\"column\">\r\n                            <p class=\"title traderoom-connect-title\">Collateral</p>\r\n                            <div class=\"content\">\r\n                                <p class=\"value price\">{{primaryCurrencySign}}{{formatValue(collateralAmount)}}</p>\r\n                                <img height=\"25\" [src]=\"primaryFlag\" alt=\"collateral\" />\r\n                            </div>\r\n                            <div class=\"divider\"></div>\r\n                        </div>\r\n\r\n                        <div class=\"column\">\r\n                            <p class=\"title traderoom-connect-title\">Fee</p>\r\n                            <div class=\"content\">\r\n                                <p class=\"value price\">{{primaryCurrencySign}}{{formatValue(price)}}</p>\r\n                                <span><img height=\"25\" [src]=\"primaryFlag\" alt=\"currency\" /></span>\r\n                            </div>\r\n                            <div class=\"divider\"></div>\r\n                        </div>\r\n\r\n                        <div class=\"column\">\r\n                            <p class=\"title traderoom-connect-title\">Expiry Date</p>\r\n                            <div class=\"content\">\r\n                                <p class=\"value\">{{expiryDate}}</p>\r\n                                <img height=\"25\" src=\"/images/calendar.svg\" alt=\"calendar\" />\r\n                            </div>\r\n                            <div class=\"divider\"></div>\r\n                        </div>\r\n\r\n                        <div class=\"contacts-header\">\r\n                            <button class=\"back-to-dashboard\" (click)=\"backToDashboard()\">Back to dashboard</button>\r\n                            <button class=\"continue-hedging\" (click)=\"continueHedging()\">Continue hedging</button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                <div *ngSwitchCase=\"7\">\r\n                    <app-agents-busy-traderoom></app-agents-busy-traderoom>\r\n                </div>                \r\n            </div>\r\n        </div>\r\n\r\n        <!-- <div class=\"lock-rate-modal-right-inner\" [ngClass]=\"{'success': hedgeStatus === 6 }\" *ngIf=\"hedgeStatus !== 7\">\r\n            <picture *ngIf=\"hedgeStatus !== 6\">\r\n                <img src=\"/images/group-hedge-modal.svg\" alt=\"group\" />\r\n            </picture>\r\n            <div class=\"lock-rate-modal-purchase\">\r\n                <div class=\"img-wrapper\">\r\n                    \r\n                    <div class=\"img-modal\" *ngIf=\"hedgeStatus===6\">\r\n                        <img src=\"/images/clock-guard.svg\" alt=\"clock\" height=\"60px\" />\r\n                        <p class=\"traderoom-connect-title\">Protection <br>is Active</p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div> -->\r\n\r\n        <div class=\"lock-rate-modal-right-inner\" [ngClass]=\"{'success': hedgeStatus ===6 }\" *ngIf=\"hedgeStatus !== 7 \">\r\n            <img class=\"img-hedge\" *ngIf=\"hedgeStatus!==6\" src=\"images/hedge-modal.svg\" alt=\"close\" />\r\n            <div class=\"lock-rate-modal-purchase\" *ngIf=\"hedgeStatus===6\">\r\n              <div class=\"img-wrapper\">\r\n                <picture>\r\n                    <img src=\"images/group-hedge-modal.svg\" alt=\"group\" />\r\n                  </picture>\r\n                  <div class=\"img-modal\">\r\n                    <img src=\"/images/clock-guard.svg\" alt=\"clock\" height=\"60px\" />\r\n                    <p class=\"traderoom-connect-title\">Protection <br>is Active</p>\r\n                  </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n    </div>\r\n</div>"
        },
        {
            "name": "AdvancedPolicyComponent",
            "id": "component-AdvancedPolicyComponent-5d7fbec7b5aba686d1bb8338aded0c64011fc8dd7c460b38968db381af1817ec276e6a90dbbde5997f0898fc56a6aff988d10722cde962e739940c432ac32e93",
            "file": "src/app/risk-dashboard/components/advanced-policy/advanced-policy.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-advanced-policy",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./advanced-policy.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "formStepper",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatStepper",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'formStepper'"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "isPolicyAlreadyCompleted",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean | undefined",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "riskManagerService",
                    "defaultValue": "inject(HedgingDataService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                }
            ],
            "methodsClass": [
                {
                    "name": "checkIfPolicyAlreadyCompleted",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "moveNextPage",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "movePreviousPage",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 60,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "MatStepperModule",
                    "type": "module"
                },
                {
                    "name": "MatProgressBarModule",
                    "type": "module"
                },
                {
                    "name": "AdvancedPolicyStep1Component",
                    "type": "component"
                },
                {
                    "name": "AdvancedPolicyStep2Component",
                    "type": "component"
                },
                {
                    "name": "AdvancedPolicyStep3Component",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, inject, ViewChild } from '@angular/core';\r\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\r\nimport { MatStepper, MatStepperModule } from '@angular/material/stepper';\r\nimport { AdvancedPolicyStep1Component } from './components/advanced-policy-step1/advanced-policy-step1.component';\r\nimport { AdvancedPolicyStep2Component } from './components/advanced-policy-step2/advanced-policy-step2.component';\r\nimport { AdvancedPolicyStep3Component } from './components/advanced-policy-step3/advanced-policy-step3.component';\r\nimport { HedgingDataService } from '../hedging-proposal/hedging-data.service';\r\n\r\n@Component({\r\n  selector: 'app-advanced-policy',\r\n  imports: [ MatStepperModule, MatProgressBarModule, AdvancedPolicyStep1Component, AdvancedPolicyStep2Component, AdvancedPolicyStep3Component ],\r\n  templateUrl: './advanced-policy.component.html',\r\n  styleUrl: './advanced-policy.component.scss'\r\n})\r\nexport class AdvancedPolicyComponent {\r\n  @ViewChild('formStepper') formStepper!: MatStepper;\r\n  riskManagerService = inject(HedgingDataService);\r\n  // stepperIndex$: Subscription;\r\n  isPolicyAlreadyCompleted: boolean | undefined;\r\n  constructor() {\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.riskManagerService.getAdvancePolicyStepperIndex.subscribe(res => {\r\n      if (this.formStepper) {\r\n        if (res == 0) {\r\n          this.formStepper.selectedIndex = res;\r\n        } else if (res > 0) {\r\n          this.formStepper.selectedIndex = 1;\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  ngAfterViewInit(): void {\r\n    setTimeout(() => {\r\n      this.checkIfPolicyAlreadyCompleted();\r\n    });\r\n  }\r\n\r\n\r\n  checkIfPolicyAlreadyCompleted() {\r\n    // this.riskManagerService.advancePolicyCompleted$.subscribe({\r\n    //   next: (result) => {\r\n    //     this.isPolicyAlreadyCompleted = result;\r\n    //     if (this.isPolicyAlreadyCompleted && this.formStepper) {\r\n    //       this.formStepper.selectedIndex = 2;\r\n    //     }\r\n    //   },\r\n    //   error: (err) => {\r\n    //     console.log('')\r\n    //   }\r\n    // })\r\n  }\r\n\r\n  moveNextPage() {\r\n    this.formStepper.next();\r\n  }\r\n\r\n  movePreviousPage() {\r\n    this.formStepper.previous();\r\n  }\r\n}\r\n",
            "styleUrl": "./advanced-policy.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 19
            },
            "extends": [],
            "templateData": "<div class=\"advance-policy-stepper\">\r\n    <mat-stepper #formStepper class=\"form-stepper\">\r\n        <mat-progress-bar #formStepperProgress [hidden]=\"true\"> --</mat-progress-bar>\r\n        <mat-step>\r\n            <ng-template matStepContent>\r\n            <app-advanced-policy-step1> </app-advanced-policy-step1>\r\n            </ng-template>\r\n        </mat-step>\r\n        <mat-step>\r\n            <ng-template matStepContent>\r\n                <app-advanced-policy-step2 (moveNextPage)=\"moveNextPage()\" (movePreviousPage)=\"movePreviousPage()\"></app-advanced-policy-step2>\r\n            </ng-template>\r\n        </mat-step> \r\n        <mat-step>\r\n            <ng-template matStepContent>\r\n                <app-advanced-policy-step3 (fromStep3)=\"movePreviousPage()\"> </app-advanced-policy-step3>\r\n            </ng-template>\r\n        </mat-step>\r\n    </mat-stepper>\r\n</div>"
        },
        {
            "name": "AdvancedPolicyStep1Component",
            "id": "component-AdvancedPolicyStep1Component-63fedc76fba4e362982be47ea91f519407321ec35dc4f815d9233dbeb20347c8fa30898a650b1cbbabde150371656e274cf548a3bc37b655d8063a9ca4ade87b",
            "file": "src/app/risk-dashboard/components/advanced-policy/components/advanced-policy-step1/advanced-policy-step1.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-advanced-policy-step1",
            "styleUrls": [
                "./advanced-policy-step1.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./advanced-policy-step1.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "midSpotRate",
                    "defaultValue": "5.555",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 31,
                    "type": "number",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "apiErrorMessage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "baseCurrency",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "baseCurrencyfromLocal",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "cashflowExposureInfo",
                    "defaultValue": "advancePolicyStep1Obj",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "currencyPair",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "errorMessage",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "exposerData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "firstCurrency",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "form",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "fromCurrency",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "generateBudgetRateFlag",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "hedgingDataService",
                    "defaultValue": "inject(HedgingDataService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "matStepper",
                    "defaultValue": "inject(MatStepper, { optional: true })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "decorators": [
                        {
                            "name": "Optional",
                            "stringifiedArguments": ""
                        }
                    ],
                    "modifierKind": [
                        170,
                        123
                    ]
                },
                {
                    "name": "maxBudgetRate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "midSpotSubscription",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "minBudgetRate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "router",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Router",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 44,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "showLoader",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "toCurrency",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "toCurrencyfromLocal",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 40
                }
            ],
            "methodsClass": [
                {
                    "name": "backTodashboard",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 220,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "checkBudgetRateRange",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 120,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "clearValue",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 228,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "generateBudgetRate",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 88,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getFromLocalStorage",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 62,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getMidSpot",
                    "args": [],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 106,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getSpotRate",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 112,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "isControlKey",
                    "args": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 215,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "nextStep",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 138,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 233,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 67,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "preventInvalidInput",
                    "args": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 162,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "submitForm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 224,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "validateInput",
                    "args": [
                        {
                            "name": "inputValue",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 177,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "inputValue",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "MatProgressBarModule",
                    "type": "module"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, inject, Input, Optional } from '@angular/core';\r\nimport { MatStepper } from '@angular/material/stepper';\r\nimport { FormGroup, FormControl, Validators, AbstractControl, FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { Router } from '@angular/router';\r\nimport { Subscription, switchMap, timer } from 'rxjs';\r\nimport { HedgingDataService } from '../../../hedging-proposal/hedging-data.service';\r\nimport { CommonModule } from '@angular/common';\r\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\r\nimport { advancePolicyStep1Obj } from '../advance-policy-data';\r\n\r\n@Component({\r\n  selector: 'app-advanced-policy-step1',\r\n  templateUrl: './advanced-policy-step1.component.html',\r\n  styleUrls: ['./advanced-policy-step1.component.scss'],\r\n  imports: [\r\n    CommonModule, \r\n    MatProgressBarModule, \r\n    ReactiveFormsModule\r\n  ],\r\n})\r\nexport class AdvancedPolicyStep1Component {\r\n  hedgingDataService = inject(HedgingDataService);\r\n  @Optional() private matStepper = inject(MatStepper, { optional: true });\r\n\r\n  form: FormGroup;\r\n  errorMessage: string | null = null;\r\n  fromCurrency: any;\r\n  toCurrency: any;\r\n  exposerData: any;\r\n  apiErrorMessage: any;\r\n  @Input() midSpotRate = 5.555;\r\n  midSpotSubscription: Subscription | null = null;\r\n  minBudgetRate!: number;\r\n  maxBudgetRate!: number;\r\n  firstCurrency: any;\r\n  baseCurrency: any;\r\n  currencyPair!: string;\r\n  generateBudgetRateFlag: boolean = false;\r\n  showLoader: boolean = false;\r\n  toCurrencyfromLocal!: string;\r\n  baseCurrencyfromLocal!: string;\r\n  cashflowExposureInfo = advancePolicyStep1Obj;\r\n\r\n  constructor(public router: Router) {\r\n    this.form = new FormGroup({\r\n      rate: new FormControl('', [\r\n        Validators.required,\r\n        Validators.pattern(/^\\d+(\\.\\d{1,4})?$/),\r\n        Validators.min(0),\r\n        Validators.max(99.9999),\r\n      ]),\r\n    });\r\n\r\n    this.exposerData = this.cashflowExposureInfo;\r\n    this.fromCurrency = this.cashflowExposureInfo?.baseCurrencyFlag || this.getFromLocalStorage('baseCurrencyFlag');\r\n    this.toCurrency = this.cashflowExposureInfo?.flag || this.getFromLocalStorage('flag');\r\n    this.firstCurrency = this.cashflowExposureInfo.toCurrency;\r\n    this.baseCurrency = this.cashflowExposureInfo.baseCurrency;\r\n    this.currencyPair = this.cashflowExposureInfo.pair;\r\n  }\r\n\r\n  getFromLocalStorage(key: string): string {\r\n    const exposureInfo = JSON.parse(localStorage.getItem('cashFlowExposureData') || '{}');\r\n    return exposureInfo[key] || '';\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.getSpotRate();\r\n  }\r\n\r\n  // getAlreadySetRate() {\r\n  //   this.hedgingDataService.getAdvancePolicyBudgetRate.subscribe({\r\n  //     next: (budgetRate) => {\r\n  //       const numericRate = Number(budgetRate);\r\n  //       if (!isNaN(numericRate)) {\r\n  //         this.rate?.setValue(\r\n  //           new Intl.NumberFormat('en-US', { minimumFractionDigits: 4, maximumFractionDigits: 4 }).format(numericRate)\r\n  //         );\r\n  //       }\r\n  //     },\r\n  //     error: (err) => {\r\n  //       console.error('Error fetching budget rate:', err);\r\n  //     },\r\n  //   });\r\n  // }\r\n\r\n\r\n  generateBudgetRate() {\r\n    this.showLoader = true;\r\n  \r\n    setTimeout(() => {\r\n      const min = 3.8885;\r\n      const max = 7.2215;\r\n      const randomRate = (Math.random() * (max - min) + min);\r\n      const formattedRate = randomRate.toFixed(4);\r\n  \r\n      this.errorMessage = \"\";\r\n      this.rate?.setValue(formattedRate);\r\n      this.generateBudgetRateFlag = true;\r\n      this.showLoader = false;\r\n    }, 500);\r\n  }\r\n  \r\n  \r\n\r\n  getMidSpot() {\r\n    const midSpot = 5.555;\r\n    return midSpot;\r\n  }\r\n  \r\n\r\n  getSpotRate() {\r\n    if (this.midSpotSubscription && !this.midSpotSubscription.closed) {\r\n      return;\r\n    }\r\n    this.minBudgetRate = this.midSpotRate * (1 - 0.30);\r\n    this.maxBudgetRate = this.midSpotRate * (1 + 0.30);\r\n  }\r\n\r\n  checkBudgetRateRange(event: any): void {\r\n    this.showLoader = true;\r\n    const enteredValue = parseFloat(event.target.value);\r\n    console.log('MIN', this.minBudgetRate);\r\n    console.log('ENTER', enteredValue);\r\n    console.log('MAX', this.maxBudgetRate);\r\n\r\n    if (enteredValue < this.minBudgetRate || enteredValue > this.maxBudgetRate) {\r\n      setTimeout(() => {\r\n        this.showLoader = false;\r\n        this.errorMessage = `Budget rate must be between ${this.minBudgetRate.toFixed(4)} and ${this.maxBudgetRate.toFixed(4)}.`;\r\n      }, 500);\r\n    } else {\r\n      this.errorMessage = null;\r\n      this.showLoader = false;\r\n    }\r\n  }\r\n\r\n  nextStep() {\r\n    if (this.form.invalid) {\r\n      if (this.rate?.value === '') {\r\n        this.errorMessage = 'Rate is required. Please enter a value';\r\n        return;\r\n      }\r\n      return;\r\n    }\r\n    const enteredRate = this.rate?.value ? parseFloat(this.rate?.value) : null;\r\n    if (enteredRate === null || enteredRate < this.minBudgetRate || enteredRate > this.maxBudgetRate) {\r\n      return;\r\n    }\r\n\r\n    // Notify the service that the user is ready to proceed\r\n    this.hedgingDataService.step2LastIndex.next(true);\r\n    this.errorMessage = null;\r\n    // Move to the next step in the stepper\r\n    this.hedgingDataService.setAdvancePolicyFlag(this.generateBudgetRateFlag);\r\n    this.matStepper?.next();\r\n  }\r\n\r\n  get rate() {\r\n    return this.form.get('rate');\r\n  }\r\n  preventInvalidInput(event: KeyboardEvent): void {\r\n    const inputChar = event.key;\r\n    const currentValue = (event.target as HTMLInputElement).value;\r\n\r\n    if (this.isControlKey(event) || (event.ctrlKey || event.metaKey)) {\r\n      return;\r\n    }\r\n\r\n    if (!/^\\d$/.test(inputChar) && inputChar !== '.' || (inputChar === '.' && currentValue.includes('.'))) {\r\n      event.preventDefault();\r\n    } else {\r\n      this.errorMessage = null;\r\n    }\r\n  }\r\n\r\n  validateInput(inputValue: any): void {\r\n    this.generateBudgetRateFlag = false;\r\n    let value = inputValue?.target?.value;\r\n\r\n    // Allow user to enter leading zeros but format the value by removing unnecessary leading zeros\r\n    if (/^0+/.test(value) && value !== '0' && !value.startsWith('0.')) {\r\n      // Trim leading zeros but retain the decimal and significant digits\r\n      value = parseFloat(value).toString();\r\n      inputValue.target.value = value;  // Update the input field with formatted value\r\n      this.rate?.setValue(value);       // Update the form control value\r\n    }\r\n\r\n    // Check if the value starts with a decimal point (e.g., \".5342\")\r\n    if (value.startsWith('.')) {\r\n      // Automatically add \"0\" before the decimal point\r\n      value = '0' + value;\r\n      inputValue.target.value = value;  // Update the input field\r\n      this.rate?.setValue(value);       // Update the form control value\r\n    }\r\n\r\n    // Check for NaN values\r\n    if (!value || isNaN(Number(value))) {\r\n      this.errorMessage = 'Invalid input. Please enter a valid number.';\r\n      return;\r\n    }\r\n\r\n    // Split the value into integer and decimal parts\r\n    const [integerPart, decimalPart] = value.split('.');\r\n\r\n    // Check if the decimal part exceeds 4 digits\r\n    if (decimalPart && decimalPart.length > 4) {\r\n      this.errorMessage = 'Too many decimal places. Maximum allowed is 4.';\r\n    }\r\n    else {\r\n      this.errorMessage = null; // No error if the input is valid\r\n    }\r\n  }\r\n\r\n  isControlKey(event: KeyboardEvent): boolean {\r\n    // Allow control keys like backspace, delete, tab, arrow keys, etc.\r\n    return ['Backspace', 'Delete', 'ArrowLeft', 'ArrowRight', 'Tab', 'Enter'].includes(event.key);\r\n  }\r\n\r\n  backTodashboard() {\r\n    this.router.navigate(['/dashboard'])\r\n  }\r\n\r\n  submitForm() {\r\n    this.hedgingDataService.setAdvancePolicyFormvalue(this.form.value);\r\n  }\r\n\r\n  clearValue() {\r\n    this.rate?.setValue('');\r\n    this.errorMessage = null;\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    if (this.midSpotSubscription) {\r\n      this.midSpotSubscription.unsubscribe();\r\n    }\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../../assets/scss/variable';\r\n\r\n::ng-deep {\r\n    .adv-policy-wrapper {\r\n        .progress-container {\r\n            display: flex;\r\n            align-items: center;\r\n            gap: 8px;\r\n            .stepper-progressbar {\r\n              max-width: 98px;\r\n              min-width: 98px;\r\n              width: 100%;\r\n              height: 12px;\r\n              border-radius: 20px;\r\n      \r\n              .mdc-linear-progress__buffer {\r\n                height: 100%;\r\n              }\r\n              \r\n              .mdc-linear-progress__bar {\r\n                height: 100%;\r\n              }\r\n      \r\n                .mdc-linear-progress__bar-inner {\r\n                  border-width: 12px;\r\n                  border-radius: 20px;\r\n                  border-color: #175CD3;\r\n            \r\n                  @media screen and (max-width: 1440px) {\r\n                    border-width: 9px;\r\n                  }\r\n            \r\n                  @media screen and (max-width: 1024px) {\r\n                    border-width: 12px;\r\n                  }\r\n                }\r\n            \r\n              @media screen and (max-width: 1440px) {\r\n                height: 9px;\r\n              }\r\n            \r\n              @media screen and (max-width: 1024px) {\r\n                height: 12px;\r\n              }\r\n            }\r\n      \r\n            .progress-count {\r\n              color: #000;\r\n              font-family: $he_heebo;\r\n              font-size: 12px;\r\n              font-weight: 700;\r\n              line-height: 20px;\r\n            }\r\n            @media screen and (max-width:480px) {\r\n              .stepper-progressbar{\r\n                min-width: 60px;\r\n                max-width: 60px;\r\n                height: 9px;\r\n              }\r\n            }\r\n        }\r\n        .heading {\r\n            color: #2947F2;\r\n            font-family: $he_heebo;\r\n            font-size: 30px;\r\n            font-weight: 700;\r\n            line-height: 38px;\r\n            margin: 40px 0 34px;\r\n        }\r\n\r\n        .step1-wrapper {\r\n            background-color: $white;\r\n            padding: 50px 51px 36px 63px;\r\n            border-radius: 10px;\r\n\r\n            .step-form-wrap {\r\n                text-align: center;\r\n\r\n                .progress-container {\r\n                    display: flex;\r\n                    align-items: center;\r\n                    gap: 8px;\r\n                    justify-content: center;\r\n\r\n                    .stepper-progressbar {\r\n                        max-width: 98px;\r\n                        min-width: 98px;\r\n                        width: 100%;\r\n                        height: 8px;\r\n                        border-radius: 20px;\r\n\r\n                        .mdc-linear-progress__bar-inner {\r\n                            border-width: 8px;\r\n                            border-radius: 20px;\r\n                            border-color: #175CD3;\r\n                            left: 0;\r\n                        }\r\n                    }\r\n\r\n                    .progress-count {\r\n                        color: #000;\r\n                        font-family: $he_heebo;\r\n                        font-size: 12px;\r\n                        font-weight: 700;\r\n                        line-height: 20px;\r\n                    }\r\n\r\n                    @media screen and (max-width:480px) {\r\n                        .stepper-progressbar {\r\n                            min-width: 60px;\r\n                            max-width: 60px;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                .anual-head {\r\n                    margin: 42px 0 49px 0;\r\n\r\n                    .sub-text {\r\n                        color: #2947F2;\r\n                        font-family: $he_heebo;\r\n                        font-size: 14px;\r\n                        font-weight: 700;\r\n                        line-height: 20px;\r\n                        margin: 0 0 2px;\r\n                    }\r\n\r\n                    .title {\r\n                        color: #344054;\r\n                        font-family: $he_heebo;\r\n                        font-size: 30px;\r\n                        font-weight: 700;\r\n                        line-height: 38px;\r\n                        margin: 0;\r\n                    }\r\n                    .desc{\r\n                        color:#98A2B3;\r\n                        text-align: center;\r\n                        font-family:$he_heebo;\r\n                        font-size: 14px;\r\n                        font-weight: 400;\r\n                        line-height: 18px;\r\n                        margin: 2px 0 0;\r\n                    }\r\n                }\r\n\r\n                .rate-wrap {\r\n                    margin: auto;\r\n                    max-width: 563px;\r\n\r\n                    .inner-wrap {\r\n                        display: flex;\r\n                        gap: 14px;\r\n\r\n                        .form-wrap {\r\n                            display: flex;\r\n                            position: relative;\r\n                            border: 1px solid #3B82F6;\r\n                            border-radius: 5px;\r\n                            background-color: $white;\r\n                            height: 60px;\r\n                            align-items: center;\r\n                            padding: 14px 15px 10px 17px;\r\n                            width: 100%;\r\n\r\n                            .rate-label {\r\n                                position: absolute;\r\n                                top: -7px;\r\n                                left: 9px;\r\n                                padding: 0 4px;\r\n                                background-color: $white;\r\n                                color: #3B82F6;\r\n                                font-family: 'Roboto';\r\n                                font-size: 12px;\r\n                                font-weight: 400;\r\n                                line-height: 16px;\r\n                            }\r\n\r\n                            .flag-wrap {\r\n                                padding: 0 15px 0 0;\r\n                                display: flex;\r\n                                align-items: center;\r\n\r\n                                img {\r\n                                    width: 29px;\r\n                                    height: auto;\r\n\r\n                                    &.from-currency {\r\n                                        margin: 0 0 0 -14px;\r\n                                    }\r\n\r\n                                    &.no-data {\r\n                                        filter: grayscale(1);\r\n                                        opacity: 0.6;\r\n                                    }\r\n                                }\r\n                            }\r\n\r\n                            .rate-input {\r\n                                border: none;\r\n                                padding: 0 12px;\r\n                                border-left: 1px solid #E4E7EC;\r\n                                font-family: $he_heebo;\r\n                                font-size: 14px;\r\n                                font-weight: 400;\r\n                                line-height: 35px;\r\n                                color: $black;\r\n                                width: 100%;\r\n\r\n                                &::placeholder {\r\n                                    color: #B4BBC6;\r\n                                }\r\n                            }\r\n\r\n                            .clear-btn {\r\n                                padding: 0 0 4px;\r\n                                line-height: 0;\r\n                            }\r\n\r\n                            &.errorInput {\r\n                                border-color: #D92D20;\r\n                                .rate-label{\r\n                                    color:#D92D20;\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                        .btn-generateRate {\r\n                            display: flex;\r\n                            height: 60px;\r\n                            padding: 10px;\r\n                            justify-content: center;\r\n                            align-items: center;\r\n                            gap: 10px;\r\n                            border-radius: 8px;\r\n                            border: 1px solid #D0D5DD;\r\n                            color: #003EFF;\r\n                            font-family: $he_heebo;\r\n                            font-size: 14px;\r\n                            font-weight: 400;\r\n                            line-height: 22px;\r\n                            width: 100%;\r\n                            max-width: 125px;\r\n                            transition: all 0.5s ease;\r\n                            &:hover{\r\n                                background-color: #2947F2;\r\n                                border-color: #2947F2;\r\n                                color:$white;\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    .generate-desc {\r\n                        text-align: right;\r\n                        color: #666;\r\n                        font-family: $he_heebo;\r\n                        font-size: 14px;\r\n                        font-weight: 400;\r\n                        line-height: 22px;\r\n                        margin: 9px 0 0;\r\n\r\n                        span {\r\n                            color: #003EFF;\r\n                        }\r\n                    }\r\n\r\n                    .error-msg-wrap {\r\n                        margin:7px 0 0;\r\n                        color: #D92D20;\r\n                        text-align: left;\r\n                        font-family: $he_heebo;\r\n                        font-size: 14px;\r\n                        font-weight: 400;\r\n                        line-height: 20px;\r\n                    }\r\n                }\r\n\r\n                .rate-info {\r\n                    max-width: 518px;\r\n                    margin:44px auto 196px;\r\n\r\n                    p {\r\n                        margin: 0;\r\n                        color: #98A2B3;\r\n                        text-align: center;\r\n                        font-family: $he_heebo;\r\n                        font-size: 14px;\r\n                        font-weight: 400;\r\n                        line-height: 18px;\r\n                    }\r\n                }\r\n            }\r\n\r\n            .btn-wrap {\r\n                display: flex;\r\n                justify-content: space-between;\r\n                align-items: center;\r\n\r\n                .btn-policy {\r\n                    display: flex;\r\n                    height: 46px;\r\n                    padding: 10px 20px;\r\n                    justify-content: center;\r\n                    align-items: center;\r\n                    color: #7889B0;\r\n                    font-family: $he_heebo;\r\n                    font-size: 14px;\r\n                    font-weight: 700;\r\n                    line-height: 45.2px;\r\n                    border-radius: 40px;\r\n                    border: 1px solid #E4E4E5;\r\n                    box-shadow: 0px 9px 40px 0px rgba(0, 62, 255, 0.1);\r\n                    transition: all 0.5s ease;\r\n                    &:hover{\r\n                        background-color: #2947F2;\r\n                        border-color: #2947F2;\r\n                        color:$white;\r\n                    }\r\n                }\r\n\r\n                .right-btn {\r\n                    display: flex;\r\n                    gap: 44px;\r\n\r\n                    .btn-back {\r\n                        color: #374151;\r\n                        font-family: $he_heebo;\r\n                        font-size: 14px;\r\n                        font-weight: 400;\r\n                        line-height: 45.2px;\r\n                        padding: 0;\r\n                    }\r\n\r\n                    .btn-next {\r\n                        display: flex;\r\n                        width: 123px;\r\n                        height: 46px;\r\n                        padding: 10px;\r\n                        justify-content: center;\r\n                        align-items: center;\r\n                        gap: 10px;\r\n                        border-radius: 40px;\r\n                        background: #2947F2;\r\n                        box-shadow: 0px 9px 24px 0px rgba(0, 62, 255, 0.40);\r\n                        color: $white;\r\n                        font-family: $he_heebo;\r\n                        font-size: 14px;\r\n                        font-weight: 700;\r\n                        line-height: 45.2px;\r\n                        &:hover{\r\n                            opacity: 0.9;\r\n                        }\r\n                        &.disabled {\r\n                            color: #9ca3af;\r\n                            background: #f3f4f6;\r\n                            box-shadow: none;\r\n\r\n                            img {\r\n                                filter: contrast(0.5);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        @media screen and (max-width:1440px) {\r\n            .heading {\r\n                font-size: 20px;\r\n                margin: 0 0 25px;\r\n                line-height: 30px;\r\n            }\r\n\r\n            .step1-wrapper {\r\n                padding: 30px;\r\n\r\n                .step-form-wrap {\r\n                    .anual-head {\r\n                        margin:30px 0;\r\n\r\n                        .title {\r\n                            font-size: 24px;\r\n                            line-height: 30px;\r\n                        }\r\n                    }\r\n\r\n                    .rate-wrap {\r\n                        .inner-wrap {\r\n                            .form-wrap {\r\n                                .flag-wrap {\r\n                                    padding: 0 10px 0 0;\r\n\r\n                                    img {\r\n                                        width: 25px;\r\n\r\n                                        &.from-currency {\r\n                                            margin: 0 0 0 -10px;\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    .rate-info {\r\n                        margin:30px auto;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        @media screen and (max-width:1024px) {\r\n            .heading {\r\n                font-size: 18px;\r\n                margin: 0 0 20px;\r\n                line-height: 1.2;\r\n            }\r\n\r\n            .step1-wrapper {\r\n                .step-form-wrap {\r\n                    .anual-head {\r\n                        .title {\r\n                            font-size: 22px;\r\n                            line-height: 1.2;\r\n                        }\r\n                    }\r\n\r\n                    .rate-wrap {\r\n                        .inner-wrap {\r\n                            .form-wrap {\r\n                                height: 50px;\r\n                            }\r\n\r\n                            .btn-generateRate {\r\n                                height: 50px;\r\n                                max-width: 110px;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n\r\n                .btn-wrap {\r\n                    .btn-policy {\r\n                        height: 36px;\r\n                        line-height: 30px;\r\n                        padding: 5px 15px;\r\n                    }\r\n\r\n                    .right-btn {\r\n                        gap: 20px;\r\n\r\n                        .btn-back {\r\n                            line-height: 30px;\r\n                        }\r\n\r\n                        .btn-next {\r\n                            width: 90px;\r\n                            height: 36px;\r\n                            line-height: 30px;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        @media screen and (max-width:767px) {\r\n            .step1-wrapper {\r\n                .step-form-wrap {\r\n                    .anual-head {\r\n                        margin: 20px 0;\r\n\r\n                        .title {\r\n                            font-size: 20px;\r\n                            line-height: 1.2;\r\n                        }\r\n                    }\r\n\r\n                    .rate-wrap {\r\n\r\n                        .generate-desc {\r\n                            font-size: 12px;\r\n                        }\r\n\r\n                        .error-msg-wrap {\r\n                            font-size: 12px;\r\n                        }\r\n                    }\r\n\r\n                    .rate-info {\r\n                        p {\r\n                            font-size: 12px;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        @media screen and (max-width:680px) {\r\n            .step1-wrapper {\r\n                .step-form-wrap {\r\n                    .anual-head {\r\n                        .sub-text,.desc {\r\n                            font-size: 12px;\r\n                        }\r\n\r\n                        .title {\r\n                            font-size: 18px;\r\n                            line-height: 1.2;\r\n                        }\r\n                    }\r\n\r\n                    .rate-wrap {\r\n                        .inner-wrap {\r\n                            .form-wrap {\r\n                                height: 50px;\r\n                                padding: 10px;\r\n\r\n                                .flag-wrap {\r\n                                    img {\r\n                                        width: 20px;\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                        .error-msg-wrap {\r\n                            margin:5px 0 0;\r\n                            font-size: 11px;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                .btn-wrap {\r\n                    .btn-policy {\r\n                        font-size: 12px;\r\n                    }\r\n\r\n                    .right-btn {\r\n                        gap: 10px;\r\n\r\n                        .btn-back {\r\n                            font-size: 12px;\r\n                        }\r\n\r\n                        .btn-next {\r\n                            font-size: 12px;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        @media screen and (max-width:420px) {\r\n            .step1-wrapper {\r\n                padding: 20px;\r\n\r\n                .step-form-wrap {\r\n                    .anual-head {\r\n                        .title {\r\n                            font-size: 15px;\r\n                        }\r\n                    }\r\n                    .rate-wrap {\r\n                        .inner-wrap {\r\n                            flex-direction: column;\r\n                            align-items: flex-end;\r\n                            gap: 10px;\r\n                            .btn-generateRate{\r\n                                font-size: 12px;\r\n                                max-width: max-content;\r\n                                height: 40px;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n}",
                    "styleUrl": "./advanced-policy-step1.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 42,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "accessors": {
                "rate": {
                    "name": "rate",
                    "getSignature": {
                        "name": "rate",
                        "type": "",
                        "returnType": "",
                        "line": 159
                    }
                }
            },
            "templateData": "<div class=\"adv-policy-wrapper loader-wrapper\">\r\n    <h3 class=\"heading\">Advanced Policy</h3>\r\n    <form [formGroup]=\"form\" (ngSubmit)=\"nextStep()\">\r\n      <div class=\"step1-wrapper\">\r\n        <div class=\"step-form-wrap\">\r\n          <div class=\"progress-container\">\r\n            <mat-progress-bar #formStepperProgress class=\"stepper-progressbar\" mode=\"determinate\" value=\"12\"></mat-progress-bar>\r\n            <span class=\"progress-count\">1/6</span>\r\n          </div>\r\n          <div class=\"anual-head\">\r\n            <p class=\"sub-text\">Annual budget rate</p>\r\n            <h2 class=\"title\">Do you have an annual budget exchange rate?</h2>\r\n            <p class=\"desc\">Set an annual budget rate, if you don’t have any please generate one</p>\r\n          </div>\r\n          <div class=\"rate-wrap\">\r\n            <div class=\"inner-wrap\">\r\n              <div class=\"form-wrap\" [class.errorInput]=\"errorMessage\" id=\"budget-rate-input-wrap\">\r\n                <span class=\"rate-label\">Set Rate</span>\r\n                <div class=\"flag-wrap\" id=\"budget-rate-input\">\r\n                  <img [src]=\"fromCurrency\" class=\"base-currency\" [class.no-data]=\"!fromCurrency\" />\r\n                  <img [src]=\"toCurrency\" class=\"from-currency\" [class.no-data]=\"!toCurrency\" />\r\n                </div>\r\n                <input\r\n                  placeholder=\"Example - 3.75\"\r\n                  class=\"rate-input\"\r\n                  formControlName=\"rate\"\r\n                  (focus)=\"rate?.markAsTouched()\"\r\n                  (input)=\"validateInput($event)\"\r\n                  (keydown)=\"preventInvalidInput($event)\"\r\n                  (blur)=\"checkBudgetRateRange($event)\"\r\n                />\r\n                <button type=\"button\" class=\"clear-btn\" (click)=\"clearValue()\"><img src=\"images/clear-rate.svg\" /></button>\r\n              </div>\r\n              <button type=\"button\" class=\"btn-generateRate\" id=\"generate-me-btn\" (click)=\"generateBudgetRate()\">Generate Me</button>\r\n            </div>\r\n            <p class=\"error-msg-wrap\" *ngIf=\"errorMessage\">\r\n              <span *ngIf=\"errorMessage\">{{ errorMessage }}</span>\r\n            </p>\r\n          </div>\r\n          <div class=\"rate-info\">\r\n            <p>For instance, if your company's future financial planning is based on a rate of {{midSpotRate ? midSpotRate.toFixed(2) : 1.1}} {{exposerData?.pair || getFromLocalStorage('pair')}}, please specify this rate.</p>\r\n          </div>\r\n        </div>\r\n        <div class=\"btn-wrap\">\r\n          <button type=\"button\" class=\"btn-policy\" id=\"budget-rate-dashboard-btn\" (click)=\"backTodashboard()\">Dashboard</button>\r\n          <div class=\"right-btn\">\r\n            <button type=\"submit\" class=\"btn-next\" id=\"budget-rate-next-btn\" (click)=\"submitForm()\">\r\n              <span>Next</span><img src=\"images/arrow-right-next.svg\" alt=\"next\" />\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </form>\r\n  </div>\r\n  "
        },
        {
            "name": "AdvancedPolicyStep2Component",
            "id": "component-AdvancedPolicyStep2Component-7da3d94021f709323a3af8f42e8e12a849342e0f3a76b6582ea0ae4e8d763a27dc0f1bbd79f2340d48aa668dc0de2ddf8d21d220e86210720473b17e4121c872",
            "file": "src/app/risk-dashboard/components/advanced-policy/components/advanced-policy-step2/advanced-policy-step2.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-advanced-policy-step2",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./advanced-policy-step2.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "advancePolicyData",
                    "defaultValue": "AdvancePolicyData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "AdvancePolicyModel[]",
                    "decorators": []
                },
                {
                    "name": "selectedMainStepprIndex",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "number",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "moveNextPage",
                    "defaultValue": "new EventEmitter<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "EventEmitter"
                },
                {
                    "name": "movePreviousPage",
                    "defaultValue": "new EventEmitter<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "budgetRateobj",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "cdr",
                    "defaultValue": "inject(ChangeDetectorRef)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "errorData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "errorMessage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "fb",
                    "defaultValue": "inject(FormBuilder)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "formGroups",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "getAdvancePolicyBudgetRate$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "isAlreadyCompletedPolicy",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "isSubmitForm",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "riskManagerService",
                    "defaultValue": "inject(HedgingDataService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "router",
                    "defaultValue": "inject(Router)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "selectedIndex",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "setp2Stepper",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatStepper",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'setp2Stepper'"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "step1FormValue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "step2LastIndex",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "step2LastIndex$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 38
                }
            ],
            "methodsClass": [
                {
                    "name": "backTodashboard",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 198,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getAlreadyCompletedPolicy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 124,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 119,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 193,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "previous",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 180,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "submitFormValue",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 148,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "MatStepperModule",
                    "type": "module"
                },
                {
                    "name": "MatProgressBarModule",
                    "type": "module"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                },
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "MatRadioModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { AfterViewInit, ChangeDetectorRef, Component, EventEmitter, inject, Input, NgZone, OnDestroy, Output, SimpleChanges, ViewChild } from '@angular/core';\r\nimport { MatStepper, MatStepperModule } from '@angular/material/stepper';\r\nimport { Router } from '@angular/router';\r\nimport { AdvancePolicyModel } from '../../../model/advance-policy-model';\r\nimport { AdvancePolicyData } from '../advance-policy-data';\r\nimport { FormBuilder, FormGroup, ReactiveFormsModule, Validators } from '@angular/forms';\r\nimport { Subscription } from 'rxjs';\r\nimport { HedgingDataService } from '../../../hedging-proposal/hedging-data.service';\r\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\r\nimport { CommonModule } from '@angular/common';\r\nimport { MatRadioModule } from '@angular/material/radio';\r\n\r\n@Component({\r\n  selector: 'app-advanced-policy-step2',\r\n  imports: [MatStepperModule,MatProgressBarModule,ReactiveFormsModule,CommonModule,MatRadioModule],\r\n  templateUrl: './advanced-policy-step2.component.html',\r\n  styleUrl: './advanced-policy-step2.component.scss'\r\n})\r\nexport class AdvancedPolicyStep2Component implements AfterViewInit,OnDestroy {\r\n  @ViewChild('setp2Stepper') setp2Stepper!: MatStepper;\r\n  @Input(\"selectedMainStepprIndex\") selectedMainStepprIndex: number = 0;\r\n  @Output() moveNextPage = new EventEmitter<void>();\r\n  @Output() movePreviousPage = new EventEmitter<void>();\r\n  router = inject(Router);\r\n  @Input() advancePolicyData: AdvancePolicyModel[] = AdvancePolicyData;\r\n  formGroups: FormGroup[] = [];\r\n  fb = inject(FormBuilder);\r\n  riskManagerService = inject(HedgingDataService);\r\n  cdr = inject(ChangeDetectorRef);\r\n\r\n  step2LastIndex = false;\r\n  errorData: any;\r\n  errorMessage: any;\r\n  isSubmitForm = false;\r\n  step1FormValue: any;\r\n  budgetRateobj!: { index: number; answer: any; };\r\n  getAdvancePolicyBudgetRate$!: Subscription;\r\n  step2LastIndex$!: Subscription;\r\n  isAlreadyCompletedPolicy: boolean= false;\r\n  selectedIndex!: number;\r\n\r\n  constructor(private zone: NgZone) {\r\n\r\n  }\r\n\r\n  ngAfterViewInit(): void {\r\n    this.riskManagerService.getAdvancePolicyStepperIndex.subscribe(res => {\r\n\r\n      if (this.step2LastIndex) {\r\n        this.step2LastIndex = false;\r\n      }\r\n      if (this.setp2Stepper) { // Check if setp2Stepper is defined\r\n        if (res == 0) {\r\n          this.setp2Stepper.selectedIndex = res; // from step3 edit first step tan index start from 0 in step2\r\n        } else if (res > 0) {\r\n          const stepperIndex = res - 1;\r\n          // this.zone.run(() => {\r\n            this.setp2Stepper.selectedIndex = stepperIndex;\r\n            this.cdr.detectChanges();\r\n          // });\r\n          const formValuesWithIndexAndAnswer = this.formGroups.map((formGroup, index) => ({\r\n            index: index + 1,\r\n            answer: formGroup.value.answer\r\n          }));\r\n          if (this.setp2Stepper.selectedIndex === formValuesWithIndexAndAnswer.length - 1) {\r\n            this.step2LastIndex = true;\r\n          }\r\n          this.cdr.detectChanges();\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.getAdvancePolicyBudgetRate$ = this.riskManagerService.getAdvancePolicyBudgetRate.subscribe({\r\n      next: (res) => {\r\n        this.step1FormValue = res;\r\n      },\r\n      error: (err) => {\r\n        console.error('Error fetching Advance Policy Budget Rate:', err);\r\n      }\r\n    });\r\n\r\n    this.step2LastIndex$ = this.riskManagerService.step2LastIndex.subscribe(res => {\r\n      if (res) {\r\n        this.step2LastIndex = false;\r\n      }\r\n    }\r\n    )\r\n    this.advancePolicyData.forEach((item, index) => {\r\n      const formGroup = this.fb.group({\r\n        answer: ['', Validators.required]\r\n      });\r\n      // Subscribe to value changes to clear error messages\r\n      formGroup.get('answer')!.valueChanges.subscribe(value => {\r\n        if (value) {\r\n          this.errorMessage = '';\r\n          this.isSubmitForm = false;\r\n          if (this.setp2Stepper) {\r\n\r\n            this.setp2Stepper.selectedIndex = this.setp2Stepper.selectedIndex;\r\n          }\r\n        }\r\n      });\r\n\r\n      this.formGroups.push(formGroup);\r\n    });\r\n    this.riskManagerService.advancePolicyCompleted$.subscribe({\r\n      next: (result) => {\r\n        if (result) {\r\n          this.getAlreadyCompletedPolicy();\r\n        }\r\n      },\r\n      error: (error) => {\r\n\r\n      }\r\n    })\r\n  }\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    if (changes['selectedMainStepprIndex'] && this.setp2Stepper) {\r\n      this.setp2Stepper.selectedIndex = this.selectedMainStepprIndex;\r\n    }\r\n  }\r\n  getAlreadyCompletedPolicy() {\r\n    this.riskManagerService.getAdvancePolicyStep2Data.subscribe(data => {\r\n        if (data) {\r\n            this.isAlreadyCompletedPolicy = true;\r\n\r\n            // Replace index 9 with index 5\r\n            data.forEach((item: any) => {\r\n                if (item.index === 9) {\r\n                    item.index = 5; // Replace index 9 with index 5\r\n                }\r\n            });\r\n\r\n            // Patch the formGroups with the updated data\r\n            data.forEach((item: any) => {\r\n                const formGroup = this.formGroups[item.index - 1]; // Adjust for zero-based index\r\n                if (formGroup) {\r\n                    formGroup.patchValue({ answer: item.answer });\r\n                }\r\n            });\r\n        }\r\n    });\r\n  }\r\n\r\n\r\n  submitFormValue() {\r\n    this.budgetRateobj = {\r\n      index: 0,\r\n      answer: Object.values(this.step1FormValue)[0] || this.step1FormValue\r\n    };\r\n    this.isSubmitForm = true;\r\n    const formValuesWithIndexAndAnswer = this.formGroups.map((formGroup, index) => ({\r\n      index: index + 1,\r\n      answer: formGroup.value.answer\r\n    }));\r\n    if (this.step2LastIndex) {\r\n      if (!formValuesWithIndexAndAnswer[formValuesWithIndexAndAnswer.length - 1].answer) {\r\n        this.setp2Stepper.selectedIndex = this.setp2Stepper.selectedIndex;  // index:4\r\n        this.errorMessage = '';\r\n        return;\r\n      }\r\n      this.moveNextPage.emit(); // move to step3 page\r\n    }\r\n\r\n    this.errorData = formValuesWithIndexAndAnswer.filter(data => data.index === this.setp2Stepper.selectedIndex)[0];\r\n    this.errorMessage = this.errorData.answer;\r\n    if (!this.errorData.answer) {\r\n      this.setp2Stepper.selectedIndex = this.setp2Stepper.selectedIndex - 1;\r\n      return;\r\n    }\r\n    if (this.setp2Stepper.selectedIndex === formValuesWithIndexAndAnswer.length - 1) {\r\n      this.step2LastIndex = true;\r\n    }\r\n    formValuesWithIndexAndAnswer.push(this.budgetRateobj)\r\n    this.riskManagerService.setAdvancePolicyStep2Formvalue(formValuesWithIndexAndAnswer);\r\n  }\r\n\r\n  previous() {\r\n    this.isSubmitForm = false;\r\n    this.errorMessage = '';\r\n    if (this.step2LastIndex) {\r\n      this.step2LastIndex = false;\r\n    }\r\n    if (this.setp2Stepper.selectedIndex === 0) {\r\n      this.movePreviousPage.emit(); // move to step1 page\r\n    } else {\r\n      this.setp2Stepper.previous();\r\n    }\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.getAdvancePolicyBudgetRate$.unsubscribe();\r\n    this.step2LastIndex$.unsubscribe();\r\n  }\r\n  \r\n  backTodashboard() {\r\n    this.router.navigate([localStorage.getItem('subSite') ? localStorage.getItem('subSite') + 'risk-manager/risk-manager-dashboard' : '/risk-manager/risk-manager-dashboard']);\r\n  }\r\n\r\n}\r\n",
            "styleUrl": "./advanced-policy-step2.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "zone",
                        "type": "NgZone",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 40,
                "jsdoctags": [
                    {
                        "name": "zone",
                        "type": "NgZone",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "AfterViewInit",
                "OnDestroy"
            ],
            "templateData": "<div class=\"adv-policy-questions-wrapper\">\r\n    <h3 class=\"heading\">Advanced policy</h3>\r\n    <div class=\"questions-step-wrapper\">\r\n      <div class=\"step-form-wrap\">\r\n        <mat-horizontal-stepper #setp2Stepper [selectedIndex]=\"selectedMainStepprIndex\" class=\"main-policy-stepper\">\r\n          <mat-step *ngFor=\"let item of advancePolicyData; let i = index\" [formGroup]=\"formGroups[i]\">\r\n            <div class=\"progress-steps-wrapper {{item?.className}}\">\r\n              <div class=\"progress-container\">\r\n                <mat-progress-bar #formStepperProgress class=\"stepper-progressbar\" mode=\"determinate\" value=\"{{ ((i + 1) / advancePolicyData.length) * 100 }}\"></mat-progress-bar>\r\n                <span class=\"progress-count\">{{ i + 2 }}/{{ advancePolicyData.length + 1 }}</span>\r\n              </div>\r\n              <ng-template matStepLabel>{{ item.firstheading }}</ng-template>\r\n              <div class=\"annual-head\">\r\n                <p class=\"sub-text\">{{ item.firstheading }}</p>\r\n                <h2 class=\"title\">{{ item.questions }}</h2>\r\n              </div>\r\n              <ul class=\"list-items policy-choose-option\">\r\n                <label class=\"choose-answer\">{{ item.selectAnswer }}</label>\r\n                <li>\r\n                  <mat-radio-group formControlName=\"answer\" class=\"inline-radio-group\">\r\n                    <div class=\"radio-line\" [ngClass]=\"{'first-two-steps': i < 2}\">\r\n                      <ng-container *ngFor=\"let answer of item.Ans\">\r\n                        <div class=\"radio-container\" *ngIf=\"i > 1\">\r\n                          <mat-radio-button [value]=\"answer.a1\" id=\"ans-1\"></mat-radio-button>\r\n                          <label>{{ answer.a1 }}</label>\r\n                        </div>\r\n                        <div class=\"radio-container\">\r\n                          <mat-radio-button [value]=\"answer.a2\" id=\"ans-2\"></mat-radio-button>\r\n                          <label>{{ answer.a2 }}</label>\r\n                        </div>\r\n                        <div class=\"radio-container\">\r\n                          <mat-radio-button [value]=\"answer.a3\" id=\"ans-3\"></mat-radio-button>\r\n                          <label>{{ answer.a3 }}</label>\r\n                        </div>\r\n                        <div class=\"radio-container\">\r\n                          <mat-radio-button [value]=\"answer.a4\" id=\"ans-4\"></mat-radio-button>\r\n                          <label>{{ answer.a4 }}</label>\r\n                        </div>\r\n                        <div class=\"radio-container\">\r\n                          <mat-radio-button [value]=\"answer.a5\" id=\"ans-5\"></mat-radio-button>\r\n                          <label>{{ answer.a5 }}</label>\r\n                        </div>\r\n                      </ng-container>\r\n                    </div>\r\n                  </mat-radio-group>\r\n                </li>\r\n              </ul>\r\n              <p *ngIf=\"this.isSubmitForm && !this.errorMessage\" class=\"error-msg\">Please select an one of the options</p>\r\n              <div class=\"rate-info\">\r\n                <p *ngIf=\"i !== 0\">{{ item.bottomDesc }}</p>\r\n                <p *ngIf=\"i == 0\"> <b>For example,</b> if you have signed contracts guaranteeing revenue or expenditure for the next few months, this indicates high certainty. </p>\r\n              </div>\r\n              <div class=\"btn-wrap\">\r\n                <button class=\"btn-policy\" (click)=\"backTodashboard()\" id=\"questions-dashboard-btn\">Dashboard</button>\r\n                <div class=\"right-btn\">\r\n                  <button class=\"btn-back\" (click)=\"previous()\" id=\"questions-back-btn\">Back</button>\r\n                  <button class=\"btn-next\" matStepperNext (click)=\"submitFormValue()\" id=\"questions-next-btn\"><span>Next</span><img src=\"images/arrow-right-next.svg\" alt=\"next\" /></button>\r\n                </div>\r\n              </div>\r\n            </div>\r\n  \r\n          </mat-step>\r\n        </mat-horizontal-stepper>\r\n      </div>\r\n    </div>\r\n  </div>\r\n  "
        },
        {
            "name": "AdvancedPolicyStep3Component",
            "id": "component-AdvancedPolicyStep3Component-a8092526f02e04a635ac9c44162bcfffca324697f197aa0f16c340bbd274cd529a71380309c76e36a231fbb79ed55bdc1f71c101b9dab25abb170d2de7772c33",
            "file": "src/app/risk-dashboard/components/advanced-policy/components/advanced-policy-step3/advanced-policy-step3.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-advanced-policy-step3",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./advanced-policy-step3.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "step2Res",
                    "defaultValue": "[\r\n    {\r\n        \"index\": 0,\r\n        \"answer\": \"5.0955\"\r\n    },\r\n    {\r\n        \"index\": 1,\r\n        \"answer\": \"High\"\r\n    },\r\n    {\r\n        \"index\": 2,\r\n        \"answer\": \"Medium\"\r\n    },\r\n    {\r\n        \"index\": 3,\r\n        \"answer\": \"Low\"\r\n    },\r\n    {\r\n        \"index\": 4,\r\n        \"answer\": \"Very High\"\r\n    },\r\n    {\r\n        \"index\": 5,\r\n        \"answer\": \"High\"\r\n    }\r\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "{}",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "fromStep3",
                    "defaultValue": "new EventEmitter<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 44,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "advancePolicyFlag",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "advancePolicyFromAPI",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 47
                },
                {
                    "name": "errorMessage",
                    "defaultValue": "\"\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 45
                },
                {
                    "name": "riskManagerService",
                    "defaultValue": "inject(HedgingDataService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "router",
                    "defaultValue": "inject(Router)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "showfinalStep",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "showLoader",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 46
                }
            ],
            "methodsClass": [
                {
                    "name": "backToDashboard",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 111,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "mapAnswerToInteger",
                    "args": [
                        {
                            "name": "answer",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "questionIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 178,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "answer",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "questionIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "mapIntegerToAnswer",
                    "args": [
                        {
                            "name": "score",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "questionIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 119,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "score",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "questionIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "mapQuestionsToInteger",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 237,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "navigateToSteppers",
                    "args": [
                        {
                            "name": "stepperindex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 115,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "stepperindex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onConfirm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 249,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "previous",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 107,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, inject, Input, OnInit, Output } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { HedgingDataService } from '../../../hedging-proposal/hedging-data.service';\r\nimport { AdvancePolicyQuestions } from '../../../enums/advancePolicyQuestions';\r\nimport { CommonModule } from '@angular/common';\r\n\r\n@Component({\r\n  selector: 'app-advanced-policy-step3',\r\n  imports: [CommonModule],\r\n  templateUrl: './advanced-policy-step3.component.html',\r\n  styleUrl: './advanced-policy-step3.component.scss'\r\n})\r\nexport class AdvancedPolicyStep3Component implements OnInit {\r\n  showfinalStep: boolean = false;\r\n  router = inject(Router);\r\n  @Input() step2Res = [\r\n    {\r\n        \"index\": 0,\r\n        \"answer\": \"5.0955\"\r\n    },\r\n    {\r\n        \"index\": 1,\r\n        \"answer\": \"High\"\r\n    },\r\n    {\r\n        \"index\": 2,\r\n        \"answer\": \"Medium\"\r\n    },\r\n    {\r\n        \"index\": 3,\r\n        \"answer\": \"Low\"\r\n    },\r\n    {\r\n        \"index\": 4,\r\n        \"answer\": \"Very High\"\r\n    },\r\n    {\r\n        \"index\": 5,\r\n        \"answer\": \"High\"\r\n    }\r\n  ];\r\n  advancePolicyFlag: boolean = false;\r\n  riskManagerService = inject(HedgingDataService);\r\n  @Output() fromStep3 = new EventEmitter<void>();\r\n  errorMessage = \"\";\r\n  showLoader: boolean = false;\r\n  advancePolicyFromAPI: any;\r\n\r\n  ngOnInit(): void {\r\n    // this.getAlreadyCompletedPolicy();\r\n    this.riskManagerService.getAdvancePolicyStep2Data.subscribe(res => {\r\n      if (res && res.length > 0) {\r\n        this.step2Res = res.sort((a: any, b: any) => a.index - b.index);\r\n      } \r\n      console.log('response from step2', this.step2Res);\r\n\r\n    })\r\n    // this.advancePolicyFlag = this.riskManagerService.advancePolicyFlag;\r\n    this.riskManagerService.advancePolicyFlag$.subscribe(flag => {\r\n      this.advancePolicyFlag = flag;\r\n    });\r\n  }\r\n\r\n\r\n  // getAlreadyCompletedPolicy() {\r\n  //   this.riskManagerService?.advancePolicyCompleted$.subscribe({\r\n  //     next: (response) => {\r\n  //       if (response) {\r\n  //         this.riskManagerService?.getAdvancePolicyData().subscribe({\r\n  //           next: (result) => {\r\n  //             this.advancePolicyFromAPI = result;\r\n  //             const budgetRateFromAPI = this.advancePolicyFromAPI?.budgetRate;\r\n  //             this.riskManagerService.setAdvancePolicyFormvalue(budgetRateFromAPI);\r\n  //             if (this.advancePolicyFromAPI && this.advancePolicyFromAPI?.questionAndScores) {\r\n  //               this.step2Res = [];\r\n  //               this.step2Res.push({\r\n  //                 index: 0,\r\n  //                 answer: this.advancePolicyFromAPI.budgetRate\r\n  //               });\r\n\r\n  //               this.step2Res.forEach((item: any) => {\r\n  //                 const index = item.advancePolicyQuestions;\r\n  //                 if (index >= 0) {\r\n  //                   this.step2Res.push({\r\n  //                     index: index,\r\n  //                     answer: this.mapIntegerToAnswer(item.score, index)\r\n  //                   });\r\n  //                 }\r\n  //               });\r\n  //               this.step2Res = this.step2Res.sort((a: any, b: any) => a.index - b.index);\r\n  //               this.riskManagerService.setAdvancePolicyStep2Formvalue(this.step2Res);\r\n  //         //     }\r\n  //           },\r\n  //           error: (error) => {\r\n\r\n  //           }\r\n  //         })\r\n  //       }\r\n  //     },\r\n  //     error: () => {\r\n  //       console.error('Error fetching policy completion flag');\r\n  //     }\r\n  //   });\r\n  // }\r\n\r\n\r\n  previous() {\r\n    this.fromStep3.emit();\r\n  }\r\n\r\n  backToDashboard() {\r\n    this.router.navigate([localStorage.getItem('subSite') ? localStorage.getItem('subSite') + 'risk-manager/risk-manager-dashboard' : '/risk-manager/risk-manager-dashboard']);\r\n  }\r\n\r\n  navigateToSteppers(stepperindex: number) {\r\n    this.riskManagerService.navigateToAdvancePolicyStepper(stepperindex);\r\n  }\r\n\r\n  private mapIntegerToAnswer(score: number, questionIndex: number): string {\r\n    switch (questionIndex) {\r\n      case 1:\r\n        switch (score) {\r\n          case 4: return \"Very High\";\r\n          case 3: return \"High\";\r\n          case 2: return \"Medium\";\r\n          case 1: return \"Low\";\r\n          default: return \"Unknown\";\r\n        }\r\n      case 2:\r\n        switch (score) {\r\n          case 4: return \"No Impact\";\r\n          case 3: return \"Low\";\r\n          case 2: return \"Medium\";\r\n          case 1: return \"High\";\r\n          default: return \"Unknown\";\r\n        }\r\n      case 3:\r\n        switch (score) {\r\n          case 4: return \"Very Low\";\r\n          case 3: return \"Low\";\r\n          case 2: return \"Medium\";\r\n          case 1: return \"High\";\r\n          case 0: return \"Don't Know\";\r\n          default: return \"Unknown\";\r\n        }\r\n      case 4:\r\n        switch (score) {\r\n          case 4: return \"Very High\";\r\n          case 3: return \"High\";\r\n          case 2: return \"Medium\";\r\n          case 1: return \"Low\";\r\n          case 0: return \"Don't Know\";\r\n          default: return \"Unknown\";\r\n        }\r\n      case 5:\r\n        switch (score) {\r\n          case 4: return \"Low\";\r\n          case 3: return \"Medium\";\r\n          case 2: return \"High\";\r\n          case 1: return \"Very High\";\r\n          case 0: return \"Don't Know\";\r\n          default: return \"Unknown\";\r\n        }\r\n      case 9:\r\n        switch (score) {\r\n          case 4: return \"Low\";\r\n          case 3: return \"Medium\";\r\n          case 2: return \"High\";\r\n          case 1: return \"Very High\";\r\n          case 0: return \"Don't Know\";\r\n          default: return \"Unknown\";\r\n        }\r\n      default:\r\n        return \"Unknown\";\r\n    }\r\n  }\r\n\r\n  private mapAnswerToInteger(answer: string, questionIndex: number): number {\r\n    switch (questionIndex) {\r\n      case 1:\r\n        switch (answer) {\r\n          case \"Very High\": return 4;\r\n          case \"High\": return 3;\r\n          case \"Medium\": return 2;\r\n          case \"Low\": return 1;\r\n          default: return -1;\r\n        }\r\n      case 2:\r\n        switch (answer) {\r\n          case \"No Impact\": return 4;\r\n          case \"Low\": return 3;\r\n          case \"Medium\": return 2;\r\n          case \"High\": return 1;\r\n          default: return -1;\r\n        }\r\n      case 3:\r\n        switch (answer) {\r\n          case \"Very Low\": return 4;\r\n          case \"Low\": return 3;\r\n          case \"Medium\": return 2;\r\n          case \"High\": return 1;\r\n          case \"Don't Know\": return 0;\r\n          default: return -1;\r\n        }\r\n      case 4:\r\n        switch (answer) {\r\n          case \"Very High\": return 4;\r\n          case \"High\": return 3;\r\n          case \"Medium\": return 2;\r\n          case \"Low\": return 1;\r\n          case \"Don't Know\": return 0;\r\n          default: return -1;\r\n        }\r\n      case 5:\r\n        switch (answer) {\r\n          case \"Low\": return 4;\r\n          case \"Medium\": return 3;\r\n          case \"High\": return 2;\r\n          case \"Very High\": return 1;\r\n          case \"Don't Know\": return 0;\r\n          default: return -1;\r\n        }\r\n      case 9:\r\n          switch (answer) {\r\n            case \"Low\": return 4;\r\n            case \"Medium\": return 3;\r\n            case \"High\": return 2;\r\n            case \"Very High\": return 1;\r\n            case \"Don't Know\": return 0;\r\n            default: return -1;\r\n          }\r\n      default:\r\n        return -1;\r\n    }\r\n  }\r\n\r\n  private mapQuestionsToInteger(index: number): number {\r\n    switch (index) {\r\n      case 1: return AdvancePolicyQuestions[\"CertaintyExposureLevel\"];\r\n      case 2: return AdvancePolicyQuestions[\"AbilityImpactCustomer\"];\r\n      case 3: return AdvancePolicyQuestions[\"DifferentiationFromCompetitors\"];\r\n      case 4: return AdvancePolicyQuestions[\"CompetitivenessLevel\"];\r\n      case 5: return AdvancePolicyQuestions[\"CreditSensitivity\"];\r\n      case 9: return AdvancePolicyQuestions[\"CreditSensitivity\"];\r\n      default: return -1; // Handle unexpected values\r\n    }\r\n  }\r\n\r\n  onConfirm() {\r\n    this.showLoader = true;\r\n    if (this.step2Res && this.step2Res.length !== 0) {\r\n      let questionAndScores = [];\r\n      this.errorMessage = '';\r\n      for (let index = 1; index < this.step2Res.length; index++) {\r\n        const obj = {\r\n          advancePolicyQuestions: 0,\r\n          score: 0\r\n        };\r\n        // Map question index and score\r\n        obj.advancePolicyQuestions = this.mapQuestionsToInteger(this.step2Res[index].index);\r\n        // obj.score = this.mapAnswerToInteger(this.step2Res[index].answer);\r\n        obj.score = this.mapAnswerToInteger(this.step2Res[index].answer, this.step2Res[index].index);\r\n        questionAndScores.push(obj);\r\n      }\r\n\r\n      const updateAdvancePolicyModel = {\r\n        \"budgetRate\": this.step2Res[0]?.answer,\r\n        \"questionAndScores\": questionAndScores\r\n      }\r\n      this.showfinalStep = true;\r\n\r\n      // this.riskManagerService?.updateAdvancePolicydata(updateAdvancePolicyModel).subscribe((res: any) => {\r\n      //   if (res?.[\"body\"]) {\r\n      //     this.showfinalStep = true;\r\n      //     this.showLoader = false;\r\n      //   }\r\n      // }, (error) => {\r\n      //   this.showLoader = false;\r\n      //   this.errorMessage = error?.error?.apiErrorMessage[0] ? error?.error?.apiErrorMessage[0] : \"Oops! Something went wrong. Please try again later.\";\r\n      // });\r\n    }\r\n  }\r\n\r\n}\r\n",
            "styleUrl": "./advanced-policy-step3.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"policy-summary-wrap\" [class.showFinalStep]=\"showfinalStep\">\r\n    <button (click)=\"previous()\" class=\"btn-back\"><img src=\"images/back-icon-policy.svg\" alt=\"back\" />\r\n      Back</button>\r\n    <h3 class=\"heading\">Advanced Policy</h3>\r\n    <!-- <div class=\"loader-wrapper\">\r\n      <app-page-loader id=\"loader\" classes=\"bg-white section-loader\" *ngIf=\"showLoader\"></app-page-loader> -->\r\n    <div class=\"confirm-wrap\" *ngIf=\"!showfinalStep\">\r\n      <div class=\"summary-wrap\">\r\n        <h1 class=\"cnf-title\">Before you confirm</h1>\r\n        <p class=\"desc\">Please review your answers and confirm</p>\r\n        <div class=\"summary-inner\">\r\n          <div class=\"step-item step1\">\r\n            <div class=\"step-info\">\r\n              <h2 class=\"title\">Do you have an annual budget exchange rate?</h2>\r\n              <p class=\"rate-tag\">{{ step2Res?.[0] ? step2Res?.[0]?.answer : '--'}}</p>\r\n              <p class=\"generate-tag\" *ngIf=\"advancePolicyFlag\">Generated by okoora</p>\r\n            </div>\r\n            <button class=\"edit-btn\" id=\"budget-rate-edit-btn\" (click)=\"navigateToSteppers(0)\"><img src=\"images/edit-step-icon.svg\" alt=\"edit\" /></button>\r\n          </div>\r\n  \r\n          <div class=\"step-item step1\">\r\n            <div class=\"step-info\">\r\n              <h2 class=\"title\">How certain are you that your projected cash flow will be realized?</h2>\r\n              <p class=\"rate-tag\">{{ step2Res?.[1] ? step2Res?.[1]?.answer : '--'}}</p>\r\n            </div>\r\n            <button class=\"edit-btn\" id=\"budget-rate-one-edit-btn\" (click)=\"navigateToSteppers(1)\"><img src=\"images/edit-step-icon.svg\" alt=\"edit\" /></button>\r\n          </div>\r\n          <div class=\"step-item\">\r\n            <div class=\"step-info\">\r\n              <h2 class=\"title\">To what extent can you influence customer pricing or supplier costs?</h2>\r\n              <p class=\"rate-tag\">{{ step2Res?.[2] ? step2Res?.[2]?.answer : '--'}}</p>\r\n            </div>\r\n            <button class=\"edit-btn\" id=\"question-two-edit-btn\" (click)=\"navigateToSteppers(2)\"><img src=\"images/edit-step-icon.svg\" alt=\"edit\" /></button>\r\n          </div>\r\n          <div class=\"step-item\">\r\n            <div class=\"step-info\">\r\n              <h2 class=\"title\">How similar is your exposure to exchange rates compared to that of your main competitors?</h2>\r\n              <p class=\"rate-tag\">{{ step2Res?.[3] ? step2Res?.[3]?.answer : '--'}}</p>\r\n            </div>\r\n            <button class=\"edit-btn\" id=\"question-three-edit-btn\" (click)=\"navigateToSteppers(3)\"><img src=\"images/edit-step-icon.svg\" alt=\"edit\" /></button>\r\n          </div>\r\n          <div class=\"step-item\">\r\n            <div class=\"step-info\">\r\n              <h2 class=\"title\">How competitive is the industry your company operates in?</h2>\r\n              <p class=\"rate-tag\">{{ step2Res?.[4] ? step2Res?.[4]?.answer : '--'}}</p>\r\n            </div>\r\n            <button class=\"edit-btn\" id=\"question-four-edit-btn\" (click)=\"navigateToSteppers(4)\"><img src=\"images/edit-step-icon.svg\" alt=\"edit\" /></button>\r\n          </div>\r\n          <div class=\"step-item\">\r\n            <div class=\"step-info\">\r\n              <h2 class=\"title\">What is the company's ability to consume additional credit lines for possible collateral requirements?</h2>\r\n              <p class=\"rate-tag\">{{ step2Res?.[5] ? step2Res?.[5]?.answer : '--'}}</p>\r\n            </div>\r\n            <button class=\"edit-btn\" id=\"question-five-edit-btn\" (click)=\"navigateToSteppers(5)\"><img src=\"images/edit-step-icon.svg\" alt=\"edit\" /></button>\r\n          </div>\r\n        </div>\r\n        <span class=\"error-message\" *ngIf=\"errorMessage\">{{errorMessage}}</span>\r\n        <div class=\"btn-wrap\">\r\n          <button class=\"btn-confirm\" id=\"question-confirm-btn\" (click)=\"onConfirm()\">Confirm</button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <!-- </div> -->\r\n    <div class=\"final-step\" *ngIf=\"showfinalStep\">\r\n      <div class=\"success-wrap\">\r\n        <picture>\r\n          <img src=\"images/mass-payment/success.gif\" alt=\"tick\">\r\n        </picture>\r\n        <h3 class=\"congrats-text\">Congratulations,</h3>\r\n        <p class=\"sub-info\">You have successfully established an advanced policy</p>\r\n      </div>\r\n      <button class=\"btn-dashboard\" id=\"adv-policy-succ-back-dash-btn\" (click)=\"backToDashboard()\">Back to dashboard</button>\r\n    </div>\r\n  </div>\r\n  "
        },
        {
            "name": "AgentsBusyTraderoomComponent",
            "id": "component-AgentsBusyTraderoomComponent-3c0ecdc3c2e18378f037b81bfe15f859a64d61bca2ebec4d9419951bb76b6d370d245868b2dd3bdfea73b66fc3c5b77c6420f13ab54556951fb156b60538af26",
            "file": "src/app/risk-dashboard/components/hedging-proposal/components/traderoom-components/agents-busy-traderoom/agents-busy-traderoom.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-agents-busy-traderoom",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./agents-busy-traderoom.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-agents-busy-traderoom',\r\n  imports: [],\r\n  templateUrl: './agents-busy-traderoom.component.html',\r\n  styleUrl: './agents-busy-traderoom.component.scss'\r\n})\r\nexport class AgentsBusyTraderoomComponent {\r\n\r\n}\r\n",
            "styleUrl": "./agents-busy-traderoom.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"agents-busy-wrapper\">\r\n    <picture>\r\n        <img src=\"/images/logo-icon-white.svg\" alt=\"phone\" />\r\n    </picture>\r\n\r\n    <p class=\"title traderoom-connect-title\">Oh no!</p>\r\n    <p class=\"title traderoom-connect-title\">All agents are currently busy.<br /> Please try again in a few minutes</p>\r\n</div>"
        },
        {
            "name": "AnnualExposureDetailsComponent",
            "id": "component-AnnualExposureDetailsComponent-a0d96da3947e355b3e4d77421d2324cf67b78e80298454c2358315897e7243192065dd21686ad19133dda2da8d638a93b56de09a2629fc27d2e358c8863027d1",
            "file": "src/app/risk-dashboard/components/dashboard/components/annual-exposure-details/annual-exposure-details.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-annual-exposure-details",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./annual-exposure-details.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "annualExposure",
                    "defaultValue": "1200001.2",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "avgHedgeRate",
                    "defaultValue": "'--'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "currentHedge",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "currentHedgePercent",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "recommendedHedge",
                    "defaultValue": "720001",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "recommendedHedgePercent",
                    "defaultValue": "60",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "number",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "NgbTooltipModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\r\nimport { NgbTooltipModule } from '@ng-bootstrap/ng-bootstrap';\r\n@Component({\r\n  selector: 'app-annual-exposure-details',\r\n  imports: [NgbTooltipModule],\r\n  templateUrl: './annual-exposure-details.component.html',\r\n  styleUrl: './annual-exposure-details.component.scss'\r\n})\r\nexport class AnnualExposureDetailsComponent {\r\n  @Input() annualExposure: number = 1200001.2;\r\n  @Input() recommendedHedge: number = 720001;\r\n  @Input() recommendedHedgePercent: number = 60;\r\n  @Input() currentHedge: number = 0;\r\n  @Input() currentHedgePercent: number = 0;\r\n  @Input() avgHedgeRate: string = '--';\r\n}\r\n",
            "styleUrl": "./annual-exposure-details.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"annual-exposer-details\">\r\n    <h4 class=\"info-title\"><img src=\"images/exposure-virtual.svg\" alt=\"exposure\" />Annual exposure details</h4>\r\n    <div class=\"annual-wrap\">\r\n        <div class=\"annual-item exposer-item\">\r\n            <h4 class=\"item-title\">Annual exposure<img src=\"images/annual-title-help-icon.svg\" alt=\"help\" [ngbTooltip]=\"annualExposer\" placement=\"top-left\"\r\n                tooltipClass=\"risk-step3-tooltip--rm\"></h4>\r\n            <div class=\"price-sec\">\r\n                <span class=\"sign\">$</span>{{annualExposure}}\r\n                <!-- Static content used as a placeholder -->\r\n            </div>\r\n        </div>\r\n        <ng-template #annualExposer>\r\n            The total amount at risk over the specified time period, calculated as the sum of all\r\n            monthly exposures\r\n        </ng-template>\r\n        <ng-template #avgHedge>\r\n            The average exchange rate of your current hedging transactions\r\n        </ng-template>\r\n\r\n        <div class=\"hedge-item annual-item\">\r\n            <h4 class=\"item-title\">Our recommended hedge</h4>\r\n            <div class=\"price-sec\">\r\n                <span class=\"sign\">$</span>{{recommendedHedge}}\r\n                <span class=\"percent-tag\">{{recommendedHedgePercent}}%</span>\r\n            </div>\r\n        </div>\r\n\r\n        <div class=\"current-hedge-item annual-item\">\r\n            <h4 class=\"item-title\">Your current hedge</h4>\r\n            <div class=\"price-sec\">\r\n                <span class=\"sign\">$</span>{{currentHedge}}\r\n                <span class=\"percent-tag\">{{currentHedgePercent}}%</span>\r\n            </div>\r\n        </div>\r\n\r\n        <div class=\"avg-hedge-item annual-item\">\r\n            <h4 class=\"item-title\">AVG hedging rate<img src=\"images/annual-title-help-icon.svg\" alt=\"help\" [ngbTooltip]=\"avgHedge\" placement=\"top-right\" tooltipClass=\"risk-step3-tooltip--rm\"></h4>\r\n            <div class=\"price-sec\">\r\n                {{avgHedgeRate}}\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n"
        },
        {
            "name": "AppComponent",
            "id": "component-AppComponent-0a2ff5452808e744bb3104cc9a3bedeea28dbda9d8fb7a85b769ba1c6098f151ce794f14c58c4c01cc3f082f99b75f9915211c137e13bc38593be23ee7ebe7de",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "app.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "showCashflowExposure",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "ShowDashboard",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "Showhedging",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "sidebar",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SidebarComponent",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "SidebarComponent"
                        }
                    ],
                    "modifierKind": [
                        170,
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "openSidebar",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "RouterOutlet"
                },
                {
                    "name": "HeaderComponent",
                    "type": "component"
                },
                {
                    "name": "SidebarComponent",
                    "type": "component"
                },
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, ViewChild } from '@angular/core';\r\nimport { Router, RouterOutlet } from '@angular/router';\r\nimport { HeaderComponent } from \"./risk-dashboard/components/header/header.component\";\r\nimport { SidebarComponent } from \"./risk-dashboard/components/sidebar/sidebar.component\";\r\nimport { CommonModule } from '@angular/common';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  imports: [RouterOutlet, HeaderComponent, SidebarComponent, CommonModule],\r\n  templateUrl:'app.component.html',\r\n  styleUrl:'app.component.scss',\r\n})\r\nexport class AppComponent {\r\n  @ViewChild(SidebarComponent) private sidebar!: SidebarComponent;\r\n  @Input() ShowDashboard: boolean = false;\r\n  @Input() Showhedging: boolean = false;\r\n  @Input() showCashflowExposure: boolean = false;\r\n  constructor(private router: Router) {}\r\n  ngOnInit(): void {\r\n    // Only navigate if it's the initial load (empty path)\r\n    if (this.router.url === '/') {\r\n      this.router.navigate(['/dashboard']);\r\n    }\r\n    const isLoggedInUser = localStorage.getItem('isLoggedInUser') === 'false'\r\n    if (isLoggedInUser) {\r\n      this.router.navigate(['/sign-up']);\r\n    }\r\n  }\r\n  get isRiskManagerRoute(): boolean {\r\n    return this.router.url === '/dashboard' || this.router.url === '/hedging' || this.router.url === '/cashflow' || this.router.url === '/advanced-policy';\r\n  }\r\n\r\n  get isLoginRoute(): boolean {\r\n    return this.router.url === '/login';\r\n  }\r\n\r\n  get isSignUpRoute(): boolean {\r\n    return this.router.url === '/sign-up';\r\n  }\r\n\r\n  get isForgotPasswordRoute(): boolean {\r\n    return this.router.url === '/reset-password'; \r\n  }\r\n\r\n  get isChangePasswordRoute(): boolean {\r\n    return this.router.url === '/change-password';  \r\n  }\r\n\r\n  openSidebar() {\r\n    this.sidebar.openSidebar();\r\n  }\r\n}\r\n",
            "styleUrl": "app.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "accessors": {
                "isRiskManagerRoute": {
                    "name": "isRiskManagerRoute",
                    "getSignature": {
                        "name": "isRiskManagerRoute",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 29
                    }
                },
                "isLoginRoute": {
                    "name": "isLoginRoute",
                    "getSignature": {
                        "name": "isLoginRoute",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 33
                    }
                },
                "isSignUpRoute": {
                    "name": "isSignUpRoute",
                    "getSignature": {
                        "name": "isSignUpRoute",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 37
                    }
                },
                "isForgotPasswordRoute": {
                    "name": "isForgotPasswordRoute",
                    "getSignature": {
                        "name": "isForgotPasswordRoute",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 41
                    }
                },
                "isChangePasswordRoute": {
                    "name": "isChangePasswordRoute",
                    "getSignature": {
                        "name": "isChangePasswordRoute",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 45
                    }
                }
            },
            "templateData": "<div class=\"layout\" [ngClass]=\"{'not-dashboard': isSignUpRoute || isLoginRoute || isForgotPasswordRoute || isChangePasswordRoute || isCodeVerificationRoute}\">\r\n    <ng-container *ngIf=\"!isSignUpRoute && !isLoginRoute && !isForgotPasswordRoute && !isChangePasswordRoute && !isCodeVerificationRoute\">\r\n        <app-header (openSidebar)=\"openSidebar()\"></app-header>\r\n        <app-sidebar></app-sidebar>\r\n    </ng-container>\r\n    \r\n    <div class=\"content-wrapper\" [ngClass]=\"{'risk-manager': isRiskManagerRoute}\">\r\n        <router-outlet />\r\n    </div>\r\n</div>"
        },
        {
            "name": "BreadcrumbWalletComponent",
            "id": "component-BreadcrumbWalletComponent-285545ba685b074e83c9ee76a844d65d40e6623fead803ca39a480712a0757665581c16292edc911138e3caaab3606e09bba486cda44a9aa0d50db84ff33be7e",
            "file": "src/app/risk-dashboard/components/dashboard/components/breadcrumb-wallet/breadcrumb-wallet.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-breadcrumb-wallet",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./breadcrumb-wallet.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "baseCurrency",
                    "defaultValue": "'images/ils-flag.svg'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "cashFlowName",
                    "defaultValue": "'S.L ROBOTICS'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "fromCurrency",
                    "defaultValue": "'flags/us.svg'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "monthRange",
                    "defaultValue": "'Jan 24 - Dec 24'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "RouterModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\r\nimport { RouterModule } from '@angular/router';\r\n\r\n@Component({\r\n  selector: 'app-breadcrumb-wallet',\r\n  imports: [RouterModule],\r\n  templateUrl: './breadcrumb-wallet.component.html',\r\n  styleUrl: './breadcrumb-wallet.component.scss'\r\n})\r\nexport class BreadcrumbWalletComponent {\r\n  @Input() baseCurrency: string = 'images/ils-flag.svg';\r\n  @Input() fromCurrency: string = 'flags/us.svg';\r\n  @Input() cashFlowName: string = 'S.L ROBOTICS';\r\n  @Input() monthRange: string = 'Jan 24 - Dec 24';\r\n}\r\n",
            "styleUrl": "./breadcrumb-wallet.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"risk-header\">\r\n    <div class=\"risk-nav\">\r\n        Dashboard / hedging / <b>risk analysis</b>\r\n    </div>\r\n    <div class=\"risk-header-bottom\">\r\n        <div class=\"left-sec\">\r\n            <button class=\"cash-flow-wrap\" tooltip=\"S.L ROBOTICS\" placement=\"auto\" tooltipClass=\"risk-dash-tooltip--rm1\" container=\"body\">\r\n                <div class=\"currency-pair\">\r\n                    <img [src]=\"fromCurrency\" class=\"from-currency\">\r\n                    <div class=\"base-currency-wrap\">\r\n                        <img [src]=\"baseCurrency\" class=\"base-currency\">\r\n                    </div>\r\n                </div>\r\n                <div class=\"cashflow-details\">\r\n                    <!-- Static content -->\r\n                    <h3 class=\"name\">{{cashFlowName}}</h3>\r\n                    <h5 class=\"month-range-text\">\r\n                        {{monthRange}}\r\n                    </h5>\r\n                </div>\r\n                <div class=\"selection-icons\">\r\n                    <!-- Add icons or leave it empty -->\r\n                </div>\r\n            </button>\r\n            <button class=\"add-flow\"><i class=\"fas fa-plus\"></i></button>\r\n        </div>\r\n        <div class=\"right-buttons\">\r\n            <!-- Static content for buttons -->\r\n            <button class=\"policy-btn\" [routerLink]=\"['/advanced-policy']\">\r\n                <img src=\"images/plus-icon-round.svg\"> Advanced Policy\r\n                <span class=\"notify-tag\"></span>\r\n            </button>\r\n        </div>\r\n    </div>\r\n</div>\r\n"
        },
        {
            "name": "CancelledTraderoomComponent",
            "id": "component-CancelledTraderoomComponent-b325cec27e5978952af54feaa444fe4f042d77914c3eaa22f04cdef1fe56af7255a68e5f4b54c906e7e6ab4dd0c9676276a99637b0447f25abe51968b464d9a3",
            "file": "src/app/risk-dashboard/components/hedging-proposal/components/traderoom-components/cancelled-traderoom/cancelled-traderoom.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-cancelled-traderoom",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./cancelled-traderoom.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-cancelled-traderoom',\r\n  imports: [],\r\n  templateUrl: './cancelled-traderoom.component.html',\r\n  styleUrl: './cancelled-traderoom.component.scss'\r\n})\r\nexport class CancelledTraderoomComponent {\r\n\r\n}\r\n",
            "styleUrl": "./cancelled-traderoom.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"cancelled-traderoom-wrapper\">\r\n    <picture>\r\n        <img src=\"/images/icon-canceled-call.svg\" alt=\"phone\" />\r\n    </picture>\r\n    <p class=\"title traderoom-connect-title\">Canceled</p>\r\n    <p class=\"subtext\">Call was canceled by agent</p>\r\n</div>\r\n"
        },
        {
            "name": "CashflowExposureDetailsComponent",
            "id": "component-CashflowExposureDetailsComponent-c3ddb0399e84b5fd157b85647020d8bd00d546df9965f5c8a093dac6bedf3091beb32330da8fc2f304f7c1e1c33022e5a828b04a8b501a3493eb18aafa89171a",
            "file": "src/app/risk-dashboard/components/cashflow-exposure/components/cashflow-exposure-details/cashflow-exposure-details.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{ provide: DateAdapter, useClass: CustomDateAdapter, deps: [MAT_DATE_LOCALE] }"
                },
                {
                    "name": "{ provide: MAT_DATE_FORMATS, useValue: MATERIAL_DATEPICKER_FORMATS }"
                }
            ],
            "selector": "app-cashflow-exposure-details",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./cashflow-exposure-details.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "stepper",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 81,
                    "type": "MatStepper",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "addRowBlinkIndex",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 108
                },
                {
                    "name": "buyingFlag",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 109
                },
                {
                    "name": "buyingValueForedit",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 107
                },
                {
                    "name": "cashflowDateColumn",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 80,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'cashflowDateColumn', {static: false}"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "cashflowExposureRows",
                    "defaultValue": "cashflowExposureRows",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 82
                },
                {
                    "name": "datepickers",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "QueryList<MatDatepicker<any>>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 79,
                    "decorators": [
                        {
                            "name": "ViewChildren",
                            "stringifiedArguments": "MatDatepicker"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "displayedColumns",
                    "defaultValue": "['Month', 'Selling', 'Buying', 'TotalNet', 'DisableMonth']",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 97
                },
                {
                    "name": "errorMessage",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 102
                },
                {
                    "name": "errrMsgForBuyingAndSelling",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 103
                },
                {
                    "name": "exposureAmount",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 112
                },
                {
                    "name": "exposureAmountCeil",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 114
                },
                {
                    "name": "exposureAmountFloor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 113
                },
                {
                    "name": "exposureBaseCurrency",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 115
                },
                {
                    "name": "exposureToCurrency",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 116
                },
                {
                    "name": "isCurrentMonthIncrement",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 111
                },
                {
                    "name": "maxLengthError",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 105
                },
                {
                    "name": "monthlyExposureObject",
                    "defaultValue": "{\r\n    pair: \"USD/ILS\",\r\n    sign: \"$\",\r\n    toCurrency: \"USD\",\r\n    selectedExposure: \"Selling\",\r\n    monthlyAmount: 100000,\r\n    monthlyPeriod: 12,\r\n    flag: \"https://okoora-stage-api2023.azurewebsites.net/Images/Flags/USD.png\",\r\n    code: \"USD\",\r\n    baseCurrencyFlag: \"https://okoora-stage-api2023.azurewebsites.net/Images/Flags/EUR.png\",\r\n    baseCurrency: \"ILS\",\r\n    baseCurrencySign: \"₪\"\r\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 83
                },
                {
                    "name": "monthlyPeriod",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 104
                },
                {
                    "name": "openEditBuyingIndex",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 101
                },
                {
                    "name": "openEditSellingIndex",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 100
                },
                {
                    "name": "riskAlert",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NgbTooltip",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 99,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'riskAlert', {static: false}"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "sellingValueForedit",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 106
                },
                {
                    "name": "staticMonthNames",
                    "defaultValue": "['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 98
                },
                {
                    "name": "tempcashflowExposureRows",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 110
                }
            ],
            "methodsClass": [
                {
                    "name": "addOneMore",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 392,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "addSixMonth",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 155,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "backToPrevious",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 479,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "cancelEditBuying",
                    "args": [
                        {
                            "name": "element",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "index",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 281,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "element",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "index",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "cancelEditSelling",
                    "args": [
                        {
                            "name": "element",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "index",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 222,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "element",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "index",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "chooseCashflowDate",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "year",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "month",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "day",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 168,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "year",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "month",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "day",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ClearBuyingZeroValue",
                    "args": [
                        {
                            "name": "element",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "index",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 277,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "element",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "index",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "clearInput",
                    "args": [
                        {
                            "name": "number",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 383,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "number",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "clearSellingZeroValue",
                    "args": [
                        {
                            "name": "element",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "index",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 263,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "element",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "index",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "editBuying",
                    "args": [
                        {
                            "name": "element",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "index",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 267,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "element",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "index",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "editSelling",
                    "args": [
                        {
                            "name": "element",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "index",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 212,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "element",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "index",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "exposureDetailsNextStep",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 474,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "formatValue",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "valueType",
                            "type": "\"sellingValueForedit\" | \"buyingValueForedit\"",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 334,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "valueType",
                            "type": "\"sellingValueForedit\" | \"buyingValueForedit\"",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getNext12MonthNamesWithYear",
                    "args": [
                        {
                            "name": "monthlyPeriod",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "{}",
                    "typeParameters": [],
                    "line": 404,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "monthlyPeriod",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 120,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 124,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSwitchToggle",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "element",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "index",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 320,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "element",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "index",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "preventDecimalValue",
                    "args": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 375,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "restrictLength",
                    "args": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 354,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "saveEditBuying",
                    "args": [
                        {
                            "name": "element",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "index",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 285,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "element",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "index",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "saveEditSelling",
                    "args": [
                        {
                            "name": "element",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "index",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 227,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "element",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "index",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setMonthlyDate",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "element",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 181,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "element",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "valueWithComma",
                    "args": [
                        {
                            "name": "e",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "fraction",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 198,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "e",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "fraction",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "FormsModule",
                    "type": "module"
                },
                {
                    "name": "MatInputModule",
                    "type": "module"
                },
                {
                    "name": "MatFormFieldModule",
                    "type": "module"
                },
                {
                    "name": "MatDatepickerModule",
                    "type": "module"
                },
                {
                    "name": "MatNativeDateModule",
                    "type": "module"
                },
                {
                    "name": "MatMomentDateModule",
                    "type": "module"
                },
                {
                    "name": "MatButtonModule",
                    "type": "module"
                },
                {
                    "name": "MatIconModule",
                    "type": "module"
                },
                {
                    "name": "MatTableModule",
                    "type": "module"
                },
                {
                    "name": "MatProgressBarModule",
                    "type": "module"
                },
                {
                    "name": "MatSlideToggleModule",
                    "type": "module"
                },
                {
                    "name": "NgbTooltipModule",
                    "type": "module"
                },
                {
                    "name": "MonthlyExposureDetailsComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, ElementRef, Inject, QueryList, ViewChild, ViewChildren, ChangeDetectorRef, Injectable, Input, Renderer2 } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\n\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatDatepicker, MatDatepickerModule } from '@angular/material/datepicker';\r\nimport { MatNativeDateModule, MAT_DATE_FORMATS, MAT_DATE_LOCALE, DateAdapter } from '@angular/material/core';\r\nimport { MatMomentDateModule, MomentDateAdapter } from '@angular/material-moment-adapter';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatTableModule } from '@angular/material/table';\r\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\r\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\r\nimport { NgbTooltip, NgbTooltipModule } from '@ng-bootstrap/ng-bootstrap';\r\nimport { MonthlyExposureDetailsComponent } from '../monthly-exposure-details/monthly-exposure-details.component';\r\nimport { cashflowExposureRows } from '../cashflow-exposure-data';\r\nimport { Router } from '@angular/router';\r\nimport { MatStepper } from '@angular/material/stepper';\r\nimport { HedgingDataService } from '../../../hedging-proposal/hedging-data.service';\r\n\r\n@Injectable()\r\nexport class CustomDateAdapter extends MomentDateAdapter {\r\n  constructor(@Inject(MAT_DATE_LOCALE) locale: string) {\r\n    super(locale);\r\n  }\r\n\r\n  override format(date: moment.Moment, displayFormat: string): string {\r\n    if (displayFormat === 'MMMM YYYY') {\r\n      const formatted = date.format(displayFormat);\r\n      return formatted.charAt(0).toUpperCase() + formatted.slice(1).toLowerCase();\r\n    }\r\n    return date.format(displayFormat);\r\n  }\r\n\r\n  override getDayOfWeekNames(): string[] {\r\n    return ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\r\n  }\r\n}\r\n\r\nexport const MATERIAL_DATEPICKER_FORMATS = {\r\n  parse: {\r\n    dateInput: 'DD/MMM/YYYY',\r\n  },\r\n  display: {\r\n    dateInput: 'DD/MMM/YYYY',\r\n    monthYearLabel: 'MMMM YYYY',\r\n    dateA11yLabel: 'DD/MMM/YYYY',\r\n    monthYearA11yLabel: 'MMMM YYYY',\r\n  },\r\n};\r\n\r\n@Component({\r\n  selector: 'app-cashflow-exposure-details',\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    MatInputModule,\r\n    MatFormFieldModule,\r\n    MatDatepickerModule,\r\n    MatNativeDateModule,\r\n    MatMomentDateModule,\r\n    MatButtonModule,\r\n    MatIconModule,\r\n    MatTableModule,\r\n    MatProgressBarModule,\r\n    MatSlideToggleModule,\r\n    NgbTooltipModule,\r\n    MonthlyExposureDetailsComponent,\r\n  ],\r\n  templateUrl: './cashflow-exposure-details.component.html',\r\n  styleUrl: './cashflow-exposure-details.component.scss',\r\n  providers: [\r\n    { provide: DateAdapter, useClass: CustomDateAdapter, deps: [MAT_DATE_LOCALE] },\r\n    { provide: MAT_DATE_FORMATS, useValue: MATERIAL_DATEPICKER_FORMATS },\r\n  ],\r\n})\r\nexport class CashflowExposureDetailsComponent {\r\n  @ViewChildren(MatDatepicker) datepickers!: QueryList<MatDatepicker<any>>;\r\n  @ViewChild('cashflowDateColumn', { static: false }) cashflowDateColumn!: ElementRef;\r\n  @Input() stepper!: MatStepper;\r\n  cashflowExposureRows = cashflowExposureRows;\r\n  monthlyExposureObject = {\r\n    pair: \"USD/ILS\",\r\n    sign: \"$\",\r\n    toCurrency: \"USD\",\r\n    selectedExposure: \"Selling\",\r\n    monthlyAmount: 100000,\r\n    monthlyPeriod: 12,\r\n    flag: \"https://okoora-stage-api2023.azurewebsites.net/Images/Flags/USD.png\",\r\n    code: \"USD\",\r\n    baseCurrencyFlag: \"https://okoora-stage-api2023.azurewebsites.net/Images/Flags/EUR.png\",\r\n    baseCurrency: \"ILS\",\r\n    baseCurrencySign: \"₪\"\r\n  };;\r\n\r\n  displayedColumns: string[] = ['Month', 'Selling', 'Buying', 'TotalNet', 'DisableMonth'];\r\n  staticMonthNames = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\r\n  @ViewChild('riskAlert', { static: false }) riskAlert!: NgbTooltip;\r\n  openEditSellingIndex: number | null = null;\r\n  openEditBuyingIndex: number | null = null;\r\n  errorMessage: string | null = null;\r\n  errrMsgForBuyingAndSelling: any;\r\n  monthlyPeriod: any;\r\n  maxLengthError: any;\r\n  sellingValueForedit: any;\r\n  buyingValueForedit: any;\r\n  addRowBlinkIndex!: number;\r\n  buyingFlag!: boolean;\r\n  tempcashflowExposureRows: any;\r\n  isCurrentMonthIncrement: boolean = false;\r\n  exposureAmount!: number;\r\n  exposureAmountFloor!: string;\r\n  exposureAmountCeil!: string;\r\n  exposureBaseCurrency!: string;\r\n  exposureToCurrency!: string;\r\n  \r\n  constructor(private cd: ChangeDetectorRef, private renderer: Renderer2, private router: Router, private hedgeDataService: HedgingDataService) {}\r\n\r\n  ngAfterViewInit() {\r\n    this.riskAlert.open();\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.hedgeDataService.openCashflowDateTooltip.subscribe(res => {\r\n      if (res) {\r\n        setTimeout(() => {\r\n          this.riskAlert.open();\r\n        }, 1000);\r\n      }\r\n    });\r\n    this.renderer.listen('document', 'click', (event) => {\r\n      if (!this.cashflowDateColumn.nativeElement.contains(event.target)) {\r\n        this.riskAlert.close();\r\n      }\r\n    });\r\n    this.hedgeDataService.getExposureFormValue.subscribe((res: any) => {\r\n      this.isCurrentMonthIncrement = false;\r\n      this.cashflowExposureRows = []\r\n      this.monthlyExposureObject = res\r\n      localStorage.setItem('cashFlowExposureData', JSON.stringify(this.monthlyExposureObject));\r\n      this.exposureAmount = this.monthlyExposureObject?.monthlyAmount;\r\n      this.exposureAmountFloor = this.exposureAmount.toString().split(\".\")[0];\r\n      this.exposureAmountCeil = this.exposureAmount.toString().split(\".\")[1];\r\n      this.exposureBaseCurrency = this.monthlyExposureObject?.pair.toString().split(\"/\")[1];\r\n      this.exposureToCurrency = this.monthlyExposureObject?.pair.toString().split(\"/\")[0];\r\n      this.buyingFlag = this.monthlyExposureObject?.selectedExposure == \"Buying\" ? true : false;\r\n      this.monthlyPeriod = this.monthlyExposureObject?.monthlyPeriod;\r\n      this.getNext12MonthNamesWithYear(this.monthlyPeriod);\r\n      this.cd.detectChanges();\r\n    });\r\n    this.monthlyPeriod = this.monthlyExposureObject.monthlyPeriod;\r\n  }\r\n\r\n  addSixMonth() {\r\n      this.monthlyPeriod += 6;\r\n    this.tempcashflowExposureRows = this.cashflowExposureRows;\r\n    this.cashflowExposureRows = []\r\n      this.isCurrentMonthIncrement = true;\r\n      this.getNext12MonthNamesWithYear(this.monthlyPeriod);\r\n    this.cashflowExposureRows?.splice(0, this.tempcashflowExposureRows?.length);\r\n    this.cashflowExposureRows = [...this.tempcashflowExposureRows, ...this.cashflowExposureRows]\r\n    // for (let index = 6; index < 12; index++) {\r\n    //   this.cashflowExposureRows.index = index;\r\n    // }\r\n  }\r\n  \r\n  chooseCashflowDate(index: number, year: number, month: string, day: number): void {\r\n    this.riskAlert.close();\r\n    const monthIndex = this.staticMonthNames.findIndex((m) => m === month);\r\n    const selectedDate = new Date(year, monthIndex, day);\r\n    this.cashflowExposureRows[index].date = selectedDate;\r\n    this.cd.detectChanges();\r\n\r\n    const datepicker = this.datepickers.toArray()[index];\r\n    if (datepicker) {\r\n      datepicker.open();\r\n    }\r\n  }\r\n\r\n  setMonthlyDate(index: number, element: any) {\r\n    const selectedDate = new Date(element.date);\r\n    const year = selectedDate.getFullYear();\r\n    const month = selectedDate.getMonth();\r\n    const date = selectedDate.getDate();\r\n  \r\n    const monthName = this.staticMonthNames[month];\r\n    const monthDisplay = (month + 1).toString().padStart(2, '0');\r\n    const dateDisplay = date.toString().padStart(2, '0');\r\n    element.year = year;\r\n    element.cashflowDate = date;\r\n    element.month = monthName;\r\n    element.Month = `${dateDisplay}/${monthDisplay}/${year}`;\r\n    element.dayOfExpity = dateDisplay;\r\n    this.cashflowExposureRows[index] = { ...element };\r\n  }\r\n\r\n  valueWithComma(e: any, fraction: any) {\r\n    if (e) {\r\n      const actualNumber = +e?.toString()?.replace(/,/g, '')\r\n      const formatted = actualNumber?.toLocaleString('en-US', { maximumFractionDigits: fraction })\r\n      return formatted\r\n    } else {\r\n      if (e == 0) {\r\n        return '0';\r\n      } else {\r\n        return false;\r\n      }\r\n    }\r\n  }\r\n\r\n  editSelling(element: any, index: any) {\r\n    this.openEditSellingIndex = index;\r\n    this.cashflowExposureRows[index].openEditForSelling = true\r\n    this.sellingValueForedit = this.valueWithComma(this.cashflowExposureRows[index].selling, 2);\r\n    this.cashflowExposureRows[index].errMsgForsellingFlag = false\r\n    this.cashflowExposureRows[index].openEditForBuying = false\r\n    delete this.errrMsgForBuyingAndSelling\r\n    this.cashflowExposureRows = [...this.cashflowExposureRows]\r\n  }\r\n\r\n  cancelEditSelling(element: any, index: any) {\r\n    this.cashflowExposureRows[index].openEditForSelling = false\r\n    this.cashflowExposureRows = [...this.cashflowExposureRows]\r\n  }\r\n\r\n  saveEditSelling(element: any, index: any) {\r\n    this.addRowBlinkIndex = -1;\r\n\r\n    if (this.sellingValueForedit === '') {\r\n        this.cashflowExposureRows[index].errMsgForsellingFlag = true;\r\n        this.cashflowExposureRows[index].openEditForSelling = true;\r\n        this.cashflowExposureRows = [...this.cashflowExposureRows];\r\n        this.errrMsgForBuyingAndSelling = \"Please enter only 0-9 numbers\";\r\n    } else {\r\n        const rawSellingValue = this.sellingValueForedit.replace(/\\,/g, '');\r\n        const sellingNumber = parseFloat(rawSellingValue);\r\n\r\n        const regex = /^\\d*\\.?\\d*$/;\r\n\r\n        if (regex.test(rawSellingValue)) {\r\n            if (sellingNumber > 100000000) {\r\n                this.cashflowExposureRows[index].errMsgForsellingFlag = true;\r\n                this.cashflowExposureRows[index].openEditForSelling = true;\r\n                this.errrMsgForBuyingAndSelling = \"Maximum amount allowed is 100,000,000\";\r\n            } else {\r\n                const formattedValue = this.valueWithComma(rawSellingValue, 2);\r\n                this.cashflowExposureRows[index].selling = formattedValue !== false ? formattedValue : '';\r\n                this.cashflowExposureRows[index].totalNetValue = sellingNumber - parseFloat(this.cashflowExposureRows[index].buying.toString()?.replace(/\\,/g, '') || '0');\r\n\r\n                this.cashflowExposureRows[index].errMsgForsellingFlag = false;\r\n                this.cashflowExposureRows[index].openEditForSelling = false;\r\n                this.cashflowExposureRows = [...this.cashflowExposureRows];\r\n            }\r\n        } else {\r\n            this.cashflowExposureRows[index].errMsgForsellingFlag = true;\r\n            this.cashflowExposureRows = [...this.cashflowExposureRows];\r\n            this.errrMsgForBuyingAndSelling = \"Please enter only 0-9 numbers\";\r\n        }\r\n    }\r\n  }\r\n\r\n  clearSellingZeroValue(element: any, index: any) {\r\n    this.sellingValueForedit = element.selling == \"0\" ? '' : this.valueWithComma(this.cashflowExposureRows[index].selling, 2);\r\n  }\r\n\r\n  editBuying(element: any, index: any) {\r\n    this.openEditBuyingIndex = index;\r\n    this.cashflowExposureRows[index].openEditForBuying = true\r\n    this.buyingValueForedit = this.valueWithComma(element?.buying, 2);\r\n    this.cashflowExposureRows[index].errMsgForbuyingFlag = false\r\n    this.cashflowExposureRows[index].openEditForSelling = false\r\n    delete this.errrMsgForBuyingAndSelling\r\n    this.cashflowExposureRows = [...this.cashflowExposureRows]\r\n  }\r\n\r\n  ClearBuyingZeroValue(element: any, index: any) {\r\n    this.buyingValueForedit = element.buying == \"0\" ? '' : this.valueWithComma(element?.buying, 2);\r\n  }\r\n\r\n  cancelEditBuying(element: any, index: any) {\r\n    this.cashflowExposureRows[index].openEditForBuying = false\r\n    this.cashflowExposureRows = [...this.cashflowExposureRows]\r\n  }\r\n  saveEditBuying(element: any, index: any) {\r\n    this.addRowBlinkIndex = -1;\r\n    if (this.buyingValueForedit === '') {\r\n        this.cashflowExposureRows[index].errMsgForbuyingFlag = true;\r\n        this.cashflowExposureRows[index].openEditForBuying = true;\r\n        this.cashflowExposureRows = [...this.cashflowExposureRows];\r\n        this.errrMsgForBuyingAndSelling = \"Please enter only 0-9 numbers\";\r\n    } else {\r\n        const rawBuyingValue = this.buyingValueForedit.replace(/\\,/g, '');\r\n        const buyingNumber = parseFloat(rawBuyingValue);\r\n\r\n        const regex = /^\\d*\\.?\\d*$/;\r\n\r\n        if (regex.test(rawBuyingValue)) {\r\n            if (buyingNumber > 100000000) {\r\n                this.cashflowExposureRows[index].errMsgForbuyingFlag = true;\r\n                this.cashflowExposureRows[index].openEditForBuying = true;\r\n                this.errrMsgForBuyingAndSelling = \"Maximum amount allowed is 100,000,000\";\r\n            } else {\r\n                const formattedValue = this.valueWithComma(rawBuyingValue, 2);\r\n                this.cashflowExposureRows[index].buying = formattedValue !== false ? formattedValue : '';\r\n                this.cashflowExposureRows[index].totalNetValue = buyingNumber - parseFloat(this.cashflowExposureRows[index].selling.toString()?.replace(/\\,/g, ''));\r\n\r\n                this.cashflowExposureRows[index].errMsgForbuyingFlag = false;\r\n                this.cashflowExposureRows[index].openEditForBuying = false;\r\n                this.cashflowExposureRows = [...this.cashflowExposureRows];\r\n            }\r\n        } else {\r\n            this.cashflowExposureRows[index].errMsgForbuyingFlag = true;\r\n            this.cashflowExposureRows = [...this.cashflowExposureRows];\r\n            this.errrMsgForBuyingAndSelling = \"Please enter only 0-9 numbers\";\r\n        }\r\n    }\r\n  }\r\n\r\n  onSwitchToggle(event?: any, element?: any, index?: any) {\r\n    this.cashflowExposureRows[index].disabledColumn = !this.cashflowExposureRows[index].disabledColumn;\r\n    this.cashflowExposureRows[index].postPoneFlag = false;\r\n    this.cashflowExposureRows[index].postPoneInactiveFlag = event.checked ? false : true;\r\n    this.cashflowExposureRows[index].openEditForBuying = false\r\n    this.cashflowExposureRows[index].openEditForSelling = false\r\n    this.cashflowExposureRows[index].buying =  this.cashflowExposureRows[index].disabledColumn ? '0' : this.buyingFlag ? this.monthlyExposureObject.monthlyAmount.toString() : '0';\r\n    this.cashflowExposureRows[index].selling = this.cashflowExposureRows[index].disabledColumn ? '0' : !this.buyingFlag ? this.monthlyExposureObject.monthlyAmount.toString() : '0';\r\n    this.cashflowExposureRows[index].totalNetValue = this.cashflowExposureRows[index].disabledColumn ? 0 : \r\n      parseFloat(this.cashflowExposureRows[index].selling.toString().replace(/,/g, '')) - \r\n      parseFloat(this.cashflowExposureRows[index].buying.toString().replace(/,/g, ''));\r\n    this.cashflowExposureRows = [...this.cashflowExposureRows]\r\n  }\r\n\r\n  formatValue(event: Event, valueType: 'sellingValueForedit' | 'buyingValueForedit'): void {\r\n    const input = event.target as HTMLInputElement;\r\n    let value = input.value.replace(/,/g, '');\r\n    this.maxLengthError = false;\r\n    if (value === '') {\r\n      this[valueType] = '0';\r\n      return;\r\n    }\r\n    if (value.includes('.')) {\r\n      const [integerPart, decimalPart] = value.split('.');\r\n      if (decimalPart.length > 2) {\r\n        value = integerPart + '.' + decimalPart?.slice(0, 2);\r\n      }\r\n    }\r\n    const actualNumber = parseFloat(value);\r\n    if (!isNaN(actualNumber)) {\r\n      this[valueType] = actualNumber.toLocaleString('en-US', { maximumFractionDigits: 2 });\r\n    }\r\n  }\r\n\r\n  restrictLength(event: KeyboardEvent): void {\r\n    const input = event.target as HTMLInputElement;\r\n    const valueWithoutCommas = input.value.replace(/,/g, '');\r\n    const cursorPosition = input.selectionStart;\r\n    const parts = valueWithoutCommas.split('.');\r\n    const integerPart = parts[0];\r\n    const decimalPart = parts[1] || '';\r\n\r\n    if (event.key === '.' && valueWithoutCommas.includes('.')) {\r\n      event.preventDefault();\r\n    }\r\n\r\n    if (valueWithoutCommas.includes('.') && cursorPosition! > valueWithoutCommas.indexOf('.') && decimalPart.length >= 2 && event.key !== 'Backspace' && event.key !== 'Delete') {\r\n      event.preventDefault();\r\n    }\r\n\r\n    if (!/^[0-9.]$/.test(event.key) && event.key !== 'Backspace' && event.key !== 'Delete' && !event.key.includes('Arrow')) {\r\n      event.preventDefault();\r\n    }\r\n  }\r\n\r\n  preventDecimalValue(event: KeyboardEvent) {\r\n    if (event.key === '.') {\r\n      event.preventDefault();\r\n      return false;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  clearInput(number: any) {\r\n    if (number == 1) {\r\n      this.buyingValueForedit = \"\"\r\n    }\r\n    if (number == 2) {\r\n      this.sellingValueForedit = \"\"\r\n    }\r\n  }\r\n\r\n  addOneMore() {\r\n    this.monthlyPeriod++\r\n    this.tempcashflowExposureRows = this.cashflowExposureRows;\r\n    this.cashflowExposureRows = [];\r\n    this.addRowBlinkIndex = -1;\r\n    this.isCurrentMonthIncrement = true;\r\n    this.getNext12MonthNamesWithYear(this.monthlyPeriod);\r\n    this.cashflowExposureRows?.splice(0, this.tempcashflowExposureRows?.length);\r\n    this.cashflowExposureRows = [...this.tempcashflowExposureRows, ...this.cashflowExposureRows]\r\n    // this.cashflowExposureRows[this.cashflowExposureRows.length - 1].blinkRowIndex = this.cashflowExposureRows.length - 1;\r\n  }\r\n\r\n  getNext12MonthNamesWithYear(monthlyPeriod: any) {\r\n    var now = new Date();\r\n    var month = now.getMonth();\r\n    var year = now.getFullYear();\r\n    var todayDate = now.getDate();\r\n\r\n    var names = this.staticMonthNames = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun',\r\n      'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\r\n    var res = [];\r\n\r\n    for (var i = 0; i < monthlyPeriod; ++i) {\r\n      let buyingValueRaw: any = this.buyingFlag ? this.monthlyExposureObject.monthlyAmount : \"0\";\r\n      let sellingValueRaw: any = this.buyingFlag ? \"0\" : this.monthlyExposureObject.monthlyAmount;\r\n      let buyingValue: number = parseFloat(buyingValueRaw.toString().replace(/,/g, '')) || 0;\r\n      let sellingValue: number = parseFloat(sellingValueRaw.toString().replace(/,/g, '')) || 0;\r\n      let totalNetValueNumber = sellingValue - buyingValue;\r\n      let totalNetValue = this.valueWithComma(totalNetValueNumber, 2);\r\n      let getMonthNumberFromName = new Date(`${names[month]} 1, ${year}`).getMonth() + 1;\r\n      let lastDayDD = new Date(year, getMonthNumberFromName, 0).getDate();\r\n\r\n      const startDate = new Date(`${names[month]} 1, ${year}`);\r\n      const endDate = new Date(`${names[month]} ${lastDayDD}, ${year}`);\r\n\r\n      const midDayDD = new Date((startDate.getTime() + endDate.getTime()) / 2);\r\n      let monthFormate: any = month + 1\r\n      \r\n      const newElement: any = {\r\n        month: this.cashflowExposureRows[i]?.month ? this.cashflowExposureRows[i]?.month : names[month],\r\n        year: this.cashflowExposureRows[i]?.year ? this.cashflowExposureRows[i]?.year : year,\r\n        buying: this.valueWithComma(this.cashflowExposureRows[i]?.buying ? this.cashflowExposureRows[i]?.buying : buyingValue, 2),\r\n        selling: this.valueWithComma(this.cashflowExposureRows[i]?.selling ? this.cashflowExposureRows[i]?.selling : sellingValue, 2),\r\n        totalNetValue: this.cashflowExposureRows[i]?.totalNetValue ? this.cashflowExposureRows[i]?.totalNetValue : totalNetValue,\r\n        lastDay: this.cashflowExposureRows[i]?.lastDay ? this.cashflowExposureRows[i]?.lastDay : lastDayDD,\r\n        midDay: this.cashflowExposureRows[i]?.midDay ? this.cashflowExposureRows[i]?.midDay : midDayDD.getDate(),\r\n        openEditForBuying: this.cashflowExposureRows[i]?.openEditForBuying ? this.cashflowExposureRows[i]?.openEditForBuying : false,\r\n        openEditForSelling: this.cashflowExposureRows[i]?.openEditForSelling ? this.cashflowExposureRows[i]?.openEditForSelling : false,\r\n        errMsgForbuyingFlag: this.cashflowExposureRows[i]?.errMsgForbuyingFlag ? this.cashflowExposureRows[i]?.errMsgForbuyingFlag : false,\r\n        errMsgForsellingFlag: this.cashflowExposureRows[i]?.errMsgForsellingFlag ? this.cashflowExposureRows[i]?.errMsgForsellingFlag : false,\r\n        postPoneFlag: this.cashflowExposureRows[i]?.postPoneFlag ? this.cashflowExposureRows[i]?.postPoneFlag : false,\r\n        postPoneInactiveFlag: this.cashflowExposureRows[i]?.postPoneInactiveFlag ? this.cashflowExposureRows[i]?.postPoneInactiveFlag : true,\r\n        postPoneMonth: this.cashflowExposureRows[i]?.postPoneMonth ? this.cashflowExposureRows[i]?.postPoneMonth : names[month],\r\n        monthNumber: month,\r\n      };\r\n      if (now.getMonth() == month) {\r\n        if (this.isCurrentMonthIncrement) {\r\n          newElement['cashflowDate'] = 15;\r\n        }\r\n        if (!this.isCurrentMonthIncrement) {\r\n          if (todayDate <= 15) {\r\n            newElement['cashflowDate'] = 15;\r\n          } else {\r\n            newElement['cashflowDate'] = todayDate;\r\n          }\r\n        }\r\n      } else {\r\n        newElement['cashflowDate'] = 15;\r\n      }\r\n      newElement['Month'] = `${newElement['cashflowDate'].toString().length == 1 ? \"0\" + newElement['cashflowDate'] : newElement['cashflowDate']}/${monthFormate?.toString().length == 1 ? \"0\" + monthFormate : monthFormate}/${year}`,\r\n        newElement['dayOfExpity'] = `${newElement['cashflowDate'].toString().length == 1 ? \"0\" + newElement['cashflowDate'] : newElement['cashflowDate']}`,\r\n\r\n        this.cashflowExposureRows = [...this.cashflowExposureRows, newElement];\r\n      res.push(names[month] + ' ' + year);\r\n      if (++month === 12) {\r\n        month = 0;\r\n        ++year;\r\n      }\r\n    }\r\n    return res;\r\n  }\r\n  \r\n  exposureDetailsNextStep() {\r\n    this.router.navigate(['/dashboard']);\r\n    window.scrollTo({ top: 0, behavior: 'auto' });\r\n  }\r\n\r\n  backToPrevious() {\r\n    this.stepper.previous();\r\n  }\r\n}\r\n",
            "styleUrl": "./cashflow-exposure-details.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "hedgeDataService",
                        "type": "HedgingDataService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 116,
                "jsdoctags": [
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "hedgeDataService",
                        "type": "HedgingDataService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<div class=\"risk-manager-final-step\" id=\"riskManagerFinalStep\">\r\n    <div class=\"cash-flow-wrapper\">\r\n        <h2 class=\"cash-title\">\r\n            <div class=\"img-wrapper\">\r\n                <img src=\"images/money-bag-cashflow.svg\" alt=\"money-bag\" class=\"bag-img\" />\r\n            </div> Cash flow exposure\r\n        </h2>\r\n        <div class=\"hedging-wrap\">\r\n            <button class=\"hedging-btn\">How our hedging works? <img container=\"body\" [ngbTooltip]=\"sellingToolTip\" placement=\"top-right\"\r\n                tooltipClass=\"risk-step3-tooltip--rm\"\r\n                    src=\"images/hedging-info.svg\"></button>\r\n            <ng-template #sellingToolTip>\r\n                You are at risk when {{monthlyExposureObject.toCurrency}} goes down because you will get fewer\r\n                {{monthlyExposureObject.baseCurrency}} when\r\n                converting {{monthlyExposureObject.toCurrency}}, reducing your income\r\n            </ng-template>\r\n            <ng-template #cashflowDate>\r\n                You can select in which day you want the your monthly exposure will be expired\r\n            </ng-template>\r\n            <ng-template #total>\r\n                Total is calculated by subtracting buying from selling\r\n            </ng-template>\r\n            <ng-template #disableMonth>\r\n                You can select if you want to set disable this month, and it will be set to 0\r\n            </ng-template>\r\n        </div>\r\n    </div>\r\n    <div class=\"risk-exposer-wrap\">\r\n        <app-monthly-exposure-details [monthlyExposureObject]=\"monthlyExposureObject\" [monthlyPeriod]=\"monthlyPeriod\"></app-monthly-exposure-details>\r\n        <div class=\"exposer-table-wrap\">\r\n            <div class=\"exposer-table\">\r\n                <div class=\"overlay-wrap\">\r\n                    <table mat-table [dataSource]=\"cashflowExposureRows\" class=\"mat-elevation-z8\">\r\n                        <ng-container matColumnDef=\"Month\" class=\"exposer-month\">\r\n                            <th mat-header-cell *matHeaderCellDef> Cashflow date <img\r\n                                src=\"images/help-circle-icon-black.svg\" [ngbTooltip]=\"cashflowDate\"\r\n                                placement=\"top-left\" tooltipClass=\"risk-step3-tooltip--rm\">\r\n                            </th>\r\n                            <td mat-cell *matCellDef=\"let element; let i = index\" style=\"position: relative;\"\r\n                                [class.disabledColumn]=\"element.disabledColumn\">\r\n                                <span class=\"date-and-expand\" (click)=\"chooseCashflowDate(i, element?.year, element?.month, element?.cashflowDate)\">\r\n                                    <span>{{element?.cashflowDate}} <b>{{element?.month}}</b> {{element?.year}}</span>\r\n                                    <mat-icon>expand_more</mat-icon>\r\n                                    <span class=\"m-date-tooltip-wrap\" *ngIf=\"i === 0\" id=\"cashflowDateColumn\"\r\n                                        #cashflowDateColumn [ngbTooltip]=\"cashflowDateTooltip\" [autoClose]=\"false\"\r\n                                        #riskAlert=\"ngbTooltip\" tooltipClass=\"cash-flow-date-tooltip\"\r\n                                        placement=\"top-left\" triggers=\"manual\">\r\n                                        <ng-template #cashflowDateTooltip>\r\n                                            <div id=\"riskPopup\" class=\"cash-flow-date-wrapper\">\r\n                                                <div class=\"info-container\">\r\n                                                    <div class=\"info-container-items\">\r\n                                                        <div class=\"title\">Set cash flow dates</div>\r\n                                                        <div class=\"desc\">You can edit the day of the exposure of each month</div>\r\n                                                        <div class=\"try-btn d-flex\">\r\n                                                            <span class=\"step-of\">Step 1 of 4</span>\r\n                                                            <button class=\"try-btn-text\" (click)=\"chooseCashflowDate(i, element?.year, element?.month, element?.cashflowDate)\">Edit</button>\r\n                                                        </div>\r\n                                                    </div>\r\n                                                </div>\r\n                                            </div>\r\n                                        </ng-template>\r\n                                    </span>\r\n\r\n                                    <mat-form-field class=\"monthly-date\">\r\n                                        <input matInput [matDatepicker]=\"datepicker\" [(ngModel)]=\"element.date\" />\r\n                                        <mat-datepicker-toggle matIconSuffix [for]=\"datepicker\"></mat-datepicker-toggle>\r\n                                        <mat-datepicker #datepicker panelClass=\"cashflow-date-calendar-cd\">\r\n                                          <mat-datepicker-actions>\r\n                                            <button mat-button matDatepickerCancel class=\"cancel-cdc\">Cancel</button>\r\n                                            <button mat-raised-button matDatepickerApply class=\"set-cdc\" (click)=\"setMonthlyDate(i,element)\">Set</button>\r\n                                            <button mat-button matDatepickerCancel class=\"close-cdc\"><img src=\"images/close-btn-cashflow.svg\"></button>\r\n                                          </mat-datepicker-actions>\r\n                                        </mat-datepicker>\r\n                                    </mat-form-field>\r\n                                </span>\r\n                            </td>\r\n                        </ng-container>\r\n\r\n                        <ng-container matColumnDef=\"Selling\" class=\"exposer-selling\">\r\n                            <th mat-header-cell *matHeaderCellDef> Selling </th>\r\n                            <td mat-cell *matCellDef=\"let element; let i = index\"\r\n                                [class.disabledColumn]=\"element.disabledColumn\">\r\n                                <div class=\"buying-price\" (click)=\"editSelling(element , i)\">\r\n                                    {{monthlyExposureObject.sign}}{{valueWithComma(element?.selling, 2)}}\r\n                                </div>\r\n                                <button (click)=\"editSelling(element , i)\" class=\"edit-exposer\">\r\n                                    <img src=\"images/edit-exposer-icon.svg\"></button>\r\n                                <div *ngIf=\"element?.openEditForSelling && openEditSellingIndex === i\"\r\n                                    class=\"edit-exposer-wrap\"\r\n                                    [ngClass]=\"element?.errMsgForsellingFlag ? 'error-input' : ''\">\r\n                                    <div class=\"edit-inner\">\r\n                                        <div class=\"input-wrap\">\r\n                                            <span>{{monthlyExposureObject.sign}}</span>\r\n                                            <input type=\"text\" id=\"sellEdit__price{{i}}\"\r\n                                                [(ngModel)]=\"sellingValueForedit\"\r\n                                                class=\"edit-price\" appOnlyNumbers\r\n                                                [maxLength]=\"14\"\r\n                                                (click)=\"clearSellingZeroValue(element,i)\"\r\n                                                (input)=\"formatValue($event, 'sellingValueForedit')\"\r\n                                                (keypress)=\"restrictLength($event)\"\r\n                                                (keydown)=\"preventDecimalValue($event)\">\r\n                                                \r\n                                            <button class=\"clear-input\" (click)=\"clearInput(2)\"\r\n                                                id=\"clearSellEdit__btn{{i}}\"><img\r\n                                                    src=\"images/clear_input.svg\"></button>\r\n                                        </div>\r\n                                        <div class=\"edit-e-option\">\r\n                                            <button class=\"cancel-btn\" id=\"cancelSellEdit__btn{{i}}\"\r\n                                            (click)=\"cancelEditSelling(element , i)\"> Cancel </button>\r\n                                            <button class=\"save-btn\" id=\"saveSellEdit__btn{{i}}\"\r\n                                            (click)=\"saveEditSelling(element , i)\"> Save </button>\r\n                                        </div>\r\n                                    </div>\r\n                                    <div class=\"warning-error\" *ngIf=\"element?.errMsgForsellingFlag\"><img\r\n                                            src=\"images/warning-circle-icon.svg\"> {{errrMsgForBuyingAndSelling}}\r\n                                    </div>\r\n                                </div>\r\n                            </td>\r\n                        </ng-container>\r\n\r\n                        <ng-container matColumnDef=\"Buying\" class=\"exposer-buying\">\r\n                            <th mat-header-cell *matHeaderCellDef> Buying </th>\r\n                            <td mat-cell *matCellDef=\"let element; let i = index\" class=\"buying-cell\"\r\n                                [class.disabledColumn]=\"element.disabledColumn\">\r\n                                <div class=\"buying-price\" (click)=\"editBuying(element , i)\">\r\n                                    {{monthlyExposureObject.sign}}{{ valueWithComma(element?.buying, 2) }}\r\n                                </div>\r\n                                <button class=\"edit-exposer\" (click)=\"editBuying(element , i)\"\r\n                                    [ngbTooltip]=\"editBuyAmountCashflowTooltip\" [autoClose]=\"false\"\r\n                                    #riskAlert=\"ngbTooltip\" tooltipClass=\"risk-tooltip\" placement=\"top-left\"\r\n                                    triggers=\"manual\"><img src=\"images/edit-exposer-icon.svg\"></button>\r\n\r\n                                <ng-template #editBuyAmountCashflowTooltip>\r\n                                    <div id=\"riskPopup\" class=\"risk-manager-wrapper\">\r\n                                        <button class=\"close_tooltip\"></button>\r\n                                        <div class=\"info-container\">\r\n                                            <div class=\"info-container-items\">\r\n                                                <div class=\"title\">Cash flow amounts</div>\r\n                                                <div class=\"desc\">You can edit both buying & selling amounts\r\n                                                </div>\r\n                                                <div class=\"try-btn d-flex\" style=\"justify-content: space-between;\">\r\n                                                    <span class=\"step-of\">Step 2 of 4</span>\r\n                                                    <button class=\"try-btn-text\" (click)=\"chooseCashflowDate(i, element?.year, element?.month, element?.cashflowDate)\">Edit</button>\r\n                                                </div>\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                </ng-template>\r\n                                <div *ngIf=\"element?.openEditForBuying && openEditBuyingIndex === i\"\r\n                                    class=\"edit-exposer-wrap\"\r\n                                    [ngClass]=\"element?.errMsgForbuyingFlag ? 'error-input' : ''\">\r\n                                    <div class=\"edit-inner\">\r\n                                        <div class=\"input-wrap\">\r\n                                            <span>{{monthlyExposureObject.sign}}</span>\r\n                                            <input type=\"text\" id=\"buyEdit__price{{i}}\"\r\n                                                class=\"edit-price\" appOnlyNumbers [maxLength]=\"14\"\r\n                                                [(ngModel)]=\"buyingValueForedit\"\r\n                                                (click)=\"ClearBuyingZeroValue(element,i)\"\r\n                                                (input)=\"formatValue($event, 'buyingValueForedit')\"\r\n                                                (keypress)=\"restrictLength($event)\"\r\n                                                (keydown)=\"preventDecimalValue($event)\"\r\n                                            >\r\n                                            <button class=\"clear-input\" (click)=\"clearInput(1)\"\r\n                                                id=\"clearBuyEdit__btn{{i}}\"><img\r\n                                                    src=\"images/clear_input.svg\"></button>\r\n                                        </div>\r\n                                        <div class=\"edit-e-option\">\r\n                                            <button class=\"cancel-btn\" id=\"cancelBuyEdit__btn{{i}}\"\r\n                                            (click)=\"cancelEditBuying(element , i)\"> Cancel </button>\r\n                                            <button class=\"save-btn\" id=\"saveBuyEdit__btn{{i}}\"\r\n                                            (click)=\"saveEditBuying(element , i)\"> Save </button>\r\n                                        </div>\r\n                                    </div>\r\n                                    <div *ngIf=\"element?.errMsgForbuyingFlag\" class=\"warning-error\"><img\r\n                                            src=\"images/warning-circle-icon.svg\"> {{errrMsgForBuyingAndSelling}}\r\n                                    </div>\r\n                                </div>\r\n                            </td>\r\n                        </ng-container>\r\n                        <ng-container matColumnDef=\"TotalNet\" class=\"total-net\">\r\n                            <th mat-header-cell *matHeaderCellDef> Total <img\r\n                                    src=\"images/help-circle-icon-black.svg\" [ngbTooltip]=\"total\"\r\n                                    placement=\"top-left\" tooltipClass=\"risk-step3-tooltip--rm\"></th>\r\n                            <td mat-cell *matCellDef=\"let element\" class=\"total-price\"\r\n                                [class.disabledColumn]=\"element.disabledColumn\"> \r\n                                <span [ngClass]=\"element?.totalNetValue?.toString().includes('-') ? 'negative-total' : 'positive-total'\">\r\n                                    {{ element?.totalNetValue?.toString().includes('-') ? '-' : '+'}}{{monthlyExposureObject.sign}}{{valueWithComma(element?.totalNetValue?.toString().replace('-', ''), 2)}}\r\n                                </span>\r\n                            </td>\r\n                        </ng-container>\r\n                        <ng-container matColumnDef=\"DisableMonth\" class=\"postpone\">\r\n                            <th mat-header-cell *matHeaderCellDef>Disable month <img\r\n                                    src=\"images/help-circle-icon-black.svg\" [ngbTooltip]=\"disableMonth\"\r\n                                    placement=\"top-right\" tooltipClass=\"risk-step3-tooltip--rm\"></th>\r\n                            <td mat-cell *matCellDef=\"let element; let i = index\">\r\n                                <mat-slide-toggle (change)=\"onSwitchToggle($event,element, i)\">\r\n                                </mat-slide-toggle>\r\n                            </td>\r\n                        </ng-container>\r\n                        <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\r\n                        <tr mat-row *matRowDef=\"let row; columns: displayedColumns; let i = index;\"\r\n                            [ngClass]=\"((row.postPoneFlag) || (row.openEditForBuying) || (row.openEditForSelling) ? 'active' : '') || (i === row.blinkRowIndex ? 'blink-row' : '')\">\r\n                        </tr>\r\n                    </table>\r\n                </div>\r\n            </div>\r\n            <div class=\"add-rows-wrap\">\r\n                <button class=\"add-btn six-month\" id=\"plusMonthExposureBtn__i0\"\r\n                    *ngIf=\"monthlyPeriod == 6\" (click)=\"addSixMonth()\"><i class=\"plus-icon\"></i>Next\r\n                    6\r\n                    months</button>\r\n                <button class=\"add-btn\" (click)=\"addOneMore()\" id=\"plusMonthExposureBtn__i1\"\r\n                    *ngIf=\"monthlyPeriod < 24 && monthlyPeriod > 6\"><i class=\"plus-icon\"></i></button>\r\n                <span class=\"error-message limit-reached\" *ngIf=\"monthlyPeriod > 23\">You have reached the limit</span>\r\n            </div>\r\n            <span *ngIf=\"maxLengthError\" class=\"error-message\"> Maximum amount allowed is\r\n                {{monthlyExposureObject.sign}}100,000,000 </span>\r\n            <div class=\"exposer-btns\">\r\n                <button class=\"back-btn\" (click)=\"backToPrevious()\" id=\"backStep3Btn__i4\"> Back\r\n                </button>\r\n                <button (click)=\"exposureDetailsNextStep()\" class=\"continue-btn\"> Save & continue <img src=\"images/next-btn-arrow.svg\"></button>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>"
        },
        {
            "name": "CashflowExposureStep1Component",
            "id": "component-CashflowExposureStep1Component-0b0de39ac1ae636bc240098cfd25a8724fcc070ea1bde7d791047de56c11e68c9de180b05ef567c4ae264686dad73a04244f21885fe59dec77a7af5dcc77aeea",
            "file": "src/app/risk-dashboard/components/cashflow-exposure/components/cashflow-exposure-step1/cashflow-exposure-step1.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-cashflow-exposure-step1",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./cashflow-exposure-step1.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "actionWords",
                    "defaultValue": "['Buy', 'Sell', 'Pay', 'Convert']",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "string[]",
                    "decorators": []
                },
                {
                    "name": "heading",
                    "defaultValue": "'Introducing risk manager'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "introText",
                    "defaultValue": "'Introducing ABCM™ risk manager, the tool that can protect your cash flow from market volatility'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "stepper",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "MatStepper",
                    "decorators": []
                },
                {
                    "name": "subHeading",
                    "defaultValue": "'Your cash flow is at'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "cashflowExposureNextStep",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { Component, Input } from '@angular/core';\r\nimport { MatStepper } from '@angular/material/stepper';\r\n\r\n@Component({\r\n  selector: 'app-cashflow-exposure-step1',\r\n  imports: [CommonModule],\r\n  templateUrl: './cashflow-exposure-step1.component.html',\r\n  styleUrl: './cashflow-exposure-step1.component.scss'\r\n})\r\nexport class CashflowExposureStep1Component {\r\n  @Input() stepper!: MatStepper;\r\n  constructor() { }\r\n  @Input() heading: string = 'Introducing risk manager';\r\n  @Input() subHeading: string = 'Your cash flow is at';\r\n  @Input() actionWords: string[] = ['Buy', 'Sell', 'Pay', 'Convert'];\r\n  @Input() introText: string = 'Introducing ABCM™ risk manager, the tool that can protect your cash flow from market volatility';\r\n\r\n  cashflowExposureNextStep() {\r\n    this.stepper.next();\r\n  }\r\n}\r\n",
            "styleUrl": "./cashflow-exposure-step1.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 12
            },
            "extends": [],
            "templateData": "<div class=\"risk-intro-wrap\">\r\n    <div class=\"risk-banner-wrap\">\r\n        <img class=\"banner-right-img\" src=\"images/globe-full.svg\" alt=\"{{heading}}\">\r\n        <div class=\"banner-info\">\r\n            <div class=\"intro-head-title\"><span>{{heading}}</span></div>\r\n            <h3 class=\"intro-title\"><span>When you,</span>\r\n                <div class=\"animate-title\">\r\n                    <ul class=\"fliptext\">\r\n                        <li *ngFor=\"let word of actionWords\">{{ word }}</li>\r\n                    </ul>\r\n                </div>\r\n            </h3>\r\n            <h4 class=\"intro-sub-title\">{{subHeading}} <span>risk.</span></h4>\r\n            <p>{{introText}}</p>\r\n            <button class=\"start-btn\" id=\"rmGetStarted_btn\" (click)=\"cashflowExposureNextStep()\">Get Started</button>\r\n        </div>\r\n    </div>\r\n    <div class=\"intro-details\">\r\n        <h4 class=\"work-title\">How it works</h4>\r\n        <div class=\"item-wrap\">\r\n            <div class=\"intro-item s-1\">\r\n                <div class=\"img-sec\">\r\n                    <img src=\"images/risk-step-select-currency.png\" alt=\"Select currencies\">\r\n                </div>\r\n                <div class=\"item-info\">\r\n                    <h4 class=\"item-title\">Select currencies</h4>\r\n                    <p class=\"desc\">Select the exposed currency and specify if you are buying or selling.</p>\r\n                    <div class=\"link-sec\">\r\n                        <button class=\"item-link\" #rmSelectCurrency id=\"rmSelectCurrency\"\r\n                            (click)=\"cashflowExposureNextStep()\">Select currencies</button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div class=\"intro-item s-2\">\r\n                <div class=\"img-sec\">\r\n                    <img src=\"images/risk-step-set-amount-img.png\" alt=\"Set an amount\">\r\n                </div>\r\n                <div class=\"item-info\">\r\n                    <h4 class=\"item-title\">Set an amount</h4>\r\n                    <p class=\"desc\">Enter the monthly estimated exposure amount.</p>\r\n                    <div class=\"link-sec\">\r\n                        <button class=\"item-link\" #rmSetAmount id=\"rmSetAmount\"\r\n                            (click)=\"cashflowExposureNextStep()\">Let's start</button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div class=\"intro-item s-3\">\r\n                <div class=\"img-sec\">\r\n                  <img src=\"images/risk-step-table-img.png\" alt=\"Manage exposure\">\r\n                </div>\r\n                <div class=\"item-info\">\r\n                  <h4 class=\"item-title\">Manage exposure</h4>\r\n                  <p class=\"desc\">Identify risks, hedge, and monitor to stabilize and protect your business.</p>\r\n                  <div class=\"link-sec\">\r\n                  <button class=\"item-link\" #rmManageExposure id=\"rmManageExposure\" (click)=\"cashflowExposureNextStep()\" >Let's start</button>\r\n                  </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>"
        },
        {
            "name": "CashflowExposureStep2Component",
            "id": "component-CashflowExposureStep2Component-f90590a6e659d2717758853854cd54597e4824e57cb2d4f1d508f7b6ee1d954495a7fed933e6197f10fca861f50d41a68dd70058ce38bf4c56b2ef01a167cbb4",
            "file": "src/app/risk-dashboard/components/cashflow-exposure/components/cashflow-exposure-step2/cashflow-exposure-step2.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-cashflow-exposure-step2",
            "styleUrls": [
                "./cashflow-exposure-step2.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./cashflow-exposure-step2.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "monthlyPeriod",
                    "defaultValue": "12",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "stepper",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "MatStepper",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "amountValue",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "apiErrorMessage",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "buySellCurrRes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 46
                },
                {
                    "name": "BuySellEnum",
                    "defaultValue": "BuySell",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "cashFlowExposureForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "currencyNotMatch",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "defaultCurrencyCode",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "defaultCurrencydata",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "exposureRequired",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 45
                },
                {
                    "name": "globalWalletData",
                    "defaultValue": "[...walletData]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "isCreateMonthlyTable",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "isDefaultCuurncyILS",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "isDisplayAmountExplosure",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "isDisplayAmountValidationMsg",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "isFormSubmit",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "isSelectedCurrency",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "maxLengthError",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "searchControl",
                    "defaultValue": "new FormControl('')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "selectedFromCurrency",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 44
                },
                {
                    "name": "submitFirstStep",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "toCurrencyObject",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 47
                },
                {
                    "name": "walletData",
                    "defaultValue": "[...walletData]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 34
                }
            ],
            "methodsClass": [
                {
                    "name": "checkCurrencyValue",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 187,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "closeAmountExplosure",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 236,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "closeFormSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 223,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "formatNumber",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 129,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getMonthlyAmountvalue",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 183,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getMonthValue",
                    "args": [
                        {
                            "name": "event",
                            "type": "MatSelectChange",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 149,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "MatSelectChange",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "gettoCurrencyvalue",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 179,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "goToPrevious",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 310,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "initializeCashflowExposureForm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 162,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onDropdownOpen",
                    "args": [
                        {
                            "name": "event",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 193,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onToCurrencyChange",
                    "args": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 174,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "preventDecimalValue",
                    "args": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 154,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "restrictLength",
                    "args": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 106,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "selectBuySellCurrency",
                    "args": [
                        {
                            "name": "selectedCurrency",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 204,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "selectedCurrency",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "sendAmountValue",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 240,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setAmountWithTwoFraction",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 87,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setupDefaultCurrency",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 78,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setupSearchFilter",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 91,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "submitCashFlowExposureForm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 209,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "submitFormWithoutBuyORSell",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 228,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                },
                {
                    "name": "MatProgressBarModule",
                    "type": "module"
                },
                {
                    "name": "MatSelectModule",
                    "type": "module"
                },
                {
                    "name": "NgbTooltipModule",
                    "type": "module"
                },
                {
                    "name": "FormsModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { Component, Input, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormControl, FormsModule, ReactiveFormsModule, Validators } from '@angular/forms';\r\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\r\nimport { MatSelectChange, MatSelectModule } from '@angular/material/select';\r\nimport { walletData } from '../cashflow-exposure-data';\r\nimport { NgbTooltipModule } from '@ng-bootstrap/ng-bootstrap';\r\nimport { MatStepper } from '@angular/material/stepper';\r\nimport { HedgingDataService } from '../../../hedging-proposal/hedging-data.service';\r\n\r\nexport enum BuySell {\r\n  Buy = 1,\r\n  Sell = 2\r\n}\r\n@Component({\r\n  selector: 'app-cashflow-exposure-step2',\r\n  standalone: true,\r\n  imports: [CommonModule, ReactiveFormsModule, MatProgressBarModule, MatSelectModule, NgbTooltipModule, FormsModule],\r\n  templateUrl: './cashflow-exposure-step2.component.html',\r\n  styleUrls: ['./cashflow-exposure-step2.component.scss']\r\n})\r\n\r\nexport class CashflowExposureStep2Component implements OnInit {\r\n  @Input() stepper!: MatStepper;\r\n  @Input() monthlyPeriod: number = 12;\r\n  isCreateMonthlyTable = false;\r\n  cashFlowExposureForm: any;\r\n  isFormSubmit = false;\r\n  isDisplayAmountExplosure = false;\r\n  isDefaultCuurncyILS = true;\r\n  defaultCurrencydata: any;\r\n  currencyNotMatch = false;\r\n  submitFirstStep = false;\r\n  walletData = [...walletData];\r\n  globalWalletData = [...walletData];\r\n  searchControl = new FormControl('');\r\n  isSelectedCurrency: any;\r\n  isDisplayAmountValidationMsg = false;\r\n  apiErrorMessage = '';\r\n  maxLengthError = false;\r\n  amountValue:any = 0;\r\n  defaultCurrencyCode = '';\r\n  BuySellEnum: any = BuySell;\r\n  selectedFromCurrency: any = null;\r\n  exposureRequired!: boolean;\r\n  buySellCurrRes: any;\r\n  toCurrencyObject: any;\r\n  \r\n  constructor(private formBuilder: FormBuilder, private hedgeDataService: HedgingDataService) { }\r\n\r\n  ngAfterViewInit() {\r\n    setTimeout(() => {\r\n      this.cashFlowExposureForm.controls['fromCurrency'].setValue(this.defaultCurrencyCode);\r\n      this.cashFlowExposureForm.patchValue({ fromCurrency: this.defaultCurrencyCode });\r\n    }, 0);\r\n  }\r\n\r\n  ngOnInit() {\r\n    const defaultCurrency = this.walletData.find(c => c.defaultCurrency === true);\r\n    if (defaultCurrency) {\r\n      this.defaultCurrencyCode = defaultCurrency.code;\r\n      this.selectedFromCurrency = defaultCurrency;\r\n      this.defaultCurrencydata = defaultCurrency;\r\n    }\r\n    this.initializeCashflowExposureForm();\r\n    this.setupSearchFilter();\r\n    this.isSelectedCurrency = false;\r\n\r\n    this.cashFlowExposureForm.get('monthlyAmount')?.valueChanges.subscribe((res:any) => {\r\n      if (this.getMonthlyAmountvalue()) {\r\n        this.isDisplayAmountValidationMsg = false;\r\n        this.apiErrorMessage = '';\r\n        this.maxLengthError = false;\r\n      }\r\n    });\r\n  }\r\n\r\n  setupDefaultCurrency() {\r\n    const defaultCurrency = this.walletData.find(c => c.defaultCurrency === true);\r\n    if (defaultCurrency) {\r\n      this.defaultCurrencyCode = defaultCurrency.code;\r\n      this.selectedFromCurrency = defaultCurrency;\r\n      this.defaultCurrencydata = defaultCurrency;\r\n    }\r\n  }\r\n\r\n  setAmountWithTwoFraction(): void {\r\n    this.cashFlowExposureForm.controls['monthlyAmount'].setValue(this.amountValue);\r\n  }\r\n\r\n  setupSearchFilter() {\r\n    this.searchControl.valueChanges.subscribe((searchValue: string | null) => {\r\n      if (searchValue) {\r\n        const searchTerm = searchValue.toLowerCase();\r\n        this.walletData = this.globalWalletData.filter(\r\n          (currency: any) => \r\n            currency.code.toLowerCase().includes(searchTerm) || \r\n            currency.currencyName.toLowerCase().includes(searchTerm)\r\n        );\r\n      } else {\r\n        this.walletData = [...this.globalWalletData];\r\n      }\r\n    });\r\n  }\r\n\r\n  restrictLength(event: KeyboardEvent): void {\r\n    const input = event.target as HTMLInputElement;\r\n    const valueWithoutCommas = input.value.replace(/,/g, '');\r\n    const cursorPosition = input.selectionStart; // Track cursor position\r\n    const parts = valueWithoutCommas.split('.');\r\n    const decimalPart = parts[1] || '';\r\n\r\n    // Handle the case where user tries to add a second dot\r\n    if (event.key === '.' && valueWithoutCommas.includes('.')) {\r\n      event.preventDefault(); // Prevent multiple dots\r\n    }\r\n\r\n    // Restrict decimal part to two digits, but allow editing integer part\r\n    if (valueWithoutCommas.includes('.') && cursorPosition! > valueWithoutCommas.indexOf('.') && decimalPart.length >= 2 && event.key !== 'Backspace' && event.key !== 'Delete') {\r\n      event.preventDefault();\r\n    }\r\n\r\n    // Restrict invalid characters (letters, symbols except dot or digits)\r\n    if (!/^[0-9.]$/.test(event.key) && event.key !== 'Backspace' && event.key !== 'Delete' && !event.key.includes('Arrow')) {\r\n      event.preventDefault();\r\n    }\r\n  }\r\n\r\n  formatNumber(event: Event): void {\r\n    const input = event.target as HTMLInputElement;\r\n    let rawValue = input.value.replace(/,/g, '');\r\n  \r\n    if (!/^\\d*$/.test(rawValue)) {\r\n      rawValue = rawValue.replace(/\\D/g, '');\r\n    }\r\n  \r\n    const numericValue = parseInt(rawValue, 10);\r\n  \r\n    if (!isNaN(numericValue)) {\r\n      this.amountValue = numericValue.toLocaleString('en-US');\r\n      this.cashFlowExposureForm.controls['monthlyAmount'].setValue(this.amountValue);\r\n    } else {\r\n      this.amountValue = '';\r\n      this.cashFlowExposureForm.controls['monthlyAmount'].setValue('');\r\n    }\r\n  }\r\n  \r\n\r\n  getMonthValue(event: MatSelectChange): void {\r\n    this.monthlyPeriod = event.value;\r\n    console.log('this.monthlyPeriod',this.monthlyPeriod);\r\n  }\r\n\r\n  preventDecimalValue(event: KeyboardEvent) {\r\n    if (event.key === '.') {\r\n      event.preventDefault();\r\n      return false;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  initializeCashflowExposureForm() {\r\n    this.cashFlowExposureForm = this.formBuilder.group({\r\n      fromCurrency: [{value: this.defaultCurrencyCode}, Validators.required],\r\n      toCurrency: ['', Validators.required],\r\n      monthlyAmount: [0]\r\n    });\r\n\r\n    console.log('Form initialized with value:', this.cashFlowExposureForm.value);\r\n    console.log('From currency control:', this.cashFlowExposureForm.controls['fromCurrency']);\r\n\r\n  }\r\n\r\n  onToCurrencyChange(value: string) {\r\n    this.cashFlowExposureForm.patchValue({ toCurrency: value });\r\n    this.checkCurrencyValue();\r\n  }\r\n\r\n  gettoCurrencyvalue() {\r\n    return this.cashFlowExposureForm.controls['toCurrency'].value;\r\n  }\r\n\r\n  getMonthlyAmountvalue() {\r\n    return this.cashFlowExposureForm.controls['monthlyAmount'].value;\r\n  }\r\n\r\n  checkCurrencyValue() {\r\n    this.currencyNotMatch = this.defaultCurrencyCode === this.gettoCurrencyvalue();\r\n    this.isDisplayAmountExplosure = false;\r\n    this.isFormSubmit = false;\r\n  }\r\n\r\n  onDropdownOpen(event: boolean) {\r\n    if (event) {\r\n      this.walletData = [...this.globalWalletData];\r\n      this.searchControl.setValue('');\r\n    } else {\r\n      if (this.walletData && this.walletData.length === 0) {\r\n        this.walletData = [...this.globalWalletData];\r\n      }\r\n    }\r\n  }\r\n\r\n  selectBuySellCurrency(selectedCurrency: string) {\r\n    this.isSelectedCurrency = selectedCurrency;\r\n    this.exposureRequired = false;\r\n  }\r\n\r\n  submitCashFlowExposureForm() {\r\n    this.submitFirstStep = true;\r\n    if (this.cashFlowExposureForm.valid && !this.currencyNotMatch) {\r\n      this.isFormSubmit = true;\r\n      // this.isSelectedCurrency = true;\r\n      this.walletData.find((currency: any) => {\r\n        if (currency.code === this.gettoCurrencyvalue()) {\r\n          this.buySellCurrRes = currency;\r\n          console.log(this.buySellCurrRes,'toCurrencyObject')\r\n        }\r\n      })\r\n    }\r\n  }\r\n\r\n  closeFormSubmit() {\r\n    this.isFormSubmit = false;\r\n    this.submitFirstStep = false;\r\n  }\r\n\r\n  submitFormWithoutBuyORSell() { // Create explosure table next btn click (step 2)\r\n    \r\n    if (this.isSelectedCurrency && !this.exposureRequired) {\r\n      this.isDisplayAmountExplosure = true;\r\n    }\r\n    this.exposureRequired = !this.isSelectedCurrency ? true : false;\r\n  }\r\n\r\n  closeAmountExplosure() {\r\n    this.isDisplayAmountExplosure = false;\r\n  }\r\n\r\n  sendAmountValue() {\r\n    if (this.isSelectedCurrency) {\r\n      this.exposureRequired = false;\r\n  \r\n      if (this.amountValue == 0) {\r\n        this.cashFlowExposureForm.controls['monthlyAmount'].setValue('');\r\n        this.isDisplayAmountValidationMsg = true;\r\n        return;\r\n      }\r\n  \r\n      this.isCreateMonthlyTable = true;\r\n      const currencyPair = this.gettoCurrencyvalue() + '/' + this.selectedFromCurrency.code;\r\n      console.log('currencyPair', currencyPair);\r\n      const staticRes = {\r\n        pair: currencyPair,\r\n        monthlyExposure: this.getMonthlyAmountvalue(),\r\n      };\r\n  \r\n      const cashFlowExposureRes: {\r\n        pair: string;\r\n        monthlyExposure?: any;\r\n        sign?: string;\r\n        toCurrency?: string;\r\n        selectedExposure?: string;\r\n        monthlyAmount?: string;\r\n        monthlyPeriod?: number;\r\n        flag?: string;\r\n        code?: string;\r\n        baseCurrencyFlag?: string;\r\n        baseCurrency?: string;\r\n        baseCurrencySign?: string;\r\n      } = { ...staticRes };\r\n  \r\n      cashFlowExposureRes['sign'] = this.buySellCurrRes.sign;\r\n      cashFlowExposureRes['toCurrency'] = this.buySellCurrRes.code;\r\n      cashFlowExposureRes['selectedExposure'] = this.isSelectedCurrency == 1 ? \"Buying\" : \"Selling\";\r\n      cashFlowExposureRes['monthlyAmount'] = cashFlowExposureRes['monthlyExposure'];\r\n      cashFlowExposureRes['monthlyPeriod'] = this.monthlyPeriod;\r\n      cashFlowExposureRes['flag'] = this.buySellCurrRes.flag;\r\n      cashFlowExposureRes['code'] = this.buySellCurrRes.code;\r\n      cashFlowExposureRes['baseCurrencyFlag'] = this.selectedFromCurrency.flag;\r\n      cashFlowExposureRes['baseCurrency'] = this.selectedFromCurrency.code;\r\n      cashFlowExposureRes['baseCurrencySign'] = this.selectedFromCurrency.sign;\r\n  \r\n      delete cashFlowExposureRes['monthlyExposure'];\r\n  \r\n      console.log('cashFlowExposureRes 231', cashFlowExposureRes);\r\n      this.hedgeDataService.setExposureFormValue.next(cashFlowExposureRes);\r\n  \r\n      setTimeout(() => {\r\n        this.stepper.next();\r\n        document.documentElement.scrollTop = 0;\r\n        document.body.scrollTop = 0;\r\n  \r\n        const offset = 20;\r\n        const element = document.getElementById('content-wrapper');\r\n        if (element) {\r\n          const topPosition = Math.max(0, element.getBoundingClientRect().top + window.pageYOffset - offset);\r\n          window.scrollTo({\r\n            top: topPosition,\r\n            behavior: 'auto'\r\n          });\r\n        }\r\n  \r\n        this.isCreateMonthlyTable = false;\r\n      }, 1500);\r\n    }\r\n  }\r\n  \r\n\r\n  goToPrevious() {\r\n    this.stepper.previous();\r\n  }\r\n}",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"../../../../../../assets/scss/variable\";\r\n\r\n::ng-deep {\r\n  .cashflow-exposure-step2-wrapper {\r\n    position: relative;\r\n    width: 100%;\r\n    max-width: 1024px;\r\n    margin: 35px auto 35px 237px;\r\n    @media screen and (max-width:1800px) {\r\n      margin:35px auto;\r\n      max-width:900px;\r\n    }\r\n    @media screen and (max-width: 1440px) {\r\n      margin: 0 auto;\r\n      max-width: 850px;\r\n    }\r\n\r\n    @media screen and (max-width: 1024px) {\r\n      max-width: 750px;\r\n    }\r\n\r\n    @media screen and (max-width: 540px) {\r\n      max-width: 500px;\r\n    }\r\n\r\n\r\n    .to-currency-section {\r\n      .currency-tick {\r\n        position: absolute;\r\n        left: 17px;\r\n        top: 17px;\r\n\r\n        @media screen and (max-width: 1440px) {\r\n          width: 14px;\r\n          height: 14px;\r\n        }\r\n      }\r\n    }\r\n\r\n    .how-hedging-work {\r\n      position: absolute;\r\n      top: 35px;\r\n      width: auto;\r\n      right: 0;\r\n      display: flex;\r\n      justify-content: flex-end;\r\n      font-family: $he_heebo;\r\n      height: 28px;\r\n      background-color: transparent;\r\n\r\n      span {\r\n        color: #586D8E;\r\n        font-size: 14px;\r\n        font-weight: 400;\r\n        margin-bottom: 10px;\r\n      }\r\n    }\r\n\r\n    .cashflow-heading-wrapper {\r\n      display: flex;\r\n      align-items: center;\r\n      gap: 19px;\r\n      margin-bottom: 28px;\r\n      @media screen and (max-width:1440px) {\r\n        gap: 10px;\r\n      }\r\n\r\n      .hedging-wrap {\r\n        margin: 0 0 11px 0;\r\n\r\n        .hedging-btn {\r\n          background-color: transparent;\r\n          color: #586D8E;\r\n          font-family: $he_heebo;\r\n          font-size: 14px;\r\n          font-style: normal;\r\n          font-weight: 400;\r\n          line-height: 45.2px;\r\n\r\n          img {\r\n            margin: 0 0 0 8px;\r\n          }\r\n        }\r\n      }\r\n\r\n      .img-wrapper {\r\n        width: 54px;\r\n        height: 54px;\r\n        border-radius: 10px;\r\n        border: 1px solid #FFF;\r\n        background: rgba(41, 71, 242, 0.60);\r\n        box-shadow: 0px 10px 14px 0px rgba(41, 71, 242, 0.40);\r\n        display: flex;\r\n        align-items: center;\r\n        justify-content: center;\r\n\r\n        @media screen and (max-width: 1440px) {\r\n          width: 43px;\r\n          height: 43px;\r\n        }\r\n\r\n        @media screen and (max-width: 1199px) {\r\n          width: 35px;\r\n          height: 35px;\r\n\r\n          img {\r\n            width: 25px;\r\n            height: 25px;\r\n          }\r\n        }\r\n      }\r\n\r\n      .heading {\r\n        text-transform: uppercase;\r\n        color: #2947F2;\r\n        font-family: $he_heebo;\r\n        font-size: 30px;\r\n        font-weight: 700;\r\n        line-height: 38px;\r\n        margin-bottom: 0;\r\n\r\n        @media screen and (max-width: 1440px) {\r\n          font-size: 25px;\r\n        }\r\n\r\n        @media screen and (max-width:560px) {\r\n          font-size: 20px;\r\n        }\r\n      }\r\n    }\r\n\r\n    .error-msg {\r\n      display: flex;\r\n      align-items: center;\r\n      color: #D92D20;\r\n      font-size: 12px;\r\n      font-weight: 400;\r\n      line-height: 18px;\r\n      gap: 4px;\r\n      margin-top: 9px;\r\n    }\r\n\r\n    .currency-pair-wrapper {\r\n      background-color: $white;\r\n      padding: 52px 40px 88px 75px;\r\n      border-radius: 10px;\r\n\r\n      @media screen and (max-width: 1440px) {\r\n        padding: 40px 40px 45px 50px;\r\n      }\r\n\r\n      @media screen and (max-width: 853px) {\r\n        padding: 30px 80px 35px 25px;\r\n      }\r\n      @media screen and (max-width:480px) {\r\n        padding: 30px 30px 35px 25px;\r\n        position: relative;\r\n      }\r\n\r\n      .pair-wrapper {\r\n        font-family: $he_heebo;\r\n        display: flex;\r\n        align-items: flex-start;\r\n        gap: 10px;\r\n\r\n        .img-pair {\r\n          margin-top: 6px;\r\n\r\n          img {\r\n            @media screen and (max-width: 1440px) {\r\n              width: 40px;\r\n            }\r\n          }\r\n        }\r\n\r\n        .content-pair-main {\r\n          width: 100%;\r\n\r\n          .currency-pair-inner {\r\n            display: flex;\r\n            align-items: flex-start;\r\n            justify-content: space-between;\r\n            .inner-content {\r\n              .title-pair {\r\n                font-family: $he_heebo;\r\n                color: #2947F2;\r\n                font-size: 20px;\r\n                font-weight: 500;\r\n                line-height: 30px;\r\n                margin-bottom: 0;\r\n\r\n                @media screen and (max-width: 1440px) {\r\n                  font-size: 18px;\r\n                  line-height: 26px;\r\n                }\r\n              }\r\n    \r\n              .subtitle-pair {\r\n                color: #7C8DA6;\r\n                font-size: 16px;\r\n                font-weight: 400;\r\n                line-height: 24px;\r\n                margin-bottom: 0;\r\n\r\n                @media screen and (max-width: 1440px) {\r\n                  font-size: 14px;\r\n                  line-height: 20px;\r\n                }\r\n    \r\n                @media screen and (max-width: 480px) {\r\n                  font-size: 12px;\r\n                }\r\n              }\r\n            }\r\n          }\r\n\r\n          .currency-pair-selection {\r\n            margin-top: 33px;\r\n\r\n            @media screen and (max-width: 1440px) {\r\n              margin-top: 23px;\r\n            }\r\n\r\n            .pair-select-title {\r\n              color: #242220;\r\n              font-family: $he_heebo;\r\n              font-size: 14px;\r\n              font-weight: 700;\r\n              line-height: 25px;\r\n              margin-bottom: 7px;\r\n            }\r\n\r\n            .pair-dropdown-wrapper:not(.form-submitted) {\r\n              margin-bottom: 110px;\r\n\r\n              @media screen and (max-width: 1440px) {\r\n                margin-bottom: 90px;\r\n              }\r\n\r\n              @media screen and (max-width: 1024px) {\r\n                margin-bottom: 60px;\r\n              }\r\n            }\r\n\r\n            .pair-dropdown-wrapper {\r\n              display: flex;\r\n              align-items: baseline;\r\n              gap: 12px;\r\n\r\n              @media screen and (max-width: 480px) {\r\n                flex-direction: column;\r\n              }\r\n\r\n              .country-dropdown {\r\n                mat-select {\r\n                  display: flex;\r\n                  align-items: center;\r\n                  width: 100%;\r\n                  min-width: 320px;\r\n                  height: 60px;\r\n                  border-radius: 4px;\r\n                  border: 1px solid #D0D5DD;\r\n                  background: #FFF;\r\n\r\n                  &:focus {\r\n                    box-shadow: none;\r\n                  }\r\n                  &.invalid-currency{\r\n                    border:2px solid #D92D20;\r\n                  }\r\n\r\n                  &.to-currency-rm:not(.invalid-currency) {\r\n                    &.mat-mdc-select-empty {\r\n                      border: 2px solid #2947F2;\r\n                      box-shadow: none;\r\n                    }\r\n                  }\r\n                  .mat-mdc-select-placeholder {\r\n                    color: #111827;\r\n                    font-family: $he_heebo;\r\n                    font-size: 14px;\r\n                    font-weight: 400;\r\n                  }\r\n\r\n                  @media screen and (max-width: 1440px) {\r\n                    min-width: 260px;\r\n                    height: 45px;\r\n                  }\r\n\r\n                  @media screen and (max-width: 1440px) {\r\n                    min-width: 240px;\r\n                  }\r\n\r\n                  @media screen and (max-width: 853px) {\r\n                    min-width: 180px;\r\n                  }\r\n\r\n                  @media screen and (max-width: 540px) {\r\n                    min-width: 140px;\r\n                  }\r\n\r\n                  @media screen and (max-width: 480px) {\r\n                    min-width: 230px;\r\n                  }\r\n\r\n                  .mat-mdc-select-trigger  {\r\n                    .mat-mdc-select-value {\r\n                      .mat-mdc-select-placeholder {\r\n                        color: #111827;\r\n                        font-family: $he_heebo;\r\n                        font-size: 16px;\r\n                        font-weight: 400;\r\n                        line-height: 24px;\r\n\r\n                        @media screen and (max-width: 1440px) {\r\n                          line-height: 20px;\r\n                          font-size: 14px;\r\n                        }\r\n                      }\r\n                    }\r\n                  }\r\n\r\n                  .mat-mdc-select-arrow-wrapper {\r\n                    .mat-mdc-select-arrow {\r\n                      width: 12px;\r\n                      height: 7px;\r\n                      background: url(../../../../../../assets/images/arrow-down-black.svg) center no-repeat;\r\n                      background-size: contain;\r\n\r\n                      svg {\r\n                        display: none;\r\n                      }\r\n                    }\r\n                  }\r\n\r\n                  &.pe-none {\r\n                    .mat-mdc-select-arrow-wrapper{\r\n                      display: none;\r\n                    }\r\n                  }\r\n\r\n                  .currency-code {\r\n                    color: #111827;\r\n                    font-family: $he_heebo;\r\n                    font-size: 16px;\r\n                    font-weight: 400;\r\n                    line-height: 24px;\r\n                    margin-left: 12px;\r\n\r\n                    @media screen and (max-width: 1440px) {\r\n                      font-size: 14px;\r\n                    }\r\n                  }\r\n                }\r\n\r\n                .default-currency {\r\n                  color: #677C9D;\r\n                  font-family: $he_heebo;\r\n                  font-size: 12px;\r\n                  font-weight: 400;\r\n                  line-height: 12px;\r\n                }\r\n              }\r\n\r\n              .pair-plus {\r\n                font-size: 24px;\r\n                margin: 0 10px;\r\n\r\n                @media screen and (max-width: 1440px) {\r\n                  margin: 0 6px;\r\n                }\r\n\r\n                @media screen and (max-width: 540px) {\r\n                  margin: 0;\r\n                }\r\n\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    .exposure-pair-wrapper {\r\n      background-color: $white;\r\n      padding: 52px 45px 55px 77px;\r\n      border-radius: 10px;\r\n      margin-top: 14px;\r\n\r\n      &.button-padding {\r\n        padding-bottom: 134px;\r\n      }\r\n      \r\n      @media screen and (max-width: 1440px) {\r\n        padding: 40px 40px 40px 50px;\r\n\r\n        &.button-padding {\r\n          padding-bottom: 120px;\r\n        }\r\n      }\r\n\r\n      @media screen and (max-width: 853px) {\r\n        padding: 40px 40px 40px 25px;\r\n\r\n        &.button-padding {\r\n          padding-bottom: 120px;\r\n        }\r\n      }\r\n\r\n      @media screen and (max-width: 480px) {\r\n        padding: 30px 15px 30px 15px;\r\n\r\n        &.button-padding {\r\n          padding-bottom:120px;\r\n        }\r\n      }\r\n\r\n      .exposure-wrapper {\r\n        font-family: $he_heebo;\r\n        display: flex;\r\n        align-items: flex-start;\r\n        gap: 10px;\r\n\r\n        .img-pair {\r\n          margin-top: 6px;\r\n        }\r\n\r\n        .content-pair-main {\r\n          width: 100%;\r\n          .currency-pair-inner {\r\n            display: flex;\r\n            align-items: flex-start;\r\n            justify-content: space-between;\r\n            .inner-content {\r\n              .title-pair {\r\n                font-family: $he_heebo;\r\n                color: #2947F2;\r\n                font-size: 20px;\r\n                font-weight: 500;\r\n                line-height: 30px;\r\n                margin-bottom: 0;\r\n                \r\n                @media screen and (max-width: 1440px) {\r\n                  font-size: 18px;\r\n                  line-height: 26px;\r\n                }\r\n              }\r\n    \r\n              .subtitle-pair {\r\n                color: #7C8DA6;\r\n                font-size: 16px;\r\n                font-weight: 400;\r\n                line-height: 24px;\r\n                margin-bottom: 0;\r\n\r\n                @media screen and (max-width: 1440px) {\r\n                  font-size: 14px;\r\n                  line-height: 20px;\r\n                }\r\n    \r\n                @media screen and (max-width: 480px) {\r\n                  font-size: 12px;\r\n                }\r\n              }\r\n            }\r\n          }\r\n\r\n          .currency-exposure-selection {\r\n            max-width: 638px;\r\n            width: 100%;\r\n            margin-left: -15px;\r\n            .exposure-title {\r\n              color: #101828;\r\n              font-family: $he_heebo;\r\n              font-size: 24px;\r\n              font-weight: 700;\r\n              line-height: 32px;\r\n              margin: 44px 0 20px 23px;\r\n\r\n              @media screen and (max-width: 1440px) {\r\n                margin: 34px 0 15px 23px;\r\n                font-size: 20px;\r\n              }\r\n\r\n              @media screen and (max-width: 480px) {\r\n                font-size: 18px;\r\n                margin: 15px;\r\n              }\r\n            }\r\n\r\n            .buy-sell-option {\r\n              display: flex;\r\n              align-items: center;\r\n              width: 100%;\r\n              min-width: 638px;\r\n              gap: 24px;\r\n              border-radius: 8px;\r\n              padding: 24px 30px 20px 21px;\r\n              border: 1px solid $white;\r\n              cursor: pointer;\r\n\r\n              @media screen and (max-width: 1440px) {\r\n                min-width: 570px;\r\n                max-width: 570px;\r\n                padding: 16px 22px 16px 13px;\r\n              }\r\n\r\n              @media screen and (max-width: 1024px) {\r\n                max-width: 438px;\r\n                min-width: 438px;\r\n              }\r\n\r\n              @media screen and (max-width: 540px) {\r\n                max-width: 400px;\r\n                min-width: 400px;\r\n                gap: 18px;\r\n              }\r\n\r\n              @media screen and (max-width: 480px) {\r\n                max-width: 280px;\r\n                min-width: 280px;\r\n              }\r\n\r\n              @media screen and (max-width: 360px) {\r\n                max-width: 260px;\r\n                min-width: 260px;\r\n              }\r\n\r\n\r\n              &.option-one {\r\n                margin-bottom: 15px;\r\n\r\n                .currency-img-container {\r\n                  &::after {\r\n                    position: absolute;\r\n                    content: \"\";\r\n                    background-color: #003EFF;\r\n                    width: 25px;\r\n                    height: 25px;\r\n                    border-radius: 30px;\r\n                    top: 38px;\r\n                    left: 26px;\r\n                    background-image: url('../../../../../../assets/images/buy-arrow.svg');\r\n                    background-repeat: no-repeat;\r\n                    background-position: center;\r\n\r\n                    @media screen and (max-width: 1440px) {\r\n                      width: 22px;\r\n                      height: 22px;\r\n                      top: 30px;\r\n                      left: 23px;\r\n                    }\r\n                  }\r\n                }\r\n              }\r\n\r\n              &.selected-currency-border {\r\n                border: 1px solid #003EFF;\r\n              }\r\n\r\n              &.exposure-require {\r\n                border: 1px solid #F04438;\r\n              }\r\n\r\n              .currency-img-container {\r\n                position: relative;\r\n                width: 60px;\r\n                height: 54px;\r\n                background: $white;\r\n                display: flex;\r\n                align-items: center;\r\n                justify-content: center;\r\n                border-radius: 54px;\r\n\r\n                @media screen and (max-width: 1440px) {\r\n                  width: 50px;\r\n                  height: 44px;\r\n                }\r\n\r\n                &::after {\r\n                  position: absolute;\r\n                  content: \"\";\r\n                  background-color: #003EFF;\r\n                  width: 25px;\r\n                  height: 25px;\r\n                  border-radius: 30px;\r\n                  top: 38px;\r\n                  left: 26px;\r\n                  background-image: url('../../../../../../assets/images/sell-arrow.svg');\r\n                  background-repeat: no-repeat;\r\n                  background-position: center;\r\n\r\n                  @media screen and (max-width: 1440px) {\r\n                    width: 22px;\r\n                    height: 22px;\r\n                    top: 30px;\r\n                    left: 23px;\r\n                  }\r\n                }\r\n              }\r\n\r\n              .actions-container {\r\n                display: flex;\r\n                justify-content: space-between;\r\n                align-items: center;\r\n                width: 100%;\r\n\r\n                @media screen and (max-width: 480px) {\r\n                  flex-direction: column;\r\n                  align-items: baseline;\r\n                  gap: 10px;\r\n                }\r\n\r\n                .buy-sell-title {\r\n                  font-family: $he_heebo;\r\n\r\n                  .title {\r\n                    font-family: $he_heebo !important;\r\n                    color: #374151;\r\n                    font-size: 18px;\r\n                    font-weight: 700;\r\n                    line-height: 28px;\r\n                    margin-bottom: 0;\r\n\r\n                    @media screen and (max-width: 1440px) {\r\n                      font-size: 16px;\r\n                    }\r\n                  }\r\n\r\n                  .subtitle {\r\n                    font-family: $he_heebo !important;\r\n                    color: #98A2B3;\r\n                    font-size: 12px;\r\n                    font-weight: 500;\r\n                    line-height: 17px;\r\n                    margin-bottom: 0;\r\n\r\n                    br {\r\n                      @media screen and (max-width: 1024px) {\r\n                        display: none;\r\n                      }\r\n                    }\r\n                  }\r\n                }\r\n\r\n                .buy-sell-btn {\r\n                  display: flex;\r\n                  align-items: center;\r\n                  justify-content: center;\r\n                  color: #374151;\r\n                  border: 1px solid #CDD4E0;\r\n                  border-radius: 40px;\r\n                  background: $white;\r\n                  height: 30px;\r\n                  padding: 10px 7px 10px 10px;\r\n                  width: 92px;\r\n                  font-family: $he_heebo;\r\n                  font-size: 14px;\r\n                  font-weight: 500;\r\n                  line-height: 45px;\r\n\r\n                  @media screen and (max-width: 1024px) {\r\n                    font-size: 13px;\r\n                    width: 80px;\r\n                  }\r\n\r\n                  &.selected-opt {\r\n                    gap: 3px;\r\n                    background: #003EFF;\r\n                    min-width: 100px;\r\n                    color: $white;\r\n                    border: 1px solid #003EFF;\r\n                    transition: .6s;\r\n\r\n                    @media screen and (max-width: 1024px) {\r\n                      font-size: 13px;\r\n                      min-width: 90px;\r\n                    }\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n        @media screen and (max-width:480px) {\r\n          position: relative;\r\n          padding: 20px 0 0;\r\n        }\r\n      }\r\n    }\r\n    .monthly-exposure-pair-wrapper {\r\n      background-color: $white;\r\n      padding: 52px 40px 150px 77px;\r\n      border-radius: 10px;\r\n      margin-top: 14px;\r\n      @media screen and (max-width: 1440px) {\r\n        padding: 40px 40px 120px 50px;\r\n      }\r\n\r\n      @media screen and (max-width: 853px) {\r\n        padding: 40px 40px 120px 25px;\r\n      }\r\n\r\n      @media screen and (max-width: 480px) {\r\n        padding: 30px 15px 120px 15px;\r\n      }\r\n\r\n      .error-message {\r\n        display: flex;\r\n        align-items: center;\r\n        color: #D92D20;\r\n        font-family: $he_heebo;\r\n        font-size: 12px;\r\n        font-weight: 400;\r\n        line-height: 18px;\r\n        gap: 4px;\r\n        margin-top: 9px;\r\n      }\r\n\r\n      .exposure-wrapper {\r\n        font-family: $he_heebo;\r\n        display: flex;\r\n        align-items: flex-start;\r\n        gap: 10px;\r\n\r\n        .img-pair {\r\n          margin-top: 6px;\r\n        }\r\n\r\n        .content-pair-main {\r\n          width: 100%;\r\n          .currency-pair-inner {\r\n            display: flex;\r\n            align-items: flex-start;\r\n            justify-content: space-between;\r\n            .inner-content {\r\n              .title-pair {\r\n                font-family: $he_heebo;\r\n                color: #2947F2;\r\n                font-size: 20px;\r\n                font-weight: 500;\r\n                line-height: 30px;\r\n                margin-bottom: 0;\r\n\r\n                @media screen and (max-width: 1440px) {\r\n                  font-size: 18px;\r\n                  line-height: 26px;\r\n                }\r\n              }\r\n    \r\n              .subtitle-pair {\r\n                color: #7C8DA6;\r\n                font-size: 16px;\r\n                font-weight: 400;\r\n                line-height: 24px;\r\n                margin-bottom: 0;\r\n\r\n                @media screen and (max-width: 1440px) {\r\n                  font-size: 14px;\r\n                  line-height: 20px;\r\n                }\r\n    \r\n                @media screen and (max-width: 480px) {\r\n                  font-size: 12px;\r\n                }\r\n              }\r\n            }\r\n          }\r\n          .monthly-amount-container {\r\n            display: flex;\r\n            align-items: flex-start;\r\n            gap: 54px;\r\n            margin-top: 31px;\r\n\r\n            @media screen and (max-width: 1440px) {\r\n              gap: 24px;\r\n            }\r\n\r\n            @media screen and (max-width: 480px) {\r\n              flex-direction: column;\r\n              align-items: flex-start;\r\n              gap: 15px;\r\n              margin-top: 25px;\r\n            }\r\n\r\n            .amount-container {\r\n              gap: 24px;\r\n              .amount-container-items {\r\n                .select-month {\r\n                  border-radius: 4px;\r\n                  border: 1px solid #D0D5DD;\r\n                  height: 60px;\r\n                  display: flex;\r\n                  align-items: center;\r\n                  padding: 0 15px;\r\n                  .mat-mdc-select-value {\r\n                    color: #111827;\r\n                    font-family: $he_heebo;\r\n                    font-size: 16px;\r\n                    font-weight: 400;\r\n                    line-height: 24px;\r\n\r\n                    @media screen and (max-width: 1440px) {\r\n                      line-height: 20px;\r\n                      font-size: 14px;\r\n                    }\r\n                    @media screen and (max-width:480px) {\r\n                      font-size: 10px;\r\n                    }\r\n                  }\r\n                  .mat-mdc-select-arrow-wrapper{\r\n                    .mat-mdc-select-arrow {\r\n                      width: 12px;\r\n                      height: 7px;\r\n                      background: url(../../../../../../assets/images/arrow-down-black.svg) center no-repeat;\r\n                      background-size: contain;\r\n                      opacity: 0.6;\r\n                      svg {\r\n                        display: none;\r\n                      }\r\n                      @media screen and (max-width:480px) {\r\n                        width: 9px;\r\n                        height: 5px;\r\n                      }\r\n                    }\r\n                  }\r\n\r\n                  @media screen and (max-width: 1440px) {\r\n                    height: 48px;\r\n                  }\r\n  \r\n                  .mat-mdc-select-trigger {\r\n                    gap: 10px;\r\n                  }\r\n                }\r\n              }\r\n            }\r\n            \r\n\r\n            .amount-text {\r\n              padding: 10px 24px;\r\n              font-family: $he_heebo;\r\n\r\n              @media screen and (max-width: 480px) {\r\n                padding: 0;\r\n              }\r\n\r\n              .main-text {\r\n                color: #101828;\r\n                font-size: 24px;\r\n                font-weight: 700;\r\n                line-height: 32px;\r\n                margin-bottom: 0;\r\n\r\n                @media screen and (max-width: 1440px) {\r\n                  font-size: 20px;\r\n                }\r\n\r\n                @media screen and (max-width: 1024px) {\r\n                  font-size: 16px;\r\n                }\r\n\r\n              }\r\n\r\n              .sub-text {\r\n                color: #475467;\r\n                font-size: 14px;\r\n                font-weight: 400;\r\n                line-height: 20px;\r\n                margin-bottom: 0;\r\n\r\n                @media screen and (max-width: 1440px) {\r\n                  font-size: 13px;\r\n                }\r\n\r\n                @media screen and (max-width: 1024px) {\r\n                  line-height: 16px;\r\n                }\r\n              }\r\n            }\r\n\r\n            .amount-input {\r\n              // .amount-inner {\r\n              //   height: 60px;\r\n              //   width: 303px;\r\n              //   padding: 0 17px;\r\n              //   border-radius: 4px;\r\n              //   border: 1px solid #98A2B3;\r\n              //   color: #111827;\r\n              //   font-size: 16px;\r\n              //   font-weight: 400;\r\n              //   line-height: 24px;\r\n              //   display: flex;\r\n              //   align-items: center;\r\n              //   margin: 10px 0;\r\n                \r\n              //   input {\r\n              //     border: none;\r\n              //     color: #111827;\r\n              //     font-size: 16px;\r\n              //     font-weight: 400;\r\n              //     line-height: 24px;\r\n              //     width: 100%;\r\n              //     &:focus,\r\n              //     &:hover {\r\n              //       border: none;\r\n              //     }\r\n              //   }\r\n\r\n              //   @media screen and (max-width: 1440px) {\r\n              //     height: 50px;\r\n              //     width: 290px;\r\n              //   }\r\n\r\n              //   @media screen and (max-width: 853px) {\r\n              //     width: 200px;\r\n              //   }\r\n\r\n              //   @media screen and (max-width: 540px) {\r\n              //     width: 175px;\r\n              //     margin:0 0 10px;\r\n              //   }\r\n\r\n              //   @media screen and (max-width: 480px) {\r\n              //     width: 200px;\r\n              //   }\r\n\r\n              //   &.invalid-amount {\r\n              //     border: 1px solid #D92D20;\r\n              //   }\r\n              // }\r\n\r\n              .form-group {\r\n                position: relative;\r\n                width: 100%;\r\n                min-width: 320px;\r\n                border: 2px solid #3B82F6;\r\n                border-radius: 5px;\r\n                padding: 12.5px 16px 12.5px 16px;\r\n                height: 60px;\r\n                display: flex;\r\n                align-items: center;\r\n                span{\r\n                  color: #111827;\r\n                  font-family: $he_heebo;\r\n                  font-size: 16px;\r\n                  font-style: normal;\r\n                  font-weight: 700;\r\n                  line-height: 24px;\r\n                }\r\n                @media screen and (max-width: 1440px) {\r\n                  padding: 8px 14px;\r\n                  height: 48px;\r\n                  span{\r\n                    font-size: 14px;\r\n                  }\r\n                }\r\n                @media screen and (max-width: 767px) {\r\n                  padding: 8px;\r\n                  height: 44px;\r\n                }\r\n\r\n                @media screen and (max-width: 480px) {\r\n                  padding: 8px;\r\n                  height: 44px;\r\n                  min-width: max-content;\r\n                  span{\r\n                    font-size: 10px;\r\n                  }\r\n                }\r\n                &.invalid-amount {\r\n                  border-color: #dc2626;\r\n                  .input-label {\r\n                    color: #dc2626;\r\n                  }\r\n                }\r\n                // &.focused {\r\n                //   border-color: #576ef5;\r\n                //   .input-label {\r\n                //     color: #576ef5;\r\n                //   }\r\n                // }\r\n\r\n                .input-label {\r\n                  position: absolute;\r\n                  font-size: 14px;\r\n                  font-family: $he_heebo;\r\n                  font-weight: 400;\r\n                  line-height: 20px;\r\n                  color: #175CD3;\r\n                  padding: 0 4px;\r\n                  background: #fff;\r\n                  top: calc(0px - 30px / 2);\r\n\r\n                  @media screen and (max-width: 1440px) {\r\n                    line-height: 24px;\r\n                    top: calc(0px - 24px / 2);\r\n                    padding: 0 10px;\r\n                    font-size: 12px;\r\n                  }\r\n                  @media screen and (max-width: 767px) {\r\n                    padding: 0 6px;\r\n                  }\r\n                }\r\n                .cashflow-name-input {\r\n                  color: #111827;\r\n                  font-family: $he_heebo;\r\n                  font-size: 16px;\r\n                  font-style: normal;\r\n                  font-weight: 700;\r\n                  line-height: 24px;\r\n                  border: 0;\r\n                  width:100%;\r\n                  @media screen and (max-width: 1440px) {\r\n                    line-height: 22px;\r\n                    font-size: 14px;\r\n                  }\r\n\r\n                  @media screen and (max-width: 480px) {\r\n                     font-size: 10px;\r\n                  }\r\n                  &::placeholder {\r\n                    color: #111827;\r\n                    font-weight: 700;\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n        @media screen and (max-width:480px) {\r\n          position: relative;\r\n          padding: 20px 0 0;\r\n          .content-pair-main{\r\n            width: calc(100% - 60px);\r\n            .monthly-amount-container{\r\n              .amount-container{\r\n                gap: 10px;\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    .risk-exposure-loader {\r\n      margin-top: -35px;\r\n      opacity: 0;\r\n      .loader-text {\r\n        font-family: $he_heebo;\r\n        h3 {\r\n          color: #2947F2;\r\n          font-size: 20px;\r\n          font-weight: 700;\r\n          line-height: 30px;\r\n          margin-bottom: 0;\r\n\r\n          @media screen and (max-width: 1440px) {\r\n            font-size: 18px;\r\n          }\r\n        }\r\n        span {\r\n          color: #7C8DA6;\r\n          font-size: 16px;\r\n          font-weight: 400;\r\n          line-height: 24px;\r\n\r\n          @media screen and (max-width: 1440px) {\r\n            font-size: 14px;\r\n          }\r\n        }\r\n      }\r\n      &.show-loader{\r\n        opacity: 1;\r\n      }\r\n    }\r\n\r\n    .progress-container {\r\n      display: flex;\r\n      align-items: center;\r\n      gap: 8px;\r\n      .stepper-progressbar {\r\n        max-width: 98px;\r\n        min-width: 98px;\r\n        width: 100%;\r\n        height: 12px;\r\n        border-radius: 20px;\r\n\r\n        .mdc-linear-progress__buffer {\r\n          height: 100%;\r\n        }\r\n        \r\n        .mdc-linear-progress__bar {\r\n          height: 100%;\r\n        }\r\n\r\n          .mdc-linear-progress__bar-inner {\r\n            border-width: 12px;\r\n            border-radius: 20px;\r\n            border-color: #175CD3;\r\n      \r\n            @media screen and (max-width: 1440px) {\r\n              border-width: 9px;\r\n            }\r\n      \r\n            @media screen and (max-width: 1024px) {\r\n              border-width: 12px;\r\n            }\r\n          }\r\n      \r\n        @media screen and (max-width: 1440px) {\r\n          height: 9px;\r\n        }\r\n      \r\n        @media screen and (max-width: 1024px) {\r\n          height: 12px;\r\n        }\r\n      }\r\n\r\n      .progress-count {\r\n        color: #000;\r\n        font-family: $he_heebo;\r\n        font-size: 12px;\r\n        font-weight: 700;\r\n        line-height: 20px;\r\n      }\r\n      @media screen and (max-width:480px) {\r\n        .stepper-progressbar{\r\n          min-width: 60px;\r\n          max-width: 60px;\r\n          height: 9px;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  .risk-options-prev-back {\r\n    position: relative;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: flex-end;\r\n    top: -78px;\r\n    right: 44px;\r\n    gap: 40px;\r\n    font-family: $he_heebo;\r\n\r\n    .move-to-next {\r\n      display: flex;\r\n      justify-content: center;\r\n      align-items: center;\r\n      border-radius: 40px;\r\n      background: #2947F2;\r\n      box-shadow: 0px 9px 24px 0px rgba(0, 62, 255, 0.40);\r\n      width: 100%;\r\n      max-width: 123px;\r\n      height: 46px;\r\n      padding: 10px;\r\n      color: $white;\r\n      font-size: 14px;\r\n      font-weight: 700;\r\n      line-height: 45px;\r\n      gap: 10px;\r\n\r\n      &:disabled {\r\n        background: #f5f5fa !important;\r\n        color: #c6c8cc !important;\r\n        cursor: not-allowed;\r\n        box-shadow: none;\r\n\r\n        img {\r\n          filter: contrast(.5);\r\n        }\r\n      }\r\n    }\r\n\r\n    .back-to-previous {\r\n      color: #374151;\r\n      font-size: 14px;\r\n      font-weight: 400;\r\n      line-height: 45px;\r\n      padding: 0;\r\n    }\r\n  }\r\n\r\n  .rm-curr-dropdown {\r\n    color: #111827;\r\n    font-family: $he_heebo;\r\n    font-size: 13px;\r\n    font-style: normal;\r\n    font-weight: 400;\r\n\r\n    @media screen and (max-width: 1440px) {\r\n      max-height: 330px !important;\r\n      min-height: 330px !important;\r\n      overflow-y: hidden;\r\n    }\r\n\r\n    &.mat-mdc-select-panel {\r\n      max-height: 380px;\r\n      min-width: 264px;\r\n      min-height: 422px;\r\n      padding: 23px 35px 34px 28px !important;\r\n      border-radius: 10px !important;\r\n      margin: 25px 0 0 -12px;\r\n      @media (max-width: 1440px) {\r\n         margin-top: 15px !important;\r\n      }\r\n\r\n        @media screen and (max-width: 1440px) {\r\n          padding: 16px !important;\r\n          min-width: 250px;\r\n        }\r\n    }\r\n\r\n    .mat-mdc-form-field-infix .mat-mdc-select {\r\n      color: #111827;\r\n      font-family: $he_heebo;\r\n      font-size: 13px;\r\n      font-style: normal;\r\n      font-weight: 400;\r\n    }\r\n\r\n    .search-inpt-popup {\r\n      .search-input-wrapper {\r\n        .filter-input {\r\n          font-size: 14px;\r\n          border: 1px solid #2947F2;\r\n          box-shadow: 0px 6px 44px 0px rgba(65, 90, 235, 0.11);\r\n          padding: 11px 20px;\r\n          border-radius: 8px;\r\n          width: 100%;\r\n          &.error-input{\r\n            border-color:#D92D20;\r\n          }\r\n        }\r\n\r\n        .search-icon {\r\n          position: absolute;\r\n          top: 33px;\r\n          right: 33px;\r\n          width: 17px;\r\n        }\r\n        .error-msg{\r\n          color:#D92D20;\r\n          font-family: $he_heebo;\r\n          font-size: 12px;\r\n          font-style: normal;\r\n          font-weight: 400;\r\n          line-height: 18px;\r\n          margin: 10px 0 0;\r\n          display: inline-block;\r\n        }\r\n      }\r\n\r\n      .currency-options {\r\n        height: 65px;\r\n        font-size: 14px;\r\n        border-radius: 10px;\r\n\r\n        @media (max-width: 1440px) {\r\n          height: 55px;\r\n          padding-left: 10px;\r\n          padding-right: 10px;\r\n        }\r\n\r\n        &::before {\r\n          content: \"\";\r\n          height: 1px;\r\n          background: none;\r\n          position: absolute;\r\n          left: 0;\r\n          right: 0;\r\n          bottom: 0;\r\n          border-bottom: 1px dashed #D9DADD;\r\n          border-top: none;\r\n          border-left: none;\r\n          border-right: none;\r\n        }\r\n\r\n        &:last-child {\r\n          ::before {\r\n            border-bottom: none;\r\n          }\r\n        }\r\n\r\n        &.mdc-list-item--selected,\r\n        &:hover {\r\n          background-color: var(--content-wrapper-bg-color) !important;\r\n        }\r\n\r\n        &.mdc-list-item--selected {\r\n          .select-item {\r\n            color: #2947F2;\r\n            font-family: $he_heebo;\r\n            font-weight: 700;\r\n            // line-height: 35px;\r\n\r\n            @media screen and (max-width: 1440px) {\r\n              font-size: 14px;\r\n            }\r\n\r\n            .code-with-info {\r\n              .info {\r\n                color: #2947F2;\r\n              }\r\n            }\r\n          }\r\n        }\r\n\r\n        .select-item {\r\n          color: #4B5563;\r\n          font-family: $he_heebo;\r\n          font-size: 18px;\r\n          font-weight: 400;\r\n          // line-height: 35px;\r\n\r\n          @media screen and (max-width: 1440px) {\r\n            font-size: 14px;\r\n          }\r\n\r\n          .code-with-info {\r\n            display: flex;\r\n            flex-direction: column;\r\n            font-family: $he_heebo;\r\n\r\n            .code {\r\n              height: 20px;\r\n            }\r\n\r\n            .info {\r\n              color: #01031C;\r\n              font-size: 12px;\r\n              font-weight: 400;\r\n              height: 19px;\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      .currancy-flag-list {\r\n        max-height: 310px;\r\n        overflow-y: auto;\r\n        margin-top: 16px;\r\n\r\n        @media screen and (max-width: 1440px) {\r\n          margin-top: 12px;\r\n          max-height: 235px;\r\n        }\r\n\r\n        #style-1::-webkit-scrollbar {\r\n          width: 6px !important;\r\n        }\r\n\r\n        #style-1::-webkit-scrollbar-thumb {\r\n          border-radius: 10px !important;\r\n          background-color: rgba(0, 0, 0, 0.10) !important;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  .cdk-overlay-pane:has(.rm-curr-dropdown) {\r\n    @media screen and (min-width: 1600px) {\r\n      top: 466px !important;\r\n    }\r\n  }\r\n\r\n  .risk-rate-tooltip--rm {\r\n    margin-left: -15px !important;\r\n    --bs-tooltip-opacity: 1;\r\n    --bs-tooltip-max-width: 307px;\r\n\r\n    .tooltip-inner {\r\n      background-color:#1D4ED8;\r\n      color: #fff;\r\n      padding: 18px 29px;\r\n      font-size: 14px;\r\n      text-align: left;\r\n      font-family: $he_heebo;\r\n      font-weight: 400;\r\n      line-height: 20px;\r\n      border-radius: 10px;\r\n      transform: translateY(-10px);\r\n      min-width: 281px;\r\n      box-shadow: 0px 14px 34px 0px rgba(0, 0, 0, 0.15);\r\n    }\r\n\r\n    .tooltip-arrow {\r\n      bottom: calc(1 * var(--bs-tooltip-arrow-height));\r\n\r\n      &::before {\r\n        border-top-width: 14px;\r\n        border-left-width: 7px;\r\n        border-right-width: 7px;\r\n        border-top-color:#1D4ED8;\r\n        left: 15px;\r\n        right: auto;\r\n      }\r\n    }\r\n\r\n    &.bs-tooltip-top-end {\r\n      margin-right: -15px !important;\r\n\r\n      .tooltip-arrow {\r\n        &::before {\r\n          right: 15px;\r\n          left: auto;\r\n        }\r\n      }\r\n    }\r\n\r\n    @media screen and (max-width:767px) {\r\n      --bs-tooltip-max-width: 250px;\r\n      .tooltip-inner{\r\n        padding: 10px 15px;\r\n      }\r\n    }\r\n  }\r\n  .mdc-menu-surface.mat-mdc-select-panel.month-exposure-ddl{\r\n    border-radius: 5px;\r\n    padding: 9px 12px 9px 8px !important;\r\n    box-shadow: 0px 5px 64px -12px rgba(16, 24, 40, 0.20);\r\n    background-color: $white;\r\n    min-width: 185px;\r\n    .mat-mdc-option{\r\n      min-height: 40px;\r\n      padding: 10px;\r\n      color:#1D2939;\r\n      font-family:$he_heebo;\r\n      font-size: 14px;\r\n      font-style: normal;\r\n      font-weight: 400;\r\n      line-height: 20px;\r\n      border-radius: 5px;\r\n      margin: 2px 0;\r\n      &.mdc-list-item--selected,&.mat-mdc-option-active{\r\n        background-color: #E5F4FF !important;\r\n        color:#3538CD;\r\n        font-weight: 700;\r\n      }\r\n      &:hover {\r\n        background-color: #EFF8FF;\r\n      }\r\n    }\r\n    @media screen and (max-width:1440px) {\r\n      min-width: max-content;\r\n    }\r\n    @media screen and (max-width:480px) {\r\n      .mat-mdc-option{\r\n        font-size: 10px;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n.mat-horizontal-stepper-header-container {\r\n  display: none !important;\r\n}\r\n.currency-image {\r\n  height: 30px;\r\n  width: 30px;\r\n\r\n  @media screen and (max-width: 1440px) {\r\n    height: 26px;\r\n    width: 26px;\r\n  }\r\n}",
                    "styleUrl": "./cashflow-exposure-step2.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "hedgeDataService",
                        "type": "HedgingDataService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 47,
                "jsdoctags": [
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "hedgeDataService",
                        "type": "HedgingDataService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<section class=\"cashflow-exposure-step2-wrapper loader-wrapper\">\r\n  <div class=\"cashflow-heading-wrapper\">\r\n    <div class=\"img-wrapper\">\r\n      <img src=\"images/money-bag-cashflow.svg\" alt=\"money-bag\" class=\"bag-img\" />\r\n    </div>\r\n    <h3 class=\"heading\">Cash flow exposure</h3>\r\n  </div>\r\n  <button class=\"how-hedging-work\">\r\n    <span>How our hedging works? <img src=\"images/more-info-risk.svg\" container=\"body\"\r\n        [ngbTooltip]=\"buyingToolTip\"\r\n        placement=\"top-right\" tooltipClass=\"risk-rate-tooltip--rm\" alt=\"more-info\" /> </span>\r\n  </button>\r\n  <ng-template #buyingToolTip>\r\n    You are at risk when ILS goes up because it will cost more to buy USD with\r\n    USD, increasing your costs\r\n  </ng-template>\r\n  \r\n  <form [formGroup]=\"cashFlowExposureForm\">\r\n    <div class=\"currency-pair-wrapper\">\r\n      <div class=\"pair-wrapper\">\r\n        <div class=\"img-pair\">\r\n          <img src=\"images/pair-virtual.svg\" alt=\"pair\" />\r\n        </div>\r\n        <div class=\"content-pair-main\">\r\n          <div class=\"currency-pair-inner\">\r\n            <div class=\"inner-content\">\r\n              <h4 class=\"title-pair\">Currency pair</h4>\r\n              <p class=\"subtitle-pair\">Select the currency you want to protect against market\r\n                fluctuations.</p>\r\n            </div>\r\n            <div class=\"progress-container\" *ngIf=\"!isFormSubmit && !isDisplayAmountExplosure\">\r\n              <mat-progress-bar #formStepperProgress class=\"stepper-progressbar\" mode=\"determinate\"\r\n                value=\"25\"></mat-progress-bar> <span class=\"progress-count\">\r\n                1/4 </span>\r\n            </div>\r\n          </div>\r\n          <div class=\"currency-pair-selection\">\r\n            <label class=\"pair-select-title\">Select currency pair</label>\r\n            <div class=\"pair-dropdown-wrapper\" [ngClass]=\"{'form-submitted' :isFormSubmit}\">\r\n              <div class=\"country-dropdown\">\r\n                <mat-select class=\"form-control pe-none user-select-none\" panelClass=\"rm-curr-dropdown from-currency-dropdown\" id=\"fromCurrency\"\r\n                  placeholder=\"Select\" formControlName=\"fromCurrency\">\r\n                  <mat-select-trigger *ngIf=\"selectedFromCurrency\">\r\n                    <img class=\"currency-image\" [src]=\"selectedFromCurrency.flag\" alt=\"currency_flag\" />\r\n                    <span class=\"currency-code\">{{ selectedFromCurrency.code }}</span>\r\n                  </mat-select-trigger>\r\n                  <mat-option *ngIf=\"selectedFromCurrency\" [value]=\"selectedFromCurrency.code\">\r\n                    <div class=\"select-item d-flex gap-3 align-items-center\">\r\n                      <img width=\"30px\" class=\"currency-image\" [src]=\"selectedFromCurrency.flag\" alt=\"currency_flag\" />\r\n                      <div class=\"code-with-info\">\r\n                        <span class=\"code\">{{ selectedFromCurrency.code }}</span>\r\n                        <span class=\"info\">{{ selectedFromCurrency.currencyName }}</span>\r\n                      </div>\r\n                    </div>\r\n                  </mat-option>\r\n                </mat-select>\r\n                <span class=\"default-currency\" *ngIf=\"selectedFromCurrency\">Default primary currency</span>\r\n              </div>\r\n\r\n              <span class=\"pair-plus\">+</span>\r\n\r\n              <!-- TO CURRENCY (EDITABLE) -->\r\n              <div class=\"country-dropdown\">\r\n                <mat-select class=\"form-control to-currency-rm\" panelClass=\"rm-curr-dropdown\"\r\n                  [ngClass]=\"currencyNotMatch || (submitFirstStep && cashFlowExposureForm.controls['toCurrency'].invalid)  ? 'invalid-currency' : ''\"\r\n                  id=\"toCurrency\" formControlName=\"toCurrency\" placeholder=\"Select\"\r\n                  (selectionChange)=\"onToCurrencyChange($event.value)\" (openedChange)=\"onDropdownOpen($event)\">\r\n                  <mat-select-trigger>\r\n                    <ng-container *ngFor=\"let currency of walletData\">\r\n                      <div *ngIf=\"currency.code === gettoCurrencyvalue()\" class=\"to-currency-section\">\r\n                        <img class=\"currency-image\" [src]=\"currency.flag\" alt=\"currency_flag\" />\r\n                        <img class=\"currency-tick\" src=\"images/tick-currency.svg\" alt=\"tick\" />\r\n                        <span class=\"currency-code\">\r\n                          {{ currency.code }}\r\n                        </span>\r\n                      </div>\r\n                    </ng-container>\r\n                  </mat-select-trigger>\r\n\r\n                  <div class=\"search-inpt-popup\">\r\n                    <div class=\"search-input-wrapper\">\r\n                      <input class=\"filter-input\" [ngClass]=\"walletData.length === 0 ? 'error-input' : ''\" type=\"text\"\r\n                        placeholder=\"Search\" id=\"exnow-s1-id7\" [formControl]=\"searchControl\">\r\n                      <span class=\"error-msg\" *ngIf=\"walletData.length === 0\">\r\n                        OPPPSSS... That currency doesn't exist,<br>Please check spelling\r\n                      </span>\r\n                    </div>\r\n                    <div class=\"currancy-flag-list\">\r\n                      <mat-option *ngFor=\"let currency of walletData; index as i\" [value]=\"currency.code\"\r\n                        class=\"currency-options\" id=\"exnow-s1-id7-{{currency.code}}\">\r\n                        <div class=\"select-item d-flex gap-3 align-items-center\">\r\n                          <img width=\"30px\" class=\"currency-image\" [src]=\"currency.flag\" alt=\"currency_flag\" />\r\n                          <div class=\"code-with-info\">\r\n                            <span class=\"code\">{{ currency.code }}</span>\r\n                            <span class=\"info\">{{ currency.currencyName }}</span>\r\n                          </div>\r\n                        </div>\r\n                      </mat-option>\r\n                    </div>\r\n                  </div>\r\n                </mat-select>\r\n                <p *ngIf=\"currencyNotMatch\" class=\"error-msg\">\r\n                  <img src=\"images/error-exposure.svg\" alt=\"error\">\r\n                  Please select different currency\r\n                </p>\r\n                <p *ngIf=\"submitFirstStep && cashFlowExposureForm.controls['toCurrency'].invalid\" class=\"error-msg\">\r\n                  Please select currency\r\n                </p>\r\n              </div>\r\n              <div class=\"more-info\">\r\n                <img src=\"images/more-info-risk.svg\" alt=\"more-info\"\r\n                  ngbTooltip=\"Choosing the right currency pair tailors the hedging strategy to protect your business from unfavorable exchange rate movements.\"\r\n                  placement=\"top-left\" tooltipClass=\"risk-rate-tooltip--rm\">\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n     <!-- Your exposure Start 1-->\r\n     <ng-container *ngIf=\"isFormSubmit\">\r\n      <div class=\"exposure-pair-wrapper\" [ngClass]=\"isSelectedCurrency && !isDisplayAmountExplosure ? 'button-padding' : ''\" id=\"isLoadExplosureFocus\" #isLoadExplosureFocus tabindex=\"0\">\r\n        <div class=\"exposure-wrapper\">\r\n          <div class=\"img-pair\">\r\n            <img src=\"images/exposure-virtual.svg\" alt=\"exposure\" />\r\n          </div>\r\n          <div class=\"content-pair-main\">\r\n            <div class=\"currency-pair-inner\">\r\n              <div class=\"inner-content\">\r\n                <h4 class=\"title-pair\">Your exposure</h4>\r\n                <p class=\"subtitle-pair\">Select when your cash flow is exposed to risk from currency changes</p>\r\n              </div>\r\n              <div class=\"progress-container\" *ngIf=\"isFormSubmit && !isDisplayAmountExplosure\">\r\n                <mat-progress-bar #formStepperProgress class=\"stepper-progressbar\" mode=\"determinate\"\r\n                  value=\"50\"></mat-progress-bar> <span class=\"progress-count\"> 2/4 </span>\r\n              </div>\r\n            </div>\r\n            <div class=\"currency-exposure-selection\">\r\n              <h3 class=\"exposure-title\">I am exposed because</h3>\r\n              <div class=\"buy-sell-option option-one\" (click)=\"selectBuySellCurrency(BuySellEnum.Buy)\"\r\n                [ngClass]=\"{ 'selected-currency-border': isSelectedCurrency === BuySellEnum.Buy, 'exposure-require': exposureRequired }\">\r\n                <div class=\"currency-img-container\">\r\n                  <img [src]=\"buySellCurrRes.flag\" class=\"currency-image\" />\r\n                </div>\r\n                <div class=\"actions-container\">\r\n                  <div class=\"buy-sell-title\">\r\n                    <h4 class=\"title\">I am Buying</h4>\r\n                    <p class=\"subtitle\">I'm exposed when the {{buySellCurrRes.code}} strengthens because it raises\r\n                      <br />\r\n                      my costs to buy {{buySellCurrRes.code}} with {{selectedFromCurrency.code}}.</p>\r\n                  </div>\r\n                  <!-- <button class=\"buy-sell-btn\" (click)=\"selectBuySellCurrency('Buying')\" [ngClass]=\"{ 'selected-opt': isSelectedCurrency === 'Buying' }\">Select</button> -->\r\n                  <button class=\"buy-sell-btn\" id=\"buyExposureBtn\"\r\n                    [ngClass]=\"{ 'selected-opt': isSelectedCurrency === BuySellEnum.Buy}\">\r\n                    <span *ngIf=\"isSelectedCurrency === BuySellEnum.Buy\" id=\"selected_buy\">Selected</span>\r\n                    <span *ngIf=\"isSelectedCurrency !== BuySellEnum.Buy\" id=\"select_buy\">Select</span>\r\n                    <img *ngIf=\"isSelectedCurrency === BuySellEnum.Buy\" src=\"images/selected-exposure-icon.svg\"\r\n                      alt=\"Selected Icon\" class=\"icon\">\r\n                  </button>\r\n                </div>\r\n              </div>\r\n\r\n              <div class=\"buy-sell-option\" (click)=\"selectBuySellCurrency(BuySellEnum.Sell)\"\r\n                [ngClass]=\"{ 'selected-currency-border': isSelectedCurrency === BuySellEnum.Sell, 'exposure-require': exposureRequired }\">\r\n                <div class=\"currency-img-container\">\r\n                  <img [src]=\"buySellCurrRes.flag\" class=\"currency-image\" />\r\n                </div>\r\n                <div class=\"actions-container\">\r\n                  <div class=\"buy-sell-title\">\r\n                    <h4 class=\"title\">I am Selling</h4>\r\n                    <p class=\"subtitle\">I'm exposed when the {{buySellCurrRes.code}} weakens because I get fewer\r\n                      {{selectedFromCurrency.code}},<br /> lowering my income.</p>\r\n                  </div>\r\n                  <button class=\"buy-sell-btn\" id=\"sellExposureBtn\"\r\n                    [ngClass]=\"{ 'selected-opt': isSelectedCurrency === BuySellEnum.Sell}\">\r\n                    <span *ngIf=\"isSelectedCurrency === BuySellEnum.Sell\" id=\"selected_sell\">Selected</span>\r\n                    <span *ngIf=\"isSelectedCurrency !== BuySellEnum.Sell\" id=\"select_sell\">Select</span>\r\n                    <img *ngIf=\"isSelectedCurrency === BuySellEnum.Sell\" src=\"images/selected-exposure-icon.svg\"\r\n                      alt=\"Selected Icon\" class=\"icon\">\r\n                  </button>\r\n                </div>\r\n              </div>\r\n              <p *ngIf=\"exposureRequired\" class=\"error-msg\"><img src=\"images/error-exposure.svg\"> Please select\r\n                one\r\n              </p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </ng-container>\r\n\r\n    <ng-container *ngIf=\"isDisplayAmountExplosure && !exposureRequired\">\r\n      <div class=\"monthly-exposure-pair-wrapper\" id=\"isLoadAmountExplosureFocus\" #isLoadAmountExplosureFocus tabindex=\"0\">\r\n        <div class=\"exposure-wrapper\">\r\n          <div class=\"img-pair\">\r\n            <img src=\"images/exposure-virtual.svg\" alt=\"exposure\" />\r\n          </div>\r\n          <div class=\"content-pair-main\">\r\n            <div class=\"currency-pair-inner\">\r\n              <div class=\"inner-content\">\r\n                <h4 class=\"title-pair\">Set monthly exposure</h4>\r\n                <p class=\"subtitle-pair\">Set an amount, and we'll project for several months ahead.</p>\r\n              </div>\r\n              <div class=\"progress-container\" *ngIf=\"isDisplayAmountExplosure && isFormSubmit\">\r\n                <mat-progress-bar #formStepperProgress class=\"stepper-progressbar\" mode=\"determinate\"\r\n                  value=\"75\"></mat-progress-bar> <span class=\"progress-count\"> 3/4 </span>\r\n              </div>\r\n            </div>\r\n            <div class=\"monthly-amount-container\">\r\n              <div class=\"amount-container d-flex\">\r\n                <div class=\"amount-container-items\">\r\n                  <div class=\"amount-input\">\r\n                    <div class=\"amount-inner form-group\" [ngClass]=\"{'invalid-amount': isDisplayAmountValidationMsg}\">\r\n                      <span>{{buySellCurrRes.sign}}</span>\r\n                      <label class=\"input-label\" for=\"\">Set an amount</label>\r\n                      <input type=\"text\" id=\"setMonthlyAmountInput\" class=\"cashflow-name-input\" placeholder=\"0\" (input)=\"formatNumber($event);\" [ngModel]=\"amountValue\"\r\n                        (blur)=\"setAmountWithTwoFraction()\" [maxLength]=\"14\" (keypress)=\"restrictLength($event)\"\r\n                        (keydown)=\"preventDecimalValue($event)\" formControlName=\"monthlyAmount\">\r\n                    </div>\r\n                    <p class=\"error-msg\" *ngIf=\"isDisplayAmountValidationMsg\">\r\n                      Minimum amount allowed is {{selectedFromCurrency.sign}}1\r\n                    </p>\r\n                  </div>\r\n                </div>\r\n                <div class=\"amount-container-items\">\r\n                  <mat-select class=\"select-month\" panelClass=\"month-exposure-ddl\" id=\"monthExposureddl\" (selectionChange)=\"getMonthValue($event)\" [(ngModel)]=\"monthlyPeriod\" [ngModelOptions]=\"{standalone: true}\">\r\n                    <mat-option [value]=\"12\">12 Months</mat-option>\r\n                    <mat-option [value]=\"6\">6 Months</mat-option>\r\n                  </mat-select>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <span *ngIf=\"maxLengthError && !isDisplayAmountValidationMsg\" class=\"error-message\">Maximum amount allowed is {{buySellCurrRes.sign}}100,000,000</span>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </ng-container>\r\n  </form>\r\n  <div class=\"risk-options-prev-back\">\r\n    <!-- Step 1 -->\r\n    <ng-container *ngIf=\"!isFormSubmit && !isDisplayAmountExplosure\">\r\n      <button class=\"back-to-previous\" (click)=\"goToPrevious()\" id=\"backToPrev__i1\">Back</button>\r\n      <button class=\"move-to-next\" (click)=\"submitCashFlowExposureForm()\" id=\"backToNext__i1\">\r\n        <span>Next</span> <img src=\"images/arrow-right-next.svg\" alt=\"next\"></button>\r\n    </ng-container>\r\n    <!-- Step 2 -->\r\n    <ng-container *ngIf=\"isFormSubmit && !isDisplayAmountExplosure && isSelectedCurrency\">\r\n      <button class=\"back-to-previous\" (click)=\"closeFormSubmit()\" id=\"backToPrev__i2\">Back</button>\r\n      <button class=\"move-to-next\" (click)=\"submitFormWithoutBuyORSell()\" id=\"backToNext__i2\">\r\n      <!-- <button class=\"move-to-next\" id=\"backToNext__i2\"> -->\r\n        <span>Next</span> <img src=\"images/arrow-right-next.svg\" alt=\"next\"></button>\r\n    </ng-container>\r\n    <!-- Step 3 -->\r\n    <ng-container *ngIf=\"isDisplayAmountExplosure && isFormSubmit\">\r\n      <button class=\"back-to-previous\" (click)=\"closeAmountExplosure()\" id=\"backToPrev__i3\">Back</button>\r\n      <button class=\"move-to-next\" (click)=\"sendAmountValue()\" id=\"backToNext__i3\">\r\n        <span>Next</span> <img src=\"images/arrow-right-next.svg\" alt=\"next\"></button>\r\n    </ng-container>\r\n  </div>\r\n\r\n  <div class=\"risk-exposure-loader text-center\" [ngClass]=\"isCreateMonthlyTable ? 'show-loader' : ''\">\r\n    <img src=\"images/risk-loader.gif\" alt=\"loader\" />\r\n    <div class=\"loader-text\">\r\n      <h3>Creating monthly exposure table</h3>\r\n      <span>Please wait it will take a few seconds</span>\r\n    </div>\r\n  </div>\r\n</section>"
        },
        {
            "name": "CashflowExposureSteppersComponent",
            "id": "component-CashflowExposureSteppersComponent-26b004e3a4a90687707543c4ebd2da12768176261d99dc3a7f7051c42ee0616e75a705a39376361f27cf862cd95c1c47fae423ce0c82adb60882f3d0b4e0d4aa",
            "file": "src/app/risk-dashboard/components/cashflow-exposure/cashflow-exposure-steppers/cashflow-exposure-steppers.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-cashflow-exposure-steppers",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./cashflow-exposure-steppers.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "onStepChange",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "MatStepperModule",
                    "type": "module"
                },
                {
                    "name": "MatProgressBarModule",
                    "type": "module"
                },
                {
                    "name": "CashflowExposureStep1Component",
                    "type": "component"
                },
                {
                    "name": "CashflowExposureStep2Component",
                    "type": "component"
                },
                {
                    "name": "CashflowExposureDetailsComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\r\nimport { MatStepperModule } from '@angular/material/stepper';\r\nimport { CashflowExposureStep1Component } from \"../components/cashflow-exposure-step1/cashflow-exposure-step1.component\";\r\nimport { CashflowExposureDetailsComponent } from \"../components/cashflow-exposure-details/cashflow-exposure-details.component\";\r\nimport { CashflowExposureStep2Component } from '../components/cashflow-exposure-step2/cashflow-exposure-step2.component';\r\n\r\n@Component({\r\n  selector: 'app-cashflow-exposure-steppers',\r\n  imports: [MatStepperModule, MatProgressBarModule, CashflowExposureStep1Component, CashflowExposureStep2Component, CashflowExposureDetailsComponent],\r\n  templateUrl: './cashflow-exposure-steppers.component.html',\r\n  styleUrl: './cashflow-exposure-steppers.component.scss'\r\n})\r\nexport class CashflowExposureSteppersComponent {\r\n  onStepChange(): void {\r\n    setTimeout(() => {\r\n      const offset = 20;\r\n      const element = document.getElementById('content-wrapper');\r\n      if (element) {\r\n        const topPosition = Math.max(0, element.getBoundingClientRect().top + window.pageYOffset - offset);\r\n        window.scrollTo({\r\n          top: topPosition,\r\n          behavior: 'auto'\r\n        });\r\n      } else {\r\n        window.scrollTo({ top: 0, behavior: 'auto' });\r\n      }\r\n    }, 50);\r\n  }\r\n  \r\n}\r\n\r\n",
            "styleUrl": "./cashflow-exposure-steppers.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"risk-manager-stepper\">\r\n    <mat-stepper #formStepper class=\"form-stepper\" (selectionChange)=\"onStepChange()\">\r\n        <mat-progress-bar #formStepperProgress [hidden]=\"true\"> -- </mat-progress-bar>\r\n        <mat-step>\r\n            <ng-template matStepContent>\r\n                <app-cashflow-exposure-step1 [stepper]=\"formStepper\"> </app-cashflow-exposure-step1>\r\n            </ng-template>\r\n        </mat-step>\r\n        <mat-step>\r\n            <ng-template matStepContent>\r\n                <app-cashflow-exposure-step2 [stepper]=\"formStepper\"> </app-cashflow-exposure-step2>\r\n            </ng-template>\r\n        </mat-step>\r\n        <mat-step>\r\n            <ng-template matStepContent>\r\n                <app-cashflow-exposure-details [stepper]=\"formStepper\"> </app-cashflow-exposure-details>\r\n            </ng-template>\r\n        </mat-step>\r\n    </mat-stepper>\r\n</div>"
        },
        {
            "name": "ChangePasswordComponent",
            "id": "component-ChangePasswordComponent-0246dd393a29ea15d48c27686637e4e2909e28d047e968f99dcfb422fd4e09698cc0db1626b194c8a21a7d339d5efec58774a5c3a10521a4c710ede35cb24442",
            "file": "src/app/login/change-password/change-password.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-change-password",
            "styleUrls": [
                "./change-password.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./change-password.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_hasDigit",
                    "defaultValue": "this.Validation.hasDigit",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "_hasLowerCase",
                    "defaultValue": "this.Validation.hasLowerCase",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "_hasSpecial",
                    "defaultValue": "this.Validation.hasSpecial",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "_hasUpperCase",
                    "defaultValue": "this.Validation.hasUpperCase",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "error",
                    "defaultValue": "\"\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "hasDigit",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "hasEight",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "hasLower",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "hasSpecial",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "hasUpper",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "hideConfPassword",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "hidePassword",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "illegall",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "invalidAccount",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "isPasswordNotMatch",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "minPasswordLength",
                    "defaultValue": "8",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "needVerification",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "resetPasswordForm",
                    "defaultValue": "new FormGroup({\r\n    newPassword: new FormControl('', [Validators.required, this.passwordValidator()]),\r\n    confirmPassword: new FormControl('', [Validators.required])\r\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "showLoader",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "typeVerification",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "Validation",
                    "defaultValue": "{\r\n    hasLowerCase: /[a-z]/,\r\n    hasUpperCase: /[A-Z]/,\r\n    hasDigit: /\\d/,\r\n    hasSpecial: /[!@#$%^&*\\(\\)\\_\\-\\[\\]\\{}\\\\=+|;':\",.\\/<>?]/,\r\n    minPasswordLength: 8\r\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 25
                }
            ],
            "methodsClass": [
                {
                    "name": "changeFormErrors",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 73,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "changePassword",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 77,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "navigateBack",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 70,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "passwordValidator",
                    "args": [],
                    "optional": false,
                    "returnType": "ValidatorFn",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "strongPasswordCheck",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 86,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "MatIconModule",
                    "type": "module"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                },
                {
                    "name": "TranslateModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { AbstractControl, FormControl, FormGroup, ReactiveFormsModule, ValidatorFn, Validators } from '@angular/forms';\r\nimport { Router } from '@angular/router';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { CommonModule } from '@angular/common';\r\nimport { TranslateModule } from '@ngx-translate/core';\r\n\r\n@Component({\r\n  selector: 'app-change-password',\r\n  templateUrl: './change-password.component.html',\r\n  styleUrls: ['./change-password.component.scss'],\r\n  imports: [CommonModule, MatIconModule, ReactiveFormsModule, TranslateModule],\r\n})\r\nexport class ChangePasswordComponent implements OnInit {\r\n  hidePassword = true;\r\n  hideConfPassword = true;\r\n  typeVerification!: string;\r\n  illegall!: boolean;\r\n  hasLower!: boolean;\r\n  minPasswordLength: number = 8;\r\n  hasEight!: boolean;\r\n  hasUpper!: boolean;\r\n  hasDigit!: boolean;\r\n  hasSpecial!: boolean;\r\n  Validation = {\r\n    hasLowerCase: /[a-z]/,\r\n    hasUpperCase: /[A-Z]/,\r\n    hasDigit: /\\d/,\r\n    hasSpecial: /[!@#$%^&*\\(\\)\\_\\-\\[\\]\\{}\\\\=+|;':\",.\\/<>?]/,\r\n    minPasswordLength: 8\r\n  }\r\n  _hasLowerCase = this.Validation.hasLowerCase;\r\n  _hasUpperCase = this.Validation.hasUpperCase;\r\n  _hasDigit = this.Validation.hasDigit;\r\n  _hasSpecial = this.Validation.hasSpecial;\r\n  isPasswordNotMatch = false;\r\n  invalidAccount = false;\r\n  needVerification = false;\r\n  showLoader = false;\r\n  error = \"\"\r\n \r\n\r\n  resetPasswordForm = new FormGroup({\r\n    newPassword: new FormControl('', [Validators.required, this.passwordValidator()]),\r\n    confirmPassword: new FormControl('', [Validators.required])\r\n  })\r\n\r\n  constructor(private router: Router) { }\r\n\r\n\r\n  ngOnInit() {\r\n    this.changeFormErrors();\r\n    this.resetPasswordForm.valueChanges.subscribe(() => {\r\n      this.changeFormErrors();\r\n    });\r\n  }\r\n\r\n  passwordValidator(): ValidatorFn {\r\n    const passwordPattern = /^(?=.*[A-Z])(?=.*[a-z])(?=.*\\d)[A-Za-z\\d!@#$%^&*]*$/;\r\n\r\n    return (control: AbstractControl): { [key: string]: any } | null => {\r\n      const value = control.value;\r\n      if (!value || !passwordPattern.test(value)) {\r\n        return { 'invalidPassword': true };\r\n      }\r\n      return null;\r\n    };\r\n  }\r\n\r\n  navigateBack() {\r\n    this.router.navigate(['/reset-password']);\r\n  }\r\n  changeFormErrors() {\r\n    this.error = \"\";\r\n    this.invalidAccount = false;\r\n  }\r\n  changePassword() {\r\n    if (this.resetPasswordForm?.value?.newPassword == this.resetPasswordForm?.value?.confirmPassword &&\r\n      this.resetPasswordForm.controls.newPassword.valid && this.resetPasswordForm.controls.confirmPassword.valid\r\n    ) {\r\n      this.resetPasswordForm.markAllAsTouched();\r\n      this.router.navigate(['/login']);\r\n    }\r\n  }\r\n\r\n  strongPasswordCheck() {\r\n    this.illegall = false;\r\n    let password = this.resetPasswordForm?.value?.newPassword;\r\n    this.hasEight = (password && password.length >= this.minPasswordLength) || false;\r\n    this.hasLower = this._hasLowerCase?.test(password!);\r\n    this.hasUpper = this._hasUpperCase?.test(password!);\r\n    this.hasDigit = this._hasDigit?.test(password!);\r\n    this.hasSpecial = this._hasSpecial?.test(password!);\r\n\r\n    if (\r\n      !this.hasEight ||\r\n      !this.hasDigit ||\r\n      !this.hasSpecial ||\r\n      !this.hasUpper ||\r\n      !this.hasLower\r\n    ) {\r\n      this.illegall = true;\r\n    } else {\r\n      this.illegall = false;\r\n    }\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"../login.component.scss\";",
                    "styleUrl": "./change-password.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 46,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<section class=\"auth-section\">\r\n    <div class=\"left-side\">\r\n        <div class=\"form-wrapper\">\r\n            <ng-container>\r\n                <a class=\"back-btn\" (click)=\"navigateBack()\" id=\"back_to_login\">\r\n                    <mat-icon>chevron_left</mat-icon>\r\n                    <span>Back</span>\r\n                </a>\r\n                <ng-container *ngIf=\"!needVerification\">\r\n                    <h3 class=\"heading reset-password-heading\">Reset password</h3>\r\n                    <form #resetForm=\"ngForm\" [formGroup]=\"resetPasswordForm\" (ngSubmit)=\"changePassword()\">\r\n                        <ng-container>\r\n                            <div class=\"password-instruction\">\r\n                                <p class=\"message\">Password must contain</p>\r\n                                <span class=\"detail\" [ngClass]=\"{'verified': hasEight}\">\r\n                                    <mat-icon *ngIf=\"hasEight\">check</mat-icon>\r\n                                    <mat-icon *ngIf=\"!hasEight\">close</mat-icon>\r\n                                    <span>8 Characters</span>\r\n                                </span>\r\n\r\n                                <span class=\"detail\" [ngClass]=\"{'verified': hasDigit}\">\r\n                                    <mat-icon *ngIf=\"hasDigit\">check</mat-icon>\r\n                                    <mat-icon *ngIf=\"!hasDigit\">close</mat-icon>\r\n                                    <span>Numbers</span>\r\n                                </span>\r\n                                <span class=\"detail\" [ngClass]=\"{'verified': hasLower}\">\r\n                                    <mat-icon *ngIf=\"hasLower\">check</mat-icon>\r\n                                    <mat-icon *ngIf=\"!hasLower\">close</mat-icon>\r\n                                    <span>Lower case</span>\r\n                                </span>\r\n                                <span class=\"detail\" [ngClass]=\"{'verified': hasUpper}\">\r\n                                    <mat-icon *ngIf=\"hasUpper\">check</mat-icon>\r\n                                    <mat-icon *ngIf=\"!hasUpper\">close</mat-icon>\r\n                                    <span>Upper case</span>\r\n                                </span>\r\n                                \r\n                                <span class=\"detail\" [ngClass]=\"{'verified': hasUpper}\">\r\n                                    <mat-icon *ngIf=\"hasSpecial\">check</mat-icon>\r\n                                    <mat-icon *ngIf=\"!hasSpecial\">close</mat-icon>\r\n                                    <span>Special Characters</span>\r\n                                </span>\r\n                            </div>\r\n                            <div class=\"form-group\">\r\n                                <label for=\"newPassword\">Reset password</label>\r\n                                <div class=\"input-wrapper\">\r\n                                    <input name=\"newPassword\" class=\"form-control\"\r\n                                        [type]=\"hidePassword ? 'password' : 'text'\" id=\"new_password\"\r\n                                        (keyup)=\"strongPasswordCheck()\" formControlName=\"newPassword\" required />\r\n                                    <mat-icon *ngIf=\"resetPasswordForm.controls.newPassword.value\" class=\"eye-icon\" matSuffix (click)=\"hidePassword = !hidePassword\"\r\n                                        id=\"show_hide_password\">{{hidePassword ? 'visibility_off' :\r\n                                        'visibility'}}</mat-icon>\r\n                                </div>\r\n                                <span\r\n                                    *ngIf=\"resetForm.submitted && resetPasswordForm.controls.newPassword.hasError('required')\"\r\n                                    class=\"error-msg\">Required</span>\r\n                                <span\r\n                                    *ngIf=\"resetForm.submitted && !resetPasswordForm.controls.newPassword.hasError('required') && illegall\"\r\n                                    class=\"error-msg\">\r\n                                    Password is not valid\r\n                                </span>\r\n                                <span class=\"error-msg\"\r\n                                    *ngIf=\"hasSpecial && resetPasswordForm.get('newPassword')?.hasError('invalidPassword')\">\r\n                                    Special characters can be inserted !#$%^&*\r\n                                </span>\r\n                            </div>\r\n                            <div class=\"form-group\">\r\n                                <label for=\"confirmPassword\">Confirm password</label>\r\n                                <div class=\"input-wrapper\">\r\n                                    <input name=\"newPassword\" class=\"form-control\"\r\n                                        [type]=\"hideConfPassword ? 'password' : 'text'\" name=\"confirmPassword\"\r\n                                        formControlName=\"confirmPassword\" id=\"confirm_password\" required />\r\n                                    <mat-icon *ngIf=\"resetPasswordForm.controls.confirmPassword.value\"  class=\"eye-icon\" id=\"confirm_show_password\" matSuffix\r\n                                        (click)=\"hideConfPassword = !hideConfPassword\">{{hideConfPassword ?\r\n                                        'visibility_off' :\r\n                                        'visibility'}}</mat-icon>\r\n                                </div>\r\n\r\n                            </div>\r\n                            <div\r\n                                *ngIf=\"resetForm.submitted && (resetPasswordForm.value.confirmPassword != resetPasswordForm.value.newPassword)\"\r\n                                class=\"error-msg not-match-password\">Passwords do not match</div>\r\n                            <span\r\n                                *ngIf=\"!(resetForm.submitted && (resetPasswordForm.value.confirmPassword != resetPasswordForm.value.newPassword) && resetPasswordForm.controls.confirmPassword.valid) && error\"\r\n                                class=\"error-msg\">{{ 'AUTHENTICATION_SEND_VERIFICATION_ERRORS.' + error | translate\r\n                                }}</span>\r\n                        </ng-container>\r\n\r\n                        <button class=\"submit-btn\" [class.disabled]=\"showLoader||error\" [disabled]=\"showLoader\"\r\n                            id=\"button_send_email\">Send SMS\r\n                        </button>\r\n                    </form>\r\n                </ng-container>\r\n            </ng-container>\r\n        </div>\r\n    </div>\r\n    <div class=\"right-side\">\r\n        <div class=\"content\">\r\n            <img class=\"logo\" src=\"images/abcm-logo.svg\" alt=\"logo\" />\r\n            <h1 class=\"main-heading\">The World's First</h1>\r\n            <h2 class=\"sub-heading\">Automated business currency management</h2>\r\n        </div>\r\n    </div>\r\n</section>"
        },
        {
            "name": "ChartsTabsComponent",
            "id": "component-ChartsTabsComponent-b79474b4c12897de97c4d8ec579507d25566d78313e5459294198cff98e6b22981f3e0d08791ca7314abcee86deadcd011da33fd68e31bec2264106cecaa5dd8",
            "file": "src/app/risk-dashboard/components/dashboard/components/charts-tabs/charts-tabs.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-charts-tabs",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./charts-tabs.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "activeIndex",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "loadExposureChart",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "loadMonthChart",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "methodsClass": [
                {
                    "name": "onTabChange",
                    "args": [
                        {
                            "name": "event",
                            "type": "MatTabChangeEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "MatTabChangeEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "showHedge",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "MatTabsModule",
                    "type": "module"
                },
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "MonthlyExposureChartComponent",
                    "type": "component"
                },
                {
                    "name": "ExposureRateChartComponent",
                    "type": "component"
                },
                {
                    "name": "RouterModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { Component, EventEmitter } from '@angular/core';\r\nimport { MatTabsModule, MatTabChangeEvent } from '@angular/material/tabs';\r\nimport { MonthlyExposureChartComponent } from \"../monthly-exposure-chart/monthly-exposure-chart.component\";\r\nimport { ExposureRateChartComponent } from \"../exposure-rate-chart/exposure-rate-chart.component\";\r\nimport { Router, RouterModule } from '@angular/router';\r\n@Component({\r\n  selector: 'app-charts-tabs',\r\n  imports: [MatTabsModule, CommonModule, MonthlyExposureChartComponent, ExposureRateChartComponent,RouterModule],\r\n  templateUrl: './charts-tabs.component.html',\r\n  styleUrl: './charts-tabs.component.scss'\r\n})\r\nexport class ChartsTabsComponent {\r\n  loadMonthChart: boolean = true;\r\n  loadExposureChart: boolean = false;\r\n  activeIndex: number = 0;\r\n  constructor(private router: Router){\r\n\r\n  }\r\n  onTabChange(event: MatTabChangeEvent) {\r\n    const index = event.index;\r\n    this.activeIndex = index;\r\n    switch (index) {\r\n      case 0:\r\n        this.loadMonthChart = true;\r\n        this.loadExposureChart = false;\r\n        break;\r\n      case 1:\r\n        this.loadExposureChart = true;\r\n        this.loadMonthChart = false;\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  }\r\n  showHedge(){\r\n    this.router.navigate(['/hedging']);\r\n  }\r\n}\r\n",
            "styleUrl": "./charts-tabs.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<div class=\"monthly-analysis-charts\">\r\n    <div class=\"chart-head\">\r\n        <h4 class=\"info-title\"><img src=\"images/exposure-virtual.svg\" alt=\"exposure\" />Monthly\r\n            analysis</h4>\r\n            <div class=\"btn-right\">\r\n                <button class=\"edit-btn\" id=\"editexposureBtn__rmdb\">Edit</button>\r\n                <button class=\"hedge-btn\" id=\"quickHedge__rmdb\" (click)=\"showHedge()\">Quick Hedge</button>\r\n            </div>\r\n    </div>\r\n    <div class=\"tab-wrap\">\r\n        <mat-tab-group mat-stretch-tabs=\"false\" class=\"chart-tabs-group\" mat-align-tabs=\"center\" (selectedTabChange)=\"onTabChange($event)\">\r\n            <mat-tab label=\"Monthly exposure\" class=\"chart-tab\">\r\n                <app-monthly-exposure-chart *ngIf=\"loadMonthChart\"></app-monthly-exposure-chart>\r\n            </mat-tab>\r\n            <mat-tab label=\"Exposure & rates\" class=\"chart-tab\">\r\n                <app-exposure-rate-chart *ngIf=\"loadExposureChart\"></app-exposure-rate-chart>\r\n            </mat-tab>\r\n        </mat-tab-group>\r\n    </div>\r\n</div>"
        },
        {
            "name": "CodeVerificationComponent",
            "id": "component-CodeVerificationComponent-92f3ca9d5b6ccc816ad7f6d41531e28d80b284e27b4cb47ed764a954f99efc5b5dd723559f4bbea32effc4578f07b2115306554799a0866233dd5d9aafca8c06",
            "file": "src/app/login/code-verification/code-verification.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-code-verification",
            "styleUrls": [
                "./code-verification.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./code-verification.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "formData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "timerTooltip",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "typeVerification",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "back",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "EventEmitter<boolean>"
                },
                {
                    "name": "codeValidEvent",
                    "defaultValue": "new EventEmitter<boolean>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "code",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "codeIsValid",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "codeResendSuccess",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "codeStatus",
                    "defaultValue": "'DEFAULT'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "componentDestroyed",
                    "defaultValue": "new Subject<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "digit1",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "digit2",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "digit3",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "digit4",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "incorrectCode",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "passwordResetSuccess",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "privacyPolicyUrl",
                    "defaultValue": "'https://okoora.com/terms-of-service/'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "refreshAPIError",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "showLoader",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "termsOfUseUrl",
                    "defaultValue": "'https://okoora.com/terms-of-service/'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "timer",
                    "defaultValue": "{\r\n      minutes: '0',\r\n      seconds: '00',\r\n      active: false\r\n    }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "timerIntervalId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 49
                },
                {
                    "name": "verificationError",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 39
                }
            ],
            "methodsClass": [
                {
                    "name": "allDigitsFilled",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 91,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "emailValue",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 186,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "handleActionByStep",
                    "args": [
                        {
                            "name": "data",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 209,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleEditValue",
                    "args": [
                        {
                            "name": "e",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 180,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "e",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleSignUp",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 183,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onDigitChange",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 87,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onResend",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 116,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "performEmailVerification",
                    "args": [
                        {
                            "name": "action",
                            "type": "\"SEND\" | \"CHECK\"",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 68,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "action",
                            "type": "\"SEND\" | \"CHECK\"",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "resendCode",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 127,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "resetFormErrors",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 64,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "resetPassword",
                    "args": [
                        {
                            "name": "newPassword",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "validationId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 159,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "newPassword",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "validationId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "restrictSpecialCharacters",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 189,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "startTimer",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 131,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "verifyCode",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 95,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "FormsModule",
                    "type": "module"
                },
                {
                    "name": "MatTooltipModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { Observable, Subject } from 'rxjs';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { CommonModule } from '@angular/common';\r\nimport { MatTooltipModule } from '@angular/material/tooltip';\r\n\r\n@Component({\r\n  selector: 'app-code-verification',\r\n  templateUrl: './code-verification.component.html',\r\n  styleUrls: ['./code-verification.component.scss'],\r\n  imports: [CommonModule, FormsModule, MatTooltipModule],\r\n})\r\nexport class CodeVerificationComponent {\r\n  @Input() formData: any;\r\n  @Input()\r\n  typeVerification!: string;\r\n  @Input()\r\n  type!: string;\r\n  @Input('timerTooltip')\r\n  timerTooltip!: string;\r\n  codeStatus = 'DEFAULT';\r\n  @Output('codeValidEvent') codeValidEvent = new EventEmitter<boolean>();\r\n  componentDestroyed = new Subject<any>();\r\n  @Output() back: EventEmitter<boolean> = new EventEmitter();\r\n  digit1: string = '';\r\n  digit2: string = '';\r\n  digit3: string = '';\r\n  digit4: string = '';\r\n  privacyPolicyUrl: string = 'https://okoora.com/terms-of-service/';\r\n  termsOfUseUrl: string = 'https://okoora.com/terms-of-service/';\r\n  code!: number;\r\n  refreshAPIError: boolean = false;\r\n  codeIsValid: boolean = true;\r\n  incorrectCode = false;\r\n  passwordResetSuccess = false;\r\n  showLoader = false;\r\n  codeResendSuccess = false;\r\n  verificationError = '';\r\n  timer: {\r\n    minutes: string,\r\n    seconds: string,\r\n    active: boolean\r\n  } = {\r\n      minutes: '0',\r\n      seconds: '00',\r\n      active: false\r\n    };\r\n  timerIntervalId: any;\r\n\r\n  constructor(private router: Router) {\r\n  }\r\n  ngOnInit() {\r\n    this.resetFormErrors();\r\n    // if (this.formData.valueChanges) {\r\n    //   this.formData.valueChanges.subscribe(() => {\r\n    //     this.resetFormErrors();\r\n    //   });\r\n    // }\r\n    this.startTimer();\r\n\r\n  }\r\n\r\n  resetFormErrors() {\r\n    this.verificationError = \"\";\r\n  }\r\n\r\n  performEmailVerification(action: 'SEND' | 'CHECK', email: string): void {\r\n    let request: Observable<[string, any]>;\r\n    this.incorrectCode = true;\r\n    this.showLoader = false;\r\n\r\n    if (action === 'SEND') {\r\n      // request = combineLatest([\r\n      //   of('SEND'),\r\n      //   // this.KycS.SendEmailVerificationCode(email)\r\n      // ]);\r\n    } else if (action === 'CHECK') {\r\n\r\n    }\r\n    else {\r\n      console.error(`Unhandled action ${action}`);\r\n      return;\r\n    }\r\n  }\r\n\r\n  onDigitChange(): void {\r\n    this.verificationError = '';\r\n  }\r\n\r\n  allDigitsFilled(): boolean {\r\n    return [this.digit1, this.digit2, this.digit3, this.digit4].every(d => d !== '');\r\n  }\r\n\r\n  verifyCode() {\r\n    if (!this.allDigitsFilled()) {\r\n      this.verificationError = 'Please enter all 4 digits.';\r\n      return;\r\n    }\r\n\r\n    const enteredCode = `${this.digit1}${this.digit2}${this.digit3}${this.digit4}`;\r\n\r\n    if (enteredCode === '1111') {\r\n      this.incorrectCode = true;\r\n      this.verificationError = 'The code you have entered is invalid. Please try again.';\r\n      return;\r\n    }\r\n\r\n    this.incorrectCode = false;\r\n    this.verificationError = '';\r\n    this.router.navigate(['/change-password']);\r\n  }\r\n\r\n\r\n\r\n  onResend() {\r\n    if (this.timer.active) {\r\n      console.warn(`Resend code called even though the timer is active.`);\r\n      return;\r\n    }\r\n    this.refreshAPIError = false;\r\n    //this.resendCode = true;\r\n    //this.resend.emit();\r\n    this.handleActionByStep({ action: 'SEND' });\r\n  }\r\n\r\n  resendCode() {\r\n    this.startTimer();\r\n  }\r\n\r\n  startTimer(): void {\r\n    // Clear any existing timer\r\n    if (this.timerIntervalId) {\r\n      clearInterval(this.timerIntervalId);\r\n    }\r\n\r\n    const totalSeconds = 60;\r\n    let remainingSeconds = totalSeconds;\r\n\r\n    this.timer.active = true;\r\n\r\n    this.timerIntervalId = setInterval(() => {\r\n      const minutes = Math.floor(remainingSeconds / 60);\r\n      const seconds = remainingSeconds % 60;\r\n\r\n      this.timer.minutes = minutes.toString();\r\n      this.timer.seconds = seconds < 10 ? '0' + seconds : seconds.toString();\r\n\r\n      if (remainingSeconds === 0) {\r\n        clearInterval(this.timerIntervalId);\r\n        this.timer.active = false;\r\n      } else {\r\n        remainingSeconds--;\r\n      }\r\n    }, 1000);\r\n  }\r\n\r\n\r\n  resetPassword(newPassword: any, validationId: string) {\r\n    let request: any = {\r\n      newPassword: newPassword,\r\n      forgetPasswordValidationId: validationId\r\n    }\r\n\r\n    // this._forgotPasswordService.resetPassword(request)\r\n    //   .subscribe(\r\n    //     (response: any) => {\r\n    //       const statusCode = response.status;\r\n\r\n    //       if (statusCode) {\r\n    //         this.showLoader = false;\r\n    //         this.passwordResetSuccess = true;\r\n    //       }\r\n    //     },\r\n    //     (error: any) => {\r\n    //       console.error(error);\r\n    //     }\r\n    //   );\r\n  }\r\n  handleEditValue(e: Event) {\r\n    e.preventDefault();\r\n  }\r\n  handleSignUp(): void {\r\n    // Error handling \r\n  }\r\n  emailValue(): string {\r\n    return this.formData.username;\r\n  }\r\n  restrictSpecialCharacters(event: any) {\r\n    const invalidChars = ['<', '>', ';', '=', '+'];\r\n    if (event?.target?.value?.length === 0 && event?.key === \".\") {\r\n      event?.preventDefault();\r\n    } else {\r\n      const dotOccurrences = (event?.target?.value.match(/\\./g) || []).length;\r\n      if (event?.key === \".\" && dotOccurrences >= 3) {\r\n        event?.preventDefault();\r\n      }\r\n\r\n      if (invalidChars.includes(event.key)) {\r\n        event.preventDefault();\r\n      }\r\n      const allowedKeys = /^[a-zA-Z0-9.@\\u00C0-\\u017F]$/;\r\n      if (!allowedKeys.test(event.key) && !['Backspace', 'Tab', 'ArrowLeft', 'ArrowRight', 'Enter'].includes(event.key)) {\r\n        event.preventDefault();\r\n      }\r\n    }\r\n  }\r\n\r\n  handleActionByStep(data: { action: 'SEND' | 'CHECK' }): void {\r\n    const { action: dynamicAction } = data;\r\n    let payload: any;\r\n    let verificationAction: 'CHECK_EMAIL_VERIFICATION' | 'SEND_EMAIL_VERIFICATION' | 'CHECK_PHONE_VERIFICATION' | 'SEND_PHONE_VERIFICATION';\r\n\r\n    const userEmail = this.formData.username;\r\n    if (!userEmail) return;\r\n    payload = { email: userEmail };\r\n    verificationAction = dynamicAction === 'SEND' ? 'SEND_EMAIL_VERIFICATION' : 'CHECK_EMAIL_VERIFICATION';\r\n\r\n    if (verificationAction === 'CHECK_EMAIL_VERIFICATION' || verificationAction === 'SEND_EMAIL_VERIFICATION') {\r\n      this.performEmailVerification(dynamicAction, payload.email);\r\n    }\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"../../../assets/scss/variable\";\r\n@import \"../../../assets/scss/mixins\";\r\n\r\n.submit-btn {\r\n  &::ng-deep {\r\n    .loader {\r\n      position: absolute;\r\n      top: 0;\r\n      bottom: 0;\r\n      margin: auto;\r\n      right: 0;\r\n      left: 0;\r\n      justify-content: center;\r\n      border-radius: 20px;\r\n    }\r\n  }\r\n}\r\n\r\n.code-verification-wrapper {\r\n  margin-bottom: 40px !important;\r\n\r\n  &:has(.invalid-code-added) {\r\n    margin-bottom: 0 !important;\r\n  }\r\n\r\n  @media screen and (max-width: 1440px) {\r\n      margin-bottom: 35px !important;\r\n  }\r\n  .sub-heading {\r\n    margin-bottom: 22px;\r\n\r\n    @media screen and (max-width: 1440px) {\r\n      margin-bottom: 20px;\r\n    }\r\n  }\r\n\r\n  .verification-inputs {\r\n    input {\r\n      color: $white;\r\n      text-align: center;\r\n      font-family: 'Heebo';\r\n      font-size: 36px !important; \r\n      font-style: normal;\r\n      font-weight: 500;\r\n      line-height: normal;\r\n    }\r\n  }\r\n\r\n  .code-require-error {\r\n    color: #EF4444;\r\n    font-family: 'Heebo';\r\n    font-size: 14px;\r\n    font-weight: 500;\r\n    line-height: 20px;\r\n    margin: 40px 0 23px 0;\r\n  }\r\n  .text-group {\r\n    input {\r\n              background-color: transparent !important;\r\n              border: none !important;\r\n              border-radius: 0 !important;\r\n              border-bottom: 3px solid white !important;\r\n              color: $white;\r\n              padding: 0 20px;\r\n              height: 63px !important;\r\n              font-size: 18px;\r\n              font-weight: 300;\r\n              width: 100%;\r\n              max-width: 82px !important;\r\n  \r\n              @media screen and (max-width: 1440px) {\r\n                font-size: 16px;\r\n                padding: 0 16px;\r\n                height: 63px;\r\n              }\r\n  \r\n              @media screen and (max-width: 1024px) {\r\n                font-size: 18px;\r\n                border-radius: 10px;\r\n                padding: 0 20px;\r\n                height: 52px;\r\n              }\r\n  \r\n              @media screen and (max-width: 767px) {\r\n                font-size: 16px;\r\n                border-radius: 8px;\r\n                height: 48px;\r\n              }\r\n  \r\n              &::placeholder {\r\n                color: #aeaeae;\r\n              }\r\n            }\r\n  }\r\n}\r\n\r\n.not-arrived-code-wrapper {\r\n  color: $white;\r\n  font-family: 'Heebo';\r\n  font-size: 16px;\r\n  font-weight: 400;\r\n  line-height: normal;\r\n  margin-bottom: 38px;\r\n\r\n  .retry-in {\r\n    color: #05F2F2 !important;\r\n    font-family: 'Heebo';\r\n    font-size: 16px;\r\n    font-weight: 500;\r\n    margin-left: 22px;\r\n    line-height: normal;\r\n  }\r\n}\r\n\r\n.action-links {\r\n  color: $white;\r\n  font-family: 'Heebo';\r\n  font-size: 14px;\r\n  font-weight: 500;\r\n  line-height: 20px;\r\n  margin-bottom: 23px;\r\n  @include flex(flex, flex-start, row);\r\n  a {\r\n    color: #05F2F2;\r\n    font-family: 'Heebo';\r\n    font-size: 14px;\r\n    font-weight: 700;\r\n    line-height: 20px;\r\n    text-decoration-line: underline;\r\n    text-decoration-style: solid;\r\n    text-decoration-skip-ink: none;\r\n    text-decoration-thickness: auto;\r\n    text-underline-offset: auto;\r\n    text-underline-position: from-font;\r\n    margin-left: 13px;\r\n    cursor: pointer;\r\n\r\n    @media screen and (max-width: 1440px) {\r\n      font-size: 14px;\r\n      line-height: 22px;\r\n    }\r\n    @media screen and (max-width: 1024px) {\r\n      font-size: 16px;\r\n      line-height: 26px;\r\n    }\r\n  }\r\n}\r\n\r\n.text-group {\r\n  @include flex(flex-start, center, row);\r\n\r\n  input {\r\n    max-width: 46px;\r\n    margin-right: 15px;\r\n    padding: 0 10px !important;\r\n    text-align: center;\r\n  }\r\n}\r\n\r\n\r\n.reset-success-heading {\r\n  font-size: 24px;\r\n  line-height: 36px;\r\n  font-weight: 500;\r\n  color: $white;\r\n  margin-bottom: 8px;\r\n}\r\n\r\n.reset-success-msg {\r\n  font-size: 14px;\r\n  line-height: 22px;\r\n  font-weight: 400;\r\n  color: $white;\r\n}\r\n/*************************************************************************************/\r\n.title {\r\n  font-size: 1.4rem;\r\n  font-weight: 600;\r\n}\r\n.emailLoginVerification{\r\n  background-color: white;\r\n  line-height: 30px;\r\n  text-align: center;\r\n  height: 23rem;\r\n}\r\n.emailLoginVerification-back{\r\n  display: flex;\r\n}\r\n\r\n.masked-input {\r\n    all: unset !important;\r\n    height: 55px !important;\r\n    width: 66px !important;\r\n    border: none !important;\r\n    border-bottom: 2.8px solid #334659 !important;\r\n    border-radius: 0 !important;\r\n    text-align: center !important;\r\n    font-size: 2.5rem !important;\r\n\r\n    &:not(:last-child) {\r\n      margin-right : 30px !important;\r\n  }\r\n}\r\n\r\n\r\n\r\n::ng-deep {\r\n  .action-anchor {\r\n      font-weight     : 500;\r\n      cursor          : pointer;\r\n      text-decoration : none;\r\n      color           : $color-blaze-orange !important;\r\n\r\n      &:hover {\r\n          text-decoration : none;\r\n      }\r\n\r\n      &.edit-email, &.resend-code {\r\n          margin-inline-start : 2px;\r\n      }\r\n  }\r\n\r\n  // #.action-anchor\r\n}\r\n.old-input {\r\n  background-color: #fff;\r\n  border: 1px solid #01031c;\r\n  border-radius: 15px;\r\n  color: #01031c;\r\n  text-indent: 10px;\r\n  min-height: 50px;\r\n}\r\n\r\n.continue-btn {\r\n  margin: 20px 0px;\r\n  min-height: 20px;\r\n\r\n  .mat-button-wrapper {\r\n      display: flex;\r\n      justify-content: center;\r\n      align-items: center;\r\n\r\n      mat-icon {\r\n          display: flex;\r\n          justify-content: center;\r\n          align-items: center;\r\n      }\r\n  }\r\n}\r\n.step-2__wrapper {\r\n  max-width: 70%;\r\n  margin:0 auto;\r\n}\r\n.step-2 {\r\n  button {\r\n      background: linear-gradient(111.05deg, #444444 2.91%, #000000 96.88%);\r\n      border-radius: 40px;\r\n      font-size: 16px;\r\n      // line-height: 22px;\r\n      font-weight: 600;\r\n      color: #fff;\r\n      padding: 12px 0px;\r\n      height: auto;\r\n      transition: 0.3s;\r\n      position: relative;\r\n      width: 100% !important;\r\n      @media screen and (max-width: 1440px) {\r\n          // height: 25px;\r\n          width: 25px;\r\n      }\r\n\r\n      &.disabled {\r\n          background: #f5f5fa !important;\r\n          color: #c6c8cc !important;\r\n          cursor: not-allowed;\r\n      }\r\n  }\r\n}\r\n/*************************************************************************************/\r\n",
                    "styleUrl": "./code-verification.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 49,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<ng-container *ngIf=\"!passwordResetSuccess\">\r\n  <h3 class=\"heading code-verification-heading\" *ngIf=\"typeVerification === 'SMS'\">Confirm OTP</h3>\r\n  <form #frmSms=\"ngForm\" (ngSubmit)=\"frmSms.valid && verifyCode()\">\r\n    <div class=\"form-group code-verification-wrapper\" *ngIf=\"typeVerification === 'SMS'\">\r\n      <label class=\"sub-heading verification-code-heading\">Enter 4 digit verification code sent to in your email address</label>\r\n      <div class=\"text-group verification-inputs\">\r\n        <input type=\"text\" maxlength=\"1\" name=\"digit1\" [(ngModel)]=\"digit1\" #codeOne #digit1txt=\"ngModel\" (ngModelChange)=\"onDigitChange()\"\r\n          (focus)=\"codeOne.select()\" (input)=\"codeOne.value ? codeTwo.select() : codeOne.focus()\" required>\r\n        <input type=\"text\" maxlength=\"1\" name=\"digit2\" [(ngModel)]=\"digit2\" #codeTwo #digit2txt=\"ngModel\" (ngModelChange)=\"onDigitChange()\"\r\n          (focus)=\"codeTwo.select()\" (input)=\"codeTwo.value ? codeThree.select() : codeTwo.focus()\" required>\r\n        <input type=\"text\" maxlength=\"1\" name=\"digit3\" [(ngModel)]=\"digit3\" #codeThree #digit3txt=\"ngModel\" (ngModelChange)=\"onDigitChange()\"\r\n          (focus)=\"codeThree.select()\" (input)=\"codeThree.value ? codeFour.select() : codeThree.focus()\" required>\r\n        <input type=\"text\" maxlength=\"1\" name=\"digit4\" [(ngModel)]=\"digit4\" #codeFour #digit4txt=\"ngModel\" (ngModelChange)=\"onDigitChange()\"\r\n          (focus)=\"codeFour.select()\" (input)=\"codeFour.value ? codeFour.blur() : codeFour.focus()\" required>\r\n      </div>\r\n      <div\r\n        *ngIf=\"frmSms.submitted && !codeResendSuccess &&\r\n          (digit1txt.hasError('required') || digit2txt.hasError('required') || digit3txt.hasError('required') || digit4txt.hasError('required'))\"\r\n          class=\"error-msg code-require-error\">Required</div>\r\n      \r\n      <div class=\"error-msg code-require-error invalid-code-added\" *ngIf=\"verificationError && (digit1txt.value && digit2txt.value && digit3txt.value && digit4txt.value)\"\r\n        >{{verificationError}}</div>\r\n      \r\n      <span *ngIf=\"codeResendSuccess\" class=\"success-msg d-block\">Code resend successfully</span>\r\n    </div>\r\n    <ng-container *ngIf=\"!verificationError && (allDigitsFilled() || !allDigitsFilled())\">\r\n      <div class=\"action-links\" *ngIf=\"typeVerification === 'SMS'\">\r\n        Didn't received the code? <a (click)=\"resendCode()\">Resend</a>\r\n      </div>\r\n    </ng-container>\r\n    \r\n    <div class=\"not-arrived-code-wrapper\">\r\n      Code hasn't arrived? <span>\r\n        <ng-container>\r\n          <a class=\"retry-in action-anchor\" [matTooltip]=\"timerTooltip\" matTooltipClass=\"custom-tooltip\"\r\n            aria-label=\"Button that displays a tooltip that can be programmatically disabled\">\r\n            You can retry\r\n            {{timer.minutes}}:{{timer.seconds}}\r\n          </a>\r\n        </ng-container>\r\n      </span>\r\n    </div>\r\n\r\n    <button class=\"submit-btn\" [disabled]=\"!allDigitsFilled()\">Submit</button>\r\n\r\n  </form>\r\n</ng-container>\r\n<ng-container *ngIf=\"passwordResetSuccess\">\r\n  <h4 class=\"reset-success-heading\">Successful password reset!</h4>\r\n  <p class=\"reset-success-msg\">You can now use your new password to log in to your account</p>\r\n</ng-container>"
        },
        {
            "name": "ConnectedTraderoomComponent",
            "id": "component-ConnectedTraderoomComponent-c0a05889efb5efdcbc0eca0f46cbc1fa2168317fcc0f5626ae399fe5df4d8f8ae2e55c8c49560d1b2511b74aa26b7ba0c5228de6add843b25f22b0457344d4b2",
            "file": "src/app/risk-dashboard/components/hedging-proposal/components/traderoom-components/connected-traderoom/connected-traderoom.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-connected-traderoom",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./connected-traderoom.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-connected-traderoom',\r\n  imports: [],\r\n  templateUrl: './connected-traderoom.component.html',\r\n  styleUrl: './connected-traderoom.component.scss'\r\n})\r\nexport class ConnectedTraderoomComponent {\r\n\r\n}\r\n",
            "styleUrl": "./connected-traderoom.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"connected-traderoom-wrapper\">\r\n    <p class=\"title traderoom-connect-title\">Connected!</p>\r\n    <p class=\"subtext\">Conversation with trading room <span>is active </span></p>    \r\n</div>\r\n<!-- <div *ngIf=\"!wantToPurchaseDeal\" class=\"purchasing-in-progress\">\r\n    <p class=\"font-2 content\">\r\n        In order to purchase the hedge, you must confirm the purchase with the customer service,\r\n        after approval, the hedge purchase will be made automatically.\r\n    </p>\r\n</div> -->"
        },
        {
            "name": "ConnectingTraderoomComponent",
            "id": "component-ConnectingTraderoomComponent-7af646f3276e89d580aa362672e6d2dbb41a5d9e8c42e0f6918141ea032b97946c9512d2cb65574538b2cde41f5193814da3d61fec2ccc5b1eae419cb75f7875",
            "file": "src/app/risk-dashboard/components/hedging-proposal/components/traderoom-components/connecting-traderoom/connecting-traderoom.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-connecting-traderoom",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./connecting-traderoom.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-connecting-traderoom',\r\n  imports: [],\r\n  templateUrl: './connecting-traderoom.component.html',\r\n  styleUrl: './connecting-traderoom.component.scss'\r\n})\r\nexport class ConnectingTraderoomComponent {\r\n\r\n}\r\n",
            "styleUrl": "./connecting-traderoom.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"connecting-traderoom-wrapper\">\r\n    <div class=\"okoora-logo-wrapper\">\r\n        <img src=\"images/logo-icon-okoora.svg\" alt=\"Logo\" />\r\n    </div>\r\n    <p class=\"title traderoom-connect-title\">Connecting to <br>Trade room<br> Please hold on</p>\r\n</div>"
        },
        {
            "name": "DashboardComponent",
            "id": "component-DashboardComponent-f94c04abd2581f3d7c4e622fa077038900cbba20af01ab4760717d72ecc9825331e313a43c42c8fd24f93ba30ae025c913efb587092008220a0d7fb6d3321649",
            "file": "src/app/risk-dashboard/components/dashboard/dashboard.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-dashboard",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./dashboard.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "AnnualExposureDetailsComponent",
                    "type": "component"
                },
                {
                    "name": "BreadcrumbWalletComponent",
                    "type": "component"
                },
                {
                    "name": "ChartsTabsComponent",
                    "type": "component"
                },
                {
                    "name": "RiskEstimateChartComponent",
                    "type": "component"
                },
                {
                    "name": "TradeViewChartComponent",
                    "type": "component"
                },
                {
                    "name": "VolatilityChartComponent",
                    "type": "component"
                },
                {
                    "name": "MomentumIndicatorChartComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { AnnualExposureDetailsComponent } from \"./components/annual-exposure-details/annual-exposure-details.component\";\r\nimport { BreadcrumbWalletComponent } from './components/breadcrumb-wallet/breadcrumb-wallet.component';\r\nimport { ChartsTabsComponent } from \"./components/charts-tabs/charts-tabs.component\";\r\nimport { RiskEstimateChartComponent } from \"./components/risk-estimate-chart/risk-estimate-chart.component\";\r\nimport { TradeViewChartComponent } from \"./components/trade-view-chart/trade-view-chart.component\";\r\nimport { VolatilityChartComponent } from \"./components/volatility-chart/volatility-chart.component\";\r\nimport { MomentumIndicatorChartComponent } from \"./components/momentum-indicator-chart/momentum-indicator-chart.component\";\r\n\r\n@Component({\r\n  selector: 'app-dashboard',\r\n  imports: [AnnualExposureDetailsComponent, BreadcrumbWalletComponent, ChartsTabsComponent, RiskEstimateChartComponent, TradeViewChartComponent, VolatilityChartComponent, MomentumIndicatorChartComponent],\r\n  templateUrl: './dashboard.component.html',\r\n  styleUrl: './dashboard.component.scss'\r\n})\r\nexport class DashboardComponent {\r\n}",
            "styleUrl": "./dashboard.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"risk-dashboard\">\r\n    <app-breadcrumb-wallet></app-breadcrumb-wallet>\r\n    <div class=\"dashboard-sections\">\r\n        <div class=\"left-sec\">\r\n            <app-annual-exposure-details></app-annual-exposure-details>\r\n            <app-charts-tabs></app-charts-tabs>\r\n\r\n            <div class=\"left-two-part\">\r\n                <div class=\"left-haft-part\">\r\n                    <app-trade-view-chart></app-trade-view-chart>\r\n                </div>\r\n                <div class=\"left-haft-part\">\r\n                    <app-volatility-chart></app-volatility-chart>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        <div class=\"right-sec\">\r\n            <app-risk-estimate-chart></app-risk-estimate-chart>\r\n            <app-momentum-indicator-chart></app-momentum-indicator-chart>\r\n        </div>\r\n    </div>\r\n    <div class=\"dashboard-instruction\">\r\n        <p>The FX hedging services provided by Okoora do not constitute investment advice. Our recommendations are\r\n            based on the information provided by the client, and it is the client's responsibility to ensure that\r\n            all information provided to Okoora is accurate and complete. Okoora is not responsible for any losses or\r\n            damages arising from reliance on our recommendations, especially if based on incomplete or incorrect\r\n            information.</p>\r\n        <p>All decisions regarding the use of hedging strategies are made at your discretion. Clients should\r\n            evaluate their own financial situation and seek independent advice before implementing any hedging\r\n            strategies. Past performance is not indicative of future results, and all investments carry risk,\r\n            including potential loss.</p>\r\n        <p>By using Okoora's FX hedging services, you agree to this disclaimer.</p>\r\n    </div>\r\n</div>\r\n"
        },
        {
            "name": "ErrorComponent",
            "id": "component-ErrorComponent-c00b54c1008a8ad4f28c6032c4cc557df98e4a1e308510deb3dc01b98b65256e017430b09d24b14af412c77fa7fd243549f88636ca3c9c9c8eb5768ea7a4e1ba",
            "file": "src/app/sign-up/fields/error/error.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "DecimalPipe",
                    "type": "pipe"
                }
            ],
            "selector": "app-error",
            "styleUrls": [],
            "styles": [],
            "template": "<ng-container [ngSwitch]=\"HTMLType\">\n  <ng-container *ngSwitchCase=\"'REGULAR'\">\n    <small class=\"text-danger\" *ngFor=\"let errorMessage of listErrors(); let last=last;\">\n      {{ last ? errorMessage : '' }}\n    </small>\n  </ng-container>\n  <ng-container *ngSwitchCase=\"'MATERIAL'\">\n    <mat-error *ngFor=\"let errorMessage of listErrors(); let last=last;\">\n      {{ last ? errorMessage : '' }}\n    </mat-error>\n  </ng-container>\n</ng-container>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "controlName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 33,
                    "type": "AbstractControl | AbstractControlDirective",
                    "decorators": []
                },
                {
                    "name": "currency",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 35,
                    "type": "literal type",
                    "decorators": []
                },
                {
                    "name": "HTMLType",
                    "defaultValue": "'REGULAR'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 34,
                    "type": "\"REGULAR\" | \"MATERIAL\"",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_default",
                    "defaultValue": "'default'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "errorMessage",
                    "defaultValue": "{\r\n    [this._default]: (params: any) => 'Invalid format',\r\n    'required': (params: any) => 'Field is required',\r\n    'maxlength': (params: any) => `Maximum ${params.requiredLength} characters allowed`,\r\n    'minlength': (params: any) => `Minimum ${params.requiredLength} characters required`,\r\n    'pattern': (params: any) => 'Invalid format',\r\n    'whitespace': (params: any) => 'White space not allowed',\r\n    'email': (params: any) => 'Email not valid',\r\n    'matDatepickerMin': (params: { actual: Date, min: Date }) => 'Future date required',\r\n    'api_error': (params: any) => 'Error',\r\n    'not_enough_in_wallet': (params: any) => params.message,\r\n    'passwordNotEquivalent': (params: any) => 'Passwords do not match',\r\n    'countryNotFound': (params: any) => 'Country not found',\r\n    'not_english_and_numbers_and_space': (params: any) => 'Only English, numbers, and spaces are allowed',\r\n    'only_english_characters': () => 'Only English letters are allowed.',\r\n    'not_valid_id_number': (params: any) => 'Invalid ID number',\r\n    'not_supported_country': (params: any) => params.message,\r\n    'passwordSpecialCharaters': (params: any) => 'Password must contain special characters',\r\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "errorMsgList",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 30
                }
            ],
            "methodsClass": [
                {
                    "name": "listErrors",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "MatError"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule, DecimalPipe } from '@angular/common';\r\nimport { Component, Input } from '@angular/core';\r\nimport { AbstractControl, AbstractControlDirective } from '@angular/forms';\r\nimport { MatError } from '@angular/material/select';\r\n\r\n@Component({\r\n  selector: 'app-error',\r\n  imports: [CommonModule, MatError],\r\n  providers: [DecimalPipe],\r\n  template: `\r\n    <ng-container [ngSwitch]=\"HTMLType\">\r\n      <ng-container *ngSwitchCase=\"'REGULAR'\">\r\n        <small class=\"text-danger\" *ngFor=\"let errorMessage of listErrors(); let last=last;\">\r\n          {{ last ? errorMessage : '' }}\r\n        </small>\r\n      </ng-container>\r\n      <ng-container *ngSwitchCase=\"'MATERIAL'\">\r\n        <mat-error *ngFor=\"let errorMessage of listErrors(); let last=last;\">\r\n          {{ last ? errorMessage : '' }}\r\n        </mat-error>\r\n      </ng-container>\r\n    </ng-container>\r\n  `,\r\n  styles: []\r\n})\r\nexport class ErrorComponent {\r\n\r\n  constructor(private _numberPipe: DecimalPipe) {}\r\n\r\n  errorMsgList: any = [];\r\n  private _default: 'default' = 'default';\r\n\r\n  @Input() controlName!: AbstractControl | AbstractControlDirective;\r\n  @Input('HTMLType') HTMLType: 'REGULAR' | 'MATERIAL' = 'REGULAR';\r\n  @Input('currency') currency!: { min: string, max: string };\r\n\r\n  errorMessage: any = {\r\n    [this._default]: (params: any) => 'Invalid format',\r\n    'required': (params: any) => 'Field is required',\r\n    'maxlength': (params: any) => `Maximum ${params.requiredLength} characters allowed`,\r\n    'minlength': (params: any) => `Minimum ${params.requiredLength} characters required`,\r\n    'pattern': (params: any) => 'Invalid format',\r\n    'whitespace': (params: any) => 'White space not allowed',\r\n    'email': (params: any) => 'Email not valid',\r\n    'matDatepickerMin': (params: { actual: Date, min: Date }) => 'Future date required',\r\n    'api_error': (params: any) => 'Error',\r\n    'not_enough_in_wallet': (params: any) => params.message,\r\n    'passwordNotEquivalent': (params: any) => 'Passwords do not match',\r\n    'countryNotFound': (params: any) => 'Country not found',\r\n    'not_english_and_numbers_and_space': (params: any) => 'Only English, numbers, and spaces are allowed',\r\n    'only_english_characters': () => 'Only English letters are allowed.',\r\n    'not_valid_id_number': (params: any) => 'Invalid ID number',\r\n    'not_supported_country': (params: any) => params.message,\r\n    'passwordSpecialCharaters': (params: any) => 'Password must contain special characters',\r\n  };\r\n\r\n\r\n  listErrors() {\r\n    if (!this.controlName) return [];\r\n    if (this.controlName.errors) {\r\n      this.errorMsgList = [];\r\n      Object.keys(this.controlName.errors).map(error => {\r\n        if (!Object.keys(this.errorMessage).includes(error)) {\r\n          console.warn(`${error} not found in the errorMessage object of the ErrorComponent.\\nSetting error to default.`);\r\n          error = this._default;\r\n        }\r\n        (this.controlName.touched || this.controlName.dirty) ?\r\n          this.errorMsgList.push(\r\n            this.errorMessage[error](this.controlName.errors?.[error])\r\n          ) : '';\r\n      });\r\n      return this.errorMsgList;\r\n    } else {\r\n      return [];\r\n    }\r\n  }\r\n}",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_numberPipe",
                        "type": "DecimalPipe",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 26,
                "jsdoctags": [
                    {
                        "name": "_numberPipe",
                        "type": "DecimalPipe",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": []
        },
        {
            "name": "ExposureRateChartComponent",
            "id": "component-ExposureRateChartComponent-07080923def2874d1172287e6392c2ea96947d8490b540b179571a5857ba683bdf8a2f3f9f08d233c1ee9d131c1bd28b830d9b9bad5e4825630ca5156f4b4bcc",
            "file": "src/app/risk-dashboard/components/dashboard/components/exposure-rate-chart/exposure-rate-chart.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-exposure-rate-chart",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./exposure-rate-chart.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "annotations",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ApexAnnotations",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 44,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "budgetRate",
                    "defaultValue": "[4.0712,4.0712,4.0712,4.0712,4.0712,4.0712,4.0712,4.0712,4.0712,4.0712,4.0712,4.0712]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 54
                },
                {
                    "name": "cashFlowTableData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 46
                },
                {
                    "name": "chartOptions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ApexChart",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "chartSeries",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ApexAxisChartSeries",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "completedAdvancePolicy",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 61
                },
                {
                    "name": "currentHedge",
                    "defaultValue": "[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 53
                },
                {
                    "name": "currentPage",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 60
                },
                {
                    "name": "dataLabelsOptions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ApexDataLabels",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 38,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "fillOptions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ApexFill",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 43,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "hedgeRate",
                    "defaultValue": "[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 52
                },
                {
                    "name": "legendOptions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ApexLegend",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 39,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "liabilityRate",
                    "defaultValue": "[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 50
                },
                {
                    "name": "markersOptions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ApexMarkers",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 42,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "monthChartXAxixData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 45
                },
                {
                    "name": "monthlyExposure",
                    "defaultValue": "[25,10,15,18,20,16,14,12,8,17,13,10]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 48
                },
                {
                    "name": "originalSeries",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ApexAxisChartSeries",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "ourRecommendedHedge",
                    "defaultValue": "[10.50,8.5,6.3,5.5,2.5,8.3,4.6,3.8,4.9,7.5,3.6,2.3]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 49
                },
                {
                    "name": "pageSize",
                    "defaultValue": "12",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 59
                },
                {
                    "name": "paginatedSeries",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 58
                },
                {
                    "name": "paginator",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatPaginator",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "MatPaginator"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "plotOptions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ApexPlotOptions",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 41,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "resizeSubscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription | undefined",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 47
                },
                {
                    "name": "selectedRates",
                    "defaultValue": "['Spot']",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "spotRate",
                    "defaultValue": "[4.2110,4.2110,4.2110,4.2110,4.2110,4.2110,4.2110,4.2110,4.2110,4.2110,4.2110,4.2110]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 51
                },
                {
                    "name": "strokeOptions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ApexStroke",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 37,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "tooltipOptions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ApexTooltip",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "xAxisOptions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ApexXAxis",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "yAxisOptions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ApexYAxis",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "generateSeriesData",
                    "args": [
                        {
                            "name": "monthsCount",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ApexAxisChartSeries",
                    "typeParameters": [],
                    "line": 197,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "monthsCount",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getLineColors",
                    "args": [],
                    "optional": false,
                    "returnType": "string[]",
                    "typeParameters": [],
                    "line": 320,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getRandomValue",
                    "args": [
                        {
                            "name": "min",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "max",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 248,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "min",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "max",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleWindowResize",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 98,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "initializeChart",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 139,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 80,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 386,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 62,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onChipRemove",
                    "args": [
                        {
                            "name": "chipLabel",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 272,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "chipLabel",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onPageChange",
                    "args": [
                        {
                            "name": "event",
                            "type": "PageEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 85,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "PageEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onRateChange",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 263,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setAtLeastTwoZeroes",
                    "args": [
                        {
                            "name": "dataArray",
                            "type": "number[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 252,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "dataArray",
                            "type": "number[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setMarkerStrokeColors",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 104,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setupResizeListener",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 92,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "updateAnnotations",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 331,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "updateChart",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 281,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "updatePaginatedSeries",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 69,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "NgApexchartsModule",
                    "type": "module"
                },
                {
                    "name": "MatPaginatorModule",
                    "type": "module"
                },
                {
                    "name": "MatSelectModule",
                    "type": "module"
                },
                {
                    "name": "MatChipsModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectorRef, Component, OnInit, AfterViewInit, ViewChild, Input, SimpleChanges } from '@angular/core';\r\nimport {\r\n  ApexAxisChartSeries,\r\n  ApexChart,\r\n  ApexXAxis,\r\n  ApexDataLabels,\r\n  ApexStroke,\r\n  ApexMarkers,\r\n  ApexYAxis,\r\n  ApexLegend,\r\n  ApexTooltip,\r\n  ApexFill,\r\n  ApexPlotOptions,\r\n  ApexAnnotations,\r\n  NgApexchartsModule\r\n} from \"ng-apexcharts\";\r\nimport { debounceTime, fromEvent, Subscription } from 'rxjs';\r\nimport { MatPaginator, MatPaginatorModule, PageEvent } from '@angular/material/paginator';\r\nimport { CommonModule } from '@angular/common';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { MatChipsModule } from '@angular/material/chips';\r\n\r\n@Component({\r\n  selector: 'app-exposure-rate-chart',\r\n  imports: [CommonModule, NgApexchartsModule, MatPaginatorModule, MatSelectModule, MatChipsModule],\r\n  templateUrl: './exposure-rate-chart.component.html',\r\n  styleUrl: './exposure-rate-chart.component.scss',\r\n})\r\nexport class ExposureRateChartComponent implements OnInit, AfterViewInit{\r\n  @ViewChild(MatPaginator) paginator!: MatPaginator;\r\n  public chartSeries!: ApexAxisChartSeries;\r\n  public originalSeries!: ApexAxisChartSeries;\r\n  public selectedRates: string[] = ['Spot'];\r\n  public chartOptions!: ApexChart;\r\n  public xAxisOptions!: ApexXAxis;\r\n  public yAxisOptions!: ApexYAxis;\r\n  public strokeOptions!: ApexStroke;\r\n  public dataLabelsOptions!: ApexDataLabels;\r\n  public legendOptions!: ApexLegend;\r\n  public tooltipOptions!: ApexTooltip;\r\n  public plotOptions!: ApexPlotOptions;\r\n  public markersOptions!: ApexMarkers;\r\n  public fillOptions!: ApexFill;\r\n  public annotations!: ApexAnnotations;\r\n  monthChartXAxixData: any;\r\n  cashFlowTableData: any;\r\n  resizeSubscription: Subscription | undefined;\r\n  monthlyExposure: any = [25,10,15,18,20,16,14,12,8,17,13,10];\r\n  ourRecommendedHedge: any = [10.50,8.5,6.3,5.5,2.5,8.3,4.6,3.8,4.9,7.5,3.6,2.3];\r\n  liabilityRate: any = [0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0];\r\n  spotRate: any = [4.2110,4.2110,4.2110,4.2110,4.2110,4.2110,4.2110,4.2110,4.2110,4.2110,4.2110,4.2110];\r\n  hedgeRate: any = [0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0];\r\n  currentHedge: any = [0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0];\r\n  budgetRate: any = [4.0712,4.0712,4.0712,4.0712,4.0712,4.0712,4.0712,4.0712,4.0712,4.0712,4.0712,4.0712];\r\n  constructor(\r\n    private cdr: ChangeDetectorRef,\r\n  ) { }\r\n  paginatedSeries: any = [];\r\n  pageSize = 12;\r\n  currentPage = 0;\r\n  completedAdvancePolicy: boolean = true;\r\n  ngOnInit() {\r\n    setTimeout(() => {\r\n      this.initializeChart();\r\n      this.setupResizeListener();\r\n      this.updatePaginatedSeries();\r\n    }, 100);\r\n  }\r\n  updatePaginatedSeries() {\r\n    const startIndex = this.currentPage * this.pageSize;\r\n    const endIndex = startIndex + this.pageSize;\r\n    this.paginatedSeries = this.chartSeries.map(series => ({\r\n      ...series,\r\n      data: series?.data?.slice(startIndex, endIndex)\r\n    }));\r\n    this.xAxisOptions = {\r\n      categories: this.monthChartXAxixData?.slice(startIndex, endIndex),\r\n    };\r\n  }\r\n  ngAfterViewInit() {\r\n    this.initializeChart();\r\n    this.paginator?.page?.subscribe((event: PageEvent) => this.onPageChange(event));\r\n    this.updatePaginatedSeries();\r\n  }\r\n  onPageChange(event: PageEvent) {\r\n    this.pageSize = event.pageSize;\r\n    this.currentPage = event.pageIndex;\r\n    this.updatePaginatedSeries();\r\n    this.handleWindowResize();\r\n  }\r\n\r\n  setupResizeListener() {\r\n    this.resizeSubscription = fromEvent(window, 'resize')\r\n      .pipe(debounceTime(200))\r\n      .subscribe(() => this.handleWindowResize());\r\n  }\r\n\r\n  handleWindowResize() {\r\n    setTimeout(() => {\r\n      this.setMarkerStrokeColors();\r\n    }, 0);\r\n  }\r\n\r\n  setMarkerStrokeColors() {\r\n    const colors: { [key: string]: string } = {\r\n      'Hedged': '#05F2F2',\r\n      'Liability': '#2C4CF5',\r\n      'Spot': '#F9AE67',\r\n      'Budget': '#8BDDF4'\r\n    };\r\n\r\n    document.querySelectorAll('.apexcharts-series').forEach(seriesElement => {\r\n      const seriesName = seriesElement.getAttribute('seriesName');\r\n      if (seriesName && colors[seriesName]) {\r\n        const strokeColor = colors[seriesName];\r\n\r\n        // Set marker stroke colors\r\n        const markersWrap = seriesElement.querySelector('.apexcharts-series-markers-wrap');\r\n        if (markersWrap) {\r\n          const markers = markersWrap.querySelectorAll('.apexcharts-marker');\r\n          markers.forEach(marker => {\r\n            marker.setAttribute('stroke', strokeColor);\r\n          });\r\n        }\r\n\r\n        // Set line stroke colors\r\n        const lineElement = seriesElement.querySelector('.apexcharts-line');\r\n        if (lineElement) {\r\n          lineElement.setAttribute('stroke', strokeColor);\r\n\r\n          if (seriesName === 'Spot') {\r\n            lineElement.setAttribute('stroke-dasharray', '6');\r\n          }\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  initializeChart() {\r\n    this.monthChartXAxixData = ['Jan 24', 'Feb 24', 'Mar 24', 'Apr 24', 'May 24', 'Jun 24', 'Jul 24', 'Aug 24', 'Sep 24', 'Oct 24', 'Nov 24', 'Dec 24'];\r\n\r\n    this.originalSeries = this.generateSeriesData(this.monthChartXAxixData.length);\r\n    const spotRateLine = this.spotRate;\r\n    const currentSpotRate = spotRateLine[spotRateLine.length - 1];\r\n    const yAxisMax = currentSpotRate * 1.60;\r\n\r\n    this.chartOptions = {\r\n      type: \"line\",\r\n      height: 302,\r\n      zoom: {\r\n        enabled: false,\r\n      },\r\n      toolbar: {\r\n        show: false,\r\n        tools: {\r\n          zoom: false,\r\n          zoomin: false,\r\n          zoomout: false,\r\n          pan: false\r\n        }\r\n      }\r\n    };\r\n\r\n    this.xAxisOptions = {\r\n      categories: this.monthChartXAxixData,\r\n      labels: {\r\n        style: {\r\n          cssClass: 'apexcharts-xaxis-label'\r\n        }\r\n      }\r\n    };\r\n\r\n    const lineColors = this.getLineColors();\r\n    this.yAxisOptions = {\r\n      min: 0,\r\n      max: yAxisMax,\r\n      tickAmount: 6,\r\n      labels: {\r\n        formatter: function (value: number) {\r\n          return value.toFixed(2);\r\n        }\r\n      }\r\n    };\r\n\r\n    this.strokeOptions = { width: [3, 3, 3], colors: lineColors, curve: \"straight\", dashArray: [0, 0, 5] };\r\n    this.dataLabelsOptions = { enabled: false };\r\n    this.legendOptions = { show: false, position: \"top\" };\r\n    this.tooltipOptions = { enabled: true };\r\n    this.plotOptions = { bar: { horizontal: false, borderRadius: 0, rangeBarOverlap: false } };\r\n    this.markersOptions = { size: 4, colors: [\"#fff\"], strokeColors: lineColors, strokeWidth: 2, strokeOpacity: 1 };\r\n    this.fillOptions = { colors: [\"#D8E9FD\", \"#A9B5F9\", \"#2947F2\"], opacity: [0.2, 0.2, 0.2] };\r\n\r\n    this.updateChart();\r\n  }\r\n\r\n\r\n  generateSeriesData(monthsCount: number): ApexAxisChartSeries {\r\n    // Destructure Liability, spot, and hedgeRate for each month\r\n    const liabilityLine = this.liabilityRate;\r\n    const spotRateLine = this.spotRate;\r\n    const hedgeRateLine = this.hedgeRate;\r\n    const budgetRateLine = this.budgetRate;\r\n\r\n    const exposureBar = this.monthlyExposure;\r\n    const recommendedHedgeBar = this.ourRecommendedHedge;\r\n    const currentHedgeBar = this.currentHedge;\r\n    const chartData = [\r\n      {\r\n        name: \"Hedged\",\r\n        type: \"line\",\r\n        data: hedgeRateLine\r\n      },\r\n      {\r\n        name: \"Liability\",\r\n        type: \"line\",\r\n        data: liabilityLine\r\n      },\r\n      {\r\n        name: \"Spot\",\r\n        type: \"line\",\r\n        data: spotRateLine\r\n      },\r\n      {\r\n        name: \"Budget\",\r\n        type: \"line\",\r\n        data: budgetRateLine\r\n      },\r\n      {\r\n        name: \"Exposure\",\r\n        type: \"bar\",\r\n        data: exposureBar\r\n      },\r\n      {\r\n        name: \"Recommended hedging\",\r\n        type: \"bar\",\r\n        data: recommendedHedgeBar\r\n      },\r\n      {\r\n        name: \"Actual hedging\",\r\n        type: \"bar\",\r\n        data: currentHedgeBar\r\n      }\r\n    ];\r\n\r\n    return chartData;\r\n  }\r\n\r\n  getRandomValue(min: number, max: number): number {\r\n    return +(Math.random() * (max - min) + min).toFixed(2);\r\n  }\r\n\r\n  setAtLeastTwoZeroes(dataArray: number[]): void {\r\n    const zeroIndices: number[] = [];\r\n    while (zeroIndices.length < 2) {\r\n      const index = Math.floor(Math.random() * dataArray.length);\r\n      if (!zeroIndices.includes(index)) {\r\n        zeroIndices.push(index);\r\n      }\r\n    }\r\n    zeroIndices.forEach(index => dataArray[index] = 0);\r\n  }\r\n\r\n  onRateChange(event: any) {\r\n    const selectedRate = event.value;\r\n    if (!this.selectedRates.includes(selectedRate)) {\r\n      this.selectedRates.push(selectedRate);\r\n    }\r\n    this.updateChart();\r\n    this.updatePaginatedSeries();\r\n  }\r\n\r\n  onChipRemove(chipLabel: string) {\r\n    this.selectedRates = this.selectedRates.filter(rate => rate !== chipLabel);\r\n    if (this.selectedRates.length === 0) {\r\n      this.selectedRates = [];\r\n    }\r\n    this.updateChart();\r\n    this.updatePaginatedSeries();\r\n  }\r\n\r\n  updateChart() {\r\n    const barSeries = this.originalSeries.filter(series => series.type === 'bar');\r\n    const lineSeries = this.originalSeries.filter(series =>\r\n      series.type === 'line' && (series.name && this.selectedRates.includes(series.name))\r\n    );\r\n\r\n    this.plotOptions = {\r\n      bar: {\r\n        horizontal: false,\r\n        borderRadius: 0,\r\n        distributed: false,\r\n      }\r\n    };\r\n    this.chartSeries = [...barSeries, ...lineSeries];\r\n\r\n    const lineColors = this.getLineColors();\r\n\r\n    this.strokeOptions = {\r\n      width: lineSeries.map(() => 4),\r\n      colors: lineColors,\r\n      curve: \"straight\",\r\n      dashArray: [0, 0, 5]\r\n    };\r\n\r\n    this.markersOptions = {\r\n      size: 4,\r\n      colors: [\"#fff\"], // Marker fill color\r\n      strokeColors: lineColors, // Marker border color\r\n      strokeWidth: 2,\r\n      strokeOpacity: 1\r\n    };\r\n    this.updateAnnotations();\r\n    this.cdr.detectChanges();\r\n\r\n    setTimeout(() => {\r\n      this.setMarkerStrokeColors();\r\n    }, 0);\r\n  }\r\n\r\n  getLineColors(): string[] {\r\n    const colors: { [key: string]: string } = {\r\n      'Hedged': '#05F2F2',\r\n      'Liability': '#2C4CF5',\r\n      'Spot': '#F9AE67',\r\n      'Budget': '#8BDDF4'\r\n    };\r\n\r\n    return this.selectedRates.map(rate => colors[rate] || '#000');\r\n  }\r\n\r\n  updateAnnotations() {\r\n    const visibleLineSeries = this.chartSeries.filter(series => series.type === 'line');\r\n\r\n    const isSmallScreen = window.innerWidth <= 1440;\r\n    const fontSize = isSmallScreen ? '12px' : '14px';\r\n    const padding = isSmallScreen ? { top: 5, bottom: 5, left: 5, right: 5 } : { top: 10, bottom: 10, left: 10, right: 10 };\r\n\r\n    this.annotations = {\r\n      points: visibleLineSeries.map(series => {\r\n        const lastDataPointIndex = series.data.length - 1;\r\n        const lastDataPoint = Number(series.data[lastDataPointIndex]).toFixed(4);;\r\n        const seriesName = series.name;\r\n        let strokeColor = '';\r\n        let labelBackground = '';\r\n        let labelColor = '';\r\n\r\n        if (seriesName === 'Hedged') {\r\n          strokeColor = '#05F2F2';\r\n          labelBackground = '#05F2F2';\r\n          labelColor = '#2947F2';\r\n        } else if (seriesName === 'Liability') {\r\n          strokeColor = '#2C4CF5';\r\n          labelBackground = '#2C4CF5';\r\n          labelColor = '#FFFFFF';\r\n        } else if (seriesName === 'Spot') {\r\n          strokeColor = '#F9AE67';\r\n          labelBackground = '#FDE5CE';\r\n          labelColor = '#C46408';\r\n        } else if (seriesName === 'Budget') {\r\n          strokeColor = '#8BDDF4';\r\n          labelBackground = '#8BDDF4';\r\n          labelColor = '#2C2C2C';\r\n        }\r\n\r\n        return {\r\n          x: this.monthChartXAxixData[lastDataPointIndex],\r\n          y: Number(lastDataPoint),\r\n          marker: { size: 4, fillColor: '#fff', strokeColor: strokeColor, radius: 2 },\r\n          label: {\r\n            text: `${lastDataPoint}`,\r\n            borderColor: strokeColor,\r\n            offsetY: -10,\r\n            style: {\r\n              background: labelBackground,\r\n              color: labelColor,\r\n              fontSize: fontSize,\r\n              padding: padding,\r\n              fontFamily: 'Heebo'\r\n            },\r\n          }\r\n        };\r\n      })\r\n    };\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    if (this.resizeSubscription) {\r\n      this.resizeSubscription.unsubscribe();\r\n    }\r\n  }\r\n}\r\n",
            "styleUrl": "./exposure-rate-chart.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 54,
                "jsdoctags": [
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit",
                "AfterViewInit"
            ],
            "templateData": "    <div id=\"chart\" class=\"rm-exposure-rate-chart\">\r\n        <div class=\"legends-rm-exposure\">\r\n            <label class=\"title\">\r\n                <div class=\"legends-exposure\"></div> Exposure\r\n            </label>\r\n            <label class=\"title\">\r\n                <div class=\"recommended-hedging\"></div>Recommended hedging\r\n            </label>\r\n            <label class=\"title\">\r\n                <div class=\"actual-hedging\"></div> Actual hedging\r\n            </label>\r\n        </div>\r\n        <div class=\"chart-wrappper\">\r\n            <div class=\"filter-exposure-wrapper\">\r\n                <mat-select class=\"select-rate-exp\" panelClass=\"select-rate-exposure\" placeholder=\"Select rate\"\r\n                    id=\"selectRateExposure__rates\"\r\n                    [value]=\"selectedRates.length ? selectedRates[selectedRates.length - 1] : null\"\r\n                    (selectionChange)=\"onRateChange($event)\">\r\n                    <mat-option value=\"Hedged\">Hedged rate</mat-option>\r\n                    <mat-option value=\"Liability\">Liability rate</mat-option>\r\n                    <mat-option value=\"Spot\">Spot rate</mat-option>\r\n                    <mat-option value=\"Budget\" *ngIf=\"completedAdvancePolicy\">Budget rate</mat-option>\r\n                </mat-select>\r\n\r\n                <mat-chip-set class=\"filter-chart-chip-exp\">\r\n                    <ng-container *ngFor=\"let series of selectedRates\">\r\n                        <mat-chip id=\"chip-{{series.toLowerCase()}}\" class=\"chip-{{series.toLowerCase()}}\"\r\n                            [removable]=\"true\" (removed)=\"onChipRemove(series)\">\r\n                            {{ series }} rate\r\n                            <img class=\"close-chip\" src=\"images/close-chip-exposure.svg\" matChipRemove>\r\n                        </mat-chip>\r\n                    </ng-container>\r\n                </mat-chip-set>\r\n            </div>\r\n            <apx-chart [series]=\"paginatedSeries\" [chart]=\"chartOptions\" [xaxis]=\"xAxisOptions\" [yaxis]=\"yAxisOptions\"\r\n                [stroke]=\"strokeOptions\" [dataLabels]=\"dataLabelsOptions\" [legend]=\"legendOptions\"\r\n                [tooltip]=\"tooltipOptions\" [plotOptions]=\"plotOptions\" [markers]=\"markersOptions\" [fill]=\"fillOptions\"\r\n                [annotations]=\"annotations\"></apx-chart>\r\n            <div class=\"pagination-wrap\" *ngIf=\"monthChartXAxixData.length > 12\">\r\n                <mat-paginator id=\"paginationExposureRateChart\" [pageSize]=\"12\" [length]=\"monthChartXAxixData.length\"\r\n                    (page)=\"onPageChange($event)\" aria-label=\"Select page of users\"></mat-paginator>\r\n            </div>\r\n        </div>\r\n    </div>"
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-da438d2cd091a0a31ac11874f5d2a600c88df3f9c906670fb709061946f2d82f5c40bc89c196dbec51eed97ce4e1a2d3a4bd84ecbb895da79afea4ebb7f9d137",
            "file": "src/app/risk-dashboard/components/header/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-header",
            "styleUrls": [
                "./header.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./header.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "openSidebar",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "destroy$",
                    "defaultValue": "new Subject<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "hedgeAllDrawer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDrawer",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'hedgeAllDrawer'"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "quickHedgeDrawer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDrawer",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'quickHedgeDrawer'"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "checkHedgeAllDrawerState",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "checkQuickHedgeDrawerState",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "closeHedgeAllDrawer",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "closeQuickHedgeDrawer",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "logout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 87,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 83,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "openMenu",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 79,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "MatIconModule",
                    "type": "module"
                },
                {
                    "name": "MatMenuModule",
                    "type": "module"
                },
                {
                    "name": "QuickHedgeDrawerComponent",
                    "type": "component"
                },
                {
                    "name": "HedgeAllDrawerComponent",
                    "type": "component"
                },
                {
                    "name": "MatDrawer"
                },
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Output, ViewChild, OnDestroy, AfterViewInit } from '@angular/core';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatMenuModule } from '@angular/material/menu';\r\nimport { MatDrawer } from '@angular/material/sidenav';\r\nimport { CommonModule } from '@angular/common';\r\nimport { QuickHedgeDrawerComponent } from '../hedging-proposal/components/quick-hedge-drawer/quick-hedge-drawer.component';\r\nimport { HedgeAllDrawerComponent } from '../hedging-proposal/components/hedge-all-drawer/hedge-all-drawer.component';\r\nimport { HedgingDataService } from '../hedging-proposal/hedging-data.service';\r\nimport { Subject, takeUntil } from 'rxjs';\r\nimport { Router } from '@angular/router';\r\n\r\n@Component({\r\n  selector: 'app-header',\r\n  standalone: true,\r\n  imports: [MatIconModule, MatMenuModule, QuickHedgeDrawerComponent, HedgeAllDrawerComponent, MatDrawer, CommonModule],\r\n  templateUrl: './header.component.html',\r\n  styleUrls: ['./header.component.scss']\r\n})\r\nexport class HeaderComponent implements AfterViewInit, OnDestroy {\r\n  @ViewChild('hedgeAllDrawer') hedgeAllDrawer!: MatDrawer;\r\n  @ViewChild('quickHedgeDrawer') quickHedgeDrawer!: MatDrawer;\r\n  @Output() openSidebar = new EventEmitter();\r\n\r\n  private destroy$ = new Subject<void>();\r\n\r\n  constructor(private hedgeService: HedgingDataService,private router:Router) {}\r\n\r\n  ngAfterViewInit() {\r\n    setTimeout(() => {\r\n      this.checkHedgeAllDrawerState();\r\n      this.checkQuickHedgeDrawerState();\r\n    });\r\n  }\r\n\r\n  checkHedgeAllDrawerState() {\r\n    this.hedgeService.hedgeAllDrawerState$\r\n      .pipe(takeUntil(this.destroy$))\r\n      .subscribe((state) => {\r\n        if (this.hedgeAllDrawer) {\r\n          if (state) {\r\n            this.hedgeAllDrawer.open();\r\n            document.querySelector('body')!.style.overflowY = 'hidden';\r\n            document.querySelector('.drawer-hedge-all')?.insertAdjacentHTML(\"afterend\", \"<div class='drawer-backdrop'></div>\");\r\n          } else {\r\n            this.hedgeAllDrawer.close();\r\n            document.querySelector('body')!.style.overflowY = 'auto';\r\n            document.querySelector('.drawer-backdrop')?.remove();\r\n          }\r\n        }\r\n      });\r\n  }\r\n\r\n  checkQuickHedgeDrawerState() {\r\n    this.hedgeService.quickHedgeDrawerState$\r\n      .pipe(takeUntil(this.destroy$))\r\n      .subscribe((state) => {\r\n        if (this.quickHedgeDrawer) {\r\n          if (state) {\r\n            this.quickHedgeDrawer.open();\r\n            document.querySelector('body')!.style.overflowY = 'hidden';\r\n            document.querySelector('.drawer-hedge-quick')?.insertAdjacentHTML(\"afterend\", \"<div class='drawer-backdrop'></div>\");\r\n          } else {\r\n            this.quickHedgeDrawer.close();\r\n            document.querySelector('body')!.style.overflowY = 'auto';\r\n            document.querySelector('.drawer-backdrop')?.remove();\r\n          }\r\n        }\r\n      });\r\n  }\r\n\r\n  closeQuickHedgeDrawer() {\r\n    this.hedgeService.closeQuickHedgeDrawer();\r\n  }\r\n  \r\n  closeHedgeAllDrawer() {\r\n    this.hedgeService.closeHedgeAllDrawer();\r\n  }\r\n\r\n  openMenu() {\r\n    this.openSidebar.emit();\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.destroy$.next();\r\n    this.destroy$.complete();\r\n  }\r\n  logout(){\r\n    localStorage.setItem('isLoggedInUser', 'false');\r\n    this.router.navigate(['/login']);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"../../../../assets/scss/variable\";\r\n\r\n.drawer-hedge-all, .drawer-hedge-quick {\r\n    position: fixed;\r\n    top: 0;\r\n    right: 0;\r\n    padding: 0;\r\n    width: 579px;\r\n    height: calc(100vh - 60px);\r\n    z-index: 99;\r\n    border-radius: 10px;\r\n    border-left: 1px solid #D1D5DB;\r\n    background: #F6F9FE;\r\n    box-shadow: 0px 4px 34px 0px rgba(0, 0, 0, 0.05);\r\n    overflow-x: auto;\r\n    transform: translate(-35px, 35px) !important;\r\n    @media screen and (max-width: 1440px) {\r\n      width: 450px;\r\n      height: calc(100vh - 18px);\r\n      transform: translate(-12px, 10px) !important;\r\n    }\r\n    @media screen and (max-width: 767px) {\r\n      width: calc(100% - 12px);\r\n      height: calc(100vh - 12px);\r\n      transform: translate(-6px, 6px) !important;\r\n    }\r\n  }\r\n    \r\n\r\n::ng-deep {\r\n    .drawer-backdrop {\r\n        position: fixed;\r\n        height: 100vh;\r\n        width: 100vw;\r\n        background: rgba(0, 0, 0, 0.5);\r\n        top: 0;\r\n        left: 0;\r\n        z-index: 45;\r\n    }\r\n    .cdk-overlay-pane {\r\n        .language-wrapper {\r\n            .mat-mdc-menu-content {\r\n                ul {\r\n                    padding: 0;\r\n                    list-style-type: none;\r\n\r\n                    li {\r\n                        button {\r\n                            background-color: transparent;\r\n                            border: none;\r\n                            padding: 5px 10px;\r\n                            width: 100%;\r\n                            cursor: pointer;\r\n\r\n                            &:hover,\r\n                            &.active {\r\n                                background-color: #e9ecef;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        .custom-menu-item {\r\n            min-height: auto;\r\n            cursor: pointer;\r\n            background-color:#EFF6FF;\r\n            border-radius: 5px;\r\n            padding: 10px 15px;\r\n            min-height: 43px;\r\n            .mat-mdc-menu-item-text{\r\n                font-size: 12px !important;\r\n                font-weight: 500 !important;\r\n                color: #000;\r\n                font-family: Inter, Rubik, sans-serif !important;\r\n            }\r\n        }\r\n        .header-menu-panel .mat-mdc-menu-content {\r\n            padding: 5px 4px !important;\r\n        }\r\n    }\r\n}\r\n\r\nheader {\r\n    position: fixed;\r\n    top: 0;\r\n    width: 100%;\r\n    z-index: 9;\r\n    left: 0;\r\n\r\n    .topheder-business-users {\r\n        background-color: #EEF3FC;\r\n\r\n        .header-inner {\r\n            .navbar-toggler {\r\n                display: none;\r\n            }\r\n        }\r\n\r\n        .main-nav {\r\n            padding: 0 45px 0 240px;\r\n            background-color: #EEF3FC;\r\n\r\n            .nav-inner {\r\n                display: flex;\r\n                justify-content: space-between;\r\n                padding: 38px 0;\r\n                border-bottom: 1px dashed #A4A4A4;\r\n                align-items: center;\r\n                margin: 0 0 0 45px;\r\n                width: 100%;\r\n\r\n                .nav-left {\r\n                    .wallet-list-business {\r\n                        display: flex;\r\n                        align-items: flex-start;\r\n                        justify-content: flex-start;\r\n                        padding: 0 0 0 3px;\r\n                        gap: 10px;\r\n\r\n                        .flag {\r\n                            width: 31px;\r\n                            height: 31px;\r\n                            display: flex;\r\n                            align-items: center;\r\n                            justify-content: center;\r\n                        }\r\n\r\n                        .currency-wrapper {\r\n                            display: flex;\r\n                            align-items: center;\r\n                            justify-content: flex-start;\r\n\r\n                            .wallet-ammount {\r\n                                color: #111827;\r\n                                font-family: $he_heebo;\r\n                                font-size: 35px;\r\n                                font-weight: 500;\r\n                                line-height: 1;\r\n                                margin: 0 20px 0 0;\r\n\r\n                                .sub-part {\r\n                                    font-size: 24px;\r\n                                    color: #D1D5DB;\r\n                                    font-weight: 300;\r\n                                    line-height: 1;\r\n                                }\r\n                            }\r\n\r\n                            .wallet-list-button {\r\n                                width: 26px;\r\n                                height: 26px;\r\n                                padding: 13px 10px 10px 10px;\r\n                                border-radius: 40px;\r\n                                border: 1px solid #D1D5DB;\r\n                                background-color: transparent;\r\n                                background-image: url(../../../../assets/images/wallet-list-dropdown.svg);\r\n                                background-repeat: no-repeat;\r\n                                background-position: center;\r\n                                cursor: pointer;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n\r\n                .nav-option-right {\r\n                    display: flex;\r\n                    align-items: center;\r\n                    justify-content: flex-start;\r\n                    gap: 16px;\r\n\r\n                    .lang-wrapper {\r\n                        .lang-btn {\r\n                            background-color: transparent;\r\n                            border: none;\r\n                            padding: 0 4px;\r\n                            cursor: pointer;\r\n                        }\r\n                    }\r\n\r\n                    .header-btn {\r\n                        padding: 6px 20px;\r\n                        border-radius: 40px;\r\n                        background-color: #fff;\r\n                        border: 1px solid #ffffff;\r\n                        display: flex;\r\n                        align-items: center;\r\n                        justify-content: center;\r\n                        column-gap: 9px;\r\n                        cursor: pointer;\r\n                        color: #374151;\r\n                        font-size: 12px;\r\n                        line-height: 26px;\r\n                        font-weight: 600;\r\n                        font-family: $he_heebo;\r\n\r\n                        &.download-app {\r\n                            padding: 6px 20px 6px 42px;\r\n                            background-image: url(../../../../assets/images/download-app-mob.svg);\r\n                            background-repeat: no-repeat;\r\n                            background-position: left 20px center;\r\n                            background-size: auto;\r\n                            transition: none;\r\n\r\n                            &:hover {\r\n                                background-image: url(../../../../assets/images/download-app-hover.svg), url(../../../../assets/images/download-animation.gif);\r\n                                background-repeat: no-repeat, no-repeat;\r\n                                background-position: left 20px center, left 22px center;\r\n                                background-size: auto, 10px;\r\n                            }\r\n                        }\r\n\r\n                        &:hover {\r\n                            background-color: #EEF3FC;\r\n                            border-color: #1D4ED8;\r\n                            color: #1D4ED8;\r\n\r\n                            svg {\r\n                                path {\r\n                                    fill: #1D4ED8;\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    .add-money {\r\n                        height: 40px;\r\n                        padding: 12px 24px;\r\n                        border-radius: 100px;\r\n                        background-color: #1E40AF;\r\n                        font-size: 12px;\r\n                        line-height: 15px;\r\n                        font-weight: 500;\r\n                        color: #fff;\r\n                        font-family: Inter, Rubik, sans-serif;\r\n                        border: none;\r\n                        cursor: pointer;\r\n\r\n                        &:hover {\r\n                            opacity: 0.9;\r\n                        }\r\n                    }\r\n\r\n                    .user-profile {\r\n                        .profile-btn {\r\n                            background-color: transparent;\r\n                            border: none;\r\n                            padding: 10px;\r\n                            margin: 0 12px 0 0;\r\n                        }\r\n\r\n                        .user-option {\r\n                            background-color: transparent;\r\n                            border: none;\r\n                            padding: 0;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        @media screen and (max-width:1440px) {\r\n            .main-nav {\r\n                padding: 0 30px 0 124px;\r\n                .nav-inner {\r\n                    padding: 24px 0;\r\n\r\n                    .nav-left {\r\n                        .wallet-list-business {\r\n                            .currency-wrapper {\r\n                                .wallet-ammount {\r\n                                    font-size: 24px;\r\n                                    margin: 0 16px 0 0;\r\n\r\n                                    .sub-part {\r\n                                        font-size: 18px;\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        @media screen and (max-width:1024px) {\r\n            .main-nav {\r\n                padding: 0 30px 0 200px;\r\n\r\n                .nav-inner {\r\n                    padding: 21px 0;\r\n                    flex-wrap: wrap;\r\n                    margin: 0 0 0 17px;\r\n\r\n                    .nav-option-right {\r\n                        margin-left: auto;\r\n                        gap: 11px;\r\n\r\n                        .header-btn {\r\n                            &.download-app {\r\n                                padding: 6px 14px 6px 35px;\r\n                                background-position: left 15px center;\r\n                            }\r\n\r\n                            padding: 6px 14px;\r\n                        }\r\n\r\n                        .add-money {\r\n                            padding: 12px 14px;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        @media screen and (max-width:767px) {\r\n            .header-inner {\r\n                display: flex;\r\n                justify-content: space-between;\r\n                padding: 10px 12px;\r\n\r\n                .navbar-toggler {\r\n                    display: block;\r\n                    z-index: 2;\r\n                    background-color: transparent;\r\n                    border: none;\r\n                    width: 20px;\r\n                    height: 20px;\r\n                    padding: 0;\r\n                }\r\n            }\r\n\r\n            .main-nav {\r\n                padding: 0 17px;\r\n\r\n                .nav-inner {\r\n                    padding:0 0 15px;\r\n                    margin: 0;\r\n                    .nav-left {\r\n                        .wallet-list-business {\r\n                            .currency-wrapper {\r\n                                .wallet-ammount {\r\n                                    font-size: 18px;\r\n                                    margin: 0 14px 0 0;\r\n\r\n                                    .sub-part {\r\n                                        font-size: 14px;\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    .nav-option-right {\r\n                        .header-btn {\r\n                            display: none;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
                    "styleUrl": "./header.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "hedgeService",
                        "type": "HedgingDataService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 24,
                "jsdoctags": [
                    {
                        "name": "hedgeService",
                        "type": "HedgingDataService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "AfterViewInit",
                "OnDestroy"
            ],
            "templateData": "<header>\r\n    <div class=\"topheder-business-users\">\r\n        <div class=\"header-inner\">\r\n            <button class=\"navbar-toggler\" type=\"button\" (click)=\"openMenu()\" id=\"db-header-8\">\r\n                <img src=\"images/side-menu.svg\">\r\n            </button>\r\n        </div>\r\n        <nav class=\"navbar main-nav\">\r\n            <div class=\"nav-inner\">\r\n                <div class=\"nav-left\">\r\n                    <div class=\"wallet-list-business\">\r\n                        <div class=\"flag\">\r\n                            <img src=\"images/ils-flag.svg\" alt=\"flag\">\r\n                        </div>\r\n                        <div class=\"currency-wrapper\">\r\n                            <div class=\"wallet-ammount\">\r\n                                3,200,000<span class=\"sub-part\">.00</span>\r\n                            </div>\r\n                            <button class=\"wallet-list-button\" mat-icon-button></button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div class=\"nav-option-right\">\r\n                    <div class=\"lang-wrapper\">\r\n                        <button type=\"button\" class=\"drop-down-btn lang-btn\" [matMenuTriggerFor]=\"langMenu\"\r\n                            id=\"dropdownForm2\">\r\n                            <img height=\"20px\" width=\"20px\" src=\"images/gloabe-icn.svg\" alt=\"language icon\">\r\n                        </button>\r\n                        <mat-menu #langMenu=\"matMenu\"\r\n                            class=\"header-menu-panel side-nav-wrapper language-wrapper animated fadeIn py-2 px-2\">\r\n                            <ul>\r\n                                <li>\r\n                                    <button class=\"drop-down-btn\" id=\"lang-list-1\">English</button>\r\n                                </li>\r\n                                <li>\r\n                                    <button class=\"drop-down-btn\" id=\"lang-list-2\">עברית</button>\r\n                                </li>\r\n                            </ul>\r\n                        </mat-menu>\r\n                    </div>\r\n                    <button class=\"header-btn download-app\">\r\n                        Download App\r\n                    </button>\r\n                    <a class=\"header-btn market-place\">\r\n                        <svg width=\"22\" height=\"20\" viewBox=\"0 0 22 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                            <path id=\"Vector\"\r\n                                d=\"M21.9483 6.58348C21.9248 6.53253 21.8963 6.48416 21.8632 6.43913C21.8382 6.31428 21.8046 6.19137 21.7628 6.0713C21.7577 6.05739 21.7526 6.04348 21.7458 6.02956L19.4031 0.521739C19.3369 0.366601 19.2277 0.234598 19.0891 0.141919C18.9505 0.049241 18.7884 -8.19612e-05 18.6228 1.02236e-07H3.30575C3.14011 -8.19612e-05 2.97804 0.049241 2.83943 0.141919C2.70082 0.234598 2.59169 0.366601 2.52543 0.521739L0.168309 6.07043C-0.056103 6.65243 -0.056103 7.29975 0.168309 7.88174C0.385115 8.3882 0.699203 8.84504 1.09196 9.22518C1.48472 9.60532 1.94815 9.90103 2.4548 10.0948V19.1304C2.4548 19.3611 2.54446 19.5822 2.70404 19.7453C2.86362 19.9084 3.08007 20 3.30575 20H18.6228C18.8485 20 19.0649 19.9084 19.2245 19.7453C19.3841 19.5822 19.4737 19.3611 19.4737 19.1304V10.0948C19.9803 9.90127 20.4436 9.60585 20.8364 9.22601C21.2291 8.84617 21.5433 8.38965 21.7602 7.88348C21.8304 7.70055 21.877 7.5091 21.8989 7.31391C21.9557 7.20211 21.9894 7.07959 21.9979 6.95393C22.0064 6.82828 21.9895 6.70219 21.9483 6.58348ZM8.41143 18.2609V13.0435H10.1133V18.2609H8.41143ZM11.8152 18.2609V13.0435H13.5171V18.2609H11.8152ZM17.7718 18.2609H15.219V12.1739C15.219 11.9433 15.1294 11.7221 14.9698 11.559C14.8102 11.396 14.5937 11.3043 14.3681 11.3043H7.56048C7.3348 11.3043 7.11836 11.396 6.95877 11.559C6.79919 11.7221 6.70954 11.9433 6.70954 12.1739V18.2609H4.1567V10.4348C4.80138 10.443 5.44005 10.3072 6.028 10.0369C6.61595 9.7665 7.13898 9.36811 7.56048 8.86957C7.9868 9.36234 8.51071 9.75693 9.09752 10.0272C9.68432 10.2974 10.3206 10.4372 10.9643 10.4372C11.6079 10.4372 12.2442 10.2974 12.831 10.0272C13.4178 9.75693 13.9417 9.36234 14.3681 8.86957C14.7896 9.36811 15.3126 9.7665 15.9005 10.0369C16.4885 10.3072 17.1272 10.443 17.7718 10.4348V18.2609ZM20.186 7.21739C19.9683 7.67738 19.6239 8.06235 19.195 8.32498C18.7661 8.5876 18.2714 8.71644 17.7718 8.69565C17.1525 8.74712 16.5381 8.54822 16.0608 8.14172C15.5834 7.73521 15.2812 7.15354 15.219 6.52174C15.219 6.29112 15.1294 6.06994 14.9698 5.90686C14.8102 5.74379 14.5937 5.65217 14.3681 5.65217C14.1424 5.65217 13.9259 5.74379 13.7663 5.90686C13.6068 6.06994 13.5171 6.29112 13.5171 6.52174C13.455 7.15354 13.1527 7.73521 12.6754 8.14172C12.198 8.54822 11.5836 8.74712 10.9643 8.69565C10.3449 8.74712 9.73054 8.54822 9.25318 8.14172C8.77581 7.73521 8.47358 7.15354 8.41143 6.52174C8.41143 6.29112 8.32178 6.06994 8.1622 5.90686C8.00261 5.74379 7.78617 5.65217 7.56048 5.65217C7.3348 5.65217 7.11836 5.74379 6.95877 5.90686C6.79919 6.06994 6.70954 6.29112 6.70954 6.52174C6.64739 7.15354 6.34516 7.73521 5.86779 8.14172C5.39043 8.54822 4.77604 8.74712 4.1567 8.69565C3.65699 8.7165 3.1622 8.5877 2.73316 8.32507C2.30412 8.06245 1.95952 7.67745 1.74171 7.21739C1.68468 7.05701 1.68468 6.88125 1.74171 6.72087L3.86397 1.73913H18.0646L20.1724 6.69565C20.2382 6.86222 20.2431 7.04747 20.186 7.21739Z\"\r\n                                fill=\"black\" />\r\n                        </svg>\r\n                        Marketplace\r\n                    </a>\r\n                    <button class=\"add-money\" mat-button id=\"db-header-10\">+ Add Money</button>\r\n                    <div class=\"user-profile\">\r\n                        <button class=\"profile-btn\" [matMenuTriggerFor]=\"accountsMenu\" id=\"db-header-11\">T</button>\r\n                        <button class=\"user-option\" mat-icon-button [matMenuTriggerFor]=\"profileMenu\" id=\"db-header-12\">\r\n                            <img src=\"images/menu-down-arrow.svg\">\r\n                        </button>\r\n                        <mat-menu #profileMenu=\"matMenu\" class=\"header-menu-panel\">\r\n                            <button mat-menu-item class=\"custom-menu-item\" id=\"db-header-13\" (click)=\"logout()\">Logout</button>\r\n                        </mat-menu>\r\n                        <mat-menu #accountsMenu=\"matMenu\" class=\"header-menu-panel\">\r\n                            <button mat-menu-item class=\"custom-menu-item\" id=\"dbheader-company\">Tamir</button>\r\n                        </mat-menu>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </nav>\r\n    </div>\r\n</header>\r\n<!-- <ng-container *ngIf=\"\"> -->\r\n    <mat-drawer #quickHedgeDrawer  mode=\"over\" position=\"end\" class=\"drawer-hedge-quick\" [opened]=\"false\"> \r\n        <app-quick-hedge-drawer (closeDrawer)=\"closeQuickHedgeDrawer()\"></app-quick-hedge-drawer>\r\n    </mat-drawer>\r\n      \r\n    <mat-drawer #hedgeAllDrawer mode=\"side\" position=\"end\" class=\"drawer-hedge-all\" [opened]=\"false\">\r\n        <app-hedge-all-drawer (closeDrawer)=\"closeHedgeAllDrawer()\"></app-hedge-all-drawer>\r\n    </mat-drawer>\r\n<!-- </ng-container> -->\r\n\r\n  \r\n"
        },
        {
            "name": "HedgeAllDrawerComponent",
            "id": "component-HedgeAllDrawerComponent-8b047cf917df48a73b0ada37341af7ba76a25bf25a493137d826ee72a7e14d268f53d63bb14be60b8bfa4d66751f4039c64c3f84abd44b7ee214b2faabf05126",
            "file": "src/app/risk-dashboard/components/hedging-proposal/components/hedge-all-drawer/hedge-all-drawer.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-hedge-all-drawer",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./hedge-all-drawer.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "closeDrawer",
                    "defaultValue": "new EventEmitter<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "formattedDateRange",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "hedgeAllbtnClicked",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "initialHedgeInfo",
                    "defaultValue": "{\r\n    \"price\": 0,\r\n    \"requiredCollateral\": 48.832,\r\n    \"totalHedgeAmount\": 100.35,\r\n    \"totalHedgePercent\": 23.5625,\r\n    \"avgHedgeRate\": 4.4971,\r\n    \"liabilityRate\": 4.4971\r\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "intervalId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "mode",
                    "defaultValue": "'indeterminate'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "multipleHedgeData",
                    "defaultValue": "hedgeAllRows",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "showCompleteHedgeDetails",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "showHedgeAllDetails",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "showProgressbar",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "specificSelectedRow",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "tandcConfirmed",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 38
                }
            ],
            "methodsClass": [
                {
                    "name": "closeHedgeDrawer",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 140,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "formatAmount",
                    "args": [
                        {
                            "name": "amount",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 61,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "amount",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "formatDate",
                    "args": [
                        {
                            "name": "dateStr",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "dateStr",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "formatMonthYear",
                    "args": [
                        {
                            "name": "dateStr",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 93,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "dateStr",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onCheckboxChange",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 131,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onHedgeAllBtnClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 115,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onRowClick",
                    "args": [
                        {
                            "name": "row",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 89,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "row",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "openConditionsDisclosure",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 100,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setFormattedDateRange",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 68,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "MatCheckboxModule",
                    "type": "module"
                },
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "NgbTooltipModule",
                    "type": "module"
                },
                {
                    "name": "MatProgressSpinnerModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Output } from '@angular/core';\r\nimport { MatCheckboxModule } from '@angular/material/checkbox';\r\nimport { HedgingDataService } from '../../hedging-data.service';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { CommonModule } from '@angular/common';\r\nimport { HedgeTandcDetailsComponent } from '../hedge-tandc-details/hedge-tandc-details.component';\r\nimport { hedgeAllRows } from '../../hedging-static-data';\r\nimport { NgbTooltipModule } from '@ng-bootstrap/ng-bootstrap';\r\nimport { ActiveProtectionTraderoomComponent } from '../traderoom-components/active-protection-traderoom/active-protection-traderoom.component';\r\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\r\n\r\n@Component({\r\n  selector: 'app-hedge-all-drawer',\r\n  imports: [MatCheckboxModule, CommonModule, NgbTooltipModule, MatProgressSpinnerModule],\r\n  templateUrl: './hedge-all-drawer.component.html',\r\n  styleUrl: './hedge-all-drawer.component.scss'\r\n})\r\nexport class HedgeAllDrawerComponent {\r\n  @Output() closeDrawer = new EventEmitter<void>();\r\n  showHedgeAllDetails: boolean = false;\r\n  showCompleteHedgeDetails: boolean = false;\r\n  multipleHedgeData = hedgeAllRows;\r\n  showProgressbar = false;\r\n  mode = 'indeterminate'; // or 'determinate'\r\n  intervalId: any;\r\n\r\n  initialHedgeInfo = {\r\n    \"price\": 0,\r\n    \"requiredCollateral\": 48.832,\r\n    \"totalHedgeAmount\": 100.35,\r\n    \"totalHedgePercent\": 23.5625,\r\n    \"avgHedgeRate\": 4.4971,\r\n    \"liabilityRate\": 4.4971\r\n  }\r\n  formattedDateRange: string = '';\r\n  specificSelectedRow: any;\r\n  hedgeAllbtnClicked: boolean = false;\r\n  tandcConfirmed: boolean = false;\r\n\r\n  constructor(private hedgeService: HedgingDataService, private dialog: MatDialog) { }\r\n\r\n  ngOnInit() {\r\n    this.setFormattedDateRange()\r\n    this.intervalId = setInterval(() => {\r\n      this.showProgressbar = true;\r\n      setTimeout(() => {\r\n        this.showProgressbar = false;\r\n      }, 3000)\r\n    }, 30000);\r\n  }\r\n\r\n  formatDate(dateStr: string): string {\r\n    const [day, month, year] = dateStr.split('/');\r\n    const date = new Date(`${year}-${month}-${day}`);\r\n    return date.toLocaleDateString('en-GB', {\r\n      month: 'long', // full month name like January\r\n      year: 'numeric'\r\n    });\r\n  }\r\n\r\n  formatAmount(amount: number): string {\r\n    return new Intl.NumberFormat('en-US', {\r\n      style: 'currency',\r\n      currency: 'CHF'\r\n    }).format(amount);\r\n  }\r\n\r\n  setFormattedDateRange(): void {\r\n    if (!this.multipleHedgeData.length) return;\r\n\r\n    const parseDate = (dateStr: string): Date => {\r\n      const [day, month, year] = dateStr.split('/').map(Number);\r\n      return new Date(year, month - 1, day);\r\n    };\r\n\r\n    const formatDate = (date: Date): string =>\r\n      `${date.getDate().toString().padStart(2, '0')} ${date.toLocaleString('default', { month: 'short' })} ${date.getFullYear()}`;\r\n\r\n    const sortedDates = this.multipleHedgeData\r\n      .map(item => parseDate(item.expiryDate))\r\n      .sort((a, b) => a.getTime() - b.getTime());\r\n\r\n    const startDate = formatDate(sortedDates[0]);\r\n    const endDate = formatDate(sortedDates[sortedDates.length - 1]);\r\n\r\n    this.formattedDateRange = `${startDate} - ${endDate}`;\r\n  }\r\n\r\n  onRowClick(row: any) {\r\n    this.specificSelectedRow = row;\r\n  }\r\n\r\n  formatMonthYear(dateStr: string): string {\r\n    const [day, month, year] = dateStr.split('/');\r\n    const date = new Date(+year, +month - 1, +day); // month is 0-indexed\r\n    return date.toLocaleDateString('en-US', { month: 'long', year: 'numeric' });\r\n  }\r\n  \r\n\r\n  openConditionsDisclosure() {\r\n    const dialogRef = this.dialog.open(HedgeTandcDetailsComponent, {\r\n      width: '627px',\r\n      disableClose: true,\r\n      panelClass: 'terms-disclosure-hedging',\r\n      data: { someData: 'pass any data if needed' }\r\n    });\r\n\r\n    dialogRef.afterClosed().subscribe(result => {\r\n      if (result === 'confirmed') {\r\n        this.tandcConfirmed = true; // Set the confirmation flag to true\r\n      }\r\n    });\r\n  }\r\n\r\n  onHedgeAllBtnClick() {\r\n    this.hedgeAllbtnClicked = true;\r\n    if (this.tandcConfirmed) {\r\n      const dialogRef = this.dialog.open(ActiveProtectionTraderoomComponent, {\r\n        width: '100vw',\r\n        maxWidth: '100vw',\r\n        disableClose: true,\r\n        panelClass: 'hedging-active-protection',  \r\n      });\r\n  \r\n      dialogRef.afterClosed().subscribe(result => {\r\n      });\r\n    }\r\n    \r\n  }\r\n\r\n  onCheckboxChange(event:any) {\r\n    this.hedgeAllbtnClicked = false\r\n    if (!event.checked) {\r\n      this.tandcConfirmed = false;\r\n    } else {\r\n      this.tandcConfirmed = true;\r\n    }\r\n  }\r\n\r\n  closeHedgeDrawer() {\r\n    this.tandcConfirmed  = false;\r\n    this.hedgeAllbtnClicked = false;\r\n    this.showHedgeAllDetails = false;\r\n    this.showCompleteHedgeDetails = false;\r\n    this.hedgeService.closeHedgeAllDrawer();\r\n  }\r\n}\r\n",
            "styleUrl": "./hedge-all-drawer.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "hedgeService",
                        "type": "HedgingDataService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 38,
                "jsdoctags": [
                    {
                        "name": "hedgeService",
                        "type": "HedgingDataService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<aside class=\"hedge-sidebar-container loader-wrapper\">\r\n    <!-- Close Button -->\r\n    <button class=\"close-btn\" aria-label=\"Close\" (click)=\"closeHedgeDrawer()\">\r\n      <img src=\"images/close-btn-cashflow.svg\" alt=\"Close\" />\r\n    </button>\r\n  \r\n    <!-- Title -->\r\n    <header class=\"hedge-header\">\r\n      <h2 class=\"hedge-title\">\r\n        Hedge all\r\n      </h2>\r\n    </header>\r\n    <div class=\"bg-white section-loader\"></div>\r\n    <!-- Hedge Information -->\r\n    <section class=\"hedge-info\">\r\n      <div class=\"hedge-amount\">\r\n        <label for=\"hedge-amount-value\">Amount to hedge</label>\r\n        <span id=\"hedge-amount-value\">\r\n          {{multipleHedgeData[0].hedge.notionalCurrencySign}}{{initialHedgeInfo.totalHedgeAmount}}\r\n        </span>\r\n      </div>\r\n      <button class=\"forward-btn\">Forward</button>\r\n    </section>\r\n  \r\n    <!-- Conditional Sections -->\r\n    <ng-container *ngIf=\"showHedgeAllDetails == false && showCompleteHedgeDetails == false\">\r\n        <section class=\"info-section\">\r\n            <div class=\"info-wrapper\">\r\n              <div class=\"sub-info\">\r\n                <label>Time period</label>\r\n                <span class=\"content\">\r\n                  {{ formattedDateRange }}\r\n                </span>\r\n              </div>\r\n              <div class=\"sub-info\">\r\n                <label>Currencies</label>\r\n                <span class=\"content\">{{multipleHedgeData[0].hedge.notionalCurrency}}/{{multipleHedgeData[0].hedge.secondCurrency}}</span>\r\n              </div>\r\n            </div>\r\n        </section>\r\n        \r\n          <!-- Rates Information -->\r\n          <section class=\"info-section\">\r\n            <div class=\"info-wrapper\">\r\n              <div class=\"sub-info\">\r\n                <label>Hedge rate</label>\r\n                <div class=\"rate-content\">\r\n                  <mat-progress-spinner *ngIf=\"showProgressbar\" [diameter]=\"50\" mode=\"indeterminate\" class=\"rate-update-spinner\"> </mat-progress-spinner>\r\n                  <span class=\"content primary-value\">{{initialHedgeInfo.avgHedgeRate}}</span>\r\n                </div>\r\n              </div>\r\n              <div class=\"sub-info\">\r\n                <label>Liability rate</label>\r\n                <span class=\"content primary-value\">{{initialHedgeInfo.liabilityRate}}</span>\r\n              </div>\r\n            </div>\r\n          </section>\r\n        \r\n          <!-- Collateral and Price Information -->\r\n          <section class=\"info-section\">\r\n            <div class=\"info-wrapper\">\r\n              <div class=\"sub-info\">\r\n                <label>Required collateral <img class=\"z-1 tool-tip-cs\" [tooltipClass]=\"'collateral-amount-ttp'\" [ngbTooltip]=\"requiredCollateralttp\" src=\"images/circle-help.svg\" container=\"body\" placement=\"top\" />\r\n                  <!-- <a class=\"hedge-deposit-link\">Make a deposit</a>  -->\r\n                </label>\r\n                <span class=\"content\">{{multipleHedgeData[0].hedge.secondCurrencySign}}{{initialHedgeInfo.requiredCollateral}}</span>\r\n              </div>\r\n              <div class=\"sub-info\">\r\n                <label>Price \r\n                  <!-- <a class=\"hedge-deposit-link\">Make a deposit</a> -->\r\n                </label> \r\n                <span class=\"content\">{{multipleHedgeData[0].hedge.secondCurrencySign}}{{initialHedgeInfo.price}}</span>\r\n              </div>\r\n            </div>\r\n            <ng-template #requiredCollateralttp>\r\n              <div class=\"recommended-shield-ttp\">Assets pledged to cover hedging losses, based on risk.</div>\r\n           </ng-template>\r\n          </section>\r\n          \r\n          <!-- Hedge All Details Button -->\r\n          <section class=\"info-section\">\r\n            <div class=\"info-wrapper view-detail\">\r\n                <button class=\"hedge-all-details\" (click)=\"showHedgeAllDetails = true\">View details</button>\r\n            </div>\r\n          </section>\r\n    </ng-container>\r\n  \r\n    <!-- Multiple Hedges View -->\r\n    <div class=\"hedging-allmonth-wrapper\" *ngIf=\"showHedgeAllDetails == true && showCompleteHedgeDetails == false\">\r\n      <span class=\"dashed-line\"></span>\r\n      <button class=\"back-to-hedge\" (click)=\"showHedgeAllDetails = false\">Back</button>\r\n      <div class=\"heading-row\">\r\n        <span class=\"col-title\">Expiry dates</span>\r\n        <span class=\"col-title\">Hedge amounts</span>\r\n      </div>\r\n      <div class=\"expirydate-hedge-container\">\r\n        <div\r\n          class=\"date-and-amount-wrapper\"\r\n          *ngFor=\"let row of multipleHedgeData\"\r\n          (click)=\"onRowClick(row);showCompleteHedgeDetails = true; showHedgeAllDetails = false;\"\r\n        >\r\n          <label class=\"month-value\">\r\n            {{ formatDate(row.expiryDate) }}\r\n          </label>\r\n\r\n          <div class=\"bookmark-amount-section\">\r\n            <label class=\"hedge-amount\">{{ formatAmount(row.protectAmount) }}</label>\r\n            <button class=\"bookmark-btn\">\r\n              <img src=\"images/arrow.svg\" alt=\"arrow\" />\r\n            </button>\r\n          </div>\r\n        </div>\r\n\r\n      </div>\r\n      \r\n    </div>\r\n  \r\n    <!-- Specific Month View -->\r\n    <div class=\"specific-month-wrapper\" *ngIf=\"showCompleteHedgeDetails == true && showHedgeAllDetails == false\">\r\n      <span class=\"dashed-line\"></span>\r\n      <button class=\"back-to-hedge\" (click)=\"showCompleteHedgeDetails = false; showHedgeAllDetails = true\">Back</button>\r\n      <div class=\"month-title\">\r\n        <h4>{{ formatMonthYear(specificSelectedRow.expiryDate) }}</h4>\r\n      </div>\r\n      <div class=\"month-info-wrapper\">\r\n        <div class=\"month-info\">\r\n          <label class=\"row-title\">Monthly hedge amount </label>\r\n          <label class=\"row-amount\">\r\n            {{specificSelectedRow.hedge.notionalCurrencySign}}{{specificSelectedRow.hedge.protectAmount}}\r\n          </label>\r\n        </div>\r\n        <div class=\"month-info\">\r\n          <label class=\"row-title\">Hedge rate </label>\r\n          <label class=\"row-amount primary-value\">{{specificSelectedRow.hedge.hedgeRate}}</label>\r\n        </div>\r\n        <div class=\"month-info\">\r\n          <label class=\"row-title\">Liability rate </label>\r\n          <label class=\"row-amount primary-value\">{{specificSelectedRow.hedge.liabilityRate}}</label>\r\n        </div>\r\n        <div class=\"month-info\">\r\n          <label class=\"row-title\">Required collateral \r\n            <!-- <a class=\"hedge-deposit-link\">Make a deposit</a> -->\r\n          </label>\r\n          <div class=\"collateral-content\">\r\n            <label class=\"collateral-amount\">{{specificSelectedRow.hedge.notionalCurrencySign}}{{specificSelectedRow.hedge.collateral}}</label>\r\n          </div>\r\n        </div>\r\n  \r\n        <div class=\"month-info\">\r\n          <label class=\"row-title\">Price\r\n            <!-- <a class=\"hedge-deposit-link\">Make a deposit</a> -->\r\n          </label>\r\n          <div class=\"collateral-content\">\r\n            <label class=\"collateral-amount\">{{specificSelectedRow.hedge.notionalCurrencySign}}{{specificSelectedRow.hedge.price}}</label>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  \r\n    <!-- Conditions Acknowledgement -->\r\n    <section class=\"conditions-section\">\r\n      <p class=\"read-conditions\">\r\n        I am aware that during the transaction term, additional collateral requirements may be determined in accordance with market fluctuations and the company's requirements. If these requirements are not met promptly, the company may, at its discretion, take actions including but not limited to closing the transaction and forfeiting the collateral amount.\r\n      </p>\r\n    </section>\r\n  \r\n    <!-- Footer Actions -->\r\n    <footer class=\"action-footer\">\r\n      <mat-checkbox\r\n        (change)=\"onCheckboxChange($event)\"\r\n        [checked]=\"tandcConfirmed\"\r\n        class=\"tick-condition\"\r\n        [ngClass]=\"{'not-confirmed': !tandcConfirmed && hedgeAllbtnClicked}\"\r\n      >\r\n        I confirm the general <button (click)=\"openConditionsDisclosure()\">conditions and disclosure</button> about the risk.\r\n      </mat-checkbox>\r\n      <button\r\n        class=\"hedge-now single-hedge\"\r\n        (click)=\"onHedgeAllBtnClick()\">\r\n        Hedge now\r\n      </button>\r\n      <p class=\"refresh-in\" style=\"display: none;\">\r\n        <span>Insufficient funds in wallet. <a class=\"hedge-deposit-link\">Make a deposit</a></span>\r\n      </p>\r\n      <div class=\"transaction-unavailable-wrapper\" *ngIf=\"!tandcConfirmed && hedgeAllbtnClicked\">\r\n        <img src=\"images/error-outline.svg\" alt=\"error\">\r\n        <p class=\"transaction-unavailable-err\">Some transactions are unavailable and won't be included in the Hedge All action. You can continue with available transactions or <a>refresh</a> the page <span>(unsaved changes will be lost).</span> </p>\r\n      </div>\r\n    </footer>\r\n  </aside>"
        },
        {
            "name": "HedgeTandcDetailsComponent",
            "id": "component-HedgeTandcDetailsComponent-a445227429b6f396a227e7783f1a711725f4254b2b7604a2de4734f78e827c0d2c79409d69c922fc2489828a4cb97d0bc69ff1de27b8a51e178e3aa9c67a01ca",
            "file": "src/app/risk-dashboard/components/hedging-proposal/components/hedge-tandc-details/hedge-tandc-details.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-hedge-tandc-details",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./hedge-tandc-details.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "disclosureContent",
                    "defaultValue": "`<p class=\"paragraph\">\r\n        The provisions of this Risk Disclosure apply to Okoora and its Operating Companies, as defined in the Framework Agreement. This disclosure is intended to outline, in a non-exhaustive manner, the risks associated with transactions in foreign exchange, financial assets, and the use of technological platforms for such transactions. By engaging in these transactions, the Client confirms their acknowledgment and acceptance of these risks and their consent to the investment marketing services provided.\r\n      </p>\r\n      <ol class=\"disclosure-list\">\r\n        <div>\r\n          <li>1. Acknowledgment of Risks</li>\r\n          <p class=\"paragraph\">\r\n            The Client explicitly confirms that they have read, understood, and accept all risks detailed in this disclosure and in the Transactions Terms, which form an integral part of this agreement. The Client acknowledges that they are solely responsible for assessing whether each transaction aligns with their financial goals, experience, and capabilities, taking into account their financial situation.\r\n          </p>\r\n          <p class=\"paragraph\">\r\n            The Client acknowledges that this Risk Disclosure should be read in conjunction with the <a target=\"_blank\" href=\"https://okoora.com/terms_of_services/transaction-terms-and-conditions/\">Transactions Terms and Conditions</a>, which detail specific procedures, conditions, and requirements for executing and settling transactions. By proceeding with any transactions, the Client confirms their acceptance of both the Risk Disclosure and the Transactions Terms, assuming full responsibility for any risks, obligations, or losses associated with their trading activities.\r\n          </p>\r\n          <p class=\"paragraph\">\r\n            The Client is strongly encouraged to seek independent financial and legal advice to fully understand the risks and implications of hedging transactions and high-risk financial instruments before proceeding.\r\n          </p>\r\n        </div>\r\n  \r\n        <div>\r\n          <li>2. Irreversibility and Modification of Transactions</li>\r\n          <p class=\"paragraph\">\r\n            Once a transaction is confirmed, the Client cannot cancel or modify it. Additional collateral requirements may be imposed during the transaction period based on changes in market conditions and at the company's discretion. If the Client fails to provide the required collateral promptly, the company may, but is not obligated to, take actions such as closing the transaction and forfeiting the collateral amount at its sole discretion and subject to applicable fees.\r\n          </p>\r\n          <p class=\"paragraph\">The company reserves the right to cancel or modify the transaction in accordance with the agreement.</p>\r\n        </div>\r\n  \r\n        <div>\r\n          <li>3. Market Risks and Fluctuations</li>\r\n          <p class=\"paragraph\">\r\n            Transactions in financial markets involving financial instruments carry special risks, and execution may result in significant losses, including the potential loss of the entire investment. The financial markets, particularly foreign exchange and interest rate markets, are subject to unpredictable influences and fluctuations beyond the service provider's control. These changes may result in significant discrepancies between projected future prices and actual settlement prices, possibly leading to a total loss of funds deposited by the Client.\r\n          </p>\r\n        </div>\r\n  \r\n        <div>\r\n          <li>4. Collateral Requirements and Potential Losses</li>\r\n          <p class=\"paragraph\">\r\n            The Client understands that they may be required to deposit additional substantial collateral if market conditions shift against their position. Failure to do so may result in the forced closure of positions, which could lead to immediate losses and/or prevent future profits if market trends change.\r\n          </p>\r\n          <p class=\"paragraph\">\r\n            The Client acknowledges that they may incur losses exceeding the initial collateral and may need to cover any resulting debt balances. The Client irrevocably authorizes the service provider to take actions involving collateral to cover any outstanding balances, including selling, converting, or charging the collateral in the event of losses.\r\n          </p>\r\n        </div>\r\n  \r\n        <div>\r\n          <li>5. Leverage, Options, and Structured Products</li>\r\n          <p class=\"paragraph\">\r\n            The Client understands that financial leverage due to low collateral requirements can amplify both potential gains and losses. High leverage may result in substantial losses, just as it may result in profits.\r\n          </p>\r\n          <p class=\"paragraph\">\r\n            The Client is aware that each option has an expiration date, after which it becomes void and without value if not exercised or sold. It is the Client’s sole responsibility to be aware of option expiration dates, as the service provider is not obligated to notify the Client.\r\n          </p>\r\n        </div>\r\n  \r\n        <div>\r\n          <li>6. System, Network, and Execution Risks</li>\r\n          <p class=\"paragraph\">\r\n            Trading services are conducted through computer systems, networks, and the Internet. The Client acknowledges that trading may be subject to unforeseen interruptions or delays without prior notice. These interruptions may affect the Client’s ability to execute or cancel orders.\r\n          </p>\r\n          <p class=\"paragraph\">\r\n            In certain market conditions, the Client may find it difficult or impossible to exit a position or execute orders with a price limit. Stop Loss or Stop Limit orders may not necessarily prevent losses to the anticipated levels due to market volatility.\r\n          </p>\r\n        </div>\r\n  \r\n        <div>\r\n          <li>7. Transaction Costs and Tax Deductions</li>\r\n          <p class=\"paragraph\">\r\n            The Client understands that transactions include cost components such as the difference between bid and ask prices and other transaction fees, which may accumulate over time.\r\n          </p>\r\n          <p class=\"paragraph\">All transactions are subject to applicable tax deductions as required by law.</p>\r\n        </div>\r\n  \r\n        <div>\r\n          <li>8. Final Settlement and Reference Rates</li>\r\n          <p class=\"paragraph\">\r\n            At the transaction's maturity date, if the reference rate is higher than the transaction rate, the Client’s account will be credited in the secondary currency with an amount equal to the difference between the rates multiplied by the transaction amount in the primary currency. Conversely, if the reference rate is lower, the Client’s account will be debited in the secondary currency with an amount reflecting the rate difference.\r\n          </p>\r\n          <p class=\"paragraph\">The protection transaction will automatically terminate on the maturity date and upon the publication of the reference rate.</p>\r\n        </div>\r\n  \r\n        <div>\r\n          <li>9. Legal Compliance and Client Responsibility</li>\r\n          <p class=\"paragraph\">\r\n            The Client confirms awareness that all transactions are subject to applicable laws, regulations, and guidelines of various authorities in Israel and abroad (the \"Provisions\"). The Client agrees to comply with these provisions and waives any claims, demands, or suits related to compliance with such regulations.\r\n          </p>\r\n          <p class=\"paragraph\">\r\n            The Client acknowledges the risks outlined herein and affirms that they have, and will continue to have throughout the term of this agreement, the full capacity to bear any consequences, losses, or payments that may arise from their transactions. The Client’s decisions are made at their sole discretion and responsibility, and the Client releases the service provider from any liability for losses or damages incurred as a result of transactions conducted according to the Client’s instructions.\r\n          </p>\r\n        </div>\r\n      </ol>`",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "isScrolledToEnd",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "showErrorMsg",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "methodsClass": [
                {
                    "name": "cancelConfirmation",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 110,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 107,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onScroll",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 122,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "takeConfirmAction",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 114,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { Component, Input } from '@angular/core';\r\nimport { MatDialogRef } from '@angular/material/dialog';\r\n\r\n@Component({\r\n  selector: 'app-hedge-tandc-details',\r\n  imports: [CommonModule],\r\n  templateUrl: './hedge-tandc-details.component.html',\r\n  styleUrl: './hedge-tandc-details.component.scss'\r\n})\r\nexport class HedgeTandcDetailsComponent {\r\n  isScrolledToEnd: boolean = false;\r\n  showErrorMsg: boolean = false;\r\n\r\n  constructor(\r\n    private dialogRef: MatDialogRef<HedgeTandcDetailsComponent>\r\n  ) {}\r\n  @Input() disclosureContent = `<p class=\"paragraph\">\r\n        The provisions of this Risk Disclosure apply to Okoora and its Operating Companies, as defined in the Framework Agreement. This disclosure is intended to outline, in a non-exhaustive manner, the risks associated with transactions in foreign exchange, financial assets, and the use of technological platforms for such transactions. By engaging in these transactions, the Client confirms their acknowledgment and acceptance of these risks and their consent to the investment marketing services provided.\r\n      </p>\r\n      <ol class=\"disclosure-list\">\r\n        <div>\r\n          <li>1. Acknowledgment of Risks</li>\r\n          <p class=\"paragraph\">\r\n            The Client explicitly confirms that they have read, understood, and accept all risks detailed in this disclosure and in the Transactions Terms, which form an integral part of this agreement. The Client acknowledges that they are solely responsible for assessing whether each transaction aligns with their financial goals, experience, and capabilities, taking into account their financial situation.\r\n          </p>\r\n          <p class=\"paragraph\">\r\n            The Client acknowledges that this Risk Disclosure should be read in conjunction with the <a target=\"_blank\" href=\"https://okoora.com/terms_of_services/transaction-terms-and-conditions/\">Transactions Terms and Conditions</a>, which detail specific procedures, conditions, and requirements for executing and settling transactions. By proceeding with any transactions, the Client confirms their acceptance of both the Risk Disclosure and the Transactions Terms, assuming full responsibility for any risks, obligations, or losses associated with their trading activities.\r\n          </p>\r\n          <p class=\"paragraph\">\r\n            The Client is strongly encouraged to seek independent financial and legal advice to fully understand the risks and implications of hedging transactions and high-risk financial instruments before proceeding.\r\n          </p>\r\n        </div>\r\n  \r\n        <div>\r\n          <li>2. Irreversibility and Modification of Transactions</li>\r\n          <p class=\"paragraph\">\r\n            Once a transaction is confirmed, the Client cannot cancel or modify it. Additional collateral requirements may be imposed during the transaction period based on changes in market conditions and at the company's discretion. If the Client fails to provide the required collateral promptly, the company may, but is not obligated to, take actions such as closing the transaction and forfeiting the collateral amount at its sole discretion and subject to applicable fees.\r\n          </p>\r\n          <p class=\"paragraph\">The company reserves the right to cancel or modify the transaction in accordance with the agreement.</p>\r\n        </div>\r\n  \r\n        <div>\r\n          <li>3. Market Risks and Fluctuations</li>\r\n          <p class=\"paragraph\">\r\n            Transactions in financial markets involving financial instruments carry special risks, and execution may result in significant losses, including the potential loss of the entire investment. The financial markets, particularly foreign exchange and interest rate markets, are subject to unpredictable influences and fluctuations beyond the service provider's control. These changes may result in significant discrepancies between projected future prices and actual settlement prices, possibly leading to a total loss of funds deposited by the Client.\r\n          </p>\r\n        </div>\r\n  \r\n        <div>\r\n          <li>4. Collateral Requirements and Potential Losses</li>\r\n          <p class=\"paragraph\">\r\n            The Client understands that they may be required to deposit additional substantial collateral if market conditions shift against their position. Failure to do so may result in the forced closure of positions, which could lead to immediate losses and/or prevent future profits if market trends change.\r\n          </p>\r\n          <p class=\"paragraph\">\r\n            The Client acknowledges that they may incur losses exceeding the initial collateral and may need to cover any resulting debt balances. The Client irrevocably authorizes the service provider to take actions involving collateral to cover any outstanding balances, including selling, converting, or charging the collateral in the event of losses.\r\n          </p>\r\n        </div>\r\n  \r\n        <div>\r\n          <li>5. Leverage, Options, and Structured Products</li>\r\n          <p class=\"paragraph\">\r\n            The Client understands that financial leverage due to low collateral requirements can amplify both potential gains and losses. High leverage may result in substantial losses, just as it may result in profits.\r\n          </p>\r\n          <p class=\"paragraph\">\r\n            The Client is aware that each option has an expiration date, after which it becomes void and without value if not exercised or sold. It is the Client’s sole responsibility to be aware of option expiration dates, as the service provider is not obligated to notify the Client.\r\n          </p>\r\n        </div>\r\n  \r\n        <div>\r\n          <li>6. System, Network, and Execution Risks</li>\r\n          <p class=\"paragraph\">\r\n            Trading services are conducted through computer systems, networks, and the Internet. The Client acknowledges that trading may be subject to unforeseen interruptions or delays without prior notice. These interruptions may affect the Client’s ability to execute or cancel orders.\r\n          </p>\r\n          <p class=\"paragraph\">\r\n            In certain market conditions, the Client may find it difficult or impossible to exit a position or execute orders with a price limit. Stop Loss or Stop Limit orders may not necessarily prevent losses to the anticipated levels due to market volatility.\r\n          </p>\r\n        </div>\r\n  \r\n        <div>\r\n          <li>7. Transaction Costs and Tax Deductions</li>\r\n          <p class=\"paragraph\">\r\n            The Client understands that transactions include cost components such as the difference between bid and ask prices and other transaction fees, which may accumulate over time.\r\n          </p>\r\n          <p class=\"paragraph\">All transactions are subject to applicable tax deductions as required by law.</p>\r\n        </div>\r\n  \r\n        <div>\r\n          <li>8. Final Settlement and Reference Rates</li>\r\n          <p class=\"paragraph\">\r\n            At the transaction's maturity date, if the reference rate is higher than the transaction rate, the Client’s account will be credited in the secondary currency with an amount equal to the difference between the rates multiplied by the transaction amount in the primary currency. Conversely, if the reference rate is lower, the Client’s account will be debited in the secondary currency with an amount reflecting the rate difference.\r\n          </p>\r\n          <p class=\"paragraph\">The protection transaction will automatically terminate on the maturity date and upon the publication of the reference rate.</p>\r\n        </div>\r\n  \r\n        <div>\r\n          <li>9. Legal Compliance and Client Responsibility</li>\r\n          <p class=\"paragraph\">\r\n            The Client confirms awareness that all transactions are subject to applicable laws, regulations, and guidelines of various authorities in Israel and abroad (the \"Provisions\"). The Client agrees to comply with these provisions and waives any claims, demands, or suits related to compliance with such regulations.\r\n          </p>\r\n          <p class=\"paragraph\">\r\n            The Client acknowledges the risks outlined herein and affirms that they have, and will continue to have throughout the term of this agreement, the full capacity to bear any consequences, losses, or payments that may arise from their transactions. The Client’s decisions are made at their sole discretion and responsibility, and the Client releases the service provider from any liability for losses or damages incurred as a result of transactions conducted according to the Client’s instructions.\r\n          </p>\r\n        </div>\r\n      </ol>`\r\n\r\n  ngOnInit(): void {\r\n    this.isScrolledToEnd = false;\r\n  }\r\n  cancelConfirmation() {\r\n    this.dialogRef.close(); \r\n  }\r\n\r\n  takeConfirmAction() {\r\n    if (!this.isScrolledToEnd) {\r\n      this.showErrorMsg = true;\r\n      return;\r\n    }\r\n    this.dialogRef.close('confirmed');\r\n  }\r\n\r\n  onScroll(event: any): void {\r\n    const element = event.target;\r\n    const atBottom = element.scrollHeight - element.scrollTop === element.clientHeight;\r\n    this.isScrolledToEnd = atBottom;\r\n    \r\n    if(this.isScrolledToEnd) {\r\n      this.showErrorMsg = false;\r\n    }\r\n  }\r\n}\r\n",
            "styleUrl": "./hedge-tandc-details.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<HedgeTandcDetailsComponent>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<HedgeTandcDetailsComponent>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<div class=\"risk-disclosure-container\">\r\n    <button class=\"close-btn\" aria-label=\"Close\" (click)=\"cancelConfirmation()\">\r\n      <img src=\"images/close-btn-cashflow.svg\" alt=\"Close\" />\r\n    </button>\r\n  \r\n    <h3 class=\"disclosure-title\">Disclosure of Risks in the Execution of Foreign Exchange, Financial Asset Transactions, and Protection Terms</h3>\r\n    <div class=\"disclosure-content-wrapper\" (scroll)=\"onScroll($event)\">\r\n      <div class=\"disclosure-body\" [innerHTML]=\"disclosureContent\"></div> \r\n    </div>\r\n    <div class=\"popup-footer\">\r\n      <p class=\"error-msg\"><span *ngIf=\"showErrorMsg\">Please review all details before confirming</span></p>\r\n      <div class=\"actions-wrapper\">\r\n        <button class=\"cancel-action\" (click)=\"cancelConfirmation()\">Cancel</button>\r\n        <button class=\"confirm-action\" [ngClass]=\"{'scrolled-to-end': isScrolledToEnd}\" (click)=\"takeConfirmAction()\">I confirm</button>\r\n      </div>\r\n    </div>\r\n  </div>\r\n  "
        },
        {
            "name": "HedgingProposalComponent",
            "id": "component-HedgingProposalComponent-9427c758b282ec071bec8c898b2fd38385161944083f8b0b6c00c61f34ed4fb832613f2ddb20870983572872a77746fd93e740b70773f5f435144ec9d15c525c",
            "file": "src/app/risk-dashboard/components/hedging-proposal/hedging-proposal.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-hedging-proposal",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./hedging-proposal.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "arrOfIds",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 77
                },
                {
                    "name": "dataSource",
                    "defaultValue": "new MatTableDataSource<PeriodicElement>([])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 53
                },
                {
                    "name": "datepickers",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "QueryList<MatDatepicker<any>>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 48,
                    "decorators": [
                        {
                            "name": "ViewChildren",
                            "stringifiedArguments": "MatDatepicker"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "displayedColumns",
                    "defaultValue": "['select', 'expiryDate', 'hedgeRate', 'setHedgeAmount', 'hedgeAmount', 'hedged']",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 52
                },
                {
                    "name": "drawer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDrawer",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 49,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'drawer'"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "errorMessage",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 72
                },
                {
                    "name": "hedgeAmountForEdit",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 56
                },
                {
                    "name": "hedgedCurrencySign",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 73
                },
                {
                    "name": "hedgeDetails",
                    "defaultValue": "hedgeData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 57
                },
                {
                    "name": "hedgedMonthsfromAPI",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 58
                },
                {
                    "name": "hedgeTypes",
                    "defaultValue": "Object.values(HedgingType).filter(value => typeof value === 'number') as HedgingType[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HedgingType[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 63
                },
                {
                    "name": "HedgingTypeDisplayNames",
                    "defaultValue": "{\r\n    [HedgingType.Forward]: 'Forward',\r\n    [HedgingType.Vanilla]: 'Vanilla',\r\n    [HedgingType.Range]: 'Range',\r\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 65
                },
                {
                    "name": "openEditSellingIndex",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 55
                },
                {
                    "name": "proposalMessageTimerSubscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 60,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "saveButtonDisable",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 71
                },
                {
                    "name": "selectedHedgeData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PeriodicElement",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 51
                },
                {
                    "name": "selectedHedgeType",
                    "defaultValue": "1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HedgingType",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 62
                },
                {
                    "name": "selection",
                    "defaultValue": "new SelectionModel<PeriodicElement>(true, this.dataSource.data)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 54
                },
                {
                    "name": "showHedgeProposalMessage",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 61
                },
                {
                    "name": "showLoader",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 59
                },
                {
                    "name": "showSaveButton",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 70
                },
                {
                    "name": "slider",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 50,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'slider'"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "updateAfterGetting",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 76
                },
                {
                    "name": "updatedId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 74
                },
                {
                    "name": "wallet_Amount",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 75
                }
            ],
            "methodsClass": [
                {
                    "name": "applyDate",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "element",
                            "type": "PeriodicElement",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 227,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "element",
                            "type": "PeriodicElement",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "calculateImagePosition",
                    "args": [
                        {
                            "name": "recommended",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "i",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 318,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "recommended",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "i",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "calculateTotalHedgeAmount",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 252,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "cancelEditSelling",
                    "args": [
                        {
                            "name": "element",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 173,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "element",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "changeSelectedHedgeType",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 127,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "checkboxLabel",
                    "args": [
                        {
                            "name": "row",
                            "type": "PeriodicElement",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 205,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "row",
                            "type": "PeriodicElement",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "checkForAvailableBalance",
                    "args": [
                        {
                            "name": "currency",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 92,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "currency",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "checkMaximumValue",
                    "args": [
                        {
                            "name": "element",
                            "type": "PeriodicElement",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 443,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "element",
                            "type": "PeriodicElement",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "clearInput",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 170,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "commaseparate",
                    "args": [
                        {
                            "name": "e",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "fraction",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 144,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "e",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "fraction",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "commaseprate",
                    "args": [
                        {
                            "name": "e",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "fraction",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 486,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "e",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "fraction",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "editSelling",
                    "args": [
                        {
                            "name": "element",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 158,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "element",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getHedgeMonthsCount",
                    "args": [],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 482,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getHedgesFromPolicyData",
                    "args": [
                        {
                            "name": "hedgeType",
                            "type": "HedgingType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 105,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "hedgeType",
                            "type": "HedgingType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "hedgeAllProposals",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 264,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "isAllSelected",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 138,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 247,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 505,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 82,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onMakeDeposit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 500,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSliderInput",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "element",
                            "type": "PeriodicElement",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 239,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "element",
                            "type": "PeriodicElement",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "openExpiryDateCalendar",
                    "args": [
                        {
                            "name": "element",
                            "type": "PeriodicElement",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 212,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "element",
                            "type": "PeriodicElement",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "openQuickHedgeDrawer",
                    "args": [
                        {
                            "name": "element",
                            "type": "PeriodicElement",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 308,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "element",
                            "type": "PeriodicElement",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "refreshHedging",
                    "args": [
                        {
                            "name": "element",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 344,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "element",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "refreshPageInError",
                    "args": [
                        {
                            "name": "element",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 339,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "element",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "resetToCollateral",
                    "args": [
                        {
                            "name": "element",
                            "type": "PeriodicElement",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "i",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 328,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "element",
                            "type": "PeriodicElement",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "i",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "saveEditSelling",
                    "args": [
                        {
                            "name": "element",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 178,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "element",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "shouldShowError",
                    "args": [
                        {
                            "name": "i",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 335,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "i",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "startRepeatingMessage",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 300,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "toggleAllRows",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 200,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "toggleRow",
                    "args": [
                        {
                            "name": "row",
                            "type": "PeriodicElement",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 258,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "row",
                            "type": "PeriodicElement",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "MatInputModule",
                    "type": "module"
                },
                {
                    "name": "MatDatepickerModule",
                    "type": "module"
                },
                {
                    "name": "NgbTooltipModule",
                    "type": "module"
                },
                {
                    "name": "MatMomentDateModule",
                    "type": "module"
                },
                {
                    "name": "MatSliderModule",
                    "type": "module"
                },
                {
                    "name": "MatSelectModule",
                    "type": "module"
                },
                {
                    "name": "MatCheckboxModule",
                    "type": "module"
                },
                {
                    "name": "MatIconModule",
                    "type": "module"
                },
                {
                    "name": "MatTableModule",
                    "type": "module"
                },
                {
                    "name": "FormsModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { SelectionModel } from '@angular/cdk/collections';\r\nimport { Component, ViewChildren, QueryList, ChangeDetectorRef, ViewChild, AfterViewInit, ElementRef } from '@angular/core';\r\nimport { MatDatepicker, MatDatepickerModule } from '@angular/material/datepicker';\r\nimport { MatMomentDateModule } from '@angular/material-moment-adapter';\r\nimport { MatTableDataSource, MatTableModule } from '@angular/material/table';\r\nimport { MatDrawer } from '@angular/material/sidenav';\r\nimport moment from 'moment';\r\nimport { Subscription, take, tap, timer } from 'rxjs';\r\nimport { HedgingType } from '../enums/hedgingData';\r\nimport { CommonModule } from '@angular/common';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { NgbTooltipModule } from '@ng-bootstrap/ng-bootstrap';\r\nimport { MatSliderModule } from '@angular/material/slider';\r\nimport { MatCheckboxModule } from '@angular/material/checkbox';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { HedgingDataService } from './hedging-data.service';\r\nimport { hedgeData } from './hedging-static-data';\r\n\r\nexport interface PeriodicElement {\r\n  disabledColumn: boolean;\r\n  hedgeRate: number;\r\n  protectAmount: number;\r\n  date?: Date;\r\n  expiryDate?: any;\r\n  month?: string;\r\n  year?: number;\r\n  dayOfExpiry?: string;\r\n  Month?: string;\r\n  openEditForSelling?: boolean;\r\n  collateral?: number;\r\n  saveActivate?: boolean;\r\n  maxHedgeAmount?: number;\r\n  strategyId?: number;\r\n  hedge?: any;\r\n  alreadyHedge?: any;\r\n  status?: any\r\n  requiredCollateral?: any;\r\n}\r\n@Component({\r\n  selector: 'app-hedging-proposal',\r\n  imports: [CommonModule, MatInputModule,MatDatepickerModule,NgbTooltipModule,MatMomentDateModule,MatSliderModule, MatSelectModule, MatCheckboxModule, MatIconModule, MatTableModule, FormsModule],\r\n  templateUrl: './hedging-proposal.component.html',\r\n  styleUrl: './hedging-proposal.component.scss'\r\n})\r\nexport class HedgingProposalComponent implements AfterViewInit {\r\n  @ViewChildren(MatDatepicker) datepickers!: QueryList<MatDatepicker<any>>;\r\n  @ViewChild('drawer') drawer!: MatDrawer;\r\n  @ViewChild('slider') slider!: ElementRef;\r\n  selectedHedgeData!: PeriodicElement;\r\n  displayedColumns: string[] = ['select', 'expiryDate', 'hedgeRate', 'setHedgeAmount', 'hedgeAmount', 'hedged'];\r\n  dataSource = new MatTableDataSource<PeriodicElement>([]);\r\n  selection = new SelectionModel<PeriodicElement>(true, this.dataSource.data);\r\n  openEditSellingIndex: number | null = null;\r\n  hedgeAmountForEdit: any;\r\n  hedgeDetails = hedgeData;\r\n  hedgedMonthsfromAPI: any;\r\n  showLoader: boolean = false;\r\n  private proposalMessageTimerSubscription!: Subscription;\r\n  showHedgeProposalMessage: boolean = false;\r\n  selectedHedgeType: HedgingType = 1;\r\n  hedgeTypes: HedgingType[] = Object.values(HedgingType).filter(value => typeof value === 'number') as HedgingType[];\r\n\r\n  HedgingTypeDisplayNames = {\r\n    [HedgingType.Forward]: 'Forward',\r\n    [HedgingType.Vanilla]: 'Vanilla',\r\n    [HedgingType.Range]: 'Range',\r\n  };\r\n  showSaveButton: boolean = false;\r\n  saveButtonDisable: boolean = false;\r\n  errorMessage = false;\r\n  hedgedCurrencySign: any;\r\n  updatedId: any;\r\n  wallet_Amount: any;\r\n  updateAfterGetting: boolean = false;\r\n  arrOfIds: any[] = [];\r\n  constructor(private cd: ChangeDetectorRef, private hedgeService: HedgingDataService) {\r\n\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.proposalMessageTimerSubscription = timer(0, 60000).pipe(\r\n      take(1),\r\n      tap(() => {\r\n        this.showHedgeProposalMessage = true;\r\n      })\r\n    ).subscribe();\r\n    this.getHedgesFromPolicyData();\r\n  }\r\n\r\n  checkForAvailableBalance(currency: string) {\r\n    this.wallet_Amount = 10000.51;\r\n    // this.riskManagerService?.getBalanceByCurrency(currency).subscribe({\r\n    //   next: (result) => {\r\n    //     // console.log(result);\r\n    //     this.riskManagerService?.walletAmountInfoSubject.next(this.wallet_Amount);\r\n    //   },\r\n    //   error: (err) => {\r\n    //   }\r\n    // })\r\n  }\r\n\r\n\r\n  getHedgesFromPolicyData(hedgeType?: HedgingType) {\r\n    this.showLoader = true;\r\n    const collateralAndPriceCurrency = this.hedgeDetails?.collateralAndPriceCur?.code;\r\n    this.checkForAvailableBalance(collateralAndPriceCurrency);\r\n    this.selectedHedgeType = this.hedgeDetails.hedgingType;\r\n    this.hedgedCurrencySign = this.hedgeDetails?.hedgeCurrency?.sign,\r\n      this.hedgedMonthsfromAPI = this.hedgeDetails.monthlyHedge.map((item: any) => ({\r\n        expiryDate: item.hedge?.expiryDate || item.date || '----',\r\n        hedgeRate: item.hedge?.hedgeRate || '--',\r\n        protectAmount: item.hedge?.protectAmount || 0,\r\n        recommendedHedgeAmount: item?.recomendedHedgeAmount || 0,\r\n        maxHedge_amount: item.maxHedgeAmount || 0,\r\n        collateral: item.hedge?.collateral || 0,\r\n        totalExposureAmount: item.totalExposure || 0,\r\n        openEditForSelling: false,\r\n        ...item\r\n      }));\r\n    this.dataSource.data = this.hedgedMonthsfromAPI;\r\n    this.showLoader = false;\r\n    this.selection.select(...this.dataSource.data);\r\n  }\r\n\r\n  changeSelectedHedgeType(event: any) {\r\n    const selectedType = event.value;\r\n    this.selectedHedgeType = selectedType;\r\n    if (this.hedgeDetails) {\r\n      this.hedgeDetails.totalHedgeAmount = 0;\r\n    }\r\n    this.selection?.clear();\r\n    this.getHedgesFromPolicyData(selectedType);\r\n    this.calculateTotalHedgeAmount();\r\n  }\r\n\r\n  isAllSelected(): boolean {\r\n    const numSelected = this.selection.selected.length;\r\n    const numRows = this.dataSource.data.length;\r\n    return numSelected === numRows;\r\n  }\r\n\r\n  commaseparate(e: any, fraction: any) {\r\n    if (e) {\r\n      const actualNumber = +e?.toString()?.replace(/,/g, '')\r\n      const formatted = actualNumber?.toLocaleString('en-US', { maximumFractionDigits: fraction })\r\n      return formatted\r\n    } else {\r\n      if (e == 0) {\r\n        return '0';\r\n      } else {\r\n        return e;\r\n      }\r\n    }\r\n  }\r\n\r\n  editSelling(element: any, index: number) {\r\n    if (this.openEditSellingIndex === index) {\r\n      this.openEditSellingIndex = null;\r\n      element.openEditForSelling = false;\r\n    } else {\r\n      this.dataSource.data.forEach(el => (el.openEditForSelling = false));\r\n      this.openEditSellingIndex = index;\r\n      element.openEditForSelling = true;\r\n      this.hedgeAmountForEdit = this.commaseprate(element.protectAmount, 2);\r\n    }\r\n  }\r\n\r\n  clearInput(index: number) {\r\n    this.hedgeAmountForEdit = 0;\r\n  }\r\n  cancelEditSelling(element: any, index: number) {\r\n    element.openEditForSelling = false;\r\n    this.openEditSellingIndex = null;\r\n  }\r\n\r\n  saveEditSelling(element: any, index: number): void {\r\n    const formattedValue = this.hedgeAmountForEdit?.replace(/,/g, ''); // Remove commas\r\n    const numericValue = parseFloat(formattedValue);\r\n    if (!isNaN(numericValue) && numericValue >= 0) {\r\n      // Check if the value has changed\r\n      if (element.protectAmount !== numericValue) {\r\n        element.saveActivate = true;\r\n        element.protectAmount = numericValue; // Update protectAmount\r\n      }\r\n\r\n      // Reset editing mode\r\n      element.openEditForSelling = false;\r\n      this.openEditSellingIndex = null;\r\n\r\n      // Recalculate the total hedge amount\r\n      this.calculateTotalHedgeAmount();\r\n    } else {\r\n      // Handle invalid input\r\n      this.errorMessage = true; // Show error message if needed\r\n    }\r\n  }\r\n\r\n  toggleAllRows(): void {\r\n    this.isAllSelected() ? this.selection.clear() : this.selection.select(...this.dataSource.data);\r\n    this.calculateTotalHedgeAmount();\r\n  }\r\n\r\n  checkboxLabel(row?: PeriodicElement): string {\r\n    if (!row) {\r\n      return `${this.isAllSelected() ? 'Deselect' : 'Select'} all`;\r\n    }\r\n    return `${this.selection.isSelected(row) ? 'Deselect' : 'Select'} row ${row.hedgeRate}`;\r\n  }\r\n\r\n  openExpiryDateCalendar(element: PeriodicElement, index: number): void {\r\n    if (!element?.expiryDate) {\r\n      return;\r\n    }\r\n    const [day, month, year] = element.expiryDate.split('/').map(Number);\r\n    element.date = new Date(year, month - 1, day);\r\n\r\n    const datepicker = this.datepickers.toArray()[index];\r\n    this.cd.detectChanges();\r\n\r\n    if (datepicker) {\r\n      datepicker.open();\r\n    }\r\n  }\r\n\r\n  applyDate(index: number, element: PeriodicElement): void {\r\n    if (!element.date || !moment(element.date).isValid()) {\r\n      console.error('Invalid date:', element.date);\r\n      return;\r\n    }\r\n\r\n    const selectedDate = moment(element.date);\r\n    element.expiryDate = selectedDate.format('DD/MM/YYYY');\r\n    element.saveActivate = true;\r\n  }\r\n\r\n\r\n  onSliderInput(event: Event, element: PeriodicElement) {\r\n    element.saveActivate = true;\r\n    const sliderValue = (event.target as HTMLInputElement).value;\r\n    element.protectAmount = Number(sliderValue);\r\n    this.dataSource.data = [...this.dataSource.data];\r\n    this.calculateTotalHedgeAmount();\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    // this.selection.select(...this.dataSource.data);\r\n    // this.calculateTotalHedgeAmount();\r\n  }\r\n\r\n  calculateTotalHedgeAmount() {\r\n    if (this.hedgeDetails) {\r\n      this.hedgeDetails.totalHedgeAmount = this.selection.selected.reduce((sum, current) => sum + Number(current.protectAmount), 0);\r\n    }\r\n  }\r\n\r\n  toggleRow(row: PeriodicElement): void {\r\n    this.selection.toggle(row);\r\n    this.calculateTotalHedgeAmount();\r\n  }\r\n\r\n\r\n  hedgeAllProposals() {\r\n    this.hedgeService.closeQuickHedgeDrawer();\r\n    this.hedgeService.openHedgeAllDrawer();\r\n    this.showHedgeProposalMessage = false;  // Hide the message immediately\r\n\r\n    // Clean up any existing subscriptions\r\n    if (this.proposalMessageTimerSubscription) {\r\n      this.proposalMessageTimerSubscription.unsubscribe();\r\n    }\r\n\r\n    // Filter out rows where row.hedge is null and ensure row is selected\r\n    const selectedRows = this.selection.selected.filter(row =>\r\n      this.selection.isSelected(row) && row.hedge !== null\r\n    );\r\n    if (selectedRows.length > 0) {\r\n      // this.riskManagerService.hedgeAllActionDispatched.next(true);\r\n      // this.riskManagerService.setSelectedHedgeData(selectedRows);\r\n      // this.riskManagerService.openQuickHedgeSidebar(true);\r\n    } else {\r\n      // The below code changes are for DV-2884\r\n      const protectPendingRows = this.selection.selected.filter(row => row.maxHedgeAmount! > 0)\r\n      if (protectPendingRows.length > 0) {\r\n        // this.riskManagerService.confirmHasMaxHedgeAmountRows(true);\r\n      }\r\n      // this.riskManagerService.hedgeAllActionDispatched.next(true);\r\n      // this.riskManagerService.setSelectedHedgeData(protectPendingRows);\r\n      // this.riskManagerService.openQuickHedgeSidebar(true);\r\n    }\r\n\r\n    this.cd.detectChanges();\r\n    // Start the cycle of hiding and showing the message\r\n    this.startRepeatingMessage();\r\n  }\r\n\r\n\r\n\r\n  startRepeatingMessage() {\r\n    // Show message after 1 minute and repeat every 1 minute after that\r\n    setInterval(() => {\r\n      this.showHedgeProposalMessage = !this.showHedgeProposalMessage; // Toggle visibility\r\n      this.cd.detectChanges();  // Trigger change detection to update the UI\r\n    }, 60000);  // 60000 ms = 1 minute\r\n  }\r\n\r\n  openQuickHedgeDrawer(element: PeriodicElement): void {\r\n    this.hedgeService?.openQuickHedgeDrawer();\r\n    this.refreshHedging(element);\r\n    this.selectedHedgeData = element;\r\n    // this.riskManagerService.triggerQuickHedgeButtonClick();\r\n    // this.riskManagerService.setSelectedHedgeData([element]);\r\n    // this.riskManagerService.openQuickHedgeSidebar(true);\r\n  }\r\n\r\n\r\n  calculateImagePosition(recommended: number, i: number): number {\r\n    const min = 0;\r\n    const max = this.hedgedMonthsfromAPI?.[i]?.maxHedge_amount;\r\n    const sliderWidth = 200;\r\n    const originalPercentage = ((recommended - min) / (max - min)) * 100;\r\n    const clampedPercentage = Math.max(0, Math.min(originalPercentage, 100));\r\n    const pixelPosition = (clampedPercentage / 100) * sliderWidth;\r\n    return pixelPosition;\r\n  }\r\n\r\n  resetToCollateral(element: PeriodicElement, i: number): void {\r\n    element.protectAmount = this.hedgedMonthsfromAPI?.[i]?.recomendedHedgeAmount;\r\n    this.dataSource.data = [...this.dataSource.data];\r\n    this.calculateTotalHedgeAmount();\r\n  }\r\n\r\n\r\n  shouldShowError(i: number): boolean {\r\n    return this.hedgeDetails?.monthlyHedge?.[i]?.hedgeError == true;\r\n  }\r\n\r\n  refreshPageInError(element: any) {\r\n    this.showLoader = true;\r\n    this.refreshHedging(element);\r\n  }\r\n\r\n  refreshHedging(element: any) {\r\n    this.showLoader = true;\r\n    let createPayloadHedge = [];\r\n    const uniqueIds = new Set<number>();\r\n    const strategyId = element?.hedge?.strategyId;\r\n    // Construct common hedge details for the current element\r\n    const hedgeDetails = {\r\n      amount: element?.protectAmount,\r\n      productType: strategyId ? element?.hedge?.productType : this.selectedHedgeType,\r\n      expiryDate: element?.expiryDate || element?.hedge?.expiryDate,\r\n      currencyPair: this.hedgeDetails.currencyPair?.replace(/\\//g, ''),\r\n      direction: this.hedgeDetails.direction,\r\n      id: strategyId || undefined\r\n    };\r\n\r\n    // Add the primary hedge details to the payload\r\n    createPayloadHedge.push({ hedgeByCategory: hedgeDetails });\r\n\r\n    this.dataSource.data.forEach(row => {\r\n      const rowId = row?.hedge?.strategyId;\r\n      if (\r\n        row?.hedge !== null && // Ensure hedge is not null\r\n        rowId &&\r\n        !uniqueIds.has(rowId) &&\r\n        rowId !== strategyId &&\r\n        this.selection.isSelected(row)\r\n      ) {\r\n        uniqueIds.add(rowId);\r\n        createPayloadHedge.push({\r\n          id: rowId,\r\n        });\r\n      }\r\n    });\r\n\r\n    // Send the payload to the API\r\n    // this.riskManagerService.UpdateHedgesRequestData(createPayloadHedge).subscribe({\r\n    //   next: (result) => {\r\n    //     this.showLoader = false;\r\n    //     this.hedgeDetails = result.body;\r\n    //     this.updatedId = result.body?.monthlyHedge[0]?.hedge?.strategyId;\r\n    //     // Next three line of changes are from DV-2884\r\n    //     this.arrOfIds.push(this.updatedId);\r\n    //     this.riskManagerService.arrOfIdsSubject.next(this.arrOfIds);\r\n    //     this.dataSource.data = this.dataSource.data.map(row => {\r\n    //       if (row?.hedge && row.hedge.strategyId === strategyId) {\r\n    //         row.hedge.strategyId = this.updatedId;\r\n    //       }\r\n    //       return row;\r\n    //     });\r\n\r\n\r\n    //     this.riskManagerService.setUpdatedId(this.updatedId);\r\n        this.updateAfterGetting = true;\r\n\r\n    //     const extractedData = {\r\n    //       price: this.hedgeDetails.price,\r\n    //       requiredCollateral: this.hedgeDetails.requiredCollateral,\r\n    //       totalHedgeAmount: this.hedgeDetails.totalHedgeAmount,\r\n    //       totalHedgePercent: this.hedgeDetails.totalHedgePercent,\r\n    //       avgHedgeRate: this.hedgeDetails.avgHedgeRate,\r\n    //       liabilityRate: this.hedgeDetails?.liabilityRate\r\n    //     };\r\n\r\n    //     this.riskManagerService.hedgeDataSubject.next(extractedData);\r\n\r\n    //     // Update data source with the response data\r\n    //     this.hedgeDetails?.monthlyHedge?.map((item: any) => {\r\n    //       ({\r\n    //         expiryDate: item?.hedge?.expiryDate,\r\n    //         hedgeRate: item.hedge?.hedgeRate || '--',\r\n    //         protectAmount: item.hedge?.protectAmount || 0,\r\n    //         recommendedHedgeAmount: item?.recomendedHedgeAmount || 0,\r\n    //         maxHedge_amount: item.maxHedgeAmount || 0,\r\n    //         collateral: item.hedge?.collateral || 0,\r\n    //         totalExposureAmount: item.totalExposure || 0,\r\n    //         openEditForSelling: false,\r\n    //         ...item\r\n    //       })\r\n    //     }) || [];\r\n    //     this.dataSource.data = this.dataSource.data.map(row => {\r\n    //       const updatedRow = this.hedgeDetails?.monthlyHedge?.find((updated: any) => {\r\n    //         updated.hedge?.strategyId === row.hedge?.strategyId\r\n    //       });\r\n    //       return updatedRow ? updatedRow : row;\r\n    //     });\r\n\r\n    //     // this.hedgeDetails = this.dataSource.data;\r\n    //     this.showLoader = false;\r\n    //     this.selection.select(...this.dataSource.data.filter(row => this.selection.isSelected(row)));\r\n    //   },\r\n    //   error: (err) => {\r\n    //     this.showLoader = false;\r\n    //   }\r\n    // });\r\n\r\n    element.saveActivate = false;\r\n  }\r\n\r\n\r\n  checkMaximumValue(element: PeriodicElement, event: Event) {\r\n    const input = event.target as HTMLInputElement;\r\n    let value = input.value.replace(/,/g, '');\r\n    this.errorMessage = false;\r\n    // Handle empty input case\r\n    if (value === '') {\r\n      this.hedgeAmountForEdit = '0';\r\n      this.saveButtonDisable = true;\r\n      return;\r\n    }\r\n    // Ensure no more than two decimal places\r\n    if (value.includes('.')) {\r\n      const [integerPart, decimalPart] = value.split('.');\r\n      if (decimalPart.length > 2) {\r\n        value = `${integerPart}.${decimalPart.slice(0, 2)}`;\r\n      }\r\n    }\r\n    // Convert and format the input\r\n    // Parse the numeric value\r\n    const actualNumber = parseFloat(value);\r\n    if (!isNaN(actualNumber)) {\r\n      // Store the numeric value for comparison\r\n      const numericValue = actualNumber;\r\n\r\n      // Validate against the maximum allowed value\r\n      const isMaxHedgeAmountValid =\r\n        element?.maxHedgeAmount !== undefined &&\r\n        element.maxHedgeAmount >= numericValue;\r\n\r\n      this.saveButtonDisable = !isMaxHedgeAmountValid;\r\n      this.errorMessage = !isMaxHedgeAmountValid;\r\n\r\n      // Format the input for display\r\n      this.hedgeAmountForEdit = numericValue.toLocaleString('en-US', {\r\n        maximumFractionDigits: 2,\r\n      });\r\n    }\r\n  }\r\n\r\n  getHedgeMonthsCount(): number {\r\n    return this.hedgeDetails?.monthlyHedge?.filter((item: { status: { type: number; }; }) => item.status?.type !== 2 && item.status?.type !== 4).length || 0;\r\n  }\r\n\r\n  commaseprate(e: any, fraction: any) {\r\n    if (e || e === 0) {\r\n      const actualNumber = +e?.toString()?.replace(/,/g, '');\r\n      const fixedNumber = Number(actualNumber.toFixed(fraction)); // Maintain precision without rounding\r\n      const formatted = fixedNumber.toLocaleString('en-US', {\r\n        minimumFractionDigits: fraction,\r\n        maximumFractionDigits: fraction\r\n      });\r\n      return formatted;\r\n    } else {\r\n      return e;\r\n    }\r\n  }\r\n\r\n  onMakeDeposit() {\r\n    // Trigger the header method from this component\r\n    // this.headerCommService.triggerHeaderMethod();\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    if (this.proposalMessageTimerSubscription) {\r\n      this.proposalMessageTimerSubscription.unsubscribe();  // Clean up when component is destroyed\r\n    }\r\n  }\r\n}\r\n",
            "styleUrl": "./hedging-proposal.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "hedgeService",
                        "type": "HedgingDataService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 77,
                "jsdoctags": [
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "hedgeService",
                        "type": "HedgingDataService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "AfterViewInit"
            ],
            "templateData": "<div class=\"hedge-proposal-container loader-wrapper\">\r\n  <div class=\"hedge-header\">\r\n    <h3 class=\"hedge-heading\">Hedging proposal</h3>\r\n  </div>\r\n  <div class=\"hedge-details\">\r\n    <div class=\"hedge-type-section\">\r\n      <label class=\"hedge-label\">Hedge type</label>\r\n      <mat-select class=\"hedge-select\" panelClass=\"risk-proposal-hedge-sel\" [(value)]=\"selectedHedgeType\" (selectionChange)=\"changeSelectedHedgeType($event)\">\r\n        <mat-option *ngFor=\"let type of hedgeTypes\" [value]=\"type\">{{ HedgingTypeDisplayNames[type] }}</mat-option>\r\n      </mat-select>\r\n    </div>\r\n\r\n    <div class=\"hedge-details-inner\">\r\n      <div class=\"hedge-total-section values-wrapper\">\r\n        <label class=\"hedge-label\">Total hedge amount</label>\r\n        <div class=\"currency-info\">\r\n          <div class=\"amount-wrapper\">\r\n            <span class=\"hedge-currency\">{{ hedgedCurrencySign }}</span>\r\n            <span class=\"hedge-total-amount\">{{ commaseparate(hedgeDetails.totalHedgeAmount,2) || 0 }}</span>\r\n            <span class=\"hedge-percentage\">{{ selection.hasValue() ? commaseparate(hedgeDetails.totalHedgePercent,2) : 0 }}%</span>\r\n          </div>\r\n          <span class=\"hedge-period\">{{ getHedgeMonthsCount() }} months</span>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"hedge-rate-section values-wrapper\">\r\n        <label class=\"hedge-label\">Avg hedge rate</label>\r\n        <div class=\"currency-info\">\r\n          <span class=\"hedge-rate\">{{ commaseparate(hedgeDetails.avgHedgeRate,4) || 0 }}</span>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"hedge-collateral-section values-wrapper\">\r\n        <label class=\"hedge-label\">Required collateral</label>\r\n        <div class=\"currency-info\">\r\n          <span class=\"hedge-currency\">{{ hedgeDetails.collateralAndPriceCur.sign }}</span>\r\n          <span class=\"hedge-collateral\">{{ commaseparate(hedgeDetails.requiredCollateral, 2) || 0 }}</span>\r\n          <p \r\n            class=\"hedge-deposit-link\" \r\n            *ngIf=\"(selectedHedgeType !== 2) && (hedgeDetails.requiredCollateral > wallet_Amount)\" \r\n            (click)=\"onMakeDeposit()\">Make deposit</p>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"hedge-price-section values-wrapper\">\r\n        <label class=\"hedge-label\">Price</label>\r\n        <div class=\"currency-info\">\r\n          <span class=\"hedge-currency\">{{ hedgeDetails.collateralAndPriceCur.sign }}</span>\r\n          <span class=\"hedge-price\">{{ commaseparate(hedgeDetails.price, 2) || 0 }}</span>\r\n          <p \r\n            class=\"hedge-deposit-link\" \r\n            *ngIf=\"(selectedHedgeType !== 1) && (hedgeDetails.price > wallet_Amount)\" \r\n            (click)=\"onMakeDeposit()\">Make deposit</p>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"hedge-actions\">\r\n        <button class=\"hedge-all-button\" [disabled]=\"hedgeDetails.totalHedgeAmount == 0\" mat-raised-button color=\"primary\" \r\n          (click)=\"hedgeAllProposals()\">Hedge All</button>\r\n        <p class=\"hedge-proposal-refresh\" *ngIf=\"showHedgeProposalMessage && selection.hasValue()\">Click “Hedge All” for an updated proposal</p>\r\n        <span class=\"error-month\" *ngIf=\"!selection.hasValue() && !showLoader\">Please select months to hedge</span>\r\n      </div>\r\n    </div>\r\n  </div>\r\n\r\n  <div class=\"hedge-table-section\">\r\n    <table mat-table [dataSource]=\"hedgedMonthsfromAPI\" class=\"hedge-table mat-elevation-z8\">\r\n      <!-- Checkbox Column -->\r\n      <ng-container matColumnDef=\"select\">\r\n        <th mat-header-cell *matHeaderCellDef>\r\n          <mat-checkbox class=\"filter-checkbox select-all\"\r\n            (change)=\"$event ? toggleAllRows() : null\"\r\n            [checked]=\"selection.hasValue() && isAllSelected()\"\r\n            [indeterminate]=\"selection.hasValue() && !isAllSelected()\"\r\n            [aria-label]=\"checkboxLabel()\"\r\n          ></mat-checkbox>\r\n        </th>\r\n\r\n        <td mat-cell *matCellDef=\"let row; let i = index\" >\r\n          <mat-checkbox class=\"filter-checkbox\"\r\n           (click)=\"$event.stopPropagation()\"\r\n            (change)=\"toggleRow(row)\"\r\n            [checked]=\"selection.isSelected(row)\"\r\n            [aria-label]=\"checkboxLabel(row)\"\r\n            [ngClass]=\"{'disabled-cell': hedgedMonthsfromAPI[i]?.status?.type == 3 || hedgedMonthsfromAPI[i]?.status?.type == 5}\"\r\n          ></mat-checkbox>\r\n        </td>\r\n      </ng-container>\r\n\r\n      <ng-container matColumnDef=\"expiryDate\" class=\"exposer-month\">\r\n        <th mat-header-cell *matHeaderCellDef>Expiry Date</th>\r\n        <td mat-cell *matCellDef=\"let element; let i = index\" [ngClass]=\"{'disabled-cell': hedgedMonthsfromAPI[i]?.status?.type == 3}\" style=\"position: relative;\">\r\n          <span class=\"date-expand\" (click)=\"openExpiryDateCalendar(element, i)\">\r\n            <span [ngClass]=\"{'err-status-two': hedgedMonthsfromAPI[i]?.status?.type == 2}\">{{element?.expiryDate}}</span>\r\n            <mat-icon>expand_more</mat-icon>\r\n            <mat-form-field class=\"monthly-date\">\r\n              <input matInput [matDatepicker]=\"datepicker\" [(ngModel)]=\"element.date\" />\r\n              <mat-datepicker-toggle matIconSuffix [for]=\"datepicker\"></mat-datepicker-toggle>\r\n              <mat-datepicker #datepicker panelClass=\"cashflow-date-calendar-cd\" (dateChange)=\"applyDate(i, element)\">\r\n                <mat-datepicker-actions>\r\n                  <button mat-button matDatepickerCancel class=\"cancel-cdc\">Cancel</button>\r\n                  <button mat-raised-button matDatepickerApply class=\"set-cdc\" (click)=\"applyDate(i, element)\">Set</button>\r\n                  <button mat-button matDatepickerCancel class=\"close-cdc\">\r\n                    <img src=\"images/close-btn-cashflow.svg\" />\r\n                  </button>\r\n                </mat-datepicker-actions>\r\n              </mat-datepicker>\r\n            </mat-form-field>\r\n          </span>\r\n        </td>\r\n      </ng-container>\r\n\r\n      <!-- Hedge rate Column -->\r\n      <ng-container matColumnDef=\"hedgeRate\">\r\n        <th mat-header-cell *matHeaderCellDef>Hedge rate</th>\r\n        <td mat-cell *matCellDef=\"let element; let i = index\" [ngClass]=\"{'disabled-cell': hedgedMonthsfromAPI[i]?.status?.type == 3}\"><span [ngClass]=\"{'err-status-two': hedgedMonthsfromAPI[i]?.status?.type == 2}\">{{ element.hedgeRate }}</span></td>\r\n      </ng-container>\r\n\r\n      <!-- Set hedge amount Column -->\r\n      <ng-container matColumnDef=\"setHedgeAmount\">\r\n        <th mat-header-cell *matHeaderCellDef>Set Hedge Amount</th>\r\n        <td mat-cell *matCellDef=\"let element; let i = index\">\r\n          <div class=\"amount-hedge-slider\">\r\n            <div class=\"sliders-inner\" [ngClass]=\"{ 'reset-applied': element.protectAmount == element.recommendedHedgeAmount }\">\r\n              <mat-slider\r\n                #slider\r\n                class=\"amount-hedge-slider-inner\"\r\n                (input)=\"onSliderInput($event, element)\"\r\n                min=\"0\"\r\n                max=\"{{element?.maxHedge_amount}}\"\r\n                [ngClass]=\"{'slider-input-disabled': element?.openEditForSelling || hedgedMonthsfromAPI[i]?.status?.type == 3}\"\r\n                [disabled]=\"element?.openEditForSelling\"\r\n              >\r\n              <input matSliderThumb [value]=\"element.protectAmount\" />\r\n              </mat-slider>\r\n              <img class=\"z-1 tool-tip-cs\" src=\"images/circle-help.svg\" [ngbTooltip]=\"setHedge\" container=\"body\" placement=\"top\" [tooltipClass]=\"'hedging-amount-ttp'\" />\r\n              <a [ngClass]=\"{'invisible': element.protectAmount == element.recommendedHedgeAmount}\" class=\"reset-link\" href=\"javascript:void(0)\" (click)=\"resetToCollateral(element, i)\">Reset</a>\r\n            </div>\r\n            <img\r\n              [ngbTooltip]=\"shieldSet\"\r\n              [tooltipClass]=\"'recommended-amount-ttp'\"\r\n              [ngClass]=\"{'invisible': element.protectAmount == element.recommendedHedgeAmount}\"\r\n              src=\"images/slider-custom.svg\"\r\n              alt=\"Slider Marker\"\r\n              class=\"recommended-slider-marker\"\r\n              [style.left.px]=\"calculateImagePosition(element.recommendedHedgeAmount, i)\"\r\n              [style.left.px]=\"calculateImagePosition(element.recommendedHedgeAmount, i)\"\r\n            />\r\n            <ng-template #setHedge>\r\n              <div class=\"amount-hedgetp-wrapper\">\r\n                <div class=\"values\">\r\n                  <span class=\"parent\">Total exposure is</span>\r\n                  <span class=\"subtext\">{{hedgedCurrencySign}}{{ commaseprate(element?.totalExposureAmount,2)}}</span>\r\n                </div>\r\n                <div class=\"values\">\r\n                  <span class=\"parent\">Already hedged</span>\r\n                  <span class=\"subtext\">{{hedgedCurrencySign}}{{ commaseprate(hedgeDetails.monthlyHedge[i].alreadyHedge,2)}}</span>\r\n                </div>\r\n                <div class=\"values max-hedge\">\r\n                  <span class=\"parent\">Maximum hedge amount</span>\r\n                  <span class=\"subtext\">{{hedgedCurrencySign}}{{  commaseprate(element?.maxHedge_amount,2) }}</span>\r\n                </div>\r\n              </div>\r\n            </ng-template>\r\n            <ng-template #shieldSet>\r\n              <div class=\"recommended-shield-ttp\">Additional recommended hedge <span class=\"amount\">{{hedgedCurrencySign}}{{commaseparate(element?.collateral,0)}}</span> </div>\r\n           </ng-template>\r\n          </div>\r\n        </td>\r\n      </ng-container>\r\n\r\n      <ng-container matColumnDef=\"hedgeAmount\" class=\"exposer-amount\">\r\n        <th mat-header-cell *matHeaderCellDef> Hedge amount </th>\r\n        <td mat-cell *matCellDef=\"let element; let i = index\" [ngClass]=\"{'disabled-cell': hedgedMonthsfromAPI[i]?.status?.type == 3}\">\r\n          <div class=\"buying-price\">\r\n            <label class=\"amount-text\" [ngClass]=\"{'err-status-two': hedgedMonthsfromAPI[i]?.status?.type == 2}\"><span [ngClass]=\"{'err-status-two weight': hedgedMonthsfromAPI[i]?.status?.type == 2}\">{{hedgedCurrencySign}}{{ commaseparate(element?.protectAmount,2) }}</span></label>\r\n            <button class=\"edit-exposer\" (click)=\"editSelling(element, i)\">\r\n              <img src=\"images/edit-exposure-hedge.svg\">\r\n            </button>\r\n          </div>\r\n          <div class=\"edit-exposer-wrap\" [ngClass]=\"{'with-error': errorMessage}\" *ngIf=\"element?.openEditForSelling && openEditSellingIndex === i\">\r\n            <div class=\"edit-inner\">\r\n              <div class=\"input-wrap\">\r\n                <span>{{hedgedCurrencySign}}</span>\r\n                  <input\r\n                    type=\"text\"\r\n                    [(ngModel)]=\"hedgeAmountForEdit\"\r\n                    class=\"edit-price\"\r\n                    (input)=\"checkMaximumValue(element,$event)\"\r\n                    appOnlyNumbers\r\n                    [maxLength]=\"14\">\r\n                <button class=\"clear-input\" (click)=\"clearInput(i)\">\r\n                  <img src=\"images/clear_input.svg\">\r\n                </button>\r\n              </div>\r\n              <div class=\"edit-e-option\">\r\n                <button class=\"cancel-btn\" (click)=\"cancelEditSelling(element, i)\">Cancel</button>\r\n                <button class=\"save-btn\" (click)=\"saveEditSelling(element, i)\" [class.disabled]=\"saveButtonDisable\" [disabled]=\"saveButtonDisable\">Save</button>\r\n              </div>\r\n            </div>\r\n            <span class=\"error-message\" *ngIf=\"errorMessage\">Please enter equal to max hedge amount</span>\r\n          </div>\r\n        </td>\r\n      </ng-container>\r\n\r\n      <!-- Hedged Column -->\r\n      <ng-container matColumnDef=\"hedged\">\r\n        <th mat-header-cell *matHeaderCellDef></th>\r\n        <td mat-cell *matCellDef=\"let element; let i = index\">\r\n          <!-- <pre>{{hedgedMonthsfromAPI[i] | json}}</pre> -->\r\n          <!-- try removing question mark that is before [i] -->\r\n          <button [ngClass]=\"{'save-activated': element?.saveActivate}\" [ngbTooltip]=\"saveTooltip\" placement=\"top\" tooltipClass=\"saveToolWrap\" class=\"save-row-btn\">Save</button>\r\n          <ng-template #saveTooltip>\r\n            <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"14\" height=\"14\" viewBox=\"0 0 14 14\" fill=\"none\">\r\n              <circle cx=\"6.68066\" cy=\"7.2627\" r=\"5.33301\" stroke=\"#F0F0F0\" stroke-width=\"2\"/>\r\n              <path d=\"M12.0392 7.2627C12.5774 7.2627 13.0213 6.82387 12.9388 6.29203C12.833 5.60948 12.6158 4.94663 12.294 4.33053C11.8212 3.42546 11.1366 2.64812 10.2985 2.06479C9.46042 1.48146 8.4937 1.10944 7.48077 0.980433C6.46784 0.851427 5.43873 0.969265 4.48118 1.3239C3.52363 1.67854 2.66603 2.25946 1.98149 3.01714C1.29695 3.77482 0.805769 4.68679 0.549824 5.67531C0.293879 6.66383 0.280758 7.69958 0.511579 8.69426C0.668702 9.37135 0.935688 10.0158 1.29996 10.6026C1.58379 11.0599 2.20649 11.1037 2.61485 10.7531C3.02321 10.4025 3.05846 9.79033 2.80654 9.31473C2.62971 8.98088 2.49613 8.62437 2.41012 8.2537C2.25033 7.56513 2.25941 6.84813 2.43659 6.16383C2.61377 5.47953 2.95379 4.84822 3.42766 4.32371C3.90153 3.79921 4.4952 3.39707 5.15807 3.15157C5.82093 2.90607 6.53333 2.8245 7.23454 2.9138C7.93574 3.0031 8.60495 3.26064 9.18512 3.66445C9.76529 4.06826 10.2392 4.60637 10.5665 5.23291C10.7427 5.57018 10.8735 5.9277 10.9568 6.2962C11.0755 6.82115 11.501 7.2627 12.0392 7.2627Z\" fill=\"#2947F2\"/>\r\n            </svg> Loading your new proposal\r\n          </ng-template>\r\n          <ng-container *ngIf=\"hedgedMonthsfromAPI[i]?.status?.type == 1 || hedgedMonthsfromAPI[i]?.status?.type == 5\">\r\n            <button mat-raised-button color=\"primary\" class=\"hedge-btn\" [disabled]=\"element.protectAmount == 0\" (click)=\"openQuickHedgeDrawer(element)\">Hedge</button>\r\n          </ng-container>\r\n          <ng-container *ngIf=\"hedgedMonthsfromAPI[i]?.status?.type == 3\">\r\n            <div class=\"d-inline cursor-pointer\"> <!-- (click)=\"openQuickHedgeDrawer(element)\" -->\r\n              <picture>\r\n                <img width=\"52px\" height=\"52px\" src=\"images/mass-payment/success.gif\" alt=\"success\">\r\n              </picture>\r\n              <label class=\"row-hedged\">Hedged</label>\r\n            </div>\r\n          </ng-container>\r\n          <div class=\"transaction-unavailable-wrapper\" *ngIf=\"shouldShowError(i)\">\r\n            <img src=\"images/error-outline.svg\" alt=\"error\">\r\n            <p class=\"transaction-unavailable-err\">\r\n              This transaction is currently unavailable. You can continue with other transactions or\r\n              <a (click)=\"refreshPageInError(element)\">refresh</a> the page\r\n              <span>(unsaved changes will be lost)</span>\r\n            </p>\r\n          </div>\r\n        </td>\r\n      </ng-container>\r\n\r\n      <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\r\n      <tr mat-row *matRowDef=\"let row; let i =index; columns: displayedColumns\" \r\n        [ngClass]=\"{ 'disabled-row': hedgedMonthsfromAPI[i]?.status?.type == 3, \r\n        'padding-for-error': (this.hedgeDetails.monthlyHedge[i].hedgeError == true) }\" \r\n        [hidden]=\"hedgedMonthsfromAPI[i]?.status?.type == 4 || (hedgedMonthsfromAPI[i]?.status?.type == 2)\">\r\n      </tr>\r\n\r\n       <!-- [hidden]=\"hedgedMonthsfromAPI[i]?.status?.type == 2\" -->\r\n    </table>\r\n    <!-- <div class=\"transaction-unavailable-wrapper\">\r\n      <img src=\"assets/images/error-outline.svg\" alt=\"error\">\r\n      <p class=\"transaction-unavailable-err\">This transaction is currently unavailable. You can continue with other transactions or <a href=\"\">refresh</a> the page <span>(unsaved changes will be lost)</span> </p>\r\n    </div> -->\r\n    <div class=\"hedge-actions\">\r\n      <button class=\"hedge-all-button\" mat-raised-button color=\"primary\" [disabled]=\"hedgeDetails.totalHedgeAmount == 0\" (click)=\"hedgeAllProposals()\">Hedge All</button>\r\n      <p class=\"hedge-proposal-refresh\" *ngIf=\"showHedgeProposalMessage\">Click “Hedge All” for an updated proposal</p>\r\n    </div>\r\n\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "KycAddressComponent",
            "id": "component-KycAddressComponent-96b22f2484d7c5494b5dbd0c06ab61d109cfd358f336112e2d9405ed6b1854641c56bf17ac15a6aa03bdd617bcc20519e5beab7e548d5591f84fd9d6e5efd3b8",
            "file": "src/app/sign-up/kyc-address/kyc-address.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "kyc-address",
            "styleUrls": [
                "./kyc-address.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./kyc-address.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "kycForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "FormGroup",
                    "decorators": []
                },
                {
                    "name": "parentFormGroup",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "FormGroup",
                    "decorators": []
                },
                {
                    "name": "stepsObj",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "IStepsObj",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "loginEvent",
                    "defaultValue": "new EventEmitter<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 32,
                    "type": "EventEmitter<void>"
                },
                {
                    "name": "nextStepEvent",
                    "defaultValue": "new EventEmitter<StepActionType>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 31,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "addressInHebrew",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "autoApproved",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "componentDestroyed",
                    "defaultValue": "new Subject<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "countryArr",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CountriesData[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "createUser$",
                    "defaultValue": "new Subject<boolean>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "showLoader",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "shuftiData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "step_6_passwords",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "step_8",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 36
                }
            ],
            "methodsClass": [
                {
                    "name": "callCreateNewUserAPI",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 111,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "handleNextStep",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 200,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "hendelEditHebrewFields",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 194,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 208,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                },
                {
                    "name": "TranslateModule",
                    "type": "module"
                },
                {
                    "name": "ErrorComponent",
                    "type": "component"
                },
                {
                    "name": "SelectCountryComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { HttpErrorResponse } from '@angular/common/http';\r\nimport { ChangeDetectorRef, Component, EventEmitter, Inject, Input, OnDestroy, OnInit, Output } from '@angular/core';\r\nimport { FormBuilder, FormControl, FormGroup, ReactiveFormsModule, Validators } from '@angular/forms';\r\nimport { EMPTY, Subject } from 'rxjs';\r\nimport { catchError, skipWhile, switchMap, takeUntil, tap, throttleTime } from 'rxjs/operators';\r\n\r\nimport { ActivatedRoute, Router } from \"@angular/router\";\r\nimport { CommonModule, DOCUMENT } from \"@angular/common\";\r\nimport { CountriesData, EErrorMessages, IStepsObj } from '../kyc';\r\nimport { StepActionType } from '../types/global.type';\r\nimport { KycService } from '../services/kyc.service';\r\nimport { TranslateModule } from '@ngx-translate/core';\r\nimport { ErrorComponent } from '../fields/error/error.component';\r\nimport { SelectCountryComponent } from '../fields/select-country/select-country.component';\r\n\r\n@Component({\r\n    selector: 'kyc-address',\r\n    imports: [CommonModule, ReactiveFormsModule, TranslateModule, ErrorComponent, SelectCountryComponent ],\r\n    templateUrl: './kyc-address.component.html',\r\n    styleUrls: ['./kyc-address.component.scss']\r\n})\r\n\r\nexport class KycAddressComponent implements OnInit, OnDestroy {\r\n    componentDestroyed = new Subject<any>();\r\n    @Input('parentFormGroup')\r\n    parentFormGroup!: FormGroup;\r\n    @Input('kycForm')\r\n    kycForm!: FormGroup;\r\n    @Input('stepsObj') stepsObj!: IStepsObj;\r\n    shuftiData: any;\r\n    @Output('nextStepEvent') nextStepEvent = new EventEmitter<StepActionType>();\r\n    @Output() loginEvent: EventEmitter<void> = new EventEmitter<void>();\r\n    countryArr!: CountriesData[];\r\n    showLoader: any = false;\r\n    autoApproved: boolean = true;\r\n    step_8!: FormGroup;\r\n    addressInHebrew!: FormGroup;\r\n    step_6_passwords!: FormGroup;\r\n    // createUser$ = new Subject();\r\n    createUser$ = new Subject<boolean>();\r\n    loading = false;\r\n\r\n    constructor(\r\n        private route: ActivatedRoute,\r\n        private KycS: KycService,\r\n        private cd: ChangeDetectorRef,\r\n        private router: Router,\r\n        private formBuilder: FormBuilder,\r\n        @Inject(DOCUMENT) private document: Document\r\n    ) {\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.step_6_passwords = <FormGroup>this.kycForm.get('step_6')?.get('passwords');\r\n        this.step_8 = <FormGroup>this.kycForm.get('step_8');\r\n        // this.step_8.get('country').setValue('Israel');\r\n\r\n        this.KycS.allCountries$\r\n            .pipe(\r\n                skipWhile(countries => !Array.isArray(countries)),\r\n                takeUntil(this.componentDestroyed)\r\n            )\r\n            .subscribe(countries => {\r\n                this.countryArr = countries;\r\n            });\r\n\r\n        this.KycS.loading$.subscribe(loadingState => {\r\n            this.showLoader = loadingState;\r\n            this.cd.markForCheck();\r\n        })\r\n\r\n        this.addressInHebrew =\r\n            this.formBuilder.group({\r\n                city_he: new FormControl('', Validators.pattern(hebrewPattern)),\r\n                street_he: new FormControl('', Validators.pattern(hebrewPattern))\r\n            });\r\n\r\n        this.KycS.shuftiData.subscribe(shuftiData => {\r\n            this.shuftiData = shuftiData;\r\n            const address_data = this.shuftiData['addressData'];\r\n            this.addressInHebrew.get('street_he')?.setValue(address_data['Street']);\r\n            this.addressInHebrew.get('city_he')?.setValue(address_data['City']);\r\n\r\n            this.autoApproved = this.shuftiData['autoApproved'];\r\n\r\n            if (this.autoApproved) {\r\n                this.addressInHebrew.controls['street_he'].disable();\r\n                this.addressInHebrew.controls['city_he'].disable();\r\n            }\r\n            this.cd.markForCheck();\r\n        })\r\n\r\n        this.autoApproved = this.shuftiData['autoApproved'];\r\n\r\n        if (this.autoApproved) {\r\n            this.addressInHebrew.controls['street_he'].disable();\r\n            this.addressInHebrew.controls['city_he'].disable();\r\n        }\r\n        this.cd.markForCheck();\r\n        this.kycForm.valueChanges.subscribe(values => {\r\n            // console.log({ values })\r\n        })\r\n        this.callCreateNewUserAPI();\r\n        this.createUser$.subscribe(loadingState => {\r\n          if(loadingState) {\r\n            this.callCreateNewUserAPI();\r\n          }\r\n        });\r\n    };//#ngOnInit\r\n\r\n    callCreateNewUserAPI() {\r\n      this.createUser$\r\n            .pipe(\r\n                tap(() => {\r\n                    this.KycS.loading$.next(true);\r\n                    this.loading = true;\r\n                }),\r\n                throttleTime(500),\r\n                switchMap(() => {\r\n                    // console.log(this.kycForm.getRawValue());\r\n                    const oldData = this.kycForm.getRawValue();\r\n                    const isCompany = oldData.step_1.companyAcc.isActive\r\n                    const newData = {\r\n                        accountType: oldData.step_1.companyAcc.isActive ? 2 : 1,\r\n                        email: oldData.step_2.email,\r\n                        countryCode: isCompany ? oldData.step_1.companyAcc.countryCode : oldData.step_1.privateAcc.countryCode, // Assumes ISO 2 code is already being used\r\n                        phoneCode: oldData.step_4.phone_code?.toString().replaceAll('+', ''),\r\n                        phoneNumber: oldData.step_4.phone,\r\n                        passwords: oldData.step_6.passwords,\r\n                        role: 1, // Constant value, assuming user is always created as 'admin'\r\n                        firstName: oldData.step_7.first_name,\r\n                        lastName: oldData.step_7.last_name,\r\n                        idNumber: oldData.step_7.id_number,\r\n                        birthDate: oldData.step_7.birth_date,\r\n                        city: oldData.step_8.city,\r\n                        address: oldData.step_8.street_address,\r\n                        houseNumber: \"\", // Not available in the old data structure, might need to be provided\r\n                        zipCode: oldData.step_8.zipcode,\r\n                        applicantId: oldData.step_7.applicantId,\r\n                        autoApproved: this.autoApproved\r\n                    };\r\n                    const ref = localStorage.getItem('referal');\r\n                    if (ref != null) {\r\n                        const refAff = Number(ref);\r\n                        if (!isNaN(refAff)) {\r\n                            // return this.KycS.createUserWithReferal(newData ,refAff)\r\n\r\n                        }\r\n                    }\r\n                    return []\r\n                }),\r\n                catchError((e: HttpErrorResponse) => {\r\n                    this.KycS.loading$.next(false);\r\n                    this.loading = false;\r\n                    return EMPTY;\r\n                })\r\n            )\r\n            .subscribe(r => {\r\n\r\n                if (r) {\r\n                    localStorage.removeItem('step')\r\n                    localStorage.removeItem('kycForm')\r\n                    window.location.href = localStorage.getItem('subSite') ? localStorage.getItem('subSite') + 'login' : '/login'\r\n\r\n                    this.nextStepEvent.next('NEXT');\r\n\r\n                    // this.KycS.UpdateRegistrationPersonalDetails(this.kycForm.getRawValue(), this.autoApproved)\r\n                    //     .pipe(\r\n                    //         throttleTime(500),\r\n                    //         catchError((e: HttpErrorResponse) => {\r\n                    //             this.KycS.loading$.next(false);\r\n                    //             return EMPTY;\r\n                    //         })\r\n                    //     )\r\n                    //     .subscribe(r => {\r\n                    //         // this.nextStepEvent.next('NEXT');\r\n                    //         // redirect the user to okoora login url\r\n                    //         // window.location.href = environment.appLoginURL;\r\n                    //         this.document.querySelector('html').classList.remove('signup-kyc');\r\n                    //         this.router.navigate(['/login']);\r\n                    //         setTimeout(() => {\r\n                    //             window.location.reload();\r\n                    //         }, 10);\r\n                    //     });\r\n                    // this.nextStepEvent.next('NEXT');\r\n                } else {\r\n                    this.KycS.showError$.next({ hasError: true, msg: EErrorMessages.SomethingWentWrong })\r\n                }\r\n                this.KycS.loading$.next(false);\r\n                this.loading = false;\r\n            });\r\n    }\r\n\r\n    hendelEditHebrewFields() {\r\n        this.autoApproved = false;\r\n        this.addressInHebrew.controls['street_he'].enable();\r\n        this.addressInHebrew.controls['city_he'].enable();\r\n    }\r\n\r\n    handleNextStep() {\r\n        // this.KycS.loading$.next(true);\r\n        this.createUser$.next(true);\r\n        setTimeout(() => {\r\n            this.router.navigate(['/login']);            \r\n        }, 1000);\r\n    };\r\n\r\n    ngOnDestroy() {\r\n        this.componentDestroyed.next(null);\r\n        this.componentDestroyed.complete();\r\n    };\r\n}\r\n\r\nconst hebrewPattern = /^[\\'\\\"\\`\\.\\s\\u0590-\\u05fe]+$/i;\r\n\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "\r\n::ng-deep{\r\n    app-select-country {\r\n        mat-form-field {\r\n            width: 100%;\r\n            .mdc-text-field--filled:not(.mdc-text-field--disabled){\r\n                background-color: #fff;\r\n                border-radius: 15px;\r\n                border: 1px solid #E2E2E2;\r\n            }\r\n            .mdc-line-ripple,.mat-mdc-form-field-focus-overlay,.mat-mdc-form-field-subscript-wrapper{\r\n                display: none;\r\n            }\r\n            .mdc-text-field--filled .mat-mdc-floating-label{\r\n                display: none;\r\n            }\r\n            .mat-mdc-form-field-infix{\r\n                padding:14px 0;\r\n                min-height: auto;\r\n                app-error{\r\n                    display: none;\r\n                }\r\n                @media screen and (max-width: 1440px) {\r\n                    padding: 10px 0;\r\n                }\r\n            }\r\n            .mat-mdc-form-field-input-control.mat-mdc-form-field-input-control{\r\n                font-size: 16px;\r\n                font-weight: 300;\r\n                color: #111827;\r\n                &::placeholder{\r\n                    opacity: 0.5;\r\n                }\r\n                @media screen and (max-width: 1440px) {\r\n                    font-size: 14px;\r\n                }\r\n            }\r\n            .mat-mdc-option .mdc-list-item__primary-text{\r\n                @media screen and (max-width: 1440px) {\r\n                    font-size: 14px;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    .mdc-menu-surface .mat-mdc-option .mdc-list-item__primary-text{\r\n        @media screen and (max-width: 1440px) {\r\n            font-size: 14px;\r\n        }\r\n    }\r\n}\r\n.icon {\r\n    position   : absolute;\r\n    top        : 50%;\r\n    right      : 2rem;\r\n    transform  : translateY(-50%);\r\n    cursor     : pointer;\r\n    transition : color 0.3s ease-in-out;\r\n\r\n    &:hover {\r\n        color : rgb(112, 110, 110);\r\n    }\r\n}\r\n.step-8-address{\r\n    padding: 0 91px;\r\n    @media screen and (max-width: 1199px) {\r\n        padding: 0 40px;\r\n    }\r\n    @media screen and (max-width: 1024px) {\r\n        padding: 0 20px;\r\n    }\r\n    @media screen and (max-width: 768px) {\r\n        padding:0;\r\n    }\r\n}\r\n.continue-btn {\r\n    background: #01031C;\r\n    border-radius: 40px;\r\n    font-size: 16px;\r\n    // line-height: 22px;\r\n    font-weight: 600;\r\n    color: #fff;\r\n    padding: 12px 0px;\r\n    height: auto;\r\n    transition: 0.3s;\r\n    position: relative;\r\n    width: 100% !important;\r\n    margin:9px 0 0;\r\n    @media screen and (max-width: 1440px) {\r\n        // height: 25px;\r\n        width: 25px;\r\n        font-size: 14px;\r\n        padding: 10px 0;\r\n    }\r\n\r\n    &.disabled {\r\n        background: #f5f5fa !important;\r\n        color: #c6c8cc !important;\r\n        cursor: not-allowed;\r\n    }\r\n\r\n}\r\n.form-group {\r\n    position: relative;\r\n    margin: 0 0 17px;\r\n    label{\r\n        color:#111827;\r\n        font-weight: 300;\r\n        font-size: 16px;\r\n        margin: 0 0 7px;\r\n        @media screen and (max-width: 1440px) {\r\n            font-size: 14px;\r\n        }\r\n    }\r\n    .form-control{\r\n        border-color: #E2E2E2;\r\n        padding: 14px 16px;\r\n        color:#111827;\r\n        font-size: 16px;\r\n        font-weight: 300;\r\n        border-radius: 15px !important;\r\n        &:focus{\r\n            outline: none;\r\n            box-shadow: none;\r\n        }\r\n        @media screen and (max-width: 1440px) {\r\n            font-size: 14px;\r\n            padding: 10px;\r\n        }\r\n    }\r\n}\r\n.custom-input-icon {\r\n    position: absolute;\r\n    right: 0;\r\n    top: 10px;\r\n    padding: 10px;\r\n    // pointer-events: none;\r\n}\r\n.inside-input {\r\n    position: absolute;\r\n    right: 8px;\r\n}",
                    "styleUrl": "./kyc-address.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "KycS",
                        "type": "KycService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "document",
                        "type": "Document",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 41,
                "jsdoctags": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "KycS",
                        "type": "KycService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "document",
                        "type": "Document",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<form [formGroup]=\"parentFormGroup\">\r\n    <div class=\"step-8-address\">\r\n        <form [formGroup]=\"step_8\">\r\n            <div class=\"form-control-wrapper\">\r\n                <div class=\"row\">\r\n                    <div class=\"col-12\">\r\n                        <div class=\"form-group\">\r\n                            <label for=\"password\"> Country</label>\r\n                            <app-select-country [formFieldType]=\"'CUSTOM-FORM-FIELD'\"\r\n                                specialClasses=\"country-field disabled\" [kycForm]=\"kycForm\" [currentFormGroup]=\"step_8\"\r\n                                currentformControlName=\"country\" [disabled]=\"false\"\r\n                                [matLabelTranslation]=\"'fields.country' | translate\">\r\n                            </app-select-country>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div class=\"row\">\r\n                    <div class=\"col-12\">\r\n                        <div class=\"form-group\">\r\n                            <label for=\"password\"> {{ 'fields.street_address' | translate }}</label>\r\n                            <input matInput formControlName=\"street_address\" autocomplete=\"off\" class=\"form-control\"\r\n                                appRestrictSpecialCharacters>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div class=\"row\">\r\n                    <div class=\"col-6\">\r\n                        <div class=\"form-group\">\r\n                            <label for=\"password\"> {{ 'fields.city' | translate }}</label>\r\n                            <input matInput formControlName=\"city\" autocomplete=\"off\" class=\"form-control\"\r\n                                appRestrictSpecialCharacters>\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"col-6\">\r\n                        <div class=\"form-group\">\r\n                            <label for=\"password\"> {{'fields.zipcode'| translate }}</label>\r\n                            <input matInput formControlName=\"zipcode\" autocomplete=\"off\" class=\"form-control\"\r\n                                appRestrictSpecialCharacters>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n\r\n            </div>\r\n            <div class=\"row\">\r\n                <div class=\"col-12\">\r\n                    <div class=\"form-group\">\r\n                        <button\r\n                            [disabled]=\"!step_8.valid || (step_8.get('street_address')?.value == '' ||  step_8.get('city')?.value == '' || step_8.get('zipcode')?.value == '')\"\r\n                            [class.disabled]=\"!step_8.valid || (step_8.get('street_address')?.value == '' ||  step_8.get('city')?.value == '' || step_8.get('zipcode')?.value == '')\"\r\n                            type=\"button\" mat-raised-button color=\"primary\" class=\"continue-btn\"\r\n                            (click)=\"handleNextStep()\" id=\"kycaddress-continue-btn\">\r\n                            {{ 'KYC.ContinueLogin' | translate}}\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </form>\r\n    </div>\r\n</form>"
        },
        {
            "name": "KycCreatePasswordComponent",
            "id": "component-KycCreatePasswordComponent-1831ad6b93879fdd4644299cf6f7983d453bee75aba27156b5801051feaf9f2e96e7a50963985e23cd2850d0941481a4c2cb523a17c6ac20ac8ce7fca6a2e831",
            "file": "src/app/sign-up/kyc-create-password/kyc-create-password.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "kyc-create-password",
            "styleUrls": [
                "./kyc-create-password.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./kyc-create-password.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "kycForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 37,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "parentFormGroup",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 36,
                    "type": "FormGroup",
                    "decorators": []
                },
                {
                    "name": "stepsObj",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 38,
                    "type": "IStepsObj",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "nextStepEvent",
                    "defaultValue": "new EventEmitter<StepActionType>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 39,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_hasDigit",
                    "defaultValue": "/\\d/",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 44
                },
                {
                    "name": "_hasLowerCase",
                    "defaultValue": "/[a-z]/",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "_hasSpecial",
                    "defaultValue": "/[!@#$%^&*()\\[\\]{}\\\\\\-_+={}|\\\\:;'\",<>,.?/~`]/",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 45
                },
                {
                    "name": "_hasUpperCase",
                    "defaultValue": "/[A-Z]/",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "componentDestroyed",
                    "defaultValue": "new Subject<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "createUser$",
                    "defaultValue": "new BehaviorSubject<boolean>(false)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 57
                },
                {
                    "name": "foused",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "hasDigit",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 51
                },
                {
                    "name": "hasDigitListItem",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 48
                },
                {
                    "name": "hasEight",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 53
                },
                {
                    "name": "hasEightCharsListItem",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 46
                },
                {
                    "name": "hasLower",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 52
                },
                {
                    "name": "hasSpecial",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 49
                },
                {
                    "name": "hasSpecialListItem",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 47
                },
                {
                    "name": "hasUpper",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 50
                },
                {
                    "name": "hideConfirmPassword",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "hidePassword",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "illegally",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 54
                },
                {
                    "name": "isFromIsrael",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 55
                },
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 58
                },
                {
                    "name": "minPasswordLength",
                    "defaultValue": "8",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "showLoader",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 56
                },
                {
                    "name": "step_6_passwords",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup | any",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 59
                }
            ],
            "methodsClass": [
                {
                    "name": "callCreateNewUserAPI",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 142,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "checkStrength",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 93,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "codeValidHandler",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 81,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getConfirmPasswordControl",
                    "args": [],
                    "optional": false,
                    "returnType": "AbstractControl | null",
                    "typeParameters": [],
                    "line": 182,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getPasswordControl",
                    "args": [],
                    "optional": false,
                    "returnType": "AbstractControl | null",
                    "typeParameters": [],
                    "line": 177,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getPasswordsFormGroup",
                    "args": [],
                    "optional": false,
                    "returnType": "FormGroup | null",
                    "typeParameters": [],
                    "line": 173,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "handleNextStep",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 106,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 222,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 68,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "restrictPaste",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 213,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "restrictSpecialCharacters",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 187,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toggleConfirmPasswordVisibility",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 89,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "togglePasswordVisibility",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 85,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "updateIsFromIsraelFlag",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                },
                {
                    "name": "TranslateModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\r\nimport { BehaviorSubject, EMPTY, Subject } from 'rxjs';\r\nimport { AbstractControl, FormGroup, ReactiveFormsModule, ValidationErrors, ValidatorFn } from '@angular/forms';\r\n\r\nimport { catchError, skip, switchMap, take, tap, throttleTime } from 'rxjs/operators';\r\nimport { HttpErrorResponse } from '@angular/common/http';\r\nimport { ActivatedRoute, ParamMap, Router } from '@angular/router'\r\nimport { IStepsObj, EErrorMessages } from '../kyc';\r\nimport { StepActionType } from '../types/global.type';\r\nimport { CommonModule } from '@angular/common';\r\nimport { TranslateModule } from '@ngx-translate/core';\r\nimport { KycService } from '../services/kyc.service';\r\n\r\nexport const pwdConfirming = (data: { key: string, confirmationKey: string }): ValidatorFn => {\r\n    const { key, confirmationKey } = data;\r\n\r\n    return (group: any) => {\r\n        const input = group.controls[key];\r\n        const confirmationInput = group.controls[confirmationKey];\r\n        return input.value !== confirmationInput.value ? { passwordNotEquivalent: true } : null\r\n    };\r\n}\r\n\r\n\r\n@Component({\r\n    selector: 'kyc-create-password',\r\n    imports: [CommonModule, ReactiveFormsModule, TranslateModule],\r\n    templateUrl: './kyc-create-password.component.html',\r\n    styleUrls: ['./kyc-create-password.component.scss'],\r\n})\r\nexport class KycCreatePasswordComponent implements OnInit {\r\n    hidePassword = true;\r\n    hideConfirmPassword = true;\r\n\r\n  componentDestroyed = new Subject<any>();\r\n  @Input('parentFormGroup') parentFormGroup!: FormGroup;\r\n  @Input('kycForm') kycForm: any;\r\n  @Input('stepsObj') stepsObj!: IStepsObj;\r\n  @Output('nextStepEvent') nextStepEvent = new EventEmitter<StepActionType>();\r\n  foused = false;\r\n  minPasswordLength = 8;\r\n  _hasLowerCase = /[a-z]/;\r\n  _hasUpperCase = /[A-Z]/;\r\n  _hasDigit = /\\d/;\r\n  _hasSpecial = /[!@#$%^&*()\\[\\]{}\\\\\\-_+={}|\\\\:;'\",<>,.?/~`]/;\r\n  hasEightCharsListItem!: boolean;\r\n  hasSpecialListItem!: boolean;\r\n  hasDigitListItem!: boolean;\r\n  hasSpecial!: boolean;\r\n  hasUpper!: boolean;\r\n  hasDigit!: boolean;\r\n  hasLower!: boolean;\r\n  hasEight!: boolean;\r\n  illegally!: boolean;\r\n  isFromIsrael!: boolean;\r\n  showLoader: any = false;  \r\n  createUser$ = new BehaviorSubject<boolean>(false);\r\n  loading = false;\r\n  step_6_passwords!: FormGroup | any;\r\n\r\n    constructor(\r\n        private KycS: KycService,\r\n        private route: ActivatedRoute,\r\n        private router: Router,\r\n    ) {\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.step_6_passwords = this.getPasswordsFormGroup();\r\n        this.updateIsFromIsraelFlag();\r\n        this.checkStrength();\r\n    }\r\n\r\n    // New method to update the isFromIsrael flag based on current form data\r\n    updateIsFromIsraelFlag(): void {\r\n        const countrySelected = this.kycForm?.value?.step_1?.companyAcc?.countrySelected;\r\n        this.isFromIsrael = countrySelected !== null && countrySelected !== 'Israel';\r\n        console.log('updateIsFromIsraelFlag:', this.isFromIsrael, 'country:', countrySelected);\r\n    }\r\n\r\n    codeValidHandler() {\r\n        this.nextStepEvent.next('NEXT');\r\n    }\r\n    \r\n    togglePasswordVisibility(): void {\r\n        this.hidePassword = !this.hidePassword;\r\n    }\r\n    \r\n    toggleConfirmPasswordVisibility(): void {\r\n        this.hideConfirmPassword = !this.hideConfirmPassword;\r\n    }\r\n    \r\n    checkStrength() {\r\n        this.illegally = false;\r\n        let pw = this.getPasswordControl()?.value;\r\n        this.hasEight = pw.length >= this.minPasswordLength;\r\n        this.hasDigit = this._hasDigit.test(pw);\r\n        this.hasSpecial = this._hasSpecial.test(pw);\r\n        this.hasLower = this._hasLowerCase.test(pw);\r\n        this.hasUpper = this._hasUpperCase.test(pw);\r\n        if (!this.hasEight || !this.hasDigit || !this.hasSpecial || !this.hasLower || !this.hasUpper) {\r\n            this.illegally = true;\r\n        }\r\n    }\r\n    \r\n    handleNextStep() {\r\n        // Always update the isFromIsrael flag to ensure it's current\r\n        this.updateIsFromIsraelFlag();\r\n        \r\n        let pw = this.getPasswordControl()?.value;\r\n        if (!pw) {\r\n            console.error(`must enter password`);\r\n            return;\r\n        }\r\n        if (!this.kycForm.get('step_6').valid) {\r\n            console.error(`user was able to click continue even though button disabled.`);\r\n            return;\r\n        }\r\n        if (this.illegally) {\r\n            console.error(`user was able to click continue even though button disabled.`);\r\n            return;\r\n        }\r\n\r\n        if (this.isFromIsrael) { \r\n            console.log('isFromIsrael is TRUE, calling API');\r\n            this.createUser$\r\n                .pipe(take(1))\r\n                .subscribe(() => {\r\n                    this.callCreateNewUserAPI();\r\n                });\r\n            setTimeout(() => {\r\n                this.router.navigate(['/login']);\r\n            }, 1000);\r\n            this.createUser$.next(true);\r\n            // Don't navigate here - API callback will handle navigation if needed\r\n        } else {\r\n            console.log('isFromIsrael is FALSE, moving to next step');\r\n            this.nextStepEvent.next('NEXT');\r\n        }\r\n    }\r\n\r\n    callCreateNewUserAPI() {\r\n        this.createUser$\r\n            .pipe(\r\n                tap(() => {\r\n                    this.KycS.loading$.next(true);\r\n                    this.loading = true;\r\n                }),\r\n                throttleTime(500),\r\n                switchMap(() => {\r\n                    // API call would go here\r\n                    return [];  \r\n                }),\r\n                catchError((e: HttpErrorResponse) => {\r\n                    this.KycS.loading$.next(false);\r\n                    this.loading = false;\r\n                    return EMPTY;\r\n                })\r\n            )\r\n            .subscribe(r => {\r\n                if (r) {\r\n                    localStorage.removeItem('step')\r\n                    localStorage.removeItem('kycForm')\r\n                    window.location.href = '/login';\r\n                } else {\r\n                    this.KycS.showError$.next({ hasError: true, msg: EErrorMessages.SomethingWentWrong })\r\n                }\r\n                this.KycS.loading$.next(false);\r\n                this.loading = false;\r\n            });\r\n    }\r\n\r\n    getPasswordsFormGroup(): FormGroup | null {\r\n        return this.kycForm.get('step_6').get('passwords') as FormGroup | null;\r\n    }\r\n\r\n    getPasswordControl(): AbstractControl | null {\r\n        const passwordsFormGroup = this.getPasswordsFormGroup();\r\n        return passwordsFormGroup ? passwordsFormGroup.get('password') : null;\r\n    }\r\n    \r\n    getConfirmPasswordControl(): AbstractControl | null {\r\n        const passwordsFormGroup = this.getPasswordsFormGroup();\r\n        return passwordsFormGroup ? passwordsFormGroup.get('confirmPassword') : null;\r\n    }\r\n\r\n    restrictSpecialCharacters(event: any) {\r\n        const disallowedKeys = /[<>:;+=]/;\r\n\r\n        if (event.type === 'paste') {\r\n            const clipboardData = event.clipboardData || (window as any).clipboardData;\r\n            const pastedData = clipboardData.getData('text');\r\n            if (disallowedKeys.test(pastedData)) {\r\n                event.preventDefault();\r\n            }\r\n        } else {\r\n            if (event?.target?.value?.length === 0 && (event?.key === '0' || event?.key === '.')) {\r\n                event?.preventDefault();\r\n            } else {\r\n                if (event?.key === '.' && event?.target?.value.includes('.')) {\r\n                    event?.preventDefault();\r\n                }\r\n                const allowedKeys = /^[a-zA-Z0-9!@#$%^&*()_+\\-=\\[\\]{}|\\\\,.<>\\/?~`'\"]$/;\r\n                if (!allowedKeys.test(event.key) || disallowedKeys.test(event.key)) {\r\n                    if (!['Backspace', 'Tab', 'ArrowLeft', 'ArrowRight', 'Enter'].includes(event.key)) {\r\n                        event.preventDefault();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    restrictPaste(event: any) {\r\n        const clipboardData = event.clipboardData;\r\n        const pastedData = clipboardData.getData('Text');\r\n        const restrictedSymbols = /[<>=+]/;\r\n        if (restrictedSymbols.test(pastedData)) {\r\n            event.preventDefault();\r\n        }\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.componentDestroyed.next(null);\r\n        this.componentDestroyed.complete();\r\n    }\r\n}",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"../../../assets/scss/mixins\";\r\n@import '../../../assets/scss/variable';\r\n.row {\r\n    align-items: center;\r\n}\r\nlabel,\r\nspan {\r\n    color: #111827 !important;\r\n    font-size: 16px;\r\n    font-weight:300;\r\n    display: block;\r\n    min-height: 16px;\r\n    text-align: left;\r\n    width: auto;\r\n}\r\nlabel{\r\n    color: #111827 !important;\r\n    margin: 0 0 7px;\r\n    @media screen and (max-width: 1440px) {\r\n        font-size: 14px;\r\n    }\r\n}\r\nspan:not(.error-msg) {\r\n    opacity: 0.5;\r\n    font-size: 14px;\r\n    padding: 0 6px;\r\n}\r\n.input-group{\r\n    .form-control{\r\n        border-color: #E2E2E2;\r\n        padding: 14px 18px;\r\n        border-radius: 15px !important;\r\n        &:focus{\r\n            outline: none;\r\n            box-shadow: none;\r\n        }\r\n        @media screen and (max-width: 1440px) {\r\n            font-size: 14px;\r\n            padding: 10px;\r\n        }\r\n    }\r\n}\r\n/* Add any additional styles to the button as needed */\r\n.btn {\r\n    width:53px;\r\n    height:53px;\r\n    @media screen and (max-width: 1440px) {\r\n        width: 43px;\r\n        height: 43px;\r\n    }\r\n}\r\n.step-6-passwords{\r\n    padding: 0 91px;\r\n    @media screen and (max-width: 1199px) {\r\n        padding: 0 40px;\r\n    }\r\n    @media screen and (max-width: 1024px) {\r\n        padding: 0 20px;\r\n    }\r\n    @media screen and (max-width: 768px) {\r\n        padding:0;\r\n    }\r\n}\r\n\r\n/* You may need to adjust the button size and other styles to fit your design */\r\n.input-group-append {\r\n    z-index: 1000;\r\n    cursor: pointer;\r\n    position: absolute;\r\n    right: 0;\r\n}\r\n\r\n.success-icon {\r\n    padding-right: 0;\r\n    height: 9px;\r\n    width: auto !important;\r\n}\r\n.error-msg {\r\n    color: red !important;\r\n    font-size: 14px;\r\n}\r\n.form-group {\r\n    margin-bottom: 26px;\r\n    .success {\r\n        span {\r\n            color: var(--brand-primary-color) !important;\r\n            opacity: 1;\r\n        }\r\n    }\r\n\r\n    @media screen and (max-width: 1440px) {\r\n        margin-bottom: 20px;\r\n    }\r\n\r\n    @media only screen and (max-width: 580px) {\r\n        margin-bottom: 15px;\r\n    }\r\n}\r\n.continue-btn {\r\n    background: #01031C;\r\n    border-radius: 40px;\r\n    font-size: 16px;\r\n    // line-height: 22px;\r\n    font-weight: 600;\r\n    color: #fff;\r\n    padding: 12px 0px;\r\n    height: auto;\r\n    transition: 0.3s;\r\n    position: relative;\r\n    width: 100% !important;\r\n    @media screen and (max-width: 1440px) {\r\n        // height: 25px;\r\n        width: 25px;\r\n        padding: 10px 0;\r\n        font-size: 14px;\r\n    }\r\n\r\n    &.disabled {\r\n        background: #f5f5fa !important;\r\n        color: #c6c8cc !important;\r\n        cursor: not-allowed;\r\n    }\r\n}\r\n",
                    "styleUrl": "./kyc-create-password.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "KycS",
                        "type": "KycService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 59,
                "jsdoctags": [
                    {
                        "name": "KycS",
                        "type": "KycService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<ng-container [formGroup]=\"parentFormGroup\">\r\n  <ng-container [formGroup]=\"step_6_passwords\">\r\n    <div class=\"step-6-passwords\">\r\n      <div class=\"row\">\r\n        <div class=\"col-12\">\r\n          <div class=\"form-group\">\r\n            <label for=\"password\">Password: *</label>\r\n            <div class=\"input-group\">\r\n              <input cdkOverlayOrigin (paste)=\"restrictPaste($event)\" type=\"text\" (ngModelChange)=\"checkStrength()\" (keydown)=\"restrictSpecialCharacters($event)\" [type]=\"hidePassword ? 'password' : 'text'\"\r\n                class=\"form-control\" name=\"password\" formControlName=\"password\" id=\"confirm-password-inp--1\">\r\n              <div class=\"input-group-append\" *ngIf=\"getPasswordControl()?.value?.length\">\r\n                <button class=\"btn \" type=\"button\" (click)=\"togglePasswordVisibility()\">\r\n                  <img [src]=\"hidePassword ? '/images/show-password.svg' : '/images/hide-password.svg'\"\r\n                    alt=\"Toggle Password\">\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"row\">\r\n        <div class=\"col-12\">\r\n          <div class=\"form-group\">\r\n            <div class=\"col-12 indication\">\r\n              <div class=\"row\" [ngClass]=\"{ 'success': hasEight, 'failed': !hasEight }\">\r\n                <img *ngIf=\"!hasEight\" class=\"success-icon\" src=\"/images/unSuccess.svg\" alt=\"check\">\r\n                <img *ngIf=\"hasEight\" class=\"success-icon\" src=\"/images/successIcon.svg\" alt=\"check\">\r\n                <span> 8 or more characters</span>\r\n              </div>\r\n              <div class=\"row\" [ngClass]=\"{ 'success': hasDigit, 'failed': !hasDigit }\">\r\n                <img *ngIf=\"!hasDigit\" class=\"success-icon\" src=\"/images/unSuccess.svg\" alt=\"check\">\r\n                <img *ngIf=\"hasDigit\" class=\"success-icon\" src=\"/images/successIcon.svg\" alt=\"check\">\r\n                <span>Numbers</span>\r\n              </div>\r\n              <div class=\"row\" [ngClass]=\"{ 'success': hasLower, 'failed': !hasLower }\">\r\n                <img *ngIf=\"!hasLower\" class=\"success-icon\" src=\"/images/unSuccess.svg\" alt=\"check\">\r\n                <img *ngIf=\"hasLower\" class=\"success-icon\" src=\"/images/successIcon.svg\" alt=\"check\">\r\n                <span>A minimum of 1 <b>lower case</b> (a-z)</span>\r\n              </div>\r\n              <div class=\"row\" [ngClass]=\"{ 'success': hasUpper, 'failed': !hasUpper }\">\r\n                <img *ngIf=\"!hasUpper\" class=\"success-icon\" src=\"/images/unSuccess.svg\" alt=\"check\">\r\n                <img *ngIf=\"hasUpper\" class=\"success-icon\" src=\"/images/successIcon.svg\" alt=\"check\">\r\n                <span>A minimum of 1 <b>upper case</b> (A-Z)</span>\r\n              </div>\r\n              <div class=\"row\" [ngClass]=\"{ 'success': hasSpecial, 'failed': !hasSpecial }\">\r\n                <img *ngIf=\"!hasSpecial\" class=\"success-icon\" src=\"/images/unSuccess.svg\" alt=\"check\">\r\n                <img *ngIf=\"hasSpecial\" class=\"success-icon\" src=\"/images/successIcon.svg\" alt=\"check\">\r\n                <span>Special characters</span>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"row\">\r\n        <div class=\"col-12\">\r\n          <div class=\"form-group\" *ngIf=\"getPasswordControl()?.value?.length && !illegally\">\r\n            <label for=\"password\">Confirm password: *</label>\r\n            <div class=\"input-group\" *ngIf=\"getPasswordControl()?.value?.length\">\r\n              <input type=\"text\" (paste)=\"restrictPaste($event)\" (ngModelChange)=\"checkStrength()\" (keydown)=\"restrictSpecialCharacters($event)\" [type]=\"hideConfirmPassword ? 'password' : 'text'\"\r\n                class=\" form-control\" name=\"confirmPassword\" formControlName=\"confirmPassword\" id=\"confirm-password-inp--2\">\r\n              <div class=\"input-group-append\" *ngIf=\"getConfirmPasswordControl()?.value?.length\">\r\n                <button class=\"btn \" type=\"button\" (click)=\"toggleConfirmPasswordVisibility()\">\r\n                  <img [src]=\"hideConfirmPassword ? '/images/show-password.svg' : '/images/hide-password.svg'\"\r\n                    alt=\"Toggle Password\">\r\n                </button>\r\n              </div>\r\n            </div>\r\n            <span *ngIf=\"getConfirmPasswordControl()?.value?.length && \r\n                        kycForm.get('step_6').get('passwords').hasError('passwordMismatch')\" class=\"error-msg\"> Password not\r\n              equivalent</span>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"row\">\r\n        <div class=\"col-12\">\r\n          <button [class.disabled]=\"!kycForm.get('step_6')?.valid || illegally || loading\"\r\n          [disabled]=\"!kycForm.get('step_6')?.valid || illegally || loading\" type=\"button\" mat-raised-button\r\n          color=\"primary\" class=\"continue-btn mx-auto\" (click)=\"handleNextStep()\" id=\"confirm-password-btn--3\">\r\n          {{ (isFromIsrael ? 'KYC.ContinueLogin' : 'KYC.createAccount') | translate }}\r\n        </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </ng-container>\r\n</ng-container>"
        },
        {
            "name": "KycEmailConfirmComponent",
            "id": "component-KycEmailConfirmComponent-491703970a8357e01b13af0b9a914fd2e3bd44a719c841900885e2abce4c464668ca9836d00e39325212b86e8fabe8bb5bdc22500d1650bca864f770992b0c79",
            "file": "src/app/sign-up/kyc-email-confirm/kyc-email-confirm.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "kyc-email-confirm",
            "styleUrls": [
                "./kyc-email-confirm.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./kyc-email-confirm.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "kycForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "FormGroup",
                    "decorators": []
                },
                {
                    "name": "parentFormGroup",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "FormGroup",
                    "decorators": []
                },
                {
                    "name": "stepsObj",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "IStepsObj",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "nextStepEvent",
                    "defaultValue": "new EventEmitter<StepActionType>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "componentDestroyed",
                    "defaultValue": "new Subject<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "step_3",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                }
            ],
            "methodsClass": [
                {
                    "name": "codeValidHandler",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                },
                {
                    "name": "TranslateModule",
                    "type": "module"
                },
                {
                    "name": "SmsVerificationComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, EventEmitter, Input, OnDestroy, OnInit, Output} from '@angular/core';\r\nimport {FormGroup, ReactiveFormsModule} from '@angular/forms';\r\nimport {Subject} from 'rxjs';\r\nimport { IStepsObj } from '../kyc';\r\nimport { StepActionType } from '../types/global.type';\r\nimport { CommonModule } from '@angular/common';\r\nimport { TranslateModule } from '@ngx-translate/core';\r\nimport { SmsVerificationComponent } from '../fields/sms-verification/sms-verification.component';\r\n\r\n\r\n@Component({\r\n  selector: 'kyc-email-confirm',\r\n  imports: [CommonModule, ReactiveFormsModule, TranslateModule, SmsVerificationComponent],\r\n  templateUrl: './kyc-email-confirm.component.html',\r\n  styleUrls: ['./kyc-email-confirm.component.scss'],\r\n})\r\nexport class KycEmailConfirmComponent implements OnInit, OnDestroy {\r\n    componentDestroyed = new Subject<any>();\r\n    @Input('parentFormGroup') parentFormGroup!: FormGroup;\r\n    @Input('kycForm') kycForm!: FormGroup;\r\n    @Input('stepsObj') stepsObj!: IStepsObj;\r\n    @Output('nextStepEvent') nextStepEvent = new EventEmitter<StepActionType>();\r\n    step_3!: FormGroup;\r\n\r\n    constructor(\r\n        // private kycS: KycService\r\n    ) { }\r\n\r\n    ngOnInit(): void {\r\n        this.step_3 = <FormGroup>this.kycForm.get('step_3');\r\n    }\r\n\r\n    codeValidHandler() {\r\n        setTimeout(() => { \r\n        this.nextStepEvent.next('NEXT');\r\n        }, 500);\r\n    }\r\n\r\n    ngOnDestroy(){\r\n        this.componentDestroyed.next(null);\r\n        this.componentDestroyed.complete();\r\n    }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../assets/scss/variable';\r\n@import '../../../assets/scss/components';\r\n.mail-conf-ah--1{\r\n    color:#111827;\r\n    font-weight: 400;\r\n    margin: 0 0 34px;\r\n}",
                    "styleUrl": "./kyc-email-confirm.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 23
            },
            "extends": [],
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<ng-container [formGroup]=\"parentFormGroup\">\r\n    <ng-container [formGroup]=\"step_3\">\r\n        <section class=\"mail-conf text-center\">\r\n            <p class=\"at-title mail-conf-ah--1\">{{ 'KYC_Step_3.enter_code' | translate }}</p>\r\n            <sms-verification\r\n                [kycForm]=\"kycForm\"\r\n                [stepsObj]=\"stepsObj\"\r\n                (codeValidEvent)=\"codeValidHandler()\"\r\n                [timerTooltip]=\"('fields.code_hasnt_arrived_tooltip'|translate)\"\r\n                [formControlNameToSetValue]=\"'email_code_user_enter'\"\r\n                [formControlNameToCompareValue]=\"'email_code_sent'\">\r\n            </sms-verification>\r\n        </section>\r\n    </ng-container>\r\n</ng-container>\r\n"
        },
        {
            "name": "KycMainComponent",
            "id": "component-KycMainComponent-1050153413052699432cb048441124428270bc734aa2e1ce1b56d7be929684ca46544bf45eb6b5432e6ec1deddb29a5bbf7a12542a3c3a54c1da46c03aa2e5eb",
            "file": "src/app/sign-up/kyc-main/kyc-main.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-kyc-main",
            "styleUrls": [
                "./kyc-main.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./kyc-main.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "stepsObj",
                    "defaultValue": "{\r\n        currentStep: EStepNumber.typeOfBusiness,\r\n        maxSteps: EStepNumber.personalAddress,\r\n        minSteps: EStepNumber.typeOfBusiness\r\n    }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 45,
                    "type": "IStepsObj",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "accountType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TBusinessTypes",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 61
                },
                {
                    "name": "appLoginUrl",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 51
                },
                {
                    "name": "assetsPath",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 60
                },
                {
                    "name": "changeLogo",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 66
                },
                {
                    "name": "codeStatus",
                    "defaultValue": "'DEFAULT'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TVerificationCodeStatus",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 59
                },
                {
                    "name": "componentDestroyed",
                    "defaultValue": "new Subject<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "detailsToShow",
                    "defaultValue": "detailsToShow",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 52
                },
                {
                    "name": "EBusinessType",
                    "defaultValue": "EBusinessType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 62
                },
                {
                    "name": "error",
                    "defaultValue": "{\r\n        hasError: false,\r\n        msg: null\r\n    }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 53
                },
                {
                    "name": "Esteps",
                    "defaultValue": "EStepNumber",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 58
                },
                {
                    "name": "faqUrl",
                    "defaultValue": "'https://help.okoora.com/en-us/'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 63
                },
                {
                    "name": "handleValueChanges",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>fired when a value change in form</p>\n",
                    "line": 501,
                    "rawdescription": "\n\nfired when a value change in form\n",
                    "jsdoctags": [
                        {
                            "pos": 19265,
                            "end": 19285,
                            "kind": 341,
                            "id": 0,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "tagName": {
                                "pos": 19266,
                                "end": 19271,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "param"
                            },
                            "comment": "",
                            "name": {
                                "pos": 19272,
                                "end": 19278,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "newVal"
                            },
                            "isNameFirst": true,
                            "isBracketed": false
                        }
                    ]
                },
                {
                    "name": "kycForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 44
                },
                {
                    "name": "passwordMatchValidator",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 461
                },
                {
                    "name": "showLoader",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 57
                },
                {
                    "name": "stepCurrent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 65
                },
                {
                    "name": "translate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TranslateService",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 67
                },
                {
                    "name": "userType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 64
                },
                {
                    "name": "websiteUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 50
                }
            ],
            "methodsClass": [
                {
                    "name": "emailValue",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 426,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "goToLogin",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 456,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "handleDetailToShow",
                    "args": [
                        {
                            "name": "bType",
                            "type": "IKycData",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 393,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nhandles the content to be shown in the details component\n",
                    "description": "<p>handles the content to be shown in the details component</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 15743,
                                "end": 15748,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "bType"
                            },
                            "type": "IKycData",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 15737,
                                "end": 15742,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "handleEditValue",
                    "args": [
                        {
                            "name": "e",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "action",
                            "type": "\"EMAIL\" | \"PHONE\"",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 440,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nEND GET form Values\n",
                    "description": "<p>END GET form Values</p>\n",
                    "jsdoctags": [
                        {
                            "name": "e",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "action",
                            "type": "\"EMAIL\" | \"PHONE\"",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handlePreviousBtn",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 408,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "handleSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 518,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nwhen form submitted this method occur\n",
                    "description": "<p>when form submitted this method occur</p>\n"
                },
                {
                    "name": "nextStepIsValid",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 333,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nreturns true is the step is valid\n",
                    "description": "<p>returns true is the step is valid</p>\n"
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 522,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 147,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "phoneValue",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 430,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "showCloseBtn",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 491,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "showError",
                    "args": [
                        {
                            "name": "msg",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 397,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "msg",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "showLoginBtn",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 487,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "showPrevBtn",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 477,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "step1IsValid",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 356,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "step2IsValid",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 361,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "step3IsValid",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 365,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "step4IsValid",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 369,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "step5IsValid",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 373,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "step6IsValid",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 377,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "step7IsValid",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 381,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "step8IsValid",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 385,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "stepHandler",
                    "args": [
                        {
                            "name": "action",
                            "type": "StepActionType",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 281,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "action",
                            "type": "StepActionType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "triggerChangeDetection",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 277,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "tryAgain",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 510,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "updatePackageBasketLastOffer",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 527,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "MatIconModule",
                    "type": "module"
                },
                {
                    "name": "TranslateModule",
                    "type": "module"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                },
                {
                    "name": "KycOneComponent",
                    "type": "component"
                },
                {
                    "name": "KycTwoComponent",
                    "type": "component"
                },
                {
                    "name": "KycEmailConfirmComponent",
                    "type": "component"
                },
                {
                    "name": "KycPhoneComponent",
                    "type": "component"
                },
                {
                    "name": "KycCreatePasswordComponent",
                    "type": "component"
                },
                {
                    "name": "KycPersonalDetailsComponent",
                    "type": "component"
                },
                {
                    "name": "KycAddressComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectorRef, Component, EventEmitter, HostListener, Inject, Input, OnInit, Output } from '@angular/core';\r\nimport { AbstractControl, FormBuilder, FormControl, FormGroup, ReactiveFormsModule, ValidationErrors, ValidatorFn, Validators } from '@angular/forms';\r\nimport { Subject } from 'rxjs';\r\nimport { debounceTime, takeUntil } from 'rxjs/operators';\r\nimport { KycCreatePasswordComponent, pwdConfirming } from '../kyc-create-password/kyc-create-password.component';\r\nimport { ActivatedRoute, Router } from \"@angular/router\";\r\nimport { CommonModule, DecimalPipe, DOCUMENT } from \"@angular/common\";\r\nimport { IStepsObj, EStepNumber, TVerificationCodeStatus, TBusinessTypes, EBusinessType, IKycData, IKYCFormGroups } from '../kyc';\r\nimport { detailsToShow, passwordRgxPatternValidator } from '../models';\r\nimport { StepActionType } from '../types/global.type';\r\nimport { KycService } from '../services/kyc.service';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { TranslateModule, TranslateService } from '@ngx-translate/core';\r\nimport { KycEmailConfirmComponent } from '../kyc-email-confirm/kyc-email-confirm.component';\r\nimport { KycOneComponent } from '../kyc-one/kyc-one.component';\r\nimport { KycPhoneComponent } from '../kyc-phone/kyc-phone.component';\r\nimport { KycTwoComponent } from '../kyc-two/kyc-two.component';\r\nimport { KycPersonalDetailsComponent } from '../kyc-personal-details/kyc-personal-details.component';\r\nimport { KycAddressComponent } from '../kyc-address/kyc-address.component';\r\n\r\n// import { select, Store } from \"@ngrx/store\";\r\n\r\n@Component({\r\n    selector: 'app-kyc-main',\r\n    imports: [\r\n        CommonModule,\r\n        MatIconModule,\r\n        TranslateModule,\r\n        ReactiveFormsModule,\r\n        KycOneComponent,\r\n        KycTwoComponent,\r\n        KycEmailConfirmComponent,\r\n        KycPhoneComponent,\r\n        KycCreatePasswordComponent,\r\n        KycPersonalDetailsComponent,\r\n        KycAddressComponent\r\n    ],\r\n    templateUrl: './kyc-main.component.html',\r\n    styleUrls: ['./kyc-main.component.scss'],\r\n})\r\nexport class KycMainComponent implements OnInit {\r\n\r\n    componentDestroyed = new Subject<any>();\r\n    kycForm: any;\r\n    @Input() stepsObj: IStepsObj = {\r\n        currentStep: EStepNumber.typeOfBusiness,\r\n        maxSteps: EStepNumber.personalAddress,\r\n        minSteps: EStepNumber.typeOfBusiness\r\n    };\r\n    websiteUrl!: string;\r\n    appLoginUrl = '';\r\n    detailsToShow = detailsToShow;\r\n    error: any = {\r\n        hasError: false,\r\n        msg: null\r\n    }\r\n    showLoader: boolean = false;\r\n    Esteps: typeof EStepNumber = EStepNumber;\r\n    codeStatus: TVerificationCodeStatus = 'DEFAULT';\r\n    assetsPath = '';\r\n    accountType!: TBusinessTypes;\r\n    EBusinessType = EBusinessType;\r\n    faqUrl: string = 'https://help.okoora.com/en-us/';\r\n    userType: any;\r\n    stepCurrent: any;\r\n    changeLogo: boolean = false;\r\n    translate?: TranslateService\r\n    constructor(\r\n        private fb: FormBuilder,\r\n        private cd: ChangeDetectorRef,\r\n        // private generalS: GeneralService,\r\n        private kycS: KycService,\r\n        private router: Router,\r\n        // private auth: AuthenticationService,\r\n\r\n        @Inject(DOCUMENT) private document: Document,\r\n        private route: ActivatedRoute\r\n    ) {\r\n        this.kycForm = this.fb.group({\r\n            // kyc-one\r\n            step_1: fb.group({\r\n                companyAcc: fb.group({\r\n                    isActive: [false],\r\n                    countrySelected: [''],\r\n                    countryCode: ['']\r\n                }),\r\n                privateAcc: fb.group({\r\n                    isActive: [false],\r\n                    countrySelected: [''],\r\n                    countryCode: ['']\r\n\r\n                }),\r\n            }),\r\n            // kyc-two\r\n            step_2: fb.group({\r\n                email: ['', [Validators.required, Validators.email,Validators.pattern('^(?!-)[a-z0-9._%+-]+@[a-z0-9.-]+\\\\.[a-z]{2,4}$')]],\r\n                agree: [false, [Validators.requiredTrue]]\r\n            }),\r\n\r\n\r\n            // kyc-email-confirm\r\n            step_3: fb.group({\r\n                email_code_sent: [''],\r\n                email_code_user_enter: [''],\r\n            }),\r\n            // kyc-phone\r\n            step_4: fb.group({\r\n                phone_code: ['', Validators.required],\r\n                phone: ['', Validators.required],\r\n            }),\r\n            // kyc-phone-confirm\r\n            step_5: fb.group({\r\n                phone_confirmation_sent: [''],\r\n                phone_confirmation_user_enter: [''],\r\n            }),\r\n            // kyc-create-password\r\n            step_6: fb.group({\r\n                passwords: new FormGroup(\r\n                    {\r\n                        password: new FormControl(\"\", [Validators.required, passwordRgxPatternValidator()]),\r\n                        confirmPassword: new FormControl(\"\", [Validators.required, passwordRgxPatternValidator()]),\r\n                    }, {\r\n                    validators: this.passwordMatchValidator()\r\n                }\r\n                )\r\n            }),\r\n\r\n            step_7: fb.group({\r\n                first_name: ['', [Validators.required]],\r\n                first_name_he: [''],\r\n                last_name: ['', [Validators.required,]],\r\n                last_name_he: [''],\r\n                id_number: ['', [Validators.required]],\r\n                birth_date: ['', [Validators.required]],\r\n                applicantId: [''],\r\n\r\n            }),\r\n            step_8: fb.group({\r\n                country: ['', Validators.required],\r\n                street_address: ['', [Validators.required]],\r\n                city: ['', [Validators.required,]],\r\n                zipcode: ['', [Validators.required]],\r\n            }),\r\n        });\r\n    }\r\n \r\n    ngOnInit(): void { \r\n        localStorage.removeItem('step');  \r\n        this.stepsObj.currentStep\r\n        // this.websiteUrl = this.generalS.websiteUrl;\r\n        this.kycForm.valueChanges.subscribe(this.handleValueChanges);\r\n        this.updatePackageBasketLastOffer();\r\n\r\n\r\n        if (localStorage?.getItem('step') == '2') {\r\n            this.stepsObj.currentStep = 2;\r\n            localStorage?.getItem('kycForm');\r\n            JSON.parse(localStorage?.getItem('kycForm')!);\r\n            let form = JSON.parse(localStorage?.getItem('kycForm')!);\r\n            if (form != null) {\r\n                this.kycForm.patchValue({\r\n                    step_1: form['step_1'],\r\n                    step_2: form['step_2']\r\n                });\r\n            }\r\n        }\r\n        if (localStorage?.getItem('step') == '3') {\r\n            this.stepsObj.currentStep = 3;\r\n            let form = JSON.parse(localStorage?.getItem('kycForm')!);\r\n            if (form != null) {\r\n                this.kycForm.patchValue({\r\n                    step_1: form['step_1'],\r\n                    step_2: form['step_2'],\r\n                    step_3: form['step_3']\r\n                });\r\n            }\r\n        }\r\n        if (localStorage?.getItem('step') == '4') {\r\n            this.stepsObj.currentStep = 4;\r\n            let form = JSON.parse(localStorage?.getItem('kycForm')!);\r\n            if (form != null) {\r\n                this.kycForm.patchValue({\r\n                    step_1: form['step_1'],\r\n                    step_2: form['step_2'],\r\n                    step_3: form['step_3'],\r\n                    step_4: form['step_4']\r\n                });\r\n            }\r\n\r\n        }\r\n        if (localStorage?.getItem('step') == '5') {\r\n            this.stepsObj.currentStep = 5;\r\n            let form = JSON.parse(localStorage?.getItem('kycForm')!);\r\n            if (form != null) {\r\n                this.kycForm.patchValue({\r\n                    step_1: form['step_1'],\r\n                    step_2: form['step_2'],\r\n                    step_3: form['step_3'],\r\n                    step_4: form['step_4'],\r\n                    step_5: form['step_5']\r\n                });\r\n            }\r\n        }\r\n        if (localStorage?.getItem('step') == '6') {\r\n            this.stepsObj.currentStep = 6;\r\n            let form = JSON.parse(localStorage?.getItem('kycForm')!);\r\n            if (form != null) {\r\n                this.kycForm.patchValue({\r\n                    step_1: form['step_1'],\r\n                    step_2: form['step_2'],\r\n                    step_3: form['step_3'],\r\n                    step_4: form['step_4'],\r\n                    step_5: form['step_5'],\r\n                    step_6: form['step_6']\r\n                });\r\n            }\r\n        }\r\n        if (localStorage?.getItem('step') == '7') {\r\n            this.stepsObj.currentStep = 7;\r\n            let form = JSON.parse(localStorage?.getItem('kycForm')!);\r\n            if (form != null) {\r\n                this.kycForm.patchValue({\r\n                    step_1: form['step_1'],\r\n                    step_2: form['step_2'],\r\n                    step_3: form['step_3'],\r\n                    step_4: form['step_4'],\r\n                    step_5: form['step_5'],\r\n                    step_6: form['step_6'],\r\n                    step_7: form['step_7']\r\n                });\r\n            }\r\n        }\r\n        if (this.route.snapshot.queryParams['upn']) {\r\n            // console.log(this.route.snapshot.queryParams['upn'])\r\n        }\r\n        if (localStorage?.getItem('step') == '8') {\r\n            this.stepsObj.currentStep = 7;\r\n            localStorage.setItem('step', JSON.stringify(this.stepsObj.currentStep));\r\n            let form = JSON.parse(localStorage?.getItem('kycForm')!);\r\n            if (form != null) {\r\n                this.kycForm.patchValue({\r\n                    step_1: form['step_1'],\r\n                    step_2: form['step_2'],\r\n                    step_3: form['step_3'],\r\n                    step_4: form['step_4'],\r\n                    step_5: form['step_5'],\r\n                    step_6: form['step_6'],\r\n                    step_7: form['step_7']\r\n                });\r\n\r\n            }\r\n        }\r\n        if (localStorage?.getItem('step') == '9') {\r\n            this.stepsObj.currentStep = 9;\r\n            let form = JSON.parse(localStorage?.getItem('kycForm')!);\r\n            if (form != null) {\r\n                this.kycForm.patchValue({\r\n                    step_1: form['step_1'],\r\n                    step_2: form['step_2'],\r\n                    step_3: form['step_3'],\r\n                    step_4: form['step_4'],\r\n                    step_5: form['step_5'],\r\n                    step_6: form['step_6'],\r\n                    step_7: form['step_7'],\r\n                    step_8: form['step_8'],\r\n                    step_9: form['step_9'],\r\n                });\r\n\r\n            }\r\n        }\r\n        const url = window?.location?.href;\r\n        if (url.includes('/max')) {\r\n            this.changeLogo = true;\r\n        }\r\n    }\r\n\r\n    triggerChangeDetection() {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n\r\n    stepHandler(action: StepActionType) {\r\n        if (!action) {\r\n            console.warn(`action is not provided in stepHander`);\r\n            return;\r\n        }\r\n        if(this.kycForm?.value?.step_1?.companyAcc?.countrySelected !== null && this.kycForm?.value?.step_1?.companyAcc?.countrySelected !== 'Israel')\r\n            this.stepsObj.maxSteps = EStepNumber.createPassword;\r\n        \r\n        switch (action) {\r\n            case 'NEXT':\r\n                // console.log(this.kycForm)\r\n                const step1 = this.kycForm?.value?.step_1;\r\n                const companyCountry = step1?.companyAcc?.countrySelected;\r\n                const privateCountry = step1?.privateAcc?.countrySelected;\r\n                const isCompanyCountryValid = companyCountry !== null && companyCountry !== 'Israel';\r\n                const isPrivateCountryValid = privateCountry !== null && privateCountry !== 'Israel';\r\n                const isNonIsraeli = isCompanyCountryValid || isPrivateCountryValid;\r\n                \r\n                if (this.stepsObj.currentStep >= this.stepsObj.maxSteps && isNonIsraeli) {\r\n                    if (this.stepsObj.currentStep > this.stepsObj.maxSteps) {\r\n                        console.warn(`current step was greater than the max steps \\n currenct step given ${this.stepsObj.currentStep} \\n max steps: ${this.stepsObj.maxSteps}`);\r\n                    }\r\n                    this.stepsObj.currentStep = this.stepsObj.maxSteps;\r\n                } else {\r\n                    if (this.stepsObj.currentStep == this.Esteps.phone) {\r\n                      this.stepsObj.currentStep++;\r\n                    }\r\n                    this.stepCurrent = ++this.stepsObj.currentStep;\r\n                    localStorage.setItem('step', JSON.stringify(this.stepCurrent));\r\n                    localStorage.setItem('kycForm', JSON.stringify(this.kycForm.value));\r\n                }\r\n                break;\r\n            case 'PREV':\r\n                if (this.stepsObj.currentStep <= this.stepsObj.minSteps) {\r\n                    this.stepsObj.currentStep = this.stepsObj.minSteps;\r\n                } else {\r\n                    if (this.stepsObj.currentStep == this.Esteps.createPassword) {\r\n                      this.stepsObj.currentStep--;\r\n                    }\r\n                    this.stepsObj.currentStep--;\r\n                }\r\n                break;\r\n            default:\r\n                const exhaustiveCheck: never = action;\r\n                console.error(`unhandeled action occured. ${exhaustiveCheck}`);\r\n                break;\r\n        }\r\n    }// # stepHandler\r\n\r\n    /**\r\n     * returns true is the step is valid\r\n     */\r\n    nextStepIsValid(): boolean {\r\n        switch (this.stepsObj.currentStep) {\r\n            case EStepNumber.typeOfBusiness:\r\n                return this.step1IsValid();\r\n            case EStepNumber.email:\r\n                return this.step2IsValid();\r\n            case EStepNumber.emailConfirmation:\r\n                return this.step3IsValid();\r\n            case EStepNumber.phone:\r\n                return this.step4IsValid();\r\n            case EStepNumber.phoneConfirmation:\r\n                return this.step5IsValid();\r\n            case EStepNumber.createPassword:\r\n                return this.step6IsValid();\r\n            case EStepNumber.personalDetails:\r\n                return this.step7IsValid();\r\n            case EStepNumber.personalAddress:\r\n                return this.step8IsValid();\r\n            default:\r\n                console.warn(`stepIsValid() went to default in switch case in step ${this.stepsObj.currentStep}`);\r\n                return false;\r\n        }\r\n    }\r\n    step1IsValid(): boolean {\r\n        const isBusiness = this.kycForm.controls.step_1.get('companyAcc').value;\r\n        return (isBusiness && this.kycForm.controls.step_1.get('companyAcc').valid) || (!isBusiness && this.kycForm.controls.step_1.get('privateAcc').valid);\r\n    }\r\n\r\n    step2IsValid(): boolean {\r\n        return this.step1IsValid() && this.kycForm.controls.step_2.touched && this.kycForm.controls.step_2.valid;\r\n    }\r\n\r\n    step3IsValid(): boolean {\r\n        return this.step2IsValid() && this.kycForm.controls.step_3.valid;\r\n    }\r\n\r\n    step4IsValid(): boolean {\r\n        return this.step3IsValid() && this.kycForm.controls.step_4.valid;\r\n    }\r\n\r\n    step5IsValid(): boolean {\r\n        return this.step4IsValid() && this.kycForm.controls.step_5.valid;\r\n    }\r\n\r\n    step6IsValid(): boolean {\r\n        return this.step4IsValid() && this.kycForm.controls.step_6.valid;\r\n    }\r\n\r\n    step7IsValid(): boolean {\r\n        return this.step6IsValid() && this.kycForm.controls.step_7.valid;\r\n    }\r\n\r\n    step8IsValid(): boolean {\r\n        return this.step7IsValid() && this.kycForm.controls.step_8.valid;\r\n    }\r\n\r\n    /**\r\n     * handles the content to be shown in the details component\r\n     * @param bType\r\n     */\r\n    handleDetailToShow(bType: IKycData['businessTypes']) {\r\n        this.detailsToShow.step_1.detailName = bType;\r\n    }\r\n\r\n    showError(msg: string) {\r\n        this.error.hasError = true;\r\n        this.error.msg = msg;\r\n\r\n        setTimeout(() => {\r\n            this.error.hasError = false;\r\n            this.error.msg = null;\r\n            // this.kycS.showError$.next({ hasError: false, msg: null });\r\n        }, 3000);\r\n    }// # showError\r\n\r\n    handlePreviousBtn() {\r\n        switch (this.stepsObj.currentStep) {\r\n            case EStepNumber.typeOfBusiness:\r\n                // this.auth.logout();\r\n                // window.location.href = '/login';\r\n                this.router.navigate(['/login']);\r\n                // localStorage.getItem('subSite') ?  window.location.href = localStorage.getItem('subSite') +'login'  : window.location.href = '/login';\r\n                break;\r\n            case EStepNumber.createPassword:\r\n                this.stepsObj.currentStep = EStepNumber.phone;\r\n                break;\r\n            default:\r\n                this.stepHandler('PREV');\r\n                break;\r\n        }\r\n    }\r\n\r\n\r\n    emailValue(): string {\r\n        return this.kycForm?.controls?.step_2?.get('email')?.value\r\n    }\r\n\r\n    phoneValue(): string {\r\n        const phone = this.kycForm.controls.step_4.get('phone').value;\r\n        const phoneCode = this.kycForm.controls.step_4?.get('phone_code')?.value?.toString()?.replaceAll('+', '');\r\n        return `+${phoneCode}${phone}`;\r\n    }\r\n\r\n    /**\r\n     * END GET form Values\r\n     */\r\n\r\n    handleEditValue(e: Event, action: 'EMAIL' | 'PHONE') {\r\n        e.preventDefault();\r\n        switch (action) {\r\n            case 'EMAIL':\r\n                this.stepsObj.currentStep = EStepNumber.email;\r\n                break;\r\n            case 'PHONE':\r\n                this.stepsObj.currentStep = EStepNumber.phone;\r\n                break;\r\n            default:\r\n                const exhaustiveCheck: never = action;\r\n                console.error(`unhandled action occured ${exhaustiveCheck}`);\r\n                break;\r\n        }\r\n    }\r\n\r\n    goToLogin() {\r\n        // localStorage.removeItem('kycForm')\r\n        // localStorage.removeItem('step')\r\n        this.router.navigate(['/login']);\r\n    }\r\n    passwordMatchValidator = (): ValidatorFn => {\r\n        return (control: AbstractControl): ValidationErrors | null => {\r\n            const password = control.get('password');\r\n            const confirmPassword = control.get('confirmPassword');\r\n\r\n            if (!password || !confirmPassword) {\r\n                return null;\r\n            }\r\n\r\n            if (password.value !== confirmPassword.value) {\r\n                return { passwordMismatch: true };\r\n            }\r\n\r\n            return null;\r\n        };\r\n    };\r\n    showPrevBtn(): boolean {\r\n        return this.stepsObj.currentStep < EStepNumber.phone\r\n            ||\r\n            this.stepsObj.currentStep === EStepNumber.phoneConfirmation\r\n            ||\r\n            this.stepsObj.currentStep === EStepNumber.createPassword\r\n            ||\r\n            this.stepsObj.currentStep === EStepNumber.personalAddress\r\n    }\r\n\r\n    showLoginBtn(): boolean {\r\n        return this.stepsObj.currentStep < EStepNumber.createPassword\r\n    }\r\n\r\n    showCloseBtn(): boolean {\r\n        return this.stepsObj.currentStep === EStepNumber.phone\r\n            ||\r\n            this.stepsObj.currentStep === EStepNumber.createPassword\r\n    };\r\n\r\n    /**\r\n     * fired when a value change in form\r\n     * @param newVal\r\n     */\r\n    handleValueChanges = (newVal: IKYCFormGroups) => {\r\n        const selectedAccountType: TBusinessTypes | any = newVal.step_1?.companyAcc?.isActive ? EBusinessType.companyAccount : EBusinessType.privateAccount;\r\n        this.kycS.selectedAccountType$.next(selectedAccountType);\r\n        // Step #1 is valid validations\r\n            this.kycS.stepOneValidations(newVal, this.kycForm);\r\n        // END Step #1 is valid validations\r\n\r\n    };//#handleValueChanges\r\n\r\n    tryAgain() {\r\n        this.codeStatus = 'DEFAULT';\r\n        this.kycS.errorOverlayTryAgainClicked$.next(true);\r\n    }\r\n\r\n    /**\r\n     * when form submitted this method occur\r\n     */\r\n    handleSubmit() {\r\n        // console.log(`form submitted!`, this.kycForm);\r\n    };// #handleSubmit\r\n\r\n    ngOnDestroy() {\r\n        this.componentDestroyed.next(null);\r\n        this.componentDestroyed.complete();\r\n    }\r\n\r\n    updatePackageBasketLastOffer() {\r\n        // 1 get email + basketId from URL\r\n        // 2 update table in DB\r\n        let activatedRoute = this.route.snapshot.params;\r\n        if (activatedRoute['basketId']) {\r\n\r\n        }\r\n    }\r\n\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"../../../assets/scss/variable\";\r\n@import \"../../../assets/scss/mixins\";\r\n\r\n::ng-deep {\r\n    .content-wrapper {\r\n        padding: unset !important;\r\n        background: linear-gradient(0deg, #FFF 0%, #FFF 100%), #F5F7FA;\r\n    }\r\n}\r\n.app-kyc-container {\r\n    min-height: 100vh;\r\n}\r\n.kyc-wrapper {\r\n    background-repeat: no-repeat;\r\n    background-position: center;\r\n    background-size: cover;\r\n    margin: 0;\r\n    color:#111827;\r\n    font-family: $he_heebo;\r\n\r\n    .kyc-language-wrapper {\r\n        position: absolute;\r\n        top: 3rem;\r\n        right: 5rem;\r\n    }\r\n    .kyc-left{\r\n        .kyc-top{\r\n            .logo-img{\r\n                width: 100%;\r\n                max-width: 124px;\r\n                height: auto;\r\n            }\r\n        }\r\n    }\r\n}\r\n.title {\r\n    font-size:26px;\r\n    font-weight: 700;\r\n    color:#111827;\r\n    margin: 0 0 14px;\r\n    @media screen and (max-width: 1440px) {\r\n        font-size: 20px;\r\n    }\r\n    @media screen and (max-width: 1024px) {\r\n        font-size: 18px;    \r\n    }\r\n    @media screen and (max-width: 768px) {\r\n        font-size: 16px;        \r\n    }\r\n}\r\n.kyc {\r\n    $root: &;\r\n    @include respond(lg) {\r\n        margin: 0 2rem;\r\n    }\r\n\r\n    &-wrapper {\r\n        display: flex;\r\n        align-items: stretch;\r\n        @include respond(lg) {\r\n            flex-direction: column;\r\n        }\r\n\r\n        & kyc-one {\r\n            mat-form-field {\r\n                text-align: right;\r\n            }\r\n        }\r\n\r\n        kyc-phone {\r\n            .kyc-phone {\r\n                background-color: red;\r\n            }\r\n        }\r\n\r\n        sms-verification {\r\n            .form-group-input-wrapper {\r\n                direction: ltr;\r\n                justify-content: end;\r\n            }\r\n        }\r\n\r\n        kyc-create-password {\r\n            input {\r\n                direction: ltr;\r\n                text-align: left;\r\n            }\r\n        }\r\n\r\n        kyc-personal-details {\r\n            & .custom-input--with-icon mat-datepicker-toggle {\r\n                left: 2rem;\r\n                right: unset;\r\n            }\r\n        }\r\n\r\n        .mat-expansion-panel {\r\n            .inner-radio-button {\r\n                .at-icon + div {\r\n                    text-align: right !important;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    &-top {\r\n        display: flex;\r\n        align-items: center;\r\n        justify-content: space-between;\r\n        margin-bottom: 5rem;\r\n    }\r\n\r\n    &-left {\r\n        position: relative;\r\n        min-height: 100vh;\r\n        flex: 60%;\r\n        padding: 3rem;\r\n        @include respond(lg) {\r\n            min-height: 60vh;\r\n            padding: 1rem;\r\n        }\r\n\r\n        .login-wrapper {\r\n            display: inline-flex;\r\n            position: absolute;\r\n            left: 50%;\r\n            bottom: 3%;\r\n            transform: translateX(-50%);\r\n            font-size: 16px;\r\n            color:#111827;\r\n            font-weight: 300;\r\n            & * {\r\n                font-size: 14px;\r\n            }\r\n\r\n            @include respond(lg) {\r\n                display: none;\r\n            }\r\n\r\n            & .login-link {\r\n                margin-left: 20px;\r\n                font-weight: 500;\r\n                color: #111827;\r\n                text-decoration: none;\r\n\r\n                @media screen and (max-width: 1440px) {\r\n                    margin-left: 10px;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    &-form-section {\r\n        width:700px;\r\n        margin: 0 auto;\r\n        border: 1px solid #e2e2e2;\r\n        border-radius: 17px;\r\n        background-color: #fff;\r\n        // padding: 5rem 0;\r\n        padding: 14px 10px;\r\n        position: relative;\r\n\r\n        @include respond(lg) {\r\n            max-width: 95%;\r\n            width: auto;\r\n        }\r\n\r\n        &.emailConfirmation,\r\n        &.phoneConfirmation {\r\n            #{$root}-headlines {\r\n                a.action-anchor {\r\n                    //color       : $color-white !important;\r\n                    font-weight: 700;\r\n                }\r\n            }\r\n\r\n            #{$root}-h--2 {\r\n                margin-bottom: 1.2rem;\r\n            }\r\n\r\n            #{$root}-ah--2 {\r\n            }\r\n\r\n            & ::ng-deep .disclaimer {\r\n                margin-top: 37px;\r\n                text-align: center;\r\n                .action-anchor{\r\n                    margin: 0 0 0 22px;\r\n                }\r\n                @media screen and (max-width: 1440px) {\r\n                    margin-top: 27px;\r\n                    .action-anchor{\r\n                        margin: 0 0 0 16px;\r\n                    }\r\n                }\r\n                @media screen and (max-width: 1024px) {\r\n                    margin-top: 17px;\r\n                    .action-anchor{\r\n                        margin: 0 0 0 10px;\r\n                    }\r\n                }\r\n\r\n                & .mat-checkbox-label {\r\n                    @include respond(lg) {\r\n                        line-height: 1;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        ::ng-deep .fields-wrapper {\r\n            // max-width: 70%;\r\n            margin: 0 auto;\r\n\r\n            @include respond(lg) {\r\n                max-width: 100%;\r\n            }\r\n\r\n            & > *:not(:last-child) {\r\n                margin-bottom: 2rem;\r\n            }\r\n        }\r\n\r\n        ::ng-deep .grouped-fields {\r\n            display: flex;\r\n\r\n            & > * {\r\n                flex: 0 0 49%;\r\n\r\n                &:not(:last-child) {\r\n                    margin-inline-end: 2%;\r\n                }\r\n            }\r\n        }\r\n        &.createPassword,&.personalDetails {\r\n            padding-bottom: 40px;\r\n        }\r\n    }\r\n\r\n    &-headlines {\r\n        text-align: center;\r\n\r\n        & #{$root}-h--1,\r\n        & #{$root}-h--2 {\r\n            position: relative;\r\n        }\r\n    }\r\n}\r\n.loader-wrapper {\r\n    position: relative;\r\n    .loader {\r\n        &.section-loader {\r\n            position: absolute;\r\n            top: 50%;\r\n            left: 50%;\r\n            transform: translate(-50%, -50%);\r\n            width: 100%;\r\n            height: 100%;\r\n            justify-content: center;\r\n            background-color: rgba(255, 255, 255, 0.7) !important;\r\n            z-index: 999;\r\n        }\r\n    }\r\n}\r\n\r\n.kyc-p--1 {\r\n    font-weight:300;\r\n    line-height:normal;\r\n    color: #111827;\r\n    font-size:16px;\r\n    opacity: 0.6;\r\n    @media screen and (max-width: 1440px) {\r\n        font-size: 14px;\r\n    }\r\n}\r\n.desc-m{\r\n    margin: 0 0 4px;\r\n}\r\n.desc-m-2{\r\n    margin: 0 0 7px;\r\n}\r\n.m-b-step1{\r\n    margin: 0 0 38px;\r\n    @media screen and (max-width: 1440px) {\r\n        margin: 0 0 28px;\r\n    }\r\n    @media screen and (max-width: 1024px) {\r\n        margin: 0 0 18px;       \r\n    }\r\n    @media screen and (max-width: 768px) {\r\n        margin: 0 0 8px;            \r\n    }\r\n}\r\n.m-b-step4{\r\n    margin: 0 0 35px;\r\n    @media screen and (max-width: 1440px) {\r\n        margin: 0 0 25px;\r\n    }\r\n    @media screen and (max-width: 1024px) {\r\n        margin: 0 0 15px;       \r\n    }\r\n}\r\n\r\n.kyc-form {\r\n    // max-width: 70%;\r\n    margin: 0 auto;\r\n}\r\n.kyc-form-section {\r\n    padding-bottom:76px;\r\n    @media screen and (max-width:1024px) {\r\n        padding-bottom:20px;\r\n    }\r\n}\r\n.confirmation-incorrect {\r\n    position: fixed;\r\n    z-index: 10;\r\n    width: 100vw;\r\n    height: 100vh;\r\n    top: 0;\r\n    left: 0;\r\n    background: #fff;\r\n\r\n    & .container {\r\n        height: 100%;\r\n    }\r\n\r\n    &__wrapper {\r\n        max-width: 40%;\r\n        height: 100%;\r\n        display: flex;\r\n        flex-direction: column;\r\n        justify-content: center;\r\n\r\n        ::ng-deep {\r\n            mat-icon {\r\n                $mat-icon-size: 10rem;\r\n                font-size: $mat-icon-size;\r\n                width: $mat-icon-size;\r\n                height: $mat-icon-size;\r\n            }\r\n        }\r\n    }\r\n\r\n    &__close {\r\n        left: unset;\r\n        // right: $fixed-items-unit;\r\n    }\r\n}\r\n",
                    "styleUrl": "./kyc-main.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "kycS",
                        "type": "KycService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "document",
                        "type": "Document",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 67,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "kycS",
                        "type": "KycService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "document",
                        "type": "Document",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<main class=\"app-kyc-container\">\r\n\r\n    <section class=\"row kyc-wrapper\">\r\n        <div class=\"kyc-left\">\r\n\r\n            <div class=\"kyc-top\">\r\n                <img class=\"logo-img\" src=\"images/abcm-logo.svg\" alt=\"okooora logo\" />\r\n            </div>\r\n\r\n            <section class=\"kyc-form-section loader-wrapper\" [ngClass]=\"{\r\n                'typeOfBusiness': stepsObj.currentStep === Esteps.typeOfBusiness,\r\n                'email': stepsObj.currentStep === Esteps.email,\r\n                'emailConfirmation': stepsObj.currentStep === Esteps.emailConfirmation,\r\n                'phone': stepsObj.currentStep === Esteps.phone,\r\n                'phoneConfirmation': stepsObj.currentStep === Esteps.phoneConfirmation,\r\n                'createPassword': stepsObj.currentStep === Esteps.createPassword,\r\n                'personalDetails': stepsObj.currentStep === Esteps.personalDetails,\r\n                'personalAddress': stepsObj.currentStep === Esteps.personalAddress\r\n            }\">\r\n                <button (click)=\"handlePreviousBtn()\" id=\"back-to-website\">\r\n                    <img class=\"logo-img\" src=\"images/back-kyc.svg\" alt=\"back\" />\r\n                </button>\r\n            \r\n                <ng-container [ngSwitch]=\"stepsObj.currentStep\">\r\n                    <article class=\"kyc-headlines step--{{stepsObj.currentStep}}\" [ngClass]=\"stepsObj.currentStep == 4 ? 'px-4' : 'px-5'\">\r\n                        <ng-container *ngSwitchCase=\"Esteps.typeOfBusiness\">\r\n                            <h1 class=\"title\"> {{ 'KYC_Step_' + stepsObj.currentStep + '.title' | translate }} </h1>\r\n                            <p class=\"kyc-p--1\">{{ 'KYC_Step_' + stepsObj.currentStep + '.p_1' | translate }}</p>\r\n                            <p class=\"kyc-p--1 m-b-step1\">{{ 'KYC_Step_' + stepsObj.currentStep + '.p_2' | translate }}</p>\r\n                        </ng-container>\r\n                        <ng-container *ngSwitchCase=\"Esteps.email\">\r\n                            <h1 class=\"title\">\r\n                                {{ 'KYC_Step_' + stepsObj.currentStep + (accountType === EBusinessType.companyAccount ?\r\n                                '.titleCompany' : '.titlePrivate') | translate }}\r\n                            </h1>\r\n                            <p class=\"kyc-p--1 m-b-step1\">{{ 'KYC_Step_' + stepsObj.currentStep + '.p_1' | translate }}</p>\r\n\r\n                            <p class=\"kyc-p--1\">{{ 'KYC_Step_' + stepsObj.currentStep + '.p_2' | translate }}</p>\r\n                        </ng-container>\r\n\r\n                        <ng-container *ngSwitchCase=\"Esteps.emailConfirmation\">\r\n                            <h1 class=\"title\">\r\n                                <button *ngIf=\"showPrevBtn()\" class=\"action-btn in-title--mobile\"\r\n                                    (click)=\"handlePreviousBtn()\">\r\n                                    <span class=\"fas fa-chevron-left\"></span>\r\n                                </button>\r\n                                {{ 'KYC_Step_' + stepsObj.currentStep + '.title' | translate }}\r\n                            </h1>\r\n                            <!-- <h3 class=\"kyc-h--3 email mb-2\">{{emailValue()}}</h3> -->\r\n                            <p class=\"kyc-p--1 desc-m\">\r\n                                {{ 'KYC_Step_' + stepsObj.currentStep + '.p_1' | translate }}\r\n                            </p>\r\n                            <p class=\"kyc-p--1 desc-m-2\">\r\n                                {{ 'KYC_Step_' + stepsObj.currentStep + '.p_2' | translate }}\r\n                                <a class=\"edit-email action-anchor\" (click)=\"handleEditValue($event, 'EMAIL')\">\r\n                                    {{ 'KYC_Step_' + stepsObj.currentStep + '.edit_email' | translate }}\r\n                                </a>\r\n                            </p>\r\n                        </ng-container>\r\n\r\n                        <ng-container *ngSwitchCase=\"Esteps.phone\">\r\n                            <h1 class=\"title\">\r\n                                {{ 'KYC_Step_' + stepsObj.currentStep + '.title' | translate }}\r\n                            </h1>\r\n                            <p class=\"kyc-p--1 m-b-step4\">{{ 'KYC_Step_' + stepsObj.currentStep + '.p_1' | translate }}</p>\r\n                            <p class=\"kyc-p--1\">{{ 'KYC_Step_' + stepsObj.currentStep + '.p_2' | translate }}</p>\r\n                        </ng-container>\r\n\r\n                        <ng-container *ngSwitchCase=\"Esteps.phoneConfirmation\">\r\n                            <h1 class=\"title\">\r\n                                <button *ngIf=\"showPrevBtn()\" class=\"action-btn in-title--mobile\"\r\n                                    (click)=\"handlePreviousBtn()\">\r\n                                    <span class=\"fas fa-chevron-left\"></span>\r\n                                </button>\r\n                                {{ 'KYC_Step_' + stepsObj.currentStep + '.title' | translate }}\r\n                            </h1>\r\n                            <h3 class=\"kyc-h--3 phone\">{{phoneValue()}}</h3>\r\n                            <p class=\"kyc-p--1 m-0\">\r\n                                {{ 'KYC_Step_' + stepsObj.currentStep + '.p_1' | translate }}\r\n                            </p>\r\n                            <p class=\"kyc-p--1 m-0\">\r\n                                {{ 'KYC_Step_' + stepsObj.currentStep + '.p_2' | translate }}\r\n                                <a class=\"edit-phone action-anchor\" (click)=\"handleEditValue($event, 'PHONE')\">\r\n                                    {{ 'KYC_Step_' + stepsObj.currentStep + '.edit_phone' | translate }}\r\n                                </a>\r\n                            </p>\r\n                        </ng-container>\r\n\r\n                        <ng-container *ngSwitchCase=\"Esteps.createPassword\">\r\n                            <h1 class=\"title\">\r\n                                {{ 'KYC_Step_' + stepsObj.currentStep + '.title' | translate }}\r\n                            </h1>\r\n                            <p class=\"kyc-p--1 m-b-step4\">{{ 'KYC_Step_' + stepsObj.currentStep + '.p_1' | translate }}</p>\r\n                            <p class=\"kyc-p--1\">{{ 'KYC_Step_' + stepsObj.currentStep + '.p_2' | translate }}</p>\r\n                        </ng-container>\r\n\r\n                        <ng-container *ngSwitchCase=\"Esteps.personalDetails\">\r\n                            <h1 class=\"title\">\r\n                                {{ 'KYC_Step_' + stepsObj.currentStep + '.title' | translate }}\r\n                            </h1>\r\n                            <p class=\"kyc-p--1 m-b-step4\">{{ 'KYC_Step_' + stepsObj.currentStep + '.p_1' | translate }}</p>\r\n                            <p class=\"kyc-p--1\">{{ 'KYC_Step_' + stepsObj.currentStep + '.p_2' | translate }}</p>\r\n                        </ng-container>\r\n\r\n                        <ng-container *ngSwitchDefault>\r\n                            <h1 class=\"title\">\r\n                                <!-- <button *ngIf=\"showPrevBtn()\" class=\"action-btn in-title--mobile\"\r\n                                    (click)=\"handlePreviousBtn()\">\r\n                                    <span class=\"fas fa-chevron-left\"></span>\r\n                                </button> -->\r\n                                {{ 'KYC_Step_' + stepsObj.currentStep + '.title' | translate }}\r\n                            </h1>\r\n                            <p class=\"kyc-p--1 m-b-step4\">{{ 'KYC_Step_' + stepsObj.currentStep + '.p_1' | translate }}</p>\r\n                            <p class=\"kyc-p--1\">{{ 'KYC_Step_' + stepsObj.currentStep + '.p_2' | translate }}</p>\r\n                        </ng-container>\r\n                    </article>\r\n                </ng-container>\r\n\r\n                <div>\r\n                    <div class=\"error-box alert alert-danger\" role=\"alert\" [ngClass]=\"{\r\n                        'd-none': !error.hasError && !error.msg,\r\n                        'd-block': error.hasError || error.msg\r\n                    }\" [ngStyle]=\"{'visibility': (!error.hasError && !error.msg) ? 'hidden' : 'visible'}\">\r\n                        <mat-icon fontSet=\"fontawesome\" fontIcon=\"fa-exclamation-triangle\"></mat-icon>\r\n                        {{error.msg}}\r\n                    </div>\r\n                </div>\r\n\r\n                <form #kycFormRef class=\"kyc-form\" [ngClass]=\"{\r\n                    'light-form': stepsObj.currentStep !== Esteps.typeOfBusiness\r\n                }\" [formGroup]=\"kycForm\" (keydown.enter)=\"$event.preventDefault()\"\r\n                    autocomplete=\"off\">\r\n                    <div [ngSwitch]=\"stepsObj.currentStep\">\r\n                        <ng-container *ngSwitchCase=\"Esteps.typeOfBusiness\">\r\n                            <app-kyc-one [parentFormGroup]=\"kycForm\" [kycForm]=\"kycForm\" [stepsObj]=\"stepsObj\"\r\n                                (nextStepEvent)=\"stepHandler($event)\"\r\n                                (activatedBusinessType)=\"handleDetailToShow($event)\">\r\n                            </app-kyc-one>\r\n                        </ng-container>\r\n\r\n                        <ng-container *ngSwitchCase=\"Esteps.email\">\r\n                            <app-kyc-two [parentFormGroup]=\"kycForm\" [kycForm]=\"kycForm\" [stepsObj]=\"stepsObj\"\r\n                                (nextStepEvent)=\"stepHandler($event)\">\r\n                            </app-kyc-two>\r\n                        </ng-container>\r\n                        <ng-container *ngSwitchCase=\"Esteps.emailConfirmation\">\r\n                            <kyc-email-confirm [parentFormGroup]=\"kycForm\" [kycForm]=\"kycForm\" [stepsObj]=\"stepsObj\"\r\n                                (nextStepEvent)=\"stepHandler($event)\">\r\n                            </kyc-email-confirm>\r\n                        </ng-container>\r\n                        <ng-container *ngSwitchCase=\"Esteps.phone\">\r\n                            <kyc-phone [parentFormGroup]=\"kycForm\" [kycForm]=\"kycForm\" [stepsObj]=\"stepsObj\"\r\n                                (nextStepEvent)=\"stepHandler($event)\" [nextStepIsValid]=\"nextStepIsValid\">\r\n                            </kyc-phone>\r\n                        </ng-container>\r\n                        \r\n                        <ng-container *ngSwitchCase=\"Esteps.createPassword\">\r\n                            <kyc-create-password [parentFormGroup]=\"kycForm\" [kycForm]=\"kycForm\" [stepsObj]=\"stepsObj\"\r\n                                (nextStepEvent)=\"stepHandler($event)\" (loginEvent)=\"goToLogin()\">\r\n                            </kyc-create-password>\r\n                        </ng-container>\r\n                        <ng-container *ngSwitchCase=\"Esteps.personalDetails\">\r\n                            <kyc-personal-details [parentFormGroup]=\"kycForm\" [kycForm]=\"kycForm\" [stepsObj]=\"stepsObj\"\r\n                                (nextStepEvent)=\"stepHandler($event)\">\r\n                            </kyc-personal-details>\r\n                        </ng-container>\r\n                        <ng-container *ngSwitchCase=\"Esteps.personalAddress\">\r\n                            <kyc-address [parentFormGroup]=\"kycForm\" [kycForm]=\"kycForm\" [stepsObj]=\"stepsObj\"\r\n                                (nextStepEvent)=\"stepHandler($event)\" (loginEvent)=\"goToLogin()\">\r\n                            </kyc-address>\r\n                        </ng-container>\r\n                        <!-- <ng-container *ngSwitchCase=\"Esteps.phoneConfirmation\">\r\n                            <kyc-phone-confirm [parentFormGroup]=\"kycForm\" [kycForm]=\"kycForm\" [stepsObj]=\"stepsObj\"\r\n                                (nextStepEvent)=\"stepHandler($event)\">\r\n                            </kyc-phone-confirm>\r\n                        </ng-container>\r\n                         -->\r\n                    </div>\r\n\r\n                </form>\r\n\r\n                <article class=\"login-wrapper\" *ngIf=\"showLoginBtn()\">\r\n                    <a class=\"faq-p--1\" [href]=\"faqUrl\" target=\"_blank\" rel=\"noopener noreferrer\">{{ 'KYC.FAQ' |\r\n                        translate}}</a>\r\n                    &nbsp;\r\n                    /\r\n                    &nbsp;\r\n                    <p class=\"login-p--1 m-0\">\r\n                        {{ 'KYC.alreadyHaveAccount' | translate}}\r\n                        <a class=\"login-link\" (click)=\"goToLogin()\" id=\"login-btn\">{{ 'KYC.SignIn' | translate}}</a>\r\n                    </p>\r\n                </article>\r\n            </section>\r\n        </div>\r\n    </section>\r\n</main>"
        },
        {
            "name": "KycOneComponent",
            "id": "component-KycOneComponent-3b09cdfc890d15d10f818d038f757dc94c67596b6410dfdaee10f077050768497f27c96591fa08aa077cfca8addf7179bce997d4a95c6882fa6e9a9eee6e3798",
            "file": "src/app/sign-up/kyc-one/kyc-one.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-kyc-one",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./kyc-one.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "kycForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "parentFormGroup",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "FormGroup",
                    "decorators": []
                },
                {
                    "name": "stepsObj",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "IStepsObj",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "activatedBusinessType",
                    "defaultValue": "new EventEmitter<IKycData['businessTypes']>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "EventEmitter"
                },
                {
                    "name": "nextStepEvent",
                    "defaultValue": "new EventEmitter<StepActionType>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "businessTypes",
                    "defaultValue": "EBusinessType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "businessTypesCompanyAccount",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "businessTypesPrivateAccount",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "componentDestroyed",
                    "defaultValue": "new Subject<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "countryName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "privateCountryNotIsrael",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "step_1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 30
                }
            ],
            "methodsClass": [
                {
                    "name": "canClickNextStep",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 100,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "handleBusinessTypeChange",
                    "args": [
                        {
                            "name": "panel",
                            "type": "MatExpansionPanel",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "fgName",
                            "type": "IKycData",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "panel",
                            "type": "MatExpansionPanel",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "fgName",
                            "type": "IKycData",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleNextStep",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 78,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 104,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "MatExpansionModule",
                    "type": "module"
                },
                {
                    "name": "FormsModule",
                    "type": "module"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                },
                {
                    "name": "MatError"
                },
                {
                    "name": "TranslateModule",
                    "type": "module"
                },
                {
                    "name": "SelectCountryComponent",
                    "type": "component"
                },
                {
                    "name": "MatRadioGroup"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, EventEmitter, Input, Output} from '@angular/core';\r\nimport {AbstractControl, FormGroup, FormsModule, ReactiveFormsModule, Validators} from '@angular/forms';\r\nimport {MatExpansionModule, MatExpansionPanel} from '@angular/material/expansion';\r\nimport {Subject} from 'rxjs';\r\nimport {EBusinessType, EDetailsToShowNames, IKycData, IStepsObj} from '../models';\r\n// import {KycService} from '../services/kyc.service';\r\nimport {StepActionType} from '../types/global.type';\r\n// import { onlyValidIdNumber } from '../../shared/custom-validators';\r\nimport { CommonModule } from '@angular/common';\r\nimport { MatError } from '@angular/material/select';\r\nimport { TranslateModule } from '@ngx-translate/core';\r\nimport { SelectCountryComponent } from '../fields/select-country/select-country.component';\r\nimport { MatRadioGroup } from '@angular/material/radio';\r\nimport { KycService } from '../services/kyc.service';\r\n\r\n@Component({\r\n  selector: 'app-kyc-one',\r\n  imports: [CommonModule,MatExpansionModule,FormsModule,ReactiveFormsModule,MatError,TranslateModule, SelectCountryComponent, MatRadioGroup],\r\n  templateUrl: './kyc-one.component.html',\r\n  styleUrl: './kyc-one.component.scss'\r\n})\r\nexport class KycOneComponent {\r\n  componentDestroyed = new Subject<any>();\r\n  @Input('parentFormGroup') parentFormGroup!: FormGroup;\r\n  @Input('kycForm') kycForm: any;\r\n  @Input('stepsObj') stepsObj!: IStepsObj;\r\n  @Output('nextStepEvent') nextStepEvent = new EventEmitter<StepActionType>();\r\n  @Output('activatedBusinessType') activatedBusinessType = new EventEmitter<IKycData['businessTypes']>();\r\n  businessTypes = EBusinessType;\r\n  step_1!: FormGroup;\r\n  businessTypesCompanyAccount!: FormGroup;\r\n  businessTypesPrivateAccount!: FormGroup;\r\n  privateCountryNotIsrael: boolean = false;\r\n  countryName: any;\r\n\r\n  constructor(\r\n    private KycS: KycService,\r\n  ) {\r\n  }\r\n  ngOnInit(): void {\r\n    this.step_1 = <FormGroup>this.kycForm.get('step_1');\r\n    this.businessTypesCompanyAccount = <FormGroup>this.kycForm.get('step_1').get(this.businessTypes.companyAccount)\r\n    this.businessTypesPrivateAccount = <FormGroup>this.kycForm.get('step_1').get(this.businessTypes.privateAccount)\r\n  }\r\n\r\n  handleBusinessTypeChange(panel: MatExpansionPanel, fgName: IKycData['businessTypes']) {\r\n    this.KycS.handleResetCountries$.next(true);\r\n    if (fgName === EDetailsToShowNames.privateAcc) {\r\n      this.kycForm.controls['step_7'].get('id_number').addValidators([Validators.required]);\r\n    }\r\n\r\n    if (fgName === EDetailsToShowNames.companyAcc) {\r\n      this.kycForm.controls['step_7'].get('id_number').setValidators(null);\r\n      this.kycForm.controls['step_7'].get('id_number').setErrors(null);\r\n      this.kycForm.controls['step_7'].get('id_number').updateValueAndValidity();\r\n    }\r\n\r\n    const groupSelected = this.kycForm.controls.step_1.get(fgName);\r\n    if (!groupSelected) {\r\n      console.error(`group didnt found given ${groupSelected} \\n form group name given ${fgName}`);\r\n      return;\r\n    }\r\n\r\n    Object.keys(this.kycForm.controls.step_1['controls']).forEach(bt => {\r\n      const currentBusiness:any = (<AbstractControl>this.kycForm.controls.step_1['controls'][bt]);\r\n\r\n      currentBusiness.reset();\r\n\r\n      currentBusiness.get('isActive').setValue(null);\r\n      if (bt !== EBusinessType.invitedAccount) {\r\n        currentBusiness.get('countrySelected').setValue(null);\r\n      }\r\n    });\r\n    this.kycForm.controls.step_1.get(fgName).get('isActive').setValue(panel.expanded);\r\n    this.activatedBusinessType.next(fgName)\r\n  }\r\n\r\n  handleNextStep() {\r\n   this.privateCountryNotIsrael = false;\r\n    if(this.kycForm?.value?.step_1?.companyAcc?.countrySelected != null){\r\n      if(this.kycForm?.value?.step_1?.companyAcc?.countrySelected){\r\n        this.nextStepEvent.next('NEXT');\r\n      }else{\r\n        localStorage.removeItem('kycForm')\r\n        localStorage.setItem('step', JSON.stringify(1));\r\n      }\r\n    }else{    \r\n      if(this.kycForm?.value?.step_1?.privateAcc?.countrySelected != null && this.kycForm?.value?.step_1?.privateAcc?.countrySelected !='Israel'){\r\n        if(this.countryName === null || this.countryName === undefined){\r\n          this.countryName = this.kycForm?.value?.step_1?.privateAcc?.countrySelected\r\n          // this.KycS.PrivateKYCCountry(this.countryName).subscribe();\r\n        }\r\n        this.privateCountryNotIsrael = true;        \r\n      } else {\r\n        this.nextStepEvent.next('NEXT');\r\n      }\r\n    }\r\n  }\r\n\r\n  canClickNextStep(): boolean {\r\n    return this.kycForm.get('step_1')?.valid;\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.componentDestroyed.next(null);\r\n    this.componentDestroyed.complete();\r\n  };\r\n}\r\n",
            "styleUrl": "./kyc-one.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "KycS",
                        "type": "KycService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 34,
                "jsdoctags": [
                    {
                        "name": "KycS",
                        "type": "KycService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<ng-container *ngIf=\"parentFormGroup\" [formGroup]=\"parentFormGroup\">\r\n    <ng-container [formGroup]=\"step_1\">\r\n      <mat-accordion class=\"at__accordion px-md-5\" [multi]=\"false\">\r\n        <mat-expansion-panel class=\"mb-0\" #panel1\r\n          [expanded]=\"kycForm.get('step_1').get(businessTypes.companyAccount).value.isActive\"\r\n          [formGroup]=\"businessTypesCompanyAccount\">\r\n          <mat-expansion-panel-header (click)=\"handleBusinessTypeChange(panel1, businessTypes.companyAccount)\">\r\n            <mat-panel-title class=\"kyc-ah--1\">\r\n              <mat-radio-group>\r\n                <input type=\"checkbox\" style=\"display: none\" />\r\n                <div class=\"d-flex flex-column align-items-center justify-content-center text-center justify-content-center d-md-none\"\r\n                  (click)=\"handleBusinessTypeChange(panel1, businessTypes.companyAccount)\">\r\n                  <img class=\"at-icon mb-4\" src=\"images/suitcase-bag.svg\" alt=\"company icon\">\r\n                  <h3 class=\"at-title at-ah--1 mb-4\">{{ 'KYC_Step_1.companyAcc.title' | translate}}</h3>\r\n                  <p class=\"at-description at-p--1\">{{ 'KYC_Step_1.companyAcc.description' | translate}}\r\n                  </p>\r\n                </div>\r\n                <div class=\"inner-radio-button d-none d-md-flex align-items-start\"\r\n                  (click)=\"handleBusinessTypeChange(panel1, businessTypes.companyAccount)\">\r\n                  <img class=\"at-icon\" src=\"images/suitcase-bag.svg\" alt=\"company icon\">\r\n                  <div class=\"inner-radio-btn-texts\">\r\n                    <h3 class=\"at-title at-ah--1\">{{ 'KYC_Step_1.companyAcc.title' | translate}}</h3>\r\n                    <p class=\"at-description at-p--1\">{{ 'KYC_Step_1.companyAcc.description' | translate}}</p>\r\n                  </div>\r\n                </div>\r\n              </mat-radio-group>\r\n            </mat-panel-title>\r\n          </mat-expansion-panel-header>\r\n          <app-select-country [kycForm]=\"kycForm\" [specialClasses]=\"'custom-mat-form-field--1'\"\r\n            [currentFormGroup]=\"businessTypesCompanyAccount\" [currentformControlName]=\"'countrySelected'\"\r\n            [matLabelTranslation]=\"'KYC_Step_1.companyAcc.field_label' | translate\" >\r\n          </app-select-country>\r\n          <button  type=\"button\" [class.disabled]=\"!kycForm.get('step_1').valid\" [disabled]=\"!kycForm.get('step_1').valid\" mat-raised-button color=\"primary\"\r\n            class=\"continue-btn\" (click)=\"handleNextStep()\" id=\"kyc-one-continue-btn--1\">\r\n            {{ 'KYC.Continue' | translate}}\r\n          </button>\r\n        </mat-expansion-panel>\r\n        <hr>\r\n        <mat-expansion-panel class=\"mb-0\" #panel2 [formGroup]=\"businessTypesPrivateAccount\"\r\n          [expanded]=\"kycForm.get('step_1').get(businessTypes.privateAccount).value.isActive\">\r\n          <mat-expansion-panel-header (click)=\"handleBusinessTypeChange(panel2, businessTypes.privateAccount)\">\r\n            <mat-panel-title class=\"kyc-ah--1\">\r\n              <mat-radio-group formControlName=\"isActive\">\r\n                <input type=\"checkbox\" style=\"display: none\" />\r\n                <div class=\"d-flex flex-column align-items-center justify-content-center text-center d-md-none\"\r\n                (click)=\"handleBusinessTypeChange(panel2, businessTypes.privateAccount)\">\r\n                  <img class=\"at-icon mb-4\" src=\"images/private-icon.svg\" alt=\"private icon\">\r\n                  <h3 class=\"at-title at-ah--1 mb-4\">{{ 'KYC_Step_1.privateAcc.title' | translate}}</h3>\r\n                  <span class=\"at-description at-p--1\">{{ 'KYC_Step_1.privateAcc.description' | translate}}</span>\r\n                </div>\r\n                <div  (click)=\"handleBusinessTypeChange(panel2, businessTypes.privateAccount)\" class=\"inner-radio-button d-none d-md-flex align-items-start\">\r\n                  <img class=\"at-icon\" src=\"images/private-icon.svg\" alt=\"private icon\">\r\n                  <div class=\"inner-radio-btn-texts\">\r\n                    <h3 class=\"at-title at-ah--1\">{{ 'KYC_Step_1.privateAcc.title' | translate}}</h3>\r\n                    <p class=\"at-description at-p--1\">{{ 'KYC_Step_1.privateAcc.description' |translate}}</p>\r\n                  </div>\r\n                </div>\r\n              </mat-radio-group>\r\n            </mat-panel-title>\r\n          </mat-expansion-panel-header>\r\n          <app-select-country [kycForm]=\"kycForm\" [specialClasses]=\"'custom-mat-form-field--1'\"\r\n            [currentFormGroup]=\"businessTypesPrivateAccount\" [currentformControlName]=\"'countrySelected'\"\r\n            [matLabelTranslation]=\"'KYC_Step_1.privateAcc.field_label' | translate\">\r\n        </app-select-country>\r\n        <mat-error *ngIf=\"privateCountryNotIsrael\" [style]=\"'font-size:13px; transform: translateY(-56%);'\">\r\n          {{ 'KYC_Step_1.privateAcc.country_not_from_israel' | translate}}\r\n          </mat-error>\r\n          <button [class.disabled]=\"!kycForm.get('step_1').valid\" [disabled]=\"!kycForm.get('step_1').valid\" type=\"button\" mat-raised-button color=\"primary\"\r\n            class=\"continue-btn\" (click)=\"handleNextStep()\" id=\"kyc-one-continue-btn--2\">\r\n            {{ 'KYC.Continue' | translate}}\r\n          </button>\r\n        </mat-expansion-panel><!-- # PRIVATE ACCOUNT Panel-->\r\n      </mat-accordion>\r\n    </ng-container>\r\n  </ng-container>"
        },
        {
            "name": "KycPersonalDetailsComponent",
            "id": "component-KycPersonalDetailsComponent-f6bc4649c16fb1bbc3ed6a0f89c94dfb8c54912274ebc5903d498e8d8c7b5731d8a346773026ebe821fdb8786ef15b505560475734c0ba615ab3e23bb102b44e",
            "file": "src/app/sign-up/kyc-personal-details/kyc-personal-details.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "DatePipe",
                    "type": "pipe"
                },
                {
                    "name": "provideNativeDateAdapter()"
                }
            ],
            "selector": "kyc-personal-details",
            "styleUrls": [
                "./kyc-personal-details.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./kyc-personal-details.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "kycForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 50,
                    "type": "FormGroup",
                    "decorators": []
                },
                {
                    "name": "parentFormGroup",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 48,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "stepsObj",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 51,
                    "type": "IStepsObj",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "nextStepEvent",
                    "defaultValue": "new EventEmitter<StepActionType>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 52,
                    "type": "EventEmitter"
                },
                {
                    "name": "shuftiData",
                    "defaultValue": "new EventEmitter<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 53,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "autoApproved",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 69
                },
                {
                    "name": "autoApproved$",
                    "defaultValue": "new BehaviorSubject<boolean>(false)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 71
                },
                {
                    "name": "businessTypes",
                    "defaultValue": "EBusinessType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 63
                },
                {
                    "name": "canContinue$",
                    "defaultValue": "new BehaviorSubject<boolean>(false)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 67
                },
                {
                    "name": "componentDestroyed",
                    "defaultValue": "new Subject<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 59
                },
                {
                    "name": "dialog",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialog",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 78,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "hebrewDocument",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 68
                },
                {
                    "name": "hideFieldsAutomatically$",
                    "defaultValue": "new BehaviorSubject<boolean>(false)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 72
                },
                {
                    "name": "idDuplication",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 64
                },
                {
                    "name": "idValidation",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormControl",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 65
                },
                {
                    "name": "iframe",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 57,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'iframe'"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 60
                },
                {
                    "name": "minAge",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date | any",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 61
                },
                {
                    "name": "shuftiModal",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<ViewContainerRef>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 55,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'shuftiModal'"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "step_7",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 62
                },
                {
                    "name": "sumsubResponseData",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 70
                },
                {
                    "name": "sumsubVareficationResponse",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 66
                },
                {
                    "name": "viewContainerRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ViewContainerRef",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 79,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "changedIdValidation",
                    "args": [
                        {
                            "name": "e",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 156,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "e",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "checkIdDuplication",
                    "args": [
                        {
                            "name": "e",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 120,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "e",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "editData",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 173,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "handleNextStep",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 142,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "handleSumsubStep",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 197,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "listenToSumsubResponse",
                    "args": [
                        {
                            "name": "ref",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "null"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 160,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "ref",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "null",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "listenTovAutoApprovedChange",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 178,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 203,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 89,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "normalizeDate",
                    "args": [
                        {
                            "name": "date",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Date",
                    "typeParameters": [],
                    "line": 138,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "date",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "openSnackBar",
                    "args": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "panelClass",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "\"\""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 165,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "panelClass",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "\"\"",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "restrictSpecialCharacters",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 99,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDisabledStatus",
                    "args": [
                        {
                            "name": "controlName",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "status",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 188,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "controlName",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "status",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "validateID",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 117,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ncheck whether ID exist in DB or not\n",
                    "description": "<p>check whether ID exist in DB or not</p>\n",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                },
                {
                    "name": "TranslateModule",
                    "type": "module"
                },
                {
                    "name": "ErrorComponent",
                    "type": "component"
                },
                {
                    "name": "MatError"
                },
                {
                    "name": "MatDatepickerModule",
                    "type": "module"
                },
                {
                    "name": "MatDialogModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n    ChangeDetectorRef,\r\n    Component,\r\n    ElementRef,\r\n    EventEmitter,\r\n    Input,\r\n    OnDestroy,\r\n    OnInit,\r\n    Output,\r\n    TemplateRef,\r\n    ViewChild,\r\n    ViewContainerRef\r\n} from '@angular/core';\r\nimport { FormBuilder, FormControl, FormGroup, ReactiveFormsModule } from '@angular/forms';\r\nimport { BehaviorSubject, Subject } from 'rxjs';\r\n\r\n// import {HelperService} from \"../../../services\";\r\n// import {SubjectService} from \"@shared/services\";\r\n// import {environment} from \"@environment/environment\";\r\nimport { MatDialog, MatDialogModule } from \"@angular/material/dialog\";\r\nimport { DomSanitizer } from \"@angular/platform-browser\";\r\n// import {EPusherChannels, EPusherEvents} from \"@models/enums\";\r\nimport { CommonModule, DatePipe } from \"@angular/common\";\r\nimport { MatSnackBar } from \"@angular/material/snack-bar\";\r\nimport { TranslateModule, TranslateService } from \"@ngx-translate/core\";\r\nimport { EBusinessType, IStepsObj } from '../kyc';\r\nimport { StepActionType } from '../types/global.type';\r\nimport { validateID } from '../models';\r\nimport { KycService } from '../services/kyc.service';\r\nimport { SubjectService } from '../services/subject.service';\r\nimport moment from 'moment';\r\nimport { ErrorComponent } from '../fields/error/error.component';\r\nimport { MatError } from '@angular/material/select';\r\nimport { MatDatepickerModule } from '@angular/material/datepicker';\r\nimport { provideNativeDateAdapter } from '@angular/material/core';\r\nimport { Router } from '@angular/router';\r\n\r\n\r\n@Component({\r\n    selector: 'kyc-personal-details',\r\n    templateUrl: './kyc-personal-details.component.html',\r\n    styleUrls: ['./kyc-personal-details.component.scss'],\r\n    providers: [DatePipe, provideNativeDateAdapter()],\r\n    imports: [CommonModule, ReactiveFormsModule, TranslateModule, ErrorComponent, MatError, MatDatepickerModule, MatDialogModule],\r\n\r\n})\r\nexport class KycPersonalDetailsComponent implements OnInit, OnDestroy {\r\n    @Input('parentFormGroup') parentFormGroup: any;\r\n    @Input('kycForm')\r\n    kycForm!: FormGroup;\r\n    @Input('stepsObj') stepsObj!: IStepsObj;\r\n    @Output('nextStepEvent') nextStepEvent = new EventEmitter<StepActionType>();\r\n    @Output() shuftiData = new EventEmitter<any>();\r\n    @ViewChild('shuftiModal')\r\n    shuftiModal!: TemplateRef<ViewContainerRef>;\r\n    @ViewChild('iframe')\r\n    iframe!: ElementRef;\r\n\r\n    componentDestroyed = new Subject<any>();\r\n    loading: boolean = false;\r\n    minAge!: Date | any;\r\n    step_7!: FormGroup;\r\n    businessTypes = EBusinessType;\r\n    idDuplication: boolean = false;\r\n    idValidation!: FormControl;\r\n    sumsubVareficationResponse: object = {};\r\n    canContinue$ = new BehaviorSubject<boolean>(false);\r\n    hebrewDocument: boolean = false;\r\n    autoApproved: boolean = false;\r\n    sumsubResponseData: object = {};\r\n    autoApproved$ = new BehaviorSubject<boolean>(false);\r\n    hideFieldsAutomatically$ = new BehaviorSubject<boolean>(false);\r\n\r\n    constructor(\r\n        private kycS: KycService,\r\n        private fb: FormBuilder,\r\n        private subjectService: SubjectService,\r\n        public dialog: MatDialog,\r\n        public viewContainerRef: ViewContainerRef,\r\n        private sanitizer: DomSanitizer,\r\n        private datePipe: DatePipe,\r\n        private _snackBar: MatSnackBar,\r\n        private translateService: TranslateService,\r\n        private cd: ChangeDetectorRef,\r\n        private router: Router\r\n    ) {\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.step_7 = <FormGroup>this.kycForm.get('step_7');\r\n        this.minAge = this.kycS.calcMinAgeFromToday();\r\n        this.idValidation = this.fb.control(SubjectService.idValidation);\r\n        const isPrivate: boolean = this.kycForm.get('step_1')?.get('privateAcc')?.get('isActive')?.value;\r\n        const hideShowFields: boolean = !isPrivate ? false : true;\r\n        this.hideFieldsAutomatically$.next(hideShowFields);\r\n        this.listenTovAutoApprovedChange();\r\n    }\r\n\r\n    restrictSpecialCharacters(event: any) {\r\n        if (event?.target?.value?.length === 0 && (event?.key === \"0\" || event?.key === \".\")) {\r\n          event?.preventDefault();\r\n        }\r\n        else {\r\n          if (event?.key == \".\" && event?.target?.value.includes(\".\")) {\r\n            event?.preventDefault();\r\n          }\r\n          const allowedKeys = /^[a-zA-Z0-9]$/;\r\n          if (!allowedKeys.test(event.key) && !['Backspace', 'Tab', 'ArrowLeft', 'ArrowRight', 'Enter'].includes(event.key)) {\r\n            event.preventDefault();\r\n          }\r\n        }\r\n      }\r\n\r\n    /**\r\n     * check whether ID exist in DB or not\r\n     */\r\n    validateID(id: string): boolean {\r\n        return validateID(id);\r\n    }\r\n    checkIdDuplication(e: any) {\r\n        const id = this.step_7.get('id_number')?.value;\r\n        const matSlideValue = this.idValidation.value;\r\n        // console.log({ id })\r\n        // console.log({ matSlideValue })\r\n        // console.log('this.idDuplication', this.idDuplication)\r\n        if (matSlideValue) {\r\n            if (id && id?.toString()?.length == 9 && validateID(id)) {\r\n                this.idDuplication = true;\r\n            } else {\r\n                this.idDuplication = false;\r\n            }\r\n        } else {\r\n            this.idDuplication = false;\r\n        }\r\n        this.cd.detectChanges()\r\n    }\r\n\r\n    normalizeDate(date: Date): Date {\r\n        return moment(date).set({hours: 12}).toDate();\r\n    }\r\n\r\n    handleNextStep() {\r\n        const normalizedDateOfBirth: Date = this.normalizeDate(this.step_7.get('birth_date')?.value);\r\n        this.step_7.get('birth_date')?.setValue(normalizedDateOfBirth);\r\n\r\n        // if (!this.idDuplication) {\r\n        this.nextStepEvent.next('NEXT');\r\n        this.kycS.shuftiData.next({\r\n            ...this.kycS.shuftiData.getValue(),\r\n            autoApproved: this.autoApproved$.value,\r\n            canContinue: this.canContinue$.getValue(),\r\n        });\r\n        // }\r\n    }\r\n\r\n    changedIdValidation(e: any) {\r\n        this.subjectService.idValidation = e;\r\n    }\r\n\r\n    listenToSumsubResponse(ref: any = null) {\r\n        \r\n    }\r\n\r\n\r\n    openSnackBar(message: string, panelClass: string = \"\") {\r\n        this._snackBar.open(message, undefined, {\r\n            duration: 3000,\r\n            panelClass: [panelClass, 'snackbar-text'],\r\n            verticalPosition: 'top',\r\n        });\r\n    }\r\n\r\n    editData() {\r\n        this.autoApproved = false;\r\n        this.autoApproved$.next(false);\r\n    }\r\n\r\n    listenTovAutoApprovedChange() {\r\n        this.autoApproved$.subscribe(res => {\r\n            this.setDisabledStatus('first_name', res);\r\n            this.setDisabledStatus('last_name', res);\r\n            this.setDisabledStatus('id_number', res);\r\n            this.setDisabledStatus('birth_date', res);\r\n\r\n        });\r\n    }\r\n\r\n    setDisabledStatus(controlName: any, status: any) {\r\n        if (status) {\r\n            this.step_7.controls[controlName].disable();\r\n        }\r\n        else {\r\n            this.step_7.controls[controlName].enable();\r\n        }\r\n    }\r\n\r\n    handleSumsubStep() {\r\n        setTimeout(() => {\r\n            this.router.navigate(['/login']);\r\n        }, 1000);\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.componentDestroyed.next(null);\r\n        this.componentDestroyed.complete();\r\n    }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"../../../assets/scss/mixins\";\r\n@import \"../../../assets/scss/variable\";\r\n::ng-deep {\r\n    .ui-disabled {\r\n        pointer-events: none;\r\n        opacity: 0.5;\r\n    }\r\n\r\n    .identification-toggle-custom .mdc-switch.mdc-switch--selected:enabled .mdc-switch__handle::after,.identification-toggle-custom .mdc-switch:enabled .mdc-switch__track::after {\r\n        background: #0052b4 !important;\r\n    }\r\n    \r\n    .identification-toggle-custom .mdc-switch:enabled .mdc-switch__track::before, .identification-toggle-custom .mdc-switch .mdc-switch__handle::before, .identification-toggle-custom .mdc-switch.mdc-switch--unselected:enabled .mdc-switch__handle::after{\r\n        background: #0052b4 !important;\r\n    }\r\n    .mat-mdc-icon-button{\r\n        width: 37px;\r\n        height: 37px;\r\n        .mat-mdc-button-ripple,.mdc-icon-button__ripple{\r\n            display: none !important;\r\n        }\r\n    }\r\n   \r\n}\r\n.step-7-personal-details{\r\n    padding: 0 91px;\r\n    @media screen and (max-width: 1199px) {\r\n        padding: 0 40px;\r\n    }\r\n    @media screen and (max-width: 1024px) {\r\n        padding: 0 20px;\r\n    }\r\n    @media screen and (max-width: 768px) {\r\n        padding:0;\r\n    }\r\n    &:has(.sumsub-wrapper){\r\n        padding: 0;\r\n    }\r\n    .form-group{\r\n        label{\r\n            color:#111827;\r\n            font-weight: 300;\r\n            font-size: 16px;\r\n            margin: 0 0 7px;\r\n            @media screen and (max-width: 1440px) {\r\n                font-size: 14px;\r\n            }\r\n        }\r\n        .form-control{\r\n            border-color: #E2E2E2;\r\n            padding: 14px 16px;\r\n            color:#111827;\r\n            font-size: 16px;\r\n            font-weight: 300;\r\n            border-radius: 15px !important;\r\n            &:focus{\r\n                outline: none;\r\n                box-shadow: none;\r\n            }\r\n            @media screen and (max-width: 1440px) {\r\n                font-size: 14px;\r\n                padding: 10px;\r\n            }\r\n        }\r\n        app-error{\r\n            font-size: 14px;\r\n            color: #f44336;\r\n            margin-top: 5px;\r\n        }\r\n    }\r\n}\r\n.sumsub-wrapper{\r\n    img{\r\n        width: 100%;\r\n        height: auto;\r\n    }\r\n    margin: 0 0 17px;\r\n}\r\n\r\n.continue-btn {\r\n    // max-width: 33rem;\r\n    @include respond(lg) {\r\n        max-width: 100%;\r\n    }\r\n}\r\n.form-group {\r\n    position: relative;\r\n}\r\n.upload-btn {\r\n    display: block !important;\r\n}\r\n::ng-deep .custom-input-icon-calendar-kyc {\r\n    position: absolute;\r\n    right: 0;\r\n    top: 34px;\r\n    padding: 0;\r\n\r\n    // pointer-events: none;\r\n    @media screen and (max-width: 1440px) {\r\n        top: 27px;\r\n    }\r\n\r\n    .mdc-icon-button {\r\n        background-image: url('../../../assets/images/date-change-icon.svg');\r\n        background-repeat: no-repeat;\r\n        background-position: center;\r\n        filter: opacity(0.5);\r\n        svg {\r\n            display: none;\r\n        }\r\n    }\r\n}\r\n.icon {\r\n    position: absolute;\r\n    top: 50%;\r\n    right: 2rem;\r\n    transform: translateY(-50%);\r\n    cursor: pointer;\r\n    transition: color 0.3s ease-in-out;\r\n\r\n    &:hover {\r\n        color: rgb(112, 110, 110);\r\n    }\r\n}\r\n.blue-button {\r\n    color: rgb(6, 102, 235);\r\n}\r\n.modal-container {\r\n    height: 600px;\r\n    width: 800px;\r\n}\r\n.row {\r\n    padding-bottom: 17px;\r\n}\r\n.continue-btn {\r\n    background:#01031C;\r\n    border-radius: 40px;\r\n    font-size: 16px;\r\n    font-weight: 600;\r\n    color: #fff;\r\n    padding: 12px 0px;\r\n    height: auto;\r\n    transition: 0.3s;\r\n    position: relative;\r\n    width: 100% !important;\r\n    margin: 9px 0 0;\r\n    @media screen and (max-width: 1440px) {\r\n        width: 25px;\r\n        font-size: 14px;\r\n        padding: 10px 0px;\r\n    }\r\n\r\n    &.disabled {\r\n        background: #f5f5fa !important;\r\n        color: #c6c8cc !important;\r\n        cursor: not-allowed;\r\n    }\r\n}\r\n.calender-contain {\r\n    position: relative;\r\n  }\r\n  \r\n  .calender-contain .form-control {\r\n    padding-right: 30px; /* Adjust the value to create space for the icon */\r\n  }\r\n  \r\n  .calender-contain .custom-input-icon-calendar-kyc {\r\n    position: absolute;\r\n    top: 50%;\r\n    right: 8px; /* Adjust the value to position the icon */\r\n    transform: translateY(-50%);\r\n    cursor: pointer;\r\n  }\r\n.file-drag-drop {\r\n    border           : 2px dashed lightgray;\r\n    border-radius    : 5px;\r\n    min-height       : 6rem;\r\n\r\n    position         : relative;\r\n    display          : flex;\r\n    flex-direction   : column;\r\n    justify-content  : center;\r\n    text-align       : center;\r\n    transition       : 0.4s;\r\n    background-color : white;\r\n\r\n    &.face_recognition {\r\n        cursor : pointer;\r\n    }\r\n\r\n    &:hover {\r\n        //background-color : #1cbc95;\r\n        background-color : #EEFCF9;\r\n    }\r\n\r\n    &.hover-effect {\r\n        background-color : #EEFCF9;\r\n    }\r\n\r\n    .input-tag {\r\n        position   : absolute;\r\n        margin     : 0;\r\n        padding    : 0;\r\n        width      : 100%;\r\n        height     : 100%;\r\n        outline    : none;\r\n        opacity    : 0;\r\n        cursor     : pointer;\r\n        transition : 0.4s;\r\n    }\r\n\r\n    .spinner-loader {\r\n        width    : 40px;\r\n        height   : 40px;\r\n        position : absolute;\r\n        top      : 1rem;\r\n        right    : 1rem;\r\n    }\r\n}\r\n\r\n.upload-success {\r\n    max-width: 2rem;\r\n}\r\n.file-drag-drop {\r\n    button {\r\n        background-color: unset;\r\n    }\r\n}\r\n.input-icon {\r\n    position: relative;\r\n    background-color: unset;\r\n}\r\n\r\n.inside-input {\r\n    position: absolute;\r\n    right: 8px;\r\n}\r\n\r\n.drop-zone {\r\n    margin: auto !important;\r\n    width: min-content;\r\n}\r\n.face_recognition-fig-p--1 {\r\n    font-size: 0.8rem;\r\n\r\n}",
                    "styleUrl": "./kyc-personal-details.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "kycS",
                        "type": "KycService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "subjectService",
                        "type": "SubjectService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "viewContainerRef",
                        "type": "ViewContainerRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "sanitizer",
                        "type": "DomSanitizer",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "datePipe",
                        "type": "DatePipe",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_snackBar",
                        "type": "MatSnackBar",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "translateService",
                        "type": "TranslateService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 72,
                "jsdoctags": [
                    {
                        "name": "kycS",
                        "type": "KycService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "subjectService",
                        "type": "SubjectService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "viewContainerRef",
                        "type": "ViewContainerRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "sanitizer",
                        "type": "DomSanitizer",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "datePipe",
                        "type": "DatePipe",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_snackBar",
                        "type": "MatSnackBar",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "translateService",
                        "type": "TranslateService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<ng-container [formGroup]=\"parentFormGroup\">\r\n    <ng-container [formGroup]=\"step_7\">\r\n        <div class=\"form-control-wrapper w-small-ns step-7-personal-details\">\r\n            <ng-container [formGroup]=\"parentFormGroup\">\r\n                <div class=\"control-field\"\r\n                    *ngIf=\"kycForm.get('step_1')?.get(businessTypes.privateAccount)?.get('isActive')?.value\">\r\n                    <div id=\"sumsub-websdk-container\" class=\"sumsub-wrapper\">\r\n                        <img src=\"images/sumsub-verification.svg\" alt=\"sumsub-verification\"\r\n                            class=\"sumsub-verification\">\r\n                    </div>\r\n                </div>\r\n            </ng-container>\r\n            <div [hidden]=\"(hideFieldsAutomatically$ | async)\">\r\n                <div class=\"row\">\r\n                    <div class=\"col-12\">\r\n                        <div class=\"form-group\">\r\n                            <label>{{'fields.first_name' | translate}} *</label>\r\n                            <div class=\"input-icon form-group\">\r\n\r\n                                <input class=\"form-control\" (paste)=\"restrictSpecialCharacters($event)\" (keydown)=\"restrictSpecialCharacters($event)\" formControlName=\"first_name\" matInput\r\n                                    [ngClass]=\"{'disabled': autoApproved === true}\" autocomplete=\"off\"\r\n                                    [disabled]=\"true\">\r\n                                <button\r\n                                    *ngIf=\"kycForm.get('step_1')?.get(businessTypes.privateAccount)?.get('isActive')?.value\"\r\n                                    class=\"bg-none border-0 icon inside-input\" matSuffix type=\"button\"\r\n                                    (click)=\"editData()\">\r\n                                    <img class=\"menu-icons\" src=\"/images/edit-icon2.svg\" alt=\"edit-icon\">\r\n                                </button>\r\n                            </div>\r\n\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"col-12\">\r\n                        <div class=\"form-group\">\r\n                            <app-error [HTMLType]=\"'MATERIAL'\" [controlName]=\"kycForm.get('step_7')?.get('first_name')!\">\r\n                            </app-error>\r\n                        </div>\r\n                    </div>\r\n\r\n                </div>\r\n                <div class=\"row\" *ngIf=\"hebrewDocument\">\r\n                    <div class=\"col-12\">\r\n                        <div class=\"form-group\">\r\n                            <label>{{'fields.first_name_he' |translate}} *</label>\r\n                            <input class=\"form-control\" formControlName=\"first_name_he\"  matInput autocomplete=\"off\">\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"col-12\">\r\n                        <div class=\"form-group\">\r\n                            <app-error [HTMLType]=\"'MATERIAL'\" [controlName]=\"kycForm.get('step_7')?.get('last_name')!\">\r\n                            </app-error>\r\n                        </div>\r\n                    </div>\r\n\r\n                </div>\r\n                <div class=\"row\">\r\n                    <div class=\"col-12\">\r\n                        <div class=\"form-group\">\r\n                            <label>{{'fields.last_name' | translate}} *</label>\r\n                            <div class=\"input-icon form-group\">\r\n\r\n                                <input class=\"form-control\" (paste)=\"restrictSpecialCharacters($event)\" (keydown)=\"restrictSpecialCharacters($event)\" formControlName=\"last_name\" matInput autocomplete=\"off\"\r\n                                    [ngClass]=\"{'disabled': autoApproved === true}\" [disabled]=\"true\">\r\n                                <button\r\n                                    *ngIf=\"kycForm.get('step_1')?.get(businessTypes.privateAccount)?.get('isActive')?.value\"\r\n                                    class=\"bg-none border-0 icon inside-input\" matSuffix type=\"button\"\r\n                                    (click)=\"editData()\">\r\n                                    <img class=\"menu-icons\" src=\"/images/edit-icon2.svg\" alt=\"edit-icon\">\r\n                                </button>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"col-12\">\r\n                        <div class=\"form-group\">\r\n                            <app-error [HTMLType]=\"'MATERIAL'\" [controlName]=\"kycForm.get('step_7')?.get('last_name')!\">\r\n                            </app-error>\r\n                        </div>\r\n                    </div>\r\n\r\n                </div>\r\n                <div class=\"row\" *ngIf=\"hebrewDocument\">\r\n                    <div class=\"col-12\">\r\n                        <div class=\"form-group\">\r\n                            <label>{{'fields.last_name_he' | translate}} *</label>\r\n                            <input class=\"form-control\" formControlName=\"last_name_he\" matInput autocomplete=\"off\">\r\n                        </div>\r\n                    </div>\r\n\r\n                </div>\r\n                <div class=\"row\" *ngIf=\"kycForm.get('step_1')?.get(businessTypes.privateAccount)?.get('isActive')?.value\">\r\n                    <div class=\"col-12\">\r\n                        <div class=\"form-group\">\r\n                            <label>{{'fields.id_number' | translate}} *</label>\r\n                            <div class=\"input-icon form-group\">\r\n                                <input class=\"form-control\" (input)=\"checkIdDuplication($event)\" (keydown)=\"restrictSpecialCharacters($event)\" autocomplete=\"off\"\r\n                                    formControlName=\"id_number\" matInput\r\n                                    placeholder=\"{{ 'KYC_Step_7.id_length' | translate}}\" type=\"text\"\r\n                                    [ngClass]=\"{'disabled': autoApproved === true}\" [disabled]=\"true\">\r\n                                <button class=\"bg-none border-0 icon inside-input\" matSuffix type=\"button\"\r\n                                    (click)=\"editData()\">\r\n                                    <img class=\"menu-icons\" src=\"/images/edit-icon2.svg\" alt=\"edit-icon\">\r\n                                </button>\r\n                            </div>\r\n                        </div>\r\n                        <ng-container>\r\n                            <mat-slide-toggle class=\"identification-toggle-custom\" [formControl]=\"idValidation\"\r\n                                (ngModelChange)=\"changedIdValidation($event)\">\r\n                                <span class=\"font-6 color-red-i font-weight-5\">ID Validation: {{idValidation.value ?\r\n                                    'Required' : 'Not required'}}</span>\r\n                            </mat-slide-toggle>\r\n                        </ng-container>\r\n                    </div>\r\n                    <div class=\"col-12\">\r\n                        <app-error [HTMLType]=\"'MATERIAL'\" [controlName]=\"kycForm.get('step_7')?.get('id_number')!\">\r\n                        </app-error>\r\n                        <mat-error\r\n                            *ngIf=\"(idValidation.value && !(validateID(kycForm.get('step_7')?.get('id_number')?.value) && kycForm.get('step_7')?.get('id_number')?.value.toString().length > 0))\">\r\n                            {{ 'FORMS_ERRORS.not_valid_id_number' | translate}}\r\n                        </mat-error>\r\n                    </div>\r\n                </div>\r\n                <div class=\"row\">\r\n                    <div class=\"col-12\">\r\n                        <div class=\"form-group\">\r\n                            <label class=\"birthDate-name\" for=\"birthDate\">{{'fields.birth_date' | translate}} *</label>\r\n                            <div\r\n                                [class.input-icon.form-group]=\"kycForm.get('step_1')?.get(businessTypes.privateAccount)?.get('isActive')?.value\">\r\n                                <input class=\"form-control\" (click)=\"picker.open()\" [matDatepicker]=\"picker\"\r\n                                    [max]=\"minAge\" formControlName=\"birth_date\"\r\n                                    [ngClass]=\"{'disabled': autoApproved === true}\" (change)=\"editData()\"\r\n                                    autocomplete=\"off\" matInput placeholder=\"MM/DD/YYYY\" readonly>\r\n                                <mat-datepicker-toggle [for]=\"picker\" class=\"custom-input-icon-calendar-kyc\" (change)=\"editData()\"\r\n                                    *ngIf=\"kycForm.get('step_1')?.get(businessTypes.companyAccount)?.get('isActive')?.value\">\r\n                                </mat-datepicker-toggle>\r\n                                <button\r\n                                    *ngIf=\"kycForm.get('step_1')?.get(businessTypes.privateAccount)?.get('isActive')?.value\"\r\n                                    class=\"bg-none border-0 icon inside-input\" matSuffix type=\"button\"\r\n                                    (click)=\"editData()\">\r\n                                    <img class=\"menu-icons\" src=\"/images/edit-icon2.svg\" alt=\"edit-icon\">\r\n                                </button>\r\n                            </div>\r\n                            <mat-datepicker #picker></mat-datepicker>\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"col-12\">\r\n                        <div class=\"form-group\">\r\n                            <app-error [HTMLType]=\"'MATERIAL'\" [controlName]=\"kycForm.get('step_7')?.get('birth_date')!\">\r\n                            </app-error>\r\n                        </div>\r\n                    </div>\r\n\r\n                </div>\r\n                <!-- <mat-datepicker #picker></mat-datepicker> -->\r\n            </div>\r\n\r\n            <!-- This Sumsub-specific button shows ONLY if fields are hidden -->\r\n            <button *ngIf=\"(hideFieldsAutomatically$ | async)\"\r\n                (click)=\"handleSumsubStep()\"\r\n                class=\"continue-btn\"\r\n                color=\"primary\"\r\n                mat-raised-button\r\n                type=\"button\"\r\n                id=\"sumsub-btn-continue\">\r\n                {{ 'KYC.Continue' | translate }}\r\n            </button>\r\n                        \r\n            <button *ngIf=\"!(hideFieldsAutomatically$ | async)\" \r\n                (click)=\"handleNextStep()\"\r\n                [disabled]=\"(kycForm.get('step_1')?.get('privateAcc')?.get('isActive')?.value &&(idValidation.value && !(validateID(kycForm.get('step_7')?.get('id_number')?.value) && kycForm.get('step_7')?.get('id_number')?.value.toString().length > 0))) || !(kycForm.get('step_7')?.get('first_name')?.value && kycForm.get('step_7')?.get('last_name')?.value && kycForm.get('step_7')?.get('birth_date')?.value)\"\r\n                [class.disabled]=\"(kycForm.get('step_1')?.get('privateAcc')?.get('isActive')?.value &&(idValidation.value && !(validateID(kycForm.get('step_7')?.get('id_number')?.value) && kycForm.get('step_7')?.get('id_number')?.value.toString().length > 0)) ) || !(kycForm.get('step_7')?.get('first_name')?.value && kycForm.get('step_7')?.get('last_name')?.value && kycForm.get('step_7')?.get('birth_date')?.value)\"\r\n                class=\"continue-btn\" color=\"primary\" mat-raised-button type=\"button\" id=\"pdetails-btn-continue\">\r\n                {{ 'KYC.Continue' | translate}}\r\n            </button>\r\n        </div>\r\n\r\n    </ng-container>\r\n</ng-container>\r\n\r\n<ng-template #shuftiModal let-data>\r\n    <div class=\"modal-container\">\r\n        <button [mat-dialog-close]=\"true\" class=\"close\" mat-button>\r\n            <span class=\"fas fa-times\"></span>\r\n        </button>\r\n\r\n        <iframe #iframe [src]=\"data?.verificationUrl\" allow=\"camera\" class=\"border-0\" height=\"100%\"\r\n            id=\"shuftipro-iframe\" width=\"100%\"></iframe>\r\n\r\n        <!-- <app-loader [loading]=\"loading\"></app-loader> -->\r\n    </div>\r\n</ng-template>"
        },
        {
            "name": "KycPhoneComponent",
            "id": "component-KycPhoneComponent-4e25a499267062cd219d094ab9bcc79b559a4b111b36cf742a134c2d80c5170994ccc652303775736a12ed37735d3a9599e280d775498e03034516ec89f6f456",
            "file": "src/app/sign-up/kyc-phone/kyc-phone.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "kyc-phone",
            "styleUrls": [
                "./kyc-phone.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./kyc-phone.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "kycForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "FormGroup",
                    "decorators": []
                },
                {
                    "name": "nextStepIsValid",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "parentFormGroup",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "FormGroup",
                    "decorators": []
                },
                {
                    "name": "stepsObj",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "IStepsObj",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "nextStepEvent",
                    "defaultValue": "new EventEmitter<StepActionType>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "apiErrorMessage",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "componentDestroyed",
                    "defaultValue": "new Subject<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "countryArr",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CountriesData[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "selectedPhoneCode",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "step_4",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 29
                }
            ],
            "methodsClass": [
                {
                    "name": "handleCountryCodeSearch",
                    "args": [
                        {
                            "name": "e",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 81,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "e",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleNextStep",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 85,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "restrictSpecialCharacters",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                },
                {
                    "name": "TranslateModule",
                    "type": "module"
                },
                {
                    "name": "MatAutocompleteModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {HttpErrorResponse} from '@angular/common/http';\r\nimport {Component, EventEmitter, Input, OnInit, Output} from '@angular/core';\r\nimport {FormGroup, ReactiveFormsModule} from '@angular/forms';\r\nimport {EMPTY, Subject} from 'rxjs';\r\nimport {catchError, skipWhile, takeUntil} from 'rxjs/operators';\r\nimport { IStepsObj, CountriesData } from '../kyc';\r\nimport { StepActionType } from '../types/global.type';\r\nimport { CommonModule } from '@angular/common';\r\nimport { TranslateModule } from '@ngx-translate/core';\r\nimport { MatAutocompleteModule } from '@angular/material/autocomplete';\r\nimport { countryData } from '../fields/country-data';\r\n\r\n\r\n@Component({\r\n  selector: 'kyc-phone',\r\n  imports: [CommonModule, ReactiveFormsModule, TranslateModule, MatAutocompleteModule],\r\n  templateUrl: './kyc-phone.component.html',\r\n  styleUrls: ['./kyc-phone.component.scss'],\r\n})\r\nexport class KycPhoneComponent implements OnInit {\r\n    componentDestroyed = new Subject<any>();\r\n    @Input('parentFormGroup') parentFormGroup!: FormGroup;\r\n    @Input('kycForm') kycForm!: FormGroup;\r\n    @Input('stepsObj') stepsObj!: IStepsObj;\r\n    @Input('nextStepIsValid') nextStepIsValid: any;\r\n    @Output('nextStepEvent') nextStepEvent = new EventEmitter<StepActionType>();\r\n    countryArr!: CountriesData[];\r\n    selectedPhoneCode!: string;\r\n    step_4!: FormGroup;\r\n    apiErrorMessage = '';\r\n\r\n    constructor(\r\n        // private KycS: KycService\r\n    ) { }\r\n\r\n    ngOnInit(): void {\r\n        this.countryArr = countryData.filter(country => country.phoneCode !== null) as CountriesData[];\r\n        this.step_4 = <FormGroup>this.kycForm.get('step_4');\r\n    }\r\n\r\n    handleNextStep() {\r\n        let {phone_code, phone} = this.kycForm.getRawValue().step_4;\r\n        if(!phone_code || !phone) {\r\n            console.error(`phone or phone code must have a value.`);\r\n            return;\r\n        }\r\n        this.apiErrorMessage = '';\r\n        const phoneGenerated = `${phone_code}${phone}`;\r\n        // this.KycS.sendSMSVerification(phoneGenerated)\r\n        // .pipe(\r\n        //     catchError((e:HttpErrorResponse)=> {\r\n        //         console.error(e);\r\n        //         this.apiErrorMessage = e.error.apiErrorMessage[0];\r\n        //         return EMPTY;\r\n        //     })\r\n        // )\r\n        // .subscribe(r => {\r\n        //     this.apiErrorMessage = '';\r\n        //     if(r) {\r\n        //         this.nextStepEvent.next('NEXT');\r\n        //     }\r\n        // });\r\n        this.nextStepEvent.next('NEXT');\r\n    }\r\n\r\n    restrictSpecialCharacters(event: any) {\r\n        if (event?.target?.value?.length === 0 && (event?.key === \"0\" || event?.key === \".\")) {\r\n          event?.preventDefault();\r\n        }\r\n        else {\r\n          if (event?.key == \".\" && event?.target?.value.includes(\".\")) {\r\n            event?.preventDefault();\r\n          }\r\n          const allowedKeys = /^[a-zA-Z0-9+]$/;\r\n          if (!allowedKeys.test(event.key) && !['Backspace', 'Tab', 'ArrowLeft', 'ArrowRight', 'Enter'].includes(event.key)) {\r\n            event.preventDefault();\r\n          }\r\n        }\r\n      }\r\n\r\n    handleCountryCodeSearch(e:Event) {\r\n        // this.countryArr = this.KycS.handleCountrySearch({event: e, action: 'PHONE_CODE'})\r\n    }// # handleCountryCodeSearch\r\n\r\n    ngOnDestroy(){\r\n        this.componentDestroyed.next(null);\r\n        this.componentDestroyed.complete();\r\n    }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".country-phone-code {\r\n    max-width: 11rem;\r\n    margin-inline-end: 0.8rem;\r\n\r\n    &__wrapper {\r\n        display: flex;\r\n        justify-content: space-between;\r\n\r\n        & * {\r\n            font-weight: 400;\r\n        }\r\n    }\r\n\r\n    .country {\r\n        max-width: 30rem;\r\n        width: 100%;\r\n    }\r\n}\r\n.kyc-phone {\r\n    max-width: 70%;\r\n    margin: 0 auto;\r\n    @media screen and (max-width: 767px) {\r\n        max-width:100%;\r\n    }\r\n}\r\n.kyc-phone-input {\r\n    background-color: #fff;\r\n    border: 1px solid #111827;\r\n    border-radius: 15px;\r\n    color: #111827;\r\n    // text-indent: 10px;\r\n    min-height: auto;\r\n    width: 100%;\r\n    box-sizing: border-box;\r\n    font-size: 16px;\r\n    padding:14px 16px;\r\n    &::placeholder{\r\n        opacity: 0.5;\r\n    }\r\n    @media screen and (max-width: 1440px) {\r\n        font-size: 14px;\r\n        padding: 10px;\r\n    }\r\n}\r\n.mobile-num input {\r\n    /* Add additional styles for the mobile-num input field */\r\n    /* Example styles: */\r\n    background-color: #fff;\r\n    border: 1px solid #111827;\r\n    border-radius: 15px;\r\n    color: #111827;\r\n    text-indent: 10px;\r\n    min-height: 50px;\r\n    width: 100%;\r\n    box-sizing: border-box;\r\n    font-size: 16px;\r\n    padding: 10px;\r\n}\r\n\r\n.continue-btn {\r\n    background:#01031C;\r\n    border-radius: 40px;\r\n    font-size: 16px;\r\n    // line-height: 22px;\r\n    font-weight: 600;\r\n    color: #fff;\r\n    padding: 12px 0px;\r\n    height: auto;\r\n    transition: 0.3s;\r\n    position: relative;\r\n    width: 100% !important;\r\n    margin: 26px 0 0;\r\n    @media screen and (max-width: 1440px) {\r\n        // height: 25px;\r\n        width: 25px;\r\n        margin: 16px 0 0;\r\n        font-size: 14px;\r\n        padding: 10px;\r\n    }\r\n\r\n    &.disabled {\r\n        background: #f5f5fa !important;\r\n        color: #c6c8cc !important;\r\n        cursor: not-allowed;\r\n    }\r\n}\r\n",
                    "styleUrl": "./kyc-phone.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 30
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<ng-container [formGroup]=\"parentFormGroup\">\r\n    <ng-container [formGroup]=\"step_4\">\r\n        <div class=\"kyc-phone\">\r\n            <div class=\"kyc-phone__fields d-flex align-items-center justify-content-center\">\r\n                <input maxlength=\"3\" type=\"text\" class=\"kyc-phone-input country-phone-code\" aria-label=\"Code\" matInput\r\n                    [placeholder]=\"'fields.phone_code' | translate\" (input)=\"handleCountryCodeSearch($event)\"\r\n                    formControlName=\"phone_code\" [matAutocomplete]=\"auto\" (keydown)=\"restrictSpecialCharacters($event)\" appOnlyNumbers>\r\n                <mat-autocomplete autoActiveFirstOption #auto=\"matAutocomplete\">\r\n                    <mat-option *ngFor=\"let cd of countryArr\" [value]=\"cd.phoneCode\" (click)=\"telInputRef.select()\">\r\n                        <div class=\"country-phone-code__wrapper\">\r\n                            <div class=\"country\">\r\n                                {{cd.countryName}}\r\n                            </div>\r\n                            <div class=\"phone-code text-secondary\">\r\n                                +{{cd.phoneCode}}\r\n                            </div>\r\n                        </div>\r\n                    </mat-option>\r\n                </mat-autocomplete>\r\n                <input maxlength=\"15\" class=\"kyc-phone-input\" formControlName=\"phone\" [placeholder]=\"'fields.phone_num' | translate\"\r\n                    type=\"tel\" #telInputRef matInput (keydown)=\"restrictSpecialCharacters($event)\" appOnlyNumbers>\r\n            </div>\r\n            <small *ngIf=\"apiErrorMessage\" class=\"text-danger\">{{ apiErrorMessage }}</small>\r\n            <button type=\"button\" mat-raised-button color=\"primary\" class=\"continue-btn mx-auto d-block\" id=\"kyc_phone_step_4\"\r\n                (click)=\"handleNextStep()\">\r\n                {{ 'KYC.Continue' | translate}}\r\n            </button>\r\n        </div>\r\n    </ng-container>\r\n</ng-container>\r\n"
        },
        {
            "name": "KycTwoComponent",
            "id": "component-KycTwoComponent-6570a6fb1a0682b71e11ba75e88ed7059618fb865001a54db38245112a1beb10d9fa9e86378f68d090b3603a91f261e5dad1b8d6262591b6259a58564a60c927",
            "file": "src/app/sign-up/kyc-two/kyc-two.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-kyc-two",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./kyc-two.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "kycForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "parentFormGroup",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "FormGroup",
                    "decorators": []
                },
                {
                    "name": "stepsObj",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "IStepsObj",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "nextStepEvent",
                    "defaultValue": "new EventEmitter<StepActionType>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "accountType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TBusinessTypes",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "componentDestroyed",
                    "defaultValue": "new Subject<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "EBusinessType",
                    "defaultValue": "EBusinessType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "emailSignUp$",
                    "defaultValue": "new Subject<string>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "isLoading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "privacyPolicyUrl",
                    "defaultValue": "'https://okoora.com/privacy/'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "step_2",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "termsOfUseUrl",
                    "defaultValue": "'https://okoora.com/terms-of-service/'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 26
                }
            ],
            "methodsClass": [
                {
                    "name": "disableSignUpBtn",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "filterInvalidCharacters",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 79,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleSignUp",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 85,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "restrictSpecialCharacters",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "MatCheckboxModule",
                    "type": "module"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                },
                {
                    "name": "TranslateModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output } from '@angular/core';\r\nimport { FormGroup, ReactiveFormsModule } from '@angular/forms';\r\nimport { catchError, EMPTY, exhaustMap, Subject, takeUntil, throttleTime } from 'rxjs';\r\nimport { IStepsObj, TBusinessTypes, EBusinessType } from '../kyc';\r\nimport { StepActionType } from '../types/global.type';\r\nimport { HttpErrorResponse } from '@angular/common/http';\r\nimport { CommonModule } from '@angular/common';\r\nimport { MatCheckboxModule } from '@angular/material/checkbox';\r\nimport { TranslateModule } from '@ngx-translate/core';\r\n\r\n@Component({\r\n  selector: 'app-kyc-two',\r\n  imports: [CommonModule, MatCheckboxModule, ReactiveFormsModule, TranslateModule],\r\n  templateUrl: './kyc-two.component.html',\r\n  styleUrl: './kyc-two.component.scss'\r\n})\r\nexport class KycTwoComponent {\r\n  componentDestroyed = new Subject<void>();\r\n  isLoading: boolean = false;\r\n  @Input() parentFormGroup!: FormGroup;\r\n  @Input() kycForm: any;\r\n  @Input() stepsObj!: IStepsObj;\r\n  @Output() nextStepEvent = new EventEmitter<StepActionType>();\r\n  emailSignUp$ = new Subject<string>();\r\n  privacyPolicyUrl: string = 'https://okoora.com/privacy/';\r\n  termsOfUseUrl: string = 'https://okoora.com/terms-of-service/';\r\n  accountType!: TBusinessTypes;\r\n  EBusinessType = EBusinessType;\r\n  step_2!: FormGroup;\r\n\r\n  ngOnInit(): void {\r\n    this.step_2 = this.kycForm.get('step_2') as FormGroup;\r\n  }\r\n\r\n  handleSignUp(): void {\r\n    // Error handling\r\n    if (!this.kycForm.controls.step_2.get('email')?.valid) {\r\n      console.warn(`user was able to click submit even though the form is not valid `)\r\n      return;\r\n    }\r\n    const email = this.kycForm?.controls?.step_2.get('email')?.value;\r\n    if (!email) {\r\n      console.warn(`user was able to click submit even though email is falsy: ${email}`)\r\n      return;\r\n    }\r\n    // Error handling\r\n\r\n    // this.kycS.loading$.next(true);\r\n    // this.kycS.verificationCodeStatus.next('DEFAULT');\r\n    this.nextStepEvent.next('NEXT');\r\n    this.emailSignUp$.next(email);\r\n  }\r\n\r\n  disableSignUpBtn(): boolean {\r\n    return !this.kycForm.controls.step_2.valid || this.isLoading;\r\n  }\r\n\r\n  restrictSpecialCharacters(event: any) {\r\n    const invalidChars = ['<', '>', ';', '=', '+'];\r\n    if (event?.target?.value?.length === 0 && (event?.key === \"0\" || event?.key === \".\")) {\r\n      event?.preventDefault();\r\n    } else {\r\n      const dotOccurrences = (event?.target?.value.match(/\\./g) || []).length;\r\n      if (event?.key === \".\" && dotOccurrences >= 3) {\r\n        event?.preventDefault();\r\n      }\r\n\r\n      if (invalidChars.includes(event.key)) {\r\n        event.preventDefault();\r\n      }\r\n      // const allowedKeys = /^[a-zA-Z0-9.@\\u00C0-\\u017F]$/;\r\n      const allowedKeys = /^[a-zA-Z0-9._\\-@\\u00C0-\\u017F]$/; // Included - and _\r\n      if (!allowedKeys.test(event.key) && !['Backspace', 'Tab', 'ArrowLeft', 'ArrowRight', 'Enter'].includes(event.key)) {\r\n        event.preventDefault();\r\n      }\r\n    }\r\n  }\r\n\r\n  filterInvalidCharacters(event: any) {\r\n    const input = event.target;\r\n    const invalidChars = /[<>;=+]/g;\r\n    input.value = input.value.replace(invalidChars, '');\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.componentDestroyed.next();\r\n    this.componentDestroyed.complete();\r\n  }\r\n}\r\n",
            "styleUrl": "./kyc-two.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<form [formGroup]=\"parentFormGroup\" class=\"form-group\">\r\n    <form [formGroup]=\"step_2\">\r\n        <section class=\"step-2 mx-auto\">\r\n            <div class=\"step-2__wrapper row\">\r\n                <div class=\"step-2__content col-12\">\r\n                    <div class=\"input-wrapper\">\r\n                        <span >Your Email</span>\r\n                        <input type=\"email\" (keydown)=\"restrictSpecialCharacters($event)\" matInput formControlName=\"email\" class=\"form-control focusable old-input\" appOnlyEmail>\r\n                    </div>\r\n                    <button [disabled]=\"kycForm.get('step_2.email').invalid || !kycForm.get('step_2.agree').value\" [class.disabled]=\"kycForm.get('step_2.email').invalid|| !kycForm.get('step_2.agree').value\" type=\"button\" mat-raised-button\r\n                        color=\"primary\" id=\"signup_with_email_step_2\" class=\"continue-btn\" (click)=\"handleSignUp()\">\r\n                        {{ 'fields.signup_with_email' | translate }}\r\n                    </button>\r\n                    <mat-checkbox class=\"condition-checkbox\" id=\"agree\" formControlName=\"agree\">\r\n                        <span>{{ 'fields.email_disclaimer_1' | translate }}</span>\r\n                        <a class=\"resend-code action-anchor\" [href]=\"termsOfUseUrl\" target=\"_blank\"\r\n                            rel=\"noreferrer noopener\" aria-label=\"This is an external link (opens in a new tab)\">\r\n                            {{ 'fields.email_disclaimer_2' | translate }}\r\n                        </a>\r\n                        {{ 'fields.email_disclaimer_3' | translate }}\r\n                        <a class=\"resend-code action-anchor\" [href]=\"privacyPolicyUrl\" target=\"_blank\"\r\n                            rel=\"noreferrer noopener\" aria-label=\"This is an external link (opens in a new tab)\">\r\n                            {{ 'fields.email_disclaimer_4' | translate }}\r\n                        </a>\r\n                    </mat-checkbox>\r\n                </div>\r\n            </div>\r\n        </section>\r\n    </form>\r\n</form>\r\n"
        },
        {
            "name": "LoginComponent",
            "id": "component-LoginComponent-cf7fe6e910c5ac9d1232be801bd65aecb06749f32b57954ec442ea7889edb36a46e49f6101cda84c8446a9da6db3ae7c49ccb74b9d99431b9a28e14fa50ea546",
            "file": "src/app/login/login.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-login",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./login.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "dialog",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialog",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "error",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "hidePassword",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "invalidCredentials",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "loginData",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "loginForm",
                    "defaultValue": "new FormGroup({\r\n    username: new FormControl('', [Validators.required]),\r\n    password: new FormControl('', [Validators.required]),\r\n    rememberMe: new FormControl(''),\r\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "needVerification",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "planMsg",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "showLoader",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "typeVerificationCode",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "userNotExist",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                }
            ],
            "methodsClass": [
                {
                    "name": "checkRemember",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 90,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "goToForgot",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "goToSignUp",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 78,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "isloginFormHasError",
                    "args": [
                        {
                            "name": "errorMessage",
                            "type": "string | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "null"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 97,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "errorMessage",
                            "type": "string | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "null",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "navigateToDashboard",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "rememberValueChange",
                    "args": [
                        {
                            "name": "remember",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 82,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "remember",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                },
                {
                    "name": "MatIconModule",
                    "type": "module"
                },
                {
                    "name": "MatCheckboxModule",
                    "type": "module"
                },
                {
                    "name": "CodeVerificationComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { Component, OnDestroy, OnInit } from '@angular/core';\r\nimport { FormGroup, FormControl, Validators, ReactiveFormsModule } from '@angular/forms';\r\nimport { MatCheckboxModule } from '@angular/material/checkbox';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { CodeVerificationComponent } from './code-verification/code-verification.component';\r\n\r\n@Component({\r\n  selector: 'app-login',\r\n  imports: [CommonModule, ReactiveFormsModule, MatIconModule, MatCheckboxModule, CodeVerificationComponent],\r\n  templateUrl: './login.component.html',\r\n  styleUrl: './login.component.scss'\r\n})\r\n\r\nexport class LoginComponent implements OnInit {\r\n  hidePassword = true;\r\n  needVerification = false;\r\n  userNotExist = false;\r\n  invalidCredentials = false;\r\n  typeVerificationCode  = '';\r\n  showLoader = false;\r\n  loginForm = new FormGroup({\r\n    username: new FormControl('', [Validators.required]),\r\n    password: new FormControl('', [Validators.required]),\r\n    rememberMe: new FormControl(''),\r\n  });\r\n  planMsg: any;\r\n  error!: string;\r\n  loginData: boolean = false;\r\n\r\n  constructor(private router: Router, public dialog: MatDialog) {\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.checkRemember();\r\n\r\n    this.loginForm.controls.username.valueChanges.subscribe((value) => {\r\n      if (!value) {\r\n        this.isloginFormHasError();\r\n      } else {\r\n        this.error = '';\r\n      }\r\n    });\r\n    this.loginForm.controls.password.valueChanges.subscribe((value) => {\r\n      if (!value) {\r\n        this.isloginFormHasError();\r\n      } else {\r\n        this.error = '';\r\n      }\r\n    });\r\n  }\r\n\r\n  goToForgot() {\r\n    this.router.navigate(['/reset-password']);\r\n  }\r\n\r\n  navigateToDashboard() {\r\n    if (!this.loginForm.valid) {\r\n      this.isloginFormHasError();\r\n      return;\r\n    }\r\n\r\n    const enteredPassword = this.loginForm.value.password;\r\n    if (enteredPassword !== 'Okoora1!') {\r\n      this.error = 'Passwords do not match';\r\n      return;\r\n    }\r\n    setTimeout(() => {\r\n      this.router.navigate(['/dashboard']);\r\n    }, 1000);\r\n    this.error = '';\r\n    this.rememberValueChange(this.loginForm?.value?.rememberMe!);\r\n  }\r\n\r\n\r\n  goToSignUp() {\r\n    this.router.navigate(['sign-up']);\r\n  }\r\n\r\n  rememberValueChange(remember: string) {\r\n    if (remember) {\r\n      localStorage.setItem('remember_me', JSON.stringify(this.loginForm.value));\r\n    } else {\r\n      localStorage.removeItem('remember_me');\r\n    }\r\n  }\r\n\r\n  checkRemember() {\r\n    let rememberMe = localStorage.getItem('remember_me');\r\n    if (rememberMe) {\r\n      this.loginForm.patchValue(JSON.parse(rememberMe));\r\n    }\r\n  }\r\n\r\n  isloginFormHasError(errorMessage: string | null = null) {\r\n    console.log('errorMessage',errorMessage);\r\n    if (errorMessage && errorMessage.includes(\"Login Timeout\")) {\r\n      this.error = errorMessage;\r\n    } else {\r\n      if (errorMessage && errorMessage.includes(\"Account is blocked. Please contact support\")) {\r\n        this.error = errorMessage;\r\n      } else {\r\n        this.error = \"User name or password are incorrect\";\r\n      }\r\n    }\r\n  }\r\n\r\n}\r\n",
            "styleUrl": "./login.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 31,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<section class=\"auth-section\">\r\n  <div class=\"left-side\">\r\n    <div class=\"form-wrapper\">\r\n      <ng-container>\r\n        <h3 class=\"heading\">Login</h3>\r\n        <form #loginFrm=\"ngForm\" [formGroup]=\"loginForm\" (ngSubmit)=\"navigateToDashboard()\">\r\n          <div class=\"form-group login-field\">\r\n            <label for=\"username\">Email</label>\r\n            <input type=\"email\" class=\"form-control\" name=\"username\" id=\"email_field\" formControlName=\"username\" email\r\n              required>\r\n          </div>\r\n          <div class=\"form-group login-field\">\r\n            <label for=\"password\">Password</label>\r\n            <div class=\"input-wrapper\">\r\n              <input [type]=\"hidePassword ? 'password' : 'text'\" class=\"form-control\" name=\"password\"\r\n                id=\"password_field\" formControlName=\"password\" required>\r\n              <mat-icon class=\"eye-icon\" matSuffix (click)=\"hidePassword = !hidePassword\" id=\"show_hide_password\">\r\n                {{hidePassword ? 'visibility_off' :\r\n                'visibility'}}</mat-icon>\r\n            </div>\r\n          </div>\r\n          <div class=\"remember-wrapper\">\r\n            <mat-checkbox class=\"remember-check\" formControlName=\"rememberMe\" name=\"rememberMe\"\r\n              (change)=\"rememberValueChange(loginForm.value.rememberMe!)\" id=\"remember_me_checkbox\">Remember me\r\n            </mat-checkbox>\r\n            <a class=\"forgot-password\" id=\"forgot_password\" (click)=\"goToForgot()\">Forgot password?</a>\r\n          </div>\r\n          <div class=\"error-msg\" *ngIf=\"error\">\r\n            {{error}}\r\n          </div>\r\n          <button class=\"submit-btn\" [class.disabled]=\"showLoader\" [disabled]=\"showLoader\" id=\"button_login\"\r\n            (click)=\"navigateToDashboard()\">Log In\r\n          </button>\r\n        </form>\r\n        <div class=\"signup\">\r\n          <p class=\"signup-text\">\r\n            Don't have an account? <a class=\"signup-link d-inline\" (click)=\"goToSignUp()\">Sign up</a>\r\n          </p>\r\n        </div>\r\n      </ng-container>\r\n      <app-code-verification *ngIf=\"needVerification\" [formData]=\"loginForm.value\"\r\n        [typeVerification]=\"typeVerificationCode\" type=\"login\"></app-code-verification>\r\n    </div>\r\n  </div>\r\n  <div class=\"right-side\">\r\n    <div class=\"content\">\r\n      <img class=\"logo\" src=\"images/abcm-logo.svg\" alt=\"logo\" />\r\n      <h1 class=\"main-heading\">The World's First</h1>\r\n      <h2 class=\"sub-heading\">Automated business currency management</h2>\r\n    </div>\r\n  </div>\r\n</section>"
        },
        {
            "name": "MomentumIndicatorChartComponent",
            "id": "component-MomentumIndicatorChartComponent-725e4ee5a8b1cb9b3f68a42d3a062e45b63c73095098d60e441420d09cff83c01532f0f0cd8cacd6e47ea61fe1e080759b852047d9957516d939c74ba5a9da77",
            "file": "src/app/risk-dashboard/components/dashboard/components/momentum-indicator-chart/momentum-indicator-chart.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-momentum-indicator-chart",
            "styleUrls": [
                "./momentum-indicator-chart.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./momentum-indicator-chart.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "currencyPair",
                    "defaultValue": "'USD/EUR'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 35,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "momentumRankScore",
                    "defaultValue": "2",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 37,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "riskdirection",
                    "defaultValue": "1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 36,
                    "type": "number",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "chart",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ChartComponent",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'chart'"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "chartOptions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ChartOptions",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "chartValue",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "momentumRank",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 38
                }
            ],
            "methodsClass": [
                {
                    "name": "getChartOptions",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getMomentumRank",
                    "args": [],
                    "optional": false,
                    "returnType": "\"Decline Significantly\" | \"Decline Moderately\" | \"Rise Moderately\" | \"Rise Significantly\" | \"Not Found\"",
                    "typeParameters": [],
                    "line": 115,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 134,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 88,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "updateArrowRotation",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 140,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "updateSeries",
                    "args": [
                        {
                            "name": "series",
                            "type": "ApexNonAxisChartSeries",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 151,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "series",
                            "type": "ApexNonAxisChartSeries",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "NgbTooltipModule",
                    "type": "module"
                },
                {
                    "name": "NgApexchartsModule",
                    "type": "module"
                },
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from \"@angular/common\";\r\nimport { Component, ViewChild, AfterViewInit, OnInit, Input } from \"@angular/core\";\r\nimport { NgbTooltipModule } from \"@ng-bootstrap/ng-bootstrap\";\r\nimport {\r\n  ApexNonAxisChartSeries,\r\n  ApexPlotOptions,\r\n  ApexChart,\r\n  ApexFill,\r\n  ApexStroke,\r\n  ChartComponent,\r\n  NgApexchartsModule\r\n} from \"ng-apexcharts\";\r\n\r\nexport type ChartOptions = {\r\n  series: ApexNonAxisChartSeries;\r\n  chart: ApexChart;\r\n  labels: string[];\r\n  plotOptions: ApexPlotOptions;\r\n  fill: ApexFill;\r\n  stroke: ApexStroke;\r\n};\r\n\r\n@Component({\r\n  selector: 'app-momentum-indicator-chart',\r\n   imports: [NgbTooltipModule, NgApexchartsModule, CommonModule],\r\n   standalone: true,\r\n  templateUrl: './momentum-indicator-chart.component.html',\r\n  styleUrls: ['./momentum-indicator-chart.component.scss']\r\n})\r\nexport class MomentumIndicatorChartComponent implements OnInit, AfterViewInit {\r\n  @ViewChild(\"chart\") chart!: ChartComponent;\r\n\r\n  public chartOptions!: ChartOptions;\r\n  chartValue: number = 0;\r\n  @Input() currencyPair: string = 'USD/EUR';\r\n  @Input() riskdirection: number = 1;\r\n  @Input() momentumRankScore: number = 2;\r\n  momentumRank: string = ''\r\n\r\n  constructor() {\r\n    this.getChartOptions();\r\n  }\r\n\r\n  getChartOptions() {\r\n    this.chartOptions = {\r\n      series: [100], // Static value\r\n      chart: {\r\n        height: 350,\r\n        type: \"radialBar\",\r\n        offsetY: 0\r\n      },\r\n      plotOptions: {\r\n        radialBar: {\r\n          startAngle: 0,\r\n          endAngle: 180,\r\n          dataLabels: {\r\n            name: {\r\n              show: false\r\n            },\r\n            value: {\r\n              show: false\r\n            }\r\n          }\r\n        }\r\n      },\r\n      fill: {\r\n        type: \"gradient\",\r\n        gradient: {\r\n          shade: \"dark\",\r\n          shadeIntensity: 0.15,\r\n          inverseColors: false,\r\n          opacityFrom: 1,\r\n          opacityTo: 1,\r\n          gradientToColors: [\"#E4E7EC\"],\r\n          stops: [0, 100]\r\n        },\r\n        colors: [\"#F9FAFB\", \"#E4E7EC\"]\r\n      },\r\n      stroke: {\r\n        dashArray: 4,\r\n        width: 3,\r\n        colors: [\"#f9f9f9\"]\r\n      },\r\n      labels: []\r\n    };\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    const momentumRankScoreMap: { [key: number]: number } = {\r\n      0: 100,\r\n      1: 75,\r\n      2: 35,\r\n      3: 20\r\n    };\r\n    this.momentumRank = this.getMomentumRank();\r\n    const updateChart = (momentumRankScore: any) => {\r\n      this.chartOptions.series = [0];\r\n      this.chartValue = momentumRankScoreMap[momentumRankScore] ?? 0;\r\n      this.updateSeries([this.chartValue]);\r\n    };\r\n    if (this.riskdirection === 1 || this.riskdirection === 2) {\r\n      switch (this.momentumRankScore) {\r\n        case 3:\r\n        case 2:\r\n        case 1:\r\n        case 0:\r\n          updateChart(this.momentumRankScore);\r\n          break;\r\n        default:\r\n          console.error(\"Invalid momentumRankScore\");\r\n      }\r\n    }\r\n  }\r\n\r\n  getMomentumRank(){\r\n    if (this.riskdirection == 2) {\r\n      switch (this.momentumRankScore) {\r\n        case 0: return \"Decline Significantly\";\r\n        case 1: return \"Decline Moderately\";\r\n        case 2: return \"Rise Moderately\";\r\n        case 3: return \"Rise Significantly\";\r\n      }\r\n    } else if (this.riskdirection == 1) {\r\n      switch (this.momentumRankScore) {\r\n        case 0: return \"Decline Significantly\";\r\n        case 1: return \"Decline Moderately\";\r\n        case 2: return \"Rise Moderately\";\r\n        case 3: return \"Rise Significantly\";\r\n      }\r\n    }\r\n    return \"Not Found\";\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    if (this.chartValue > 10) {\r\n      this.updateArrowRotation();\r\n    }\r\n  }\r\n\r\n  updateArrowRotation() {\r\n    const value = this.chartValue;\r\n    const maxValue = 100;\r\n    const rotation = (value / maxValue) * 180;\r\n\r\n    const arrowElement = document.querySelector('.arrow-wrap') as HTMLElement;\r\n    if (arrowElement) {\r\n      arrowElement.style.transform = `rotate(${rotation}deg)`;\r\n    }\r\n  }\r\n\r\n  updateSeries(series: ApexNonAxisChartSeries) {\r\n    this.chartOptions.series = series;\r\n    this.chart?.updateSeries(series);\r\n\r\n    const updateIndicatorArrow = (fillColor: any, strokeColor: any) => {\r\n      const indicatorArrow = document.getElementById(\"m-indicator-arrow\");\r\n      if (indicatorArrow) {\r\n        const path = indicatorArrow.querySelector(\"path\");\r\n        if (path) {\r\n          path.style.stroke = strokeColor;\r\n          path.style.fill = fillColor;\r\n        }\r\n      } else {\r\n        console.error(\"Element with ID 'm-indicator-arrow' not found.\");\r\n      }\r\n    };\r\n    const updateChartOptions = (color: any) => {\r\n      this.chartOptions.fill = {\r\n        type: \"gradient\",\r\n        gradient: {\r\n          shade: \"dark\",\r\n          shadeIntensity: 0.15,\r\n          inverseColors: false,\r\n          opacityFrom: 1,\r\n          opacityTo: 1,\r\n          gradientToColors: [color],\r\n          stops: [0, 50, 65, 91]\r\n        },\r\n        colors: [color, \"#12B01C\"]\r\n      };\r\n    };\r\n    const handleRiskDirection = (riskDirection: any, momentumRankScore: any) => {\r\n      let fillColor, strokeColor;\r\n\r\n      if (riskDirection === 1) {\r\n        fillColor = strokeColor = (momentumRankScore === 3 || momentumRankScore === 2) ? \"#11AF1C\" : \"#EE0B0B\";\r\n      } else if (riskDirection === 2) {\r\n        fillColor = strokeColor = (momentumRankScore === 3 || momentumRankScore === 2) ? \"#EE0B0B\" : \"#11AF1C\";\r\n      } else {\r\n        console.error(\"Invalid riskDirection\");\r\n        return;\r\n      }\r\n\r\n      updateIndicatorArrow(fillColor, strokeColor);\r\n      updateChartOptions(fillColor);\r\n    };\r\n    if (this.riskdirection === 2 || this.riskdirection === 1) {\r\n      switch (this.momentumRankScore) {\r\n        case 3:\r\n        case 2:\r\n        case 1:\r\n        case 0:\r\n          handleRiskDirection(this.riskdirection, this.momentumRankScore);\r\n          break;\r\n        default:\r\n          console.error(\"Invalid momentumRankScore\");\r\n      }\r\n    }\r\n    if (this.chartValue > 20) {\r\n      this.updateArrowRotation();\r\n    }\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../../assets/scss/variable';\r\n\r\n::ng-deep {\r\n  .moment-chart-wrapper {\r\n    background-color: $white;\r\n    padding: 30px 30px 15px 57px;\r\n    border-radius: 10px;\r\n    display: flex;\r\n    justify-content: space-between;\r\n    position: relative;\r\n    .chart-desc {\r\n      .chart-head {\r\n        .info-title {\r\n          color: #344054;\r\n          font-family: $he_heebo;\r\n          font-size: 18px;\r\n          font-weight: 700;\r\n          line-height: 28px;\r\n          display: flex;\r\n          gap: 10px;\r\n          align-items: center;\r\n          margin: 0;\r\n          position: relative;\r\n          .title-tooltip{\r\n            cursor: pointer;\r\n            z-index: 1;\r\n          }\r\n        }\r\n      }\r\n      .desc {\r\n        margin: 20px 0 105px;\r\n        max-width: 237px;\r\n        min-height: 84px;\r\n\r\n        @media screen and (max-width: 1440px) {\r\n          min-height: 72px;\r\n        }\r\n        p {\r\n          margin: 0;\r\n          color: #344054;\r\n          font-family: $he_heebo;\r\n          font-size: 18px;\r\n          font-weight: 400;\r\n          line-height: 28px;\r\n          span {\r\n            color: #175CD3;\r\n            &.direction-2 {\r\n              &.declining-significantly {\r\n                color: #11AF1C;\r\n              }\r\n\r\n              &.declining-moderately {\r\n                color: #11AF1C;\r\n              }\r\n\r\n              &.rising-moderately {\r\n                color: #EE0B0B;\r\n              }\r\n\r\n              &.rising-significantly {\r\n                color: #EE0B0B;\r\n              }\r\n            }\r\n            &.direction-1 {\r\n              &.declining-significantly {\r\n                color: #EE0B0B;\r\n              }\r\n\r\n              &.declining-moderately {\r\n                color: #EE0B0B;\r\n              }\r\n\r\n              &.rising-moderately {\r\n                color: #11AF1C;\r\n              }\r\n\r\n              &.rising-significantly {\r\n                color: #11AF1C;\r\n              }\r\n            }\r\n            &.no-data {\r\n              color: #344054;\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    .moment-chart {\r\n      width: auto;\r\n      height: 100%;\r\n      margin:auto;\r\n      position: absolute;\r\n      top:-10px;\r\n      right:20px;\r\n      .apexcharts-radialbar-hollow {\r\n        stroke: #A28888;\r\n        clip-path: polygon(50% 0%, 100% 0%, 100% 100%, 50% 100%);\r\n        stroke-width: 0.25;\r\n      }\r\n      .chart-inner {\r\n        position: relative;\r\n        overflow: hidden;\r\n        .arrow-wrap {\r\n          position: absolute;\r\n          top: 0;\r\n          bottom: 0;\r\n          width: 100%;\r\n          height: 100%;\r\n          margin: auto;\r\n          content: \"\";\r\n          left: 0;\r\n          right: 0;\r\n          transition: transform 0.5s ease-in-out;\r\n          .blue-arrow {\r\n            position: absolute;\r\n            top: calc(50% - 44px);\r\n            left: 0;\r\n            right: 0;\r\n            margin: 0 auto;\r\n            width: 27px;\r\n            height: 54px;\r\n            transition: transform 0.5s ease-in-out;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    @media screen and (max-width:1800px) {\r\n      padding: 30px 20px;\r\n      .chart-desc {\r\n        .desc {\r\n          margin: 10px 0 48px;\r\n          p {\r\n            font-size: 16px;\r\n            line-height: 26px;\r\n          }\r\n        }\r\n      }\r\n      .moment-chart {\r\n        top:-20px;\r\n        right:0;\r\n        transform: scale(0.9);\r\n      }\r\n    }\r\n    @media screen and (max-width:1440px) {\r\n      padding: 20px;\r\n      .chart-desc {\r\n        .chart-head {\r\n          .info-title {\r\n            font-size: 16px;\r\n            line-height: 26px;\r\n            gap: 5px;\r\n            .title-img {\r\n              width: 24px;\r\n            }\r\n          }\r\n        }\r\n        .desc {\r\n          margin: 10px 0 58px;\r\n          max-width:230px;\r\n          p {\r\n            font-size: 14px;\r\n            line-height: 24px;\r\n          }\r\n        }\r\n      }\r\n      .moment-chart {\r\n        transform: scale(0.85);\r\n        transform-origin:top right;\r\n        top:0;\r\n        right:0;\r\n      }\r\n    }\r\n    @media screen and (max-width:1366px) {\r\n      .chart-desc {\r\n        .desc {\r\n          margin: 10px 0 63px;\r\n          max-width:180px;\r\n        }\r\n      }\r\n      .moment-chart {\r\n        top:0;\r\n        right:0;\r\n        transform: scale(0.85);\r\n      }\r\n    }\r\n    @media screen and (max-width:1280px) {\r\n      .moment-chart {\r\n        transform: scale(0.8);\r\n        top:20px;\r\n        right:-30px;\r\n      }\r\n    }\r\n    @media screen and (max-width:1199px) {\r\n      .chart-desc {\r\n        .desc {\r\n          max-width: 60%;\r\n          margin: 10px 0 15px;\r\n          p {\r\n            font-size: 14px;\r\n            line-height: 20px;\r\n          }\r\n        }\r\n      }\r\n      .moment-chart {\r\n        margin:auto;\r\n        transform: scale(0.75);\r\n        top:20px;\r\n        right:-20px;\r\n      }\r\n    }\r\n    @media screen and (max-width:1024px) {\r\n      .chart-desc {\r\n        .desc {\r\n          margin: 10px 0 95px;\r\n        }\r\n      }\r\n      .moment-chart {\r\n        margin:auto;\r\n        transform: scale(0.8);\r\n        top:0;\r\n        right:0;\r\n      }\r\n    }\r\n    @media screen and (max-width:767px) {\r\n      .chart-desc {\r\n        .desc {\r\n          p {\r\n            font-size: 12px;\r\n            line-height: 20px;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    @media screen and (max-width:640px) {\r\n      .chart-desc {\r\n        .desc {\r\n          p {\r\n            font-size: 14px;\r\n            line-height: 22px;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    @media screen and (max-width:420px) {\r\n      .chart-desc {\r\n        .desc {\r\n          margin: 10px 0 75px;\r\n        }\r\n      }\r\n      .moment-chart {\r\n        margin:auto;\r\n        transform: scale(0.8);\r\n        top:0;\r\n        right:0;\r\n      }\r\n    }\r\n  }\r\n}\r\n",
                    "styleUrl": "./momentum-indicator-chart.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 38
            },
            "extends": [],
            "implements": [
                "OnInit",
                "AfterViewInit"
            ],
            "templateData": "<div class=\"moment-chart-wrapper\">\r\n  <div class=\"chart-desc\">\r\n    <div class=\"chart-head\">\r\n      <h5 class=\"info-title\">\r\n        <img class=\"title-img\" src=\"images/trending_down.svg\" alt=\"Momentum Indicator\" />Momentum\r\n        Indicator<img src=\"images/annual-title-help-icon.svg\" [ngbTooltip]=\"momentTool\" placement=\"top-right\"\r\n          tooltipClass=\"risk-step3-tooltip--rm\" class=\"title-tooltip\" />\r\n      </h5>\r\n    </div>\r\n    <ng-template #momentTool> Measures the speed and strength of a trend, indicating the rate of price change over a\r\n      specific period.</ng-template>\r\n    <div class=\"desc\">\r\n      <p>The <span>{{ currencyPair }}</span> pair is\r\n        expected to <span [ngClass]=\"{\r\n            'declining-significantly': momentumRank === 'Decline Significantly',\r\n            'declining-moderately': momentumRank === 'Decline Moderately',\r\n            'rising-moderately': momentumRank === 'Rise Moderately',\r\n            'rising-significantly': momentumRank === 'Rise Significantly',\r\n            'direction-1': riskdirection === 1,\r\n            'direction-2': riskdirection === 2,\r\n            'not-found': momentumRank === 'Not Found'\r\n        }\">\r\n          {{ momentumRank }}\r\n        </span>\r\n        in the coming months</p>\r\n    </div>\r\n  </div>\r\n  <div class=\"moment-chart\">\r\n    <div class=\"chart-inner\">\r\n      <apx-chart #chart [series]=\"chartOptions.series\" [chart]=\"chartOptions.chart\"\r\n        [plotOptions]=\"chartOptions.plotOptions\" [fill]=\"chartOptions.fill\" [stroke]=\"chartOptions.stroke\"\r\n        [labels]=\"chartOptions.labels\"></apx-chart>\r\n      <div class=\"arrow-wrap\">\r\n        <svg class=\"blue-arrow\" id=\"m-indicator-arrow\" alt=\"blue arrow\" xmlns=\"http://www.w3.org/2000/svg\" width=\"31\"\r\n          height=\"60\" viewBox=\"0 0 31 60\" fill=\"none\">\r\n          <path\r\n            d=\"M13.2891 57.3745C13.2891 58.4791 14.1845 59.3745 15.2891 59.3745C16.3936 59.3745 17.2891 58.4791 17.2891 57.3745L13.2891 57.3745ZM16.7033 1.04947C15.9222 0.268421 14.6559 0.268421 13.8748 1.04947L1.14692 13.7774C0.365876 14.5584 0.365876 15.8248 1.14693 16.6058C1.92797 17.3869 3.1943 17.3869 3.97535 16.6058L15.2891 5.29211L26.6028 16.6058C27.3838 17.3869 28.6501 17.3869 29.4312 16.6058C30.2122 15.8248 30.2122 14.5584 29.4312 13.7774L16.7033 1.04947ZM17.2891 57.3745L17.2891 2.46368L13.2891 2.46368L13.2891 57.3745L17.2891 57.3745Z\"\r\n            fill=\"#175CD3\" />\r\n        </svg>\r\n        <!-- <img class=\"blue-arrow\" src=\"assets/icons/momentum-indicator-chart-line.svg\" /> -->\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>"
        },
        {
            "name": "MonthlyExposureChartComponent",
            "id": "component-MonthlyExposureChartComponent-a0085cafe077c659cfc660f1f610a5fac2ac9ecb72a54000e31c34c1ac790840d26a0e21b897aed14a1ebd9571e4c6d9fbe317c3e01aae94686cbb57bc48305d",
            "file": "src/app/risk-dashboard/components/dashboard/components/monthly-exposure-chart/monthly-exposure-chart.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-monthly-exposure-chart",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./monthly-exposure-chart.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "chart",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "chartOptions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ApexChart",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "chartSeries",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ApexAxisChartSeries",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "columnIndex",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "currentPage",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 45
                },
                {
                    "name": "dataLabelsOptions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ApexDataLabels",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "fillOptions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ApexFill",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "legendOptions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ApexLegend",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 37,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "monthChartXAxisData",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "pageSize",
                    "defaultValue": "12",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 44
                },
                {
                    "name": "paginatedSeries",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "paginator",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatPaginator",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "MatPaginator"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "paginatorElementRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "MatPaginator, {read: ElementRef}"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "plotOptions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ApexPlotOptions",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 39,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "strokeOptions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ApexStroke",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "tooltipIndex",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "tooltipOptions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ApexTooltip",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 38,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "xAxisOptions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ApexXAxis",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "yAxisOptions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ApexYAxis",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "getChartOptions",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 113,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "hideCustomTooltip",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 278,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngAfterContentInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 83,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 107,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onDocumentClick",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 285,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'document:mousemove', ['$event']"
                        }
                    ],
                    "modifierKind": [
                        170
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onDocumentScroll",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 292,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'document:scroll', ['$event']"
                        }
                    ],
                    "modifierKind": [
                        170
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onPageChange",
                    "args": [
                        {
                            "name": "event",
                            "type": "PageEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 102,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "PageEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "showCustomTooltip",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "config",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 218,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "config",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updatePaginatedSeries",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 202,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "document:mousemove",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 285
                },
                {
                    "name": "document:scroll",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 292
                }
            ],
            "standalone": false,
            "imports": [
                {
                    "name": "NgApexchartsModule",
                    "type": "module"
                },
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "MatPaginatorModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { AfterViewInit, ChangeDetectorRef, Component, ElementRef, HostListener, OnDestroy, OnInit, Renderer2, ViewChild } from '@angular/core';\r\nimport { MatPaginator, MatPaginatorModule, PageEvent } from '@angular/material/paginator';\r\nimport { NgApexchartsModule } from \"ng-apexcharts\";\r\nimport {\r\n  ApexAxisChartSeries,\r\n  ApexChart,\r\n  ApexXAxis,\r\n  ApexYAxis,\r\n  ApexStroke,\r\n  ApexDataLabels,\r\n  ApexLegend,\r\n  ApexTooltip,\r\n  ApexPlotOptions,\r\n  ApexFill\r\n} from 'ng-apexcharts';\r\n@Component({\r\n  selector: 'app-monthly-exposure-chart',\r\n  imports: [NgApexchartsModule, CommonModule, MatPaginatorModule],\r\n  templateUrl: './monthly-exposure-chart.component.html',\r\n  styleUrl: './monthly-exposure-chart.component.scss'\r\n})\r\nexport class MonthlyExposureChartComponent implements OnInit, OnDestroy, AfterViewInit {\r\n  @ViewChild(MatPaginator) paginator!: MatPaginator;\r\n  @ViewChild(MatPaginator, { read: ElementRef }) paginatorElementRef!: ElementRef;\r\n  chart: any;\r\n  tooltipIndex: number | null = null;\r\n  monthChartXAxisData: any = [];\r\n  constructor(private cdr: ChangeDetectorRef,\r\n    private renderer: Renderer2, private el: ElementRef) { }\r\n  public chartSeries!: ApexAxisChartSeries;\r\n  public chartOptions!: ApexChart;\r\n  public xAxisOptions!: ApexXAxis;\r\n  public yAxisOptions!: ApexYAxis;\r\n  public strokeOptions!: ApexStroke;\r\n  public dataLabelsOptions!: ApexDataLabels;\r\n  public legendOptions!: ApexLegend;\r\n  public tooltipOptions!: ApexTooltip;\r\n  public plotOptions!: ApexPlotOptions;\r\n  public fillOptions!: ApexFill;\r\n\r\n  columnIndex: any = [];\r\n  paginatedSeries: any = [];\r\n  pageSize = 12;\r\n  currentPage = 0;\r\n  ngOnInit() {\r\n    this.chartSeries = [\r\n      {\r\n        name: \"Exposure-negative\",\r\n        type: \"bar\",\r\n        group: \"exposer\",\r\n        data: [0, 0, 50000, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\r\n      },\r\n      {\r\n        name: \"Exposure\",\r\n        type: \"bar\",\r\n        group: \"exposer\",\r\n        data: [95000, 95000, 45000, 95000, 95000, 95000, 95000, 95000, 95000, 95000, 95000, 95000, 95000, 95000, 95000, 95000, 95000, 95000, 95000, 95000, 95000, 95000, 95000, 95000]\r\n      },\r\n      {\r\n        name: \"Recommended hedging\",\r\n        type: \"bar\",\r\n        group: \"rechedge\",\r\n        data: [60000, 60000, 60000, 60000, 60000, 60000, 60000, 60000, 60000, 60000, 60000, 60000, 60000, 60000, 60000, 60000, 60000, 60000, 60000, 60000, 60000, 60000, 60000, 60000]\r\n      },\r\n      {\r\n        name: \"Actual hedging\",\r\n        type: \"bar\",\r\n        group: \"acthedge\",\r\n        data: [1000, 1000, 1000, 20000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000]\r\n      }\r\n    ];\r\n  }\r\n  ngAfterViewInit() {\r\n    setTimeout(() => {\r\n      this.getChartOptions();\r\n      this.updatePaginatedSeries();\r\n    }, 100);\r\n    if (this.paginator) {\r\n      this.paginator?.page.subscribe((event: PageEvent) => this.onPageChange(event));\r\n    }\r\n  }\r\n  ngAfterContentInit() {\r\n    const checkPaginator = () => {\r\n      if (this.paginatorElementRef) {\r\n        const paginatorElement = this.paginatorElementRef.nativeElement;\r\n        const previousButton = paginatorElement.querySelector('.mat-mdc-paginator-navigation-previous');\r\n        const nextButton = paginatorElement.querySelector('.mat-mdc-paginator-navigation-next');\r\n\r\n        if (previousButton && nextButton) {\r\n          // Set the IDs for the buttons\r\n          previousButton.setAttribute('id', 'previousButton');\r\n          nextButton.setAttribute('id', 'nextButton');\r\n          clearInterval(interval); // Stop the polling once IDs are set\r\n        }\r\n      }\r\n    };\r\n\r\n    // Poll every 100ms until the paginator is available\r\n    const interval = setInterval(checkPaginator, 100);\r\n  }\r\n  onPageChange(event: PageEvent) {\r\n    this.pageSize = event.pageSize;\r\n    this.currentPage = event.pageIndex;\r\n    this.updatePaginatedSeries();\r\n  }\r\n  ngOnDestroy() {\r\n    // Destroy the chart to prevent memory leaks\r\n    if (this.chart) {\r\n      this.chart.destroy();\r\n    }\r\n  }\r\n  getChartOptions() {\r\n    this.chartOptions = {\r\n      type: \"bar\",\r\n      height: 319,\r\n      stacked: true,\r\n      toolbar: {\r\n        show: false\r\n      },\r\n      events: {\r\n        dataPointMouseEnter: (event, chartContext, config) => {\r\n          this.tooltipIndex = config.dataPointIndex;\r\n          this.showCustomTooltip(event, config);\r\n        },\r\n        dataPointMouseLeave: () => {\r\n          setTimeout(() => this.hideCustomTooltip(), 1500000000);\r\n        }\r\n      }\r\n    };\r\n\r\n    this.xAxisOptions = {\r\n      categories: ['Jan 24', 'Feb 24', 'Mar 24', 'Apr 24', 'May 24', 'Jun 24', 'Jul 24', 'Aug 24', 'Sep 24', 'Oct 24', 'Nov 24', 'Dec 24', 'Jan 25', 'Feb 25', 'Mar 25', 'Apr 25', 'May 25', 'Jun 25', 'Jul 25', 'Aug 25', 'Sep 25', 'Oct 25', 'Nov 25', 'Dec 25'],\r\n      labels: {\r\n        style: {\r\n          colors: '#98A2B3',\r\n          fontSize: '12px',\r\n          fontFamily: 'Inter'\r\n        },\r\n        rotate: -45,\r\n        hideOverlappingLabels: false,\r\n      },\r\n    };\r\n    this.monthChartXAxisData = this.xAxisOptions.categories;\r\n\r\n    this.yAxisOptions = {\r\n      min: 0,\r\n      max: 100000, // Round off the value\r\n      tickAmount: 5,\r\n      labels: {\r\n        formatter: function (val) {\r\n          return \"$\" + val;\r\n        },\r\n        style: {\r\n          colors: 'rgba(0, 0, 0, 0.70)',\r\n          fontSize: '12px',\r\n          fontFamily: 'Inter'\r\n        }\r\n      }\r\n    };\r\n\r\n\r\n    this.strokeOptions = {\r\n      width: 0,\r\n      curve: \"smooth\"\r\n    };\r\n\r\n    this.dataLabelsOptions = {\r\n      enabled: false\r\n    };\r\n\r\n    this.legendOptions = {\r\n      show: true,\r\n      position: \"top\",\r\n      markers: {\r\n        offsetX: 0,\r\n        offsetY: 0,\r\n        fillColors: [\"#D92D20\", \"#DCEAF7\", \"#A2B0FB\", \"#2947F2\"],\r\n        strokeWidth: 2\r\n      },\r\n      itemMargin: {\r\n        horizontal: 10,\r\n        vertical: 0\r\n      }\r\n    };\r\n\r\n    this.tooltipOptions = {\r\n      enabled: false, // Disable default tooltips\r\n    };\r\n\r\n    this.plotOptions = {\r\n      bar: {\r\n        horizontal: false,\r\n        columnWidth: '35px',\r\n      }\r\n    };\r\n\r\n    this.fillOptions = {\r\n      colors: [\"#D92D20\", \"#DCEAF7\", \"#A2B0FB\", \"#2947F2\"],\r\n    };\r\n  }\r\n  updatePaginatedSeries() {\r\n    const startIndex = this.currentPage * this.pageSize;\r\n    const endIndex = startIndex + this.pageSize;\r\n\r\n    if (this.chartSeries) {\r\n      this.paginatedSeries = this.chartSeries.map(series => ({\r\n        ...series,\r\n        data: series?.data?.slice(startIndex, endIndex)\r\n      }));\r\n\r\n      // Paginate the categories as well\r\n      this.xAxisOptions = {\r\n        categories: this.monthChartXAxisData?.slice(startIndex, endIndex),\r\n      };\r\n    }\r\n  }\r\n  showCustomTooltip(event: MouseEvent, config: any) {\r\n    let tooltip = document.getElementById('custom-tooltip');\r\n\r\n    if (tooltip) {\r\n      // const { seriesIndex, dataPointIndex } = config;\r\n      // const actualIndex = this.currentPage * this.pageSize + dataPointIndex;\r\n      // const data = this.chartSeries[seriesIndex].data[actualIndex];\r\n      // Adjust the tooltip content\r\n      this.renderer.setProperty(tooltip, 'innerHTML', `\r\n      <div class=\"inner-wrap\">\r\n        <div class=\"head-title\">January 2024</div>\r\n        <div class=\"item-wrap\">\r\n          <div class=\"tooltip-item\">\r\n            <div class=\"info-sec item-month\">\r\n              <h4 class=\"title\">Monthly exposure</h4>\r\n              <div class=\"amount\"><span class=\"negative-value\">-$10,000</span> / $100,000</div>\r\n              <div class=\"neg-text\">Reverse exposure</div>\r\n            </div>\r\n            <button class=\"edit-button\">Edit</button>\r\n          </div>\r\n          <div class=\"tooltip-item\">\r\n            <div class=\"info-sec item-hedge\">\r\n              <h4 class=\"title\">Recommended hedge</h4>\r\n              <div class=\"amount\">$60,000</div>\r\n            </div>\r\n          </div>\r\n          <div class=\"tooltip-item\">\r\n            <div class=\"info-sec item-fund\">\r\n              <h4 class=\"title\">Hedged funds</h4>\r\n              <div class=\"amount\">$0</div>\r\n            </div>\r\n            <button class=\"hedge-button\">Hedge</button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    `);\r\n\r\n\r\n      if (!document.body.contains(tooltip)) {\r\n        this.renderer.appendChild(document.body, tooltip);\r\n      }\r\n      tooltip.style.left = `${event.pageX}px`;\r\n      tooltip.style.top = `${event.pageY / 2.5}px`;\r\n      tooltip.style.display = 'block';\r\n\r\n      this.cdr.detectChanges();\r\n\r\n      // tooltip.addEventListener('click', (e: Event) => {\r\n      //   const target = e.target as HTMLElement;\r\n      //   if (target.classList.contains('edit-button')) {\r\n      //     const index = target.getAttribute('data-index');\r\n      //     if (index !== null) {\r\n      //       this.editValue(parseInt(index, 10));\r\n      //     }\r\n      //   } else if (target.classList.contains('hedge-button')) {\r\n      //     this.router.navigate([localStorage.getItem('subSite') ? localStorage.getItem('subSite') + 'risk-manager/hedging-proposal' : '/risk-manager/hedging-proposal']);\r\n      //   }\r\n      // });\r\n    }\r\n  }\r\n  hideCustomTooltip() {\r\n    const tooltip = document.getElementById('custom-tooltip');\r\n    if (tooltip) {\r\n      tooltip.style.display = 'none';\r\n    }\r\n  }\r\n  @HostListener('document:mousemove', ['$event'])\r\n  onDocumentClick(event: MouseEvent): void {\r\n    const clickedInside = this.el.nativeElement.contains(event.target);\r\n    if (!clickedInside) {\r\n      this.hideCustomTooltip();\r\n    }\r\n  }\r\n  @HostListener('document:scroll', ['$event'])\r\n  onDocumentScroll(event: Event): void {\r\n    this.hideCustomTooltip();\r\n  }\r\n}\r\n",
            "styleUrl": "./monthly-exposure-chart.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 28,
                "jsdoctags": [
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit",
                "OnDestroy",
                "AfterViewInit"
            ],
            "templateData": "<div class=\"exposer-chart\">\r\n    <!-- Tooltip Container -->\r\n    <div id=\"custom-tooltip\" class=\"monthly-exposer-tooltip\" style=\"display: none;\"></div>\r\n    <div class=\"legends-rm-exposure\">\r\n      <label class=\"title\"> <div class=\"legends-exposure\"></div> Exposure</label>\r\n      <label class=\"title\"> <div class=\"recommended-hedging\"></div>Recommended hedging</label>\r\n      <label class=\"title\"> <div class=\"actual-hedging\"></div> Actual hedging</label>\r\n    </div>\r\n    <!-- ApexCharts Component -->\r\n    <div class=\"chart-wrapper\">\r\n      <apx-chart\r\n       *ngIf=\"paginatedSeries?.length\"\r\n        [series]=\"paginatedSeries\"\r\n        [chart]=\"chartOptions\"\r\n        [xaxis]=\"xAxisOptions\"\r\n        [yaxis]=\"yAxisOptions\"\r\n        [stroke]=\"strokeOptions\"\r\n        [dataLabels]=\"dataLabelsOptions\"\r\n        [legend]=\"legendOptions\"\r\n        [tooltip]=\"tooltipOptions\"\r\n        [plotOptions]=\"plotOptions\"\r\n        [fill]=\"fillOptions\">\r\n      </apx-chart>\r\n      <div class=\"pagination-wrap\" *ngIf=\"chartSeries[1].data.length > 12\">\r\n        <mat-paginator id=\"paginationMonthlyExposureChart\" [pageSize]=\"12\" [length]=\"chartSeries[1].data.length\" (page)=\"onPageChange($event)\" aria-label=\"Select page of users\"></mat-paginator>\r\n      </div>\r\n    </div>\r\n  </div>\r\n  "
        },
        {
            "name": "MonthlyExposureDetailsComponent",
            "id": "component-MonthlyExposureDetailsComponent-36af1e042741842139a310df4e909e1caea77715591ceee5f96c85e3d94ffa01f1a5c663129e5f92606e929c78b98f1cbbf80ac40ebc1e8949445f53261df150",
            "file": "src/app/risk-dashboard/components/cashflow-exposure/components/monthly-exposure-details/monthly-exposure-details.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-monthly-exposure-details",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./monthly-exposure-details.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "monthlyExposureObject",
                    "defaultValue": "{\r\n    pair: \"USD/ILS\",\r\n    sign: \"$\",\r\n    toCurrency: \"USD\",\r\n    selectedExposure: \"Selling\",\r\n    monthlyAmount: 100000,\r\n    monthlyPeriod: 12,\r\n    flag: \"https://okoora-stage-api2023.azurewebsites.net/Images/Flags/USD.png\",\r\n    code: \"USD\",\r\n    baseCurrencyFlag: \"https://okoora-stage-api2023.azurewebsites.net/Images/Flags/EUR.png\",\r\n    baseCurrency: \"ILS\",\r\n    baseCurrencySign: \"₪\"\r\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "monthlyPeriod",
                    "defaultValue": "12",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "number | undefined",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "valueWithComma",
                    "args": [
                        {
                            "name": "e",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "fraction",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "e",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "fraction",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "MatProgressBarModule",
                    "type": "module"
                },
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\r\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\r\nimport { CommonModule } from '@angular/common';\r\n@Component({\r\n  selector: 'app-monthly-exposure-details',\r\n  imports: [MatProgressBarModule, CommonModule],\r\n  templateUrl: './monthly-exposure-details.component.html',\r\n  styleUrl: './monthly-exposure-details.component.scss'\r\n})\r\nexport class MonthlyExposureDetailsComponent {\r\n  @Input() monthlyPeriod: number | undefined = 12;\r\n  @Input() monthlyExposureObject: any = {\r\n    pair: \"USD/ILS\",\r\n    sign: \"$\",\r\n    toCurrency: \"USD\",\r\n    selectedExposure: \"Selling\",\r\n    monthlyAmount: 100000,\r\n    monthlyPeriod: 12,\r\n    flag: \"https://okoora-stage-api2023.azurewebsites.net/Images/Flags/USD.png\",\r\n    code: \"USD\",\r\n    baseCurrencyFlag: \"https://okoora-stage-api2023.azurewebsites.net/Images/Flags/EUR.png\",\r\n    baseCurrency: \"ILS\",\r\n    baseCurrencySign: \"₪\"\r\n  };\r\n\r\n  valueWithComma(e: any, fraction: any) {\r\n    if (e) {\r\n      const actualNumber = +e?.toString()?.replace(/,/g, '')\r\n      const formatted = actualNumber?.toLocaleString('en-US', { maximumFractionDigits: fraction })\r\n      return formatted\r\n    } else {\r\n      if (e == 0) {\r\n        return '0';\r\n      } else {\r\n        return false;\r\n      }\r\n    }\r\n  }\r\n}\r\n",
            "styleUrl": "./monthly-exposure-details.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"monthly-exposer-wrap\" *ngIf=\"monthlyExposureObject\">\r\n    <div class=\"exposer-desc-wrap\">\r\n        <div class=\"ml-exposure-details d-flex align-items-center\">\r\n            <div class=\"exposer-img\">\r\n                <img src=\"images/monthly-exposer-icon.svg\">\r\n            </div>\r\n            <div class=\"desc\">\r\n                <h3> Monthly exposure details </h3>\r\n                <p> Adjust buy/sell columns to match your monthly exposure. </p>\r\n            </div>\r\n        </div>\r\n        <div class=\"progress-container\">\r\n            <mat-progress-bar #formStepperProgress class=\"stepper-progressbar\" mode=\"determinate\"\r\n              value=\"100\"></mat-progress-bar> <span class=\"progress-count\"> 4/4 </span>\r\n        </div>\r\n    </div>\r\n    <div class=\"currency-wrap\">\r\n        <div class=\"exposer-item currency-pair\">\r\n            <div class=\"expo-head\"> Currencies pair </div>\r\n            <div class=\"desc\"> {{monthlyExposureObject?.pair}}</div>\r\n        </div>\r\n        <div class=\"exposer-item exposer-period\">\r\n            <div class=\"expo-head\"> Exposure period </div>\r\n            <div class=\"desc\"> {{monthlyPeriod || monthlyExposureObject?.monthlyPeriod}} <span> months</span></div>\r\n        </div>\r\n        <div class=\"exposer-item exposer-price\">\r\n            <div class=\"expo-head\"> Monthly exposure <span>{{monthlyExposureObject?.selectedExposure}}</span>\r\n            </div>\r\n            <div class=\"desc\">\r\n                <span>{{monthlyExposureObject?.sign}}</span>{{valueWithComma(monthlyExposureObject?.monthlyAmount, 2) }} \r\n                <!-- <ng-container\r\n                    *ngIf=\"exposureAmountCeil\">.</ng-container>\r\n                    <span>{{exposureAmountCeil}}</span> -->\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>"
        },
        {
            "name": "QuickHedgeDrawerComponent",
            "id": "component-QuickHedgeDrawerComponent-88ea422216a00d92450c98433293a7a9dad736b603ffe578b82d838890211dba1e9d3770dd5b0eab542cd7a23f50f1486cf86dfc900f47b2d6fbc0784552dd3e",
            "file": "src/app/risk-dashboard/components/hedging-proposal/components/quick-hedge-drawer/quick-hedge-drawer.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-quick-hedge-drawer",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./quick-hedge-drawer.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "closeDrawer",
                    "defaultValue": "new EventEmitter<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "intervalId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "mode",
                    "defaultValue": "'indeterminate'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "onHedgeNowClicked",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "selectedQuickHedgeData",
                    "defaultValue": "{\r\n      \"expiryDate\": \"17/11/2025\",\r\n      \"hedgeRate\": 4.4532,\r\n      \"protectAmount\": 84345.43,\r\n      \"recommendedHedgeAmount\": 8,\r\n      \"maxHedge_amount\": 25,\r\n      \"collateral\": 3.472,\r\n      \"totalExposureAmount\": 25,\r\n      \"openEditForSelling\": false,\r\n      \"status\": {\r\n        \"type\": 1,\r\n        \"descriprion\": \"Created\"\r\n      },\r\n      \"maxHedgeAmount\": 25,\r\n      \"recomendedHedgeAmount\": 8,\r\n      \"hedge\": {\r\n        \"strategyId\": 132772,\r\n        \"hedgeRate\": 4.4532,\r\n        \"expiryDate\": \"17/11/2025\",\r\n        \"price\": 0,\r\n        \"collateral\": 3.472,\r\n        \"productName\": \"LOCK & UP\",\r\n        \"productType\": 1,\r\n        \"notionalCurrency\": \"CHF\",\r\n        \"notionalCurrencySign\": \"CHF\",\r\n        \"secondCurrency\": \"ILS\",\r\n        \"secondCurrencySign\": \"₪\",\r\n        \"collateralCurrency\": \"ILS\",\r\n        \"liabilityRate\": 4.4532,\r\n        \"protectAmount\": 8\r\n      },\r\n      \"totalExposure\": 25,\r\n      \"alreadyHedge\": 0,\r\n      \"date\": \"17/11/2025\",\r\n      \"saveActivate\": false\r\n    }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "showProgressbar",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "tandcConfirmed",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "methodsClass": [
                {
                    "name": "closeHedgeDrawer",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 79,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getFormattedDate",
                    "args": [
                        {
                            "name": "dateStr",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 73,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "dateStr",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 124,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 64,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onCheckboxChange",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 100,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onHedgeNowBtnClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 109,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "openConditionsDisclosure",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 85,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "MatCheckboxModule",
                    "type": "module"
                },
                {
                    "name": "NgbTooltipModule",
                    "type": "module"
                },
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "MatProgressSpinnerModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Output } from '@angular/core';\r\nimport { MatCheckboxModule } from '@angular/material/checkbox';\r\nimport { HedgingDataService } from '../../hedging-data.service';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { HedgeTandcDetailsComponent } from '../hedge-tandc-details/hedge-tandc-details.component';\r\nimport { NgbTooltipModule } from '@ng-bootstrap/ng-bootstrap';\r\nimport { CommonModule, formatDate } from '@angular/common';\r\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\r\nimport { ActiveProtectionTraderoomComponent } from '../traderoom-components/active-protection-traderoom/active-protection-traderoom.component';\r\n\r\n@Component({\r\n  selector: 'app-quick-hedge-drawer',\r\n  imports: [MatCheckboxModule, NgbTooltipModule, CommonModule, MatProgressSpinnerModule ],\r\n  templateUrl: './quick-hedge-drawer.component.html',\r\n  styleUrl: './quick-hedge-drawer.component.scss'\r\n})\r\nexport class QuickHedgeDrawerComponent {\r\n  @Output() closeDrawer = new EventEmitter<void>();\r\n  tandcConfirmed: boolean = false;\r\n  onHedgeNowClicked: boolean = false;\r\n  showProgressbar = false;\r\n  mode = 'indeterminate'; // or 'determinate'\r\n  intervalId: any;\r\n  selectedQuickHedgeData =\r\n    {\r\n      \"expiryDate\": \"17/11/2025\",\r\n      \"hedgeRate\": 4.4532,\r\n      \"protectAmount\": 84345.43,\r\n      \"recommendedHedgeAmount\": 8,\r\n      \"maxHedge_amount\": 25,\r\n      \"collateral\": 3.472,\r\n      \"totalExposureAmount\": 25,\r\n      \"openEditForSelling\": false,\r\n      \"status\": {\r\n        \"type\": 1,\r\n        \"descriprion\": \"Created\"\r\n      },\r\n      \"maxHedgeAmount\": 25,\r\n      \"recomendedHedgeAmount\": 8,\r\n      \"hedge\": {\r\n        \"strategyId\": 132772,\r\n        \"hedgeRate\": 4.4532,\r\n        \"expiryDate\": \"17/11/2025\",\r\n        \"price\": 0,\r\n        \"collateral\": 3.472,\r\n        \"productName\": \"LOCK & UP\",\r\n        \"productType\": 1,\r\n        \"notionalCurrency\": \"CHF\",\r\n        \"notionalCurrencySign\": \"CHF\",\r\n        \"secondCurrency\": \"ILS\",\r\n        \"secondCurrencySign\": \"₪\",\r\n        \"collateralCurrency\": \"ILS\",\r\n        \"liabilityRate\": 4.4532,\r\n        \"protectAmount\": 8\r\n      },\r\n      \"totalExposure\": 25,\r\n      \"alreadyHedge\": 0,\r\n      \"date\": \"17/11/2025\",\r\n      \"saveActivate\": false\r\n    }\r\n\r\n  constructor(private hedgeService: HedgingDataService, private dialog: MatDialog) { }\r\n\r\n  ngOnInit(): void {\r\n    this.intervalId = setInterval(() => {\r\n      this.showProgressbar = true;\r\n      setTimeout(() => {\r\n        this.showProgressbar = false;\r\n      }, 3000)\r\n    }, 30000);\r\n  }\r\n\r\n  getFormattedDate(dateStr: string): string {\r\n    const [day, month, year] = dateStr.split('/').map(Number);\r\n    const dateObj = new Date(year, month - 1, day);\r\n    return formatDate(dateObj, 'dd MMM yyyy', 'en-US');\r\n  }\r\n\r\n  closeHedgeDrawer() {\r\n    this.tandcConfirmed  = false;\r\n    this.onHedgeNowClicked = false;\r\n    this.hedgeService?.closeQuickHedgeDrawer();\r\n  }\r\n\r\n  openConditionsDisclosure() {\r\n    const dialogRef = this.dialog.open(HedgeTandcDetailsComponent, {\r\n      width: '627px',\r\n      disableClose: true,\r\n      panelClass: 'terms-disclosure-hedging',\r\n      data: { someData: 'pass any data if needed' }\r\n    });\r\n\r\n    dialogRef.afterClosed().subscribe(result => {\r\n      if (result === 'confirmed') {\r\n        this.tandcConfirmed = true; // Set the confirmation flag to true\r\n      }\r\n    });\r\n  }\r\n\r\n  onCheckboxChange(event:any) {\r\n    this.onHedgeNowClicked = false\r\n    if (!event.checked) {\r\n      this.tandcConfirmed = false;\r\n    } else {\r\n      this.tandcConfirmed = true;\r\n    }\r\n  }\r\n\r\n  onHedgeNowBtnClick() {\r\n    this.onHedgeNowClicked = true;\r\n    if (this.tandcConfirmed) { \r\n      const dialogRef = this.dialog.open(ActiveProtectionTraderoomComponent, {\r\n        width: '100vw',\r\n        maxWidth: '100vw',\r\n        disableClose: true,\r\n        panelClass: 'hedging-active-protection',\r\n      });\r\n  \r\n      dialogRef.afterClosed().subscribe(result => {\r\n      });\r\n    }\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    if (this.intervalId) {\r\n      clearInterval(this.intervalId);\r\n    }\r\n  }\r\n}\r\n",
            "styleUrl": "./quick-hedge-drawer.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "hedgeService",
                        "type": "HedgingDataService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 60,
                "jsdoctags": [
                    {
                        "name": "hedgeService",
                        "type": "HedgingDataService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<aside class=\"hedge-sidebar-container loader-wrapper\">\r\n    <!-- Close Button -->\r\n    <button class=\"close-btn\" aria-label=\"Close\" (click)=\"closeHedgeDrawer()\">\r\n      <img src=\"images/close-btn-cashflow.svg\" alt=\"Close\" />\r\n    </button>\r\n  \r\n    <!-- Title -->\r\n    <header class=\"hedge-header\">\r\n      <h2 class=\"hedge-title\">\r\n        Quick hedge\r\n      </h2>\r\n    </header>\r\n    <div class=\"bg-white section-loader\"></div>\r\n    <!-- Hedge Information -->\r\n    <section class=\"hedge-info\">\r\n      <div class=\"hedge-amount\">\r\n        <label for=\"hedge-amount-value\">Amount to hedge</label>\r\n        <span id=\"hedge-amount-value\">\r\n          {{selectedQuickHedgeData.hedge.notionalCurrencySign}}{{selectedQuickHedgeData.hedge.protectAmount}}\r\n        </span>\r\n      </div>\r\n      <button class=\"forward-btn\">Forward</button>\r\n    </section>\r\n  \r\n    <!-- Conditional Sections -->\r\n    <section class=\"info-section\">\r\n      <div class=\"info-wrapper\">\r\n        <div class=\"sub-info\">\r\n          <label>Expiry date</label>\r\n          <span class=\"content\">\r\n            {{ getFormattedDate(selectedQuickHedgeData.expiryDate) }}\r\n          </span>          \r\n        </div>\r\n        <div class=\"sub-info\">\r\n          <label>Currencies</label>\r\n          <span class=\"content\">{{selectedQuickHedgeData.hedge.notionalCurrency}}/{{selectedQuickHedgeData.hedge.secondCurrency}}</span>\r\n        </div>\r\n      </div>\r\n    </section>\r\n  \r\n    <!-- Rates Information -->\r\n    <section class=\"info-section\">\r\n      <div class=\"info-wrapper\">\r\n        <div class=\"sub-info\">\r\n          <label>Hedge rate</label>\r\n          <div class=\"rate-content\">\r\n            <mat-progress-spinner *ngIf=\"showProgressbar\" [diameter]=\"50\" mode=\"indeterminate\" class=\"rate-update-spinner\"> </mat-progress-spinner>\r\n            <span class=\"content primary-value\">{{selectedQuickHedgeData.hedge.hedgeRate}}</span>\r\n          </div>\r\n        </div>\r\n        <div class=\"sub-info\">\r\n          <label>Liability rate</label>\r\n          <span class=\"content primary-value\">{{selectedQuickHedgeData.hedge.liabilityRate}}</span>\r\n        </div>\r\n      </div>\r\n    </section>\r\n  \r\n    <!-- Collateral and Price Information -->\r\n    <section class=\"info-section\">\r\n      <div class=\"info-wrapper\">\r\n        <div class=\"sub-info\"> \r\n          <label>Required collateral <img class=\"z-1 tool-tip-cs\" [tooltipClass]=\"'collateral-amount-ttp'\" [ngbTooltip]=\"requiredCollateralttp\" src=\"images/circle-help.svg\" container=\"body\" placement=\"top\" />\r\n            <!-- <a class=\"hedge-deposit-link\">Make a deposit</a>  -->\r\n          </label>\r\n          <span class=\"content\">{{selectedQuickHedgeData.hedge.secondCurrencySign}}{{selectedQuickHedgeData.hedge.collateral}}</span>\r\n        </div>\r\n        <div class=\"sub-info\">\r\n          <label>Price \r\n            <!-- <a class=\"hedge-deposit-link\">Make a deposit</a> -->\r\n          </label> \r\n          <span class=\"content\">{{selectedQuickHedgeData.hedge.secondCurrencySign}}{{selectedQuickHedgeData.hedge.price}}</span>\r\n        </div>\r\n      </div>\r\n      <ng-template #requiredCollateralttp>\r\n        <div class=\"recommended-shield-ttp\">Assets pledged to cover hedging losses, based on risk.</div>\r\n     </ng-template>\r\n    </section>\r\n  \r\n    <!-- Conditions Acknowledgement -->\r\n    <section class=\"conditions-section\">\r\n      <p class=\"read-conditions\">\r\n        I am aware that during the transaction term, additional collateral requirements may be determined in accordance with market fluctuations and the company's requirements. If these requirements are not met promptly, the company may, at its discretion, take actions including but not limited to closing the transaction and forfeiting the collateral amount.\r\n      </p>\r\n    </section>\r\n  \r\n    <!-- Footer Actions -->\r\n    <footer class=\"action-footer\">\r\n      <mat-checkbox [checked]=\"tandcConfirmed\" [ngClass]=\"{'not-confirmed': !tandcConfirmed && onHedgeNowClicked}\" (change)=\"onCheckboxChange($event)\"\r\n        class=\"tick-condition\">\r\n        I confirm the general <button (click)=\"openConditionsDisclosure()\">conditions and disclosure</button> about the risk.\r\n      </mat-checkbox>\r\n      <button (click)=\"onHedgeNowBtnClick()\"\r\n        class=\"hedge-now single-hedge\">\r\n        Hedge now\r\n      </button>\r\n      <p class=\"refresh-in\" style=\"display: none;\">\r\n        <span>Insufficient funds in wallet. <a class=\"hedge-deposit-link\">Make a deposit</a></span>\r\n      </p>\r\n      <div class=\"transaction-unavailable-wrapper\" style=\"display: none;\">\r\n        <img src=\"images/error-outline.svg\" alt=\"error\">\r\n        <p class=\"transaction-unavailable-err\">Some transactions are unavailable and won't be included in the Hedge All action. You can continue with available transactions or <a>refresh</a> the page <span>(unsaved changes will be lost).</span> </p>\r\n      </div>\r\n    </footer>\r\n  </aside>"
        },
        {
            "name": "ResetPasswordComponent",
            "id": "component-ResetPasswordComponent-eff079b16fc86ef6a8bab48311feb4cf1abc2b563d12eb0f8a6eb149e3951032e8de116d96df6b8c474549b0b5dbb34cddd7221bfaff61b6d130a827f31844b6",
            "file": "src/app/login/reset-password/reset-password.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-reset-password",
            "styleUrls": [
                "./reset-password.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./reset-password.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_hasDigit",
                    "defaultValue": "this.Validation.hasDigit",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "_hasLowerCase",
                    "defaultValue": "this.Validation.hasLowerCase",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "_hasSpecial",
                    "defaultValue": "this.Validation.hasSpecial",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "_hasUpperCase",
                    "defaultValue": "this.Validation.hasUpperCase",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "error",
                    "defaultValue": "\"\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "hasDigit",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "hasEight",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "hasLower",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "hasSpecial",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "hasUpper",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "hideConfPassword",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "hidePassword",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "illegall",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "invalidAccount",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "isPasswordNotMatch",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "minPasswordLength",
                    "defaultValue": "8",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "needVerification",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "resetPasswordForm",
                    "defaultValue": "new FormGroup({\r\n    email: new FormControl('', [Validators.required, Validators.email]),\r\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 44
                },
                {
                    "name": "showLoader",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "typeVerification",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "Validation",
                    "defaultValue": "{\r\n    hasLowerCase: /[a-z]/,\r\n    hasUpperCase: /[A-Z]/,\r\n    hasDigit: /\\d/,\r\n    hasSpecial: /[!@#$%^&*\\(\\)\\_\\-\\[\\]\\{}\\\\=+|;':\",.\\/<>?]/,\r\n    minPasswordLength: 8\r\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 26
                }
            ],
            "methodsClass": [
                {
                    "name": "navigateToLogin",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 70,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "passwordValidator",
                    "args": [],
                    "optional": false,
                    "returnType": "ValidatorFn",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "resetFormErrors",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 77,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "resetPassword",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 81,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "MatIconModule",
                    "type": "module"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                },
                {
                    "name": "CodeVerificationComponent",
                    "type": "component"
                },
                {
                    "name": "TranslateModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { AbstractControl, FormControl, FormGroup, ReactiveFormsModule, ValidatorFn, Validators } from '@angular/forms';\r\nimport { Router } from '@angular/router';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { CommonModule } from '@angular/common';\r\nimport { CodeVerificationComponent } from '../code-verification/code-verification.component';\r\nimport { TranslateModule } from '@ngx-translate/core';\r\n\r\n@Component({\r\n  selector: 'app-reset-password',\r\n  templateUrl: './reset-password.component.html',\r\n  styleUrls: ['./reset-password.component.scss'],\r\n  imports: [CommonModule, MatIconModule, ReactiveFormsModule, CodeVerificationComponent, TranslateModule],\r\n})\r\nexport class ResetPasswordComponent implements OnInit {\r\n  hidePassword = true;\r\n  hideConfPassword = true;\r\n  typeVerification!: string;\r\n  illegall!: boolean;\r\n  hasLower!: boolean;\r\n  minPasswordLength: number = 8;\r\n  hasEight!: boolean;\r\n  hasUpper!: boolean;\r\n  hasDigit!: boolean;\r\n  hasSpecial!: boolean;\r\n  Validation = {\r\n    hasLowerCase: /[a-z]/,\r\n    hasUpperCase: /[A-Z]/,\r\n    hasDigit: /\\d/,\r\n    hasSpecial: /[!@#$%^&*\\(\\)\\_\\-\\[\\]\\{}\\\\=+|;':\",.\\/<>?]/,\r\n    minPasswordLength: 8\r\n  }\r\n  _hasLowerCase = this.Validation.hasLowerCase;\r\n  _hasUpperCase = this.Validation.hasUpperCase;\r\n  _hasDigit = this.Validation.hasDigit;\r\n  _hasSpecial = this.Validation.hasSpecial;\r\n  isPasswordNotMatch = false;\r\n  invalidAccount = false;\r\n  needVerification = false;\r\n  showLoader = false;\r\n  error = \"\"\r\n \r\n\r\n  resetPasswordForm = new FormGroup({\r\n    email: new FormControl('', [Validators.required, Validators.email]),\r\n  })\r\n\r\n  constructor(private router: Router) { }\r\n\r\n\r\n  ngOnInit() {\r\n    this.resetFormErrors();\r\n    this.resetPasswordForm.valueChanges.subscribe(() => {\r\n      this.resetFormErrors();\r\n    });\r\n  }\r\n\r\n  passwordValidator(): ValidatorFn {\r\n    const passwordPattern = /^(?=.*[A-Z])(?=.*[a-z])(?=.*\\d)[A-Za-z\\d!@#$%^&*]*$/;\r\n\r\n    return (control: AbstractControl): { [key: string]: any } | null => {\r\n      const value = control.value;\r\n      if (!value || !passwordPattern.test(value)) {\r\n        return { 'invalidPassword': true };\r\n      }\r\n      return null;\r\n    };\r\n  }\r\n\r\n  navigateToLogin() {\r\n    if (this.needVerification) {\r\n      this.needVerification = false;\r\n    } else {\r\n      this.router.navigate(['/login']);\r\n    }\r\n  }\r\n  resetFormErrors() {\r\n    this.error = \"\";\r\n    this.invalidAccount = false;\r\n  }\r\n  resetPassword() {\r\n    this.resetFormErrors();\r\n    this.resetPasswordForm.markAllAsTouched(); // trigger validation messages\r\n\r\n    if (this.resetPasswordForm.invalid) {\r\n      return; // prevent proceeding if form is invalid\r\n    }\r\n\r\n  // Proceed only if form is valid\r\n    this.needVerification = true;\r\n    this.typeVerification = 'SMS';\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"../login.component.scss\";\r\n.submit-btn {\r\n  margin-top: 18px;\r\n\r\n  &.send-sms-btn {\r\n    margin-bottom: 15px;\r\n  }\r\n  &::ng-deep {\r\n    .loader {\r\n      position: absolute;\r\n      top: 0;\r\n      bottom: 0;\r\n      margin: auto;\r\n      right: 0;\r\n      left: 0;\r\n      justify-content: center;\r\n      border-radius: 20px;\r\n    }\r\n  }\r\n}\r\n",
                    "styleUrl": "./reset-password.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 46,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<section class=\"auth-section\">\r\n  <div class=\"left-side\">\r\n    <div class=\"form-wrapper\">\r\n      <ng-container>\r\n        <a class=\"back-btn\" (click)=\"navigateToLogin()\" id=\"back_to_login\">\r\n          <mat-icon>chevron_left</mat-icon>\r\n          <span *ngIf=\"!needVerification\">Back to login</span>\r\n          <span *ngIf=\"needVerification\">Back</span>\r\n        </a>\r\n        <ng-container *ngIf=\"!needVerification\">\r\n          <h3 class=\"heading forgot-password-heading\">Forgot password</h3>\r\n          <form #resetForm=\"ngForm\" [formGroup]=\"resetPasswordForm\"\r\n            (ngSubmit)=\"resetPassword()\">\r\n            <div class=\"form-group\">\r\n              <label for=\"email\">Enter the email address associated with your account</label>\r\n              <input type=\"email\" id=\"email\" name=\"email\" formControlName=\"email\" email required\r\n                id=\"associated_email_field\">\r\n              <div *ngIf=\"resetForm.submitted && resetPasswordForm.controls.email.hasError('required')\" class=\"error-msg fg-pass-err\">This field is required</div>\r\n              <div *ngIf=\"resetForm.submitted && resetPasswordForm.controls.email.hasError('email')\" class=\"error-msg fg-pass-err\">Please enter valid email</div>\r\n\r\n              <span *ngIf=\"resetForm.submitted && invalidAccount\" class=\"error-msg\">Account does not exist</span>\r\n            </div>\r\n            <button class=\"submit-btn send-sms-btn\" [class.disabled]=\"showLoader||error\" [disabled]=\"showLoader\"\r\n              id=\"button_send_email\">Send SMS\r\n            </button>\r\n          </form>\r\n        </ng-container>\r\n      </ng-container>\r\n      <app-code-verification *ngIf=\"needVerification\" [typeVerification]=\"typeVerification\"\r\n        [formData]=\"resetPasswordForm.value\" type=\"forgot-password\"\r\n        (back)=\"needVerification = false\"></app-code-verification>\r\n    </div>\r\n  </div>\r\n  <div class=\"right-side\">\r\n    <div class=\"content\">\r\n      <img class=\"logo\" src=\"images/abcm-logo.svg\" alt=\"logo\" />\r\n      <h1 class=\"main-heading\">The World's First</h1>\r\n      <h2 class=\"sub-heading\">Automated business currency management</h2>\r\n    </div>\r\n  </div>\r\n</section>"
        },
        {
            "name": "RiskEstimateChartComponent",
            "id": "component-RiskEstimateChartComponent-98bdb5d2716dabeb08ca5fefa8f46ad2dbfba89024e7ebb5dff3212146c01c41b1d95a0ead7e0826554708ccdfac9223899170d86be1edb59ea14175a43fca0c",
            "file": "src/app/risk-dashboard/components/dashboard/components/risk-estimate-chart/risk-estimate-chart.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-risk-estimate-chart",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./risk-estimate-chart.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "annualLoss",
                    "defaultValue": "'₪4,476,001.2'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "avgbenchmarkloss",
                    "defaultValue": "'₪3,170,001.2'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 32,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "avginitialloss",
                    "defaultValue": "'₪5,220,001.2'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 31,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "avgmyloss",
                    "defaultValue": "'₪5,220,001.2'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 33,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "benchmarkloss",
                    "defaultValue": "'₪2,685,001.2'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "benchmarkRotate",
                    "defaultValue": "65",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "initialloss",
                    "defaultValue": "'₪4,476,001.2'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "myloss",
                    "defaultValue": "'₪4,476,001.2'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 30,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "selectedYear",
                    "defaultValue": "'Y10'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "totalRiskLevel",
                    "defaultValue": "'HIGH'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "graphtooltip",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NgbTooltip",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'graphtooltip', {static: false}"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "MatFormFieldModule",
                    "type": "module"
                },
                {
                    "name": "MatSelectModule",
                    "type": "module"
                },
                {
                    "name": "MatCardModule",
                    "type": "module"
                },
                {
                    "name": "MatTableModule",
                    "type": "module"
                },
                {
                    "name": "MatButtonModule",
                    "type": "module"
                },
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "NgbTooltipModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { Component, Input, ViewChild } from '@angular/core';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatCardModule } from '@angular/material/card';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { MatTableModule } from '@angular/material/table';\r\nimport { NgbTooltip, NgbTooltipModule } from '@ng-bootstrap/ng-bootstrap';\r\n\r\n@Component({\r\n  selector: 'app-risk-estimate-chart',\r\n  imports: [MatFormFieldModule,\r\n    MatSelectModule,\r\n    MatCardModule,\r\n    MatTableModule,\r\n    MatButtonModule,\r\n    CommonModule,\r\n    NgbTooltipModule],\r\n  templateUrl: './risk-estimate-chart.component.html',\r\n  styleUrl: './risk-estimate-chart.component.scss'\r\n})\r\nexport class RiskEstimateChartComponent {\r\n  @ViewChild('graphtooltip', { static: false }) graphtooltip!: NgbTooltip;\r\n  @Input() selectedYear: string = 'Y10';\r\n  @Input() totalRiskLevel: string = 'HIGH';\r\n  @Input() benchmarkRotate: number = 65;\r\n  @Input() annualLoss: string = '₪4,476,001.2';\r\n  @Input() initialloss: string = '₪4,476,001.2';\r\n  @Input() benchmarkloss: string = '₪2,685,001.2';\r\n  @Input() myloss: string = '₪4,476,001.2';\r\n  @Input() avginitialloss: string = '₪5,220,001.2';\r\n  @Input() avgbenchmarkloss: string = '₪3,170,001.2';\r\n  @Input() avgmyloss: string = '₪5,220,001.2';\r\n  ngAfterViewInit(): void {\r\n    setTimeout(() => {\r\n      this.graphtooltip.open(); // Open the tooltip by default\r\n    }, 100);\r\n  }\r\n  \r\n  public get riskColor() : string {\r\n    if(this.totalRiskLevel == 'HIGH'){\r\n      return '#d92d20';\r\n    }else if(this.totalRiskLevel == 'MEDIUM'){\r\n      return '#DC6803'\r\n    }else if(this.totalRiskLevel == 'LOW'){\r\n      return '#079455'\r\n    }else{\r\n      return '#d92d20'\r\n    }\r\n  }\r\n  public get benchmark() : string {\r\n    if(this.totalRiskLevel == 'HIGH'){\r\n      return 'above';\r\n    }else if(this.totalRiskLevel == 'MEDIUM'){\r\n      return 'similar'\r\n    }else if(this.totalRiskLevel == 'LOW'){\r\n      return 'below'\r\n    }else{\r\n      return 'above'\r\n    }\r\n  }\r\n  public get riskangle() : number {\r\n    if(this.totalRiskLevel == 'HIGH'){\r\n      return 130;\r\n    }else if(this.totalRiskLevel == 'MEDIUM'){\r\n      return 66\r\n    }else if(this.totalRiskLevel == 'LOW'){\r\n      return 0\r\n    }else{\r\n      return 130\r\n    }\r\n  }\r\n}\r\n",
            "styleUrl": "./risk-estimate-chart.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "accessors": {
                "riskColor": {
                    "name": "riskColor",
                    "getSignature": {
                        "name": "riskColor",
                        "type": "string",
                        "returnType": "string",
                        "line": 40
                    }
                },
                "benchmark": {
                    "name": "benchmark",
                    "getSignature": {
                        "name": "benchmark",
                        "type": "string",
                        "returnType": "string",
                        "line": 51
                    }
                },
                "riskangle": {
                    "name": "riskangle",
                    "getSignature": {
                        "name": "riskangle",
                        "type": "number",
                        "returnType": "number",
                        "line": 62
                    }
                }
            },
            "templateData": "<div class=\"loader-wrapper\">\r\n    <div class=\"risk-estimate-wrapper\">\r\n        <div class=\"estimate-head\">\r\n            <h3 class=\"head-title\">What is my risk estimate?</h3>\r\n            <p class=\"head-sub\">You are at risk when the <span class=\"risk-up\">USD goes up </span> <img src=\"images/cross-arrow-icon.svg\"\r\n                    alt=\"Arrow\"></p>\r\n        </div>\r\n        <ng-template #graphtool>\r\n            Benchmark\r\n        </ng-template>\r\n        <ng-template #minlose>\r\n            Minimal expected loss under extreme conditions\r\n        </ng-template>\r\n        <ng-template #avglose>\r\n            Average expected loss under extreme conditions\r\n        </ng-template>\r\n\r\n        <div class=\"risk-esti-chart-wrapper\">\r\n            <div class=\"chart-inner\">\r\n                <img src=\"images/risk-estimate-circle.svg\" alt=\"Risk Estimate Circle\">\r\n                <div class=\"benchmark-circle\" [style.transform]=\"'rotate(' + benchmarkRotate + 'deg)'\">\r\n                    <div class=\"benchmark-pointer\"\r\n                        [ngbTooltip]=\"graphtool\"\r\n                        [autoClose]=\"false\"\r\n                        #graphtooltip=\"ngbTooltip\"\r\n                        placement=\"top\"\r\n                        triggers=\"manual\"\r\n                        tooltipClass=\"risk-dash-tooltip-benchmark\"\r\n                        container=\"body\">\r\n                      <svg width=\"17\" height=\"25\" viewBox=\"0 0 17 25\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                        <path\r\n                          d=\"M16.4238 0.703854L14.4981 24.824L11.8892 24.6157L13.815 0.495527L16.4238 0.703854ZM9.89539 0.287289L9.25246 24.4758L6.636 24.4062L7.27907 0.217773L9.89539 0.287289ZM3.94499 24.4062L1.32867 24.4758L0.685593 0.287289L3.30206 0.217773L3.94499 24.4062Z\"\r\n                          fill=\"#344054\" />\r\n                      </svg>\r\n                    </div>\r\n                  </div>\r\n                <div class=\"chart-circle\" [style.transform]=\"'rotate(' + riskangle + 'deg)'\">\r\n                    <svg class=\"circle-pointer\" width=\"41\" height=\"74\" viewBox=\"0 0 41 74\" fill=\"none\"\r\n                        xmlns=\"http://www.w3.org/2000/svg\">\r\n                        <path d=\"M37.9327 28.5146L31.4657 37.682L26.7599 27.4977L37.9327 28.5146Z\" [style.fill]=\"riskColor\" />\r\n                        <path d=\"M36.7194 71.1411C36.7194 42.6422 23.2795 17.4227 2.66016 2.0228\" [style.stroke]=\"riskColor\"\r\n                            stroke-width=\"4\" stroke-miterlimit=\"10\" stroke-linecap=\"round\" />\r\n                    </svg>\r\n                </div>\r\n\r\n                <div class=\"chart-info\">\r\n                    <div class=\"desc\">\r\n                        <h4 class=\"risk-level-text\">Total Risk Level</h4>\r\n                        <h3 class=\"risk-label\" [style.color]=\"riskColor\">{{totalRiskLevel}}</h3>\r\n                        <p class=\"info\">and <span [style.color]=\"riskColor\">{{benchmark}}</span> the benchmark</p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n        <div class=\"risk-estimate-info-wrapper\">\r\n            <div class=\"lose-info\">\r\n                <h4 class=\"info-title\"> <img src=\"images/risk-warn-icon.svg\" alt=\"Warning\">How much can I lose?</h4>\r\n                <div class=\"lose-desc\">\r\n                    <p><span class=\"desc\">Under extreme conditions, </span> <span class=\"every\">once every </span>\r\n                        <mat-select class=\"year-selector\" [(value)]=\"selectedYear\" panelClass=\"risk-estimate-chart-ddl\">\r\n                            <mat-option value=\"Y5\">5 years</mat-option>\r\n                            <mat-option value=\"Y10\" selected>10 years</mat-option>\r\n                            <mat-option value=\"Y20\">20 years</mat-option>\r\n                        </mat-select>,\r\n                    </p>\r\n                    <p class=\"annual-lose\">your annual loss will exceed <span>{{annualLoss}}</span></p>\r\n                </div>\r\n            </div>\r\n\r\n            <div class=\"lose-wrapper\">\r\n                <div class=\"min-expected-lose\">\r\n                    <h4 class=\"item-title\">Minimum expected lost <img src=\"images/annual-title-help-icon.svg\"\r\n                            alt=\"Help\" [ngbTooltip]=\"minlose\" placement=\"top\" tooltipClass=\"risk-dash-tooltip--rm\"></h4>\r\n\r\n                    <div class=\"lose-item\">\r\n                        <h5 class=\"exceed-title\">Initial loss level</h5>\r\n                        <div class=\"initial lose-bar\" style=\"width: 100%\" \r\n                        ngbTooltip=\"$4,476\" placement=\"top\"\r\n                        tooltipClass=\"risk-dash-tooltip--rm\">{{initialloss}}</div>\r\n                    </div>\r\n\r\n                    <div class=\"lose-item\">\r\n                        <h5 class=\"exceed-title\">Benchmark loss level</h5>\r\n                        <div class=\"benchmark lose-bar\" style=\"width: 80%\"\r\n                        ngbTooltip=\"$3,476\" placement=\"top\"\r\n                        tooltipClass=\"risk-dash-tooltip--rm\">{{benchmarkloss}}</div>\r\n                    </div>\r\n\r\n                    <div class=\"lose-item\">\r\n                        <h5 class=\"exceed-title\">My loss level</h5>\r\n                        <div class=\"my lose-bar\" style=\"width: 100%\"\r\n                        ngbTooltip=\"$4,476\" placement=\"top\"\r\n                        tooltipClass=\"risk-dash-tooltip--rm\">{{myloss}}</div>\r\n                    </div>\r\n                </div>\r\n                \r\n                <div class=\"average-expected-lose\">\r\n                    <h4 class=\"item-title\">Average expected lost <img src=\"images/annual-title-help-icon.svg\"\r\n                        alt=\"Help\" [ngbTooltip]=\"avglose\" placement=\"auto\" tooltipClass=\"risk-dash-tooltip--rm\"></h4>\r\n\r\n                    <div class=\"lose-item\">\r\n                        <div class=\"initial lose-bar\" style=\"width: 100%\"\r\n                        ngbTooltip=\"$4,476\" placement=\"top\"\r\n                        tooltipClass=\"risk-dash-tooltip--rm\">{{avginitialloss}}</div>\r\n                    </div>\r\n\r\n                    <div class=\"lose-item\">\r\n                        <div class=\"benchmark lose-bar\" style=\"width: 80%\"\r\n                        ngbTooltip=\"$4,476\" placement=\"top\"\r\n                        tooltipClass=\"risk-dash-tooltip--rm\">{{avgbenchmarkloss}}</div>\r\n                    </div>\r\n\r\n                    <div class=\"lose-item\">\r\n                        <div class=\"my lose-bar\" style=\"width: 95%\"\r\n                        ngbTooltip=\"$4,476\" placement=\"top\"\r\n                        tooltipClass=\"risk-dash-tooltip--rm\">{{avgmyloss}}</div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>"
        },
        {
            "name": "SelectCountryComponent",
            "id": "component-SelectCountryComponent-6e7b9568bf8088cc0fe17bb6e09938f22dfa1bf3cb10f4289d08472d407f8b292011f85920a4d49ff2cfa07d73d9223b70f490783a2e7b3e6fa8a3b7d291ada8",
            "file": "src/app/sign-up/fields/select-country/select-country.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-select-country",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./select-country.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "currentformControlName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "currentFormGroup",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "FormGroup",
                    "decorators": []
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "formFieldType",
                    "defaultValue": "'DEFAULT'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "\"DEFAULT\" | \"CUSTOM-FORM-FIELD\"",
                    "decorators": []
                },
                {
                    "name": "handlerOnBlur",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "function",
                    "decorators": []
                },
                {
                    "name": "kycForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "FormGroup",
                    "decorators": []
                },
                {
                    "name": "matLabelTranslation",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "specialClasses",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "componentDestroyed",
                    "defaultValue": "new Subject<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "countryArr",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                }
            ],
            "methodsClass": [
                {
                    "name": "handleCountryNameSearch",
                    "args": [
                        {
                            "name": "e",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "e",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleCountryNameSearchBlur",
                    "args": [
                        {
                            "name": "data",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 67,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 119,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "restrictSpecialCharacters",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 104,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDisabled",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 98,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "trimLabel",
                    "args": [
                        {
                            "name": "label",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 61,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "label",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                },
                {
                    "name": "MatAutocompleteModule",
                    "type": "module"
                },
                {
                    "name": "MatFormFieldModule",
                    "type": "module"
                },
                {
                    "name": "MatInputModule",
                    "type": "module"
                },
                {
                    "name": "ErrorComponent",
                    "type": "component"
                },
                {
                    "name": "ErrorComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\r\nimport { FormGroup, ReactiveFormsModule } from '@angular/forms';\r\nimport { Subject, skipWhile, takeUntil, switchMap } from 'rxjs';\r\nimport { countryData } from '../country-data';\r\nimport { CommonModule } from '@angular/common';\r\nimport { MatAutocompleteModule } from '@angular/material/autocomplete';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { KycService } from '../../services/kyc.service';\r\nimport { ErrorComponent } from \"../error/error.component\";\r\n\r\n@Component({\r\n  selector: 'app-select-country',\r\n  imports: [CommonModule, ReactiveFormsModule, MatAutocompleteModule, MatFormFieldModule, MatInputModule, ErrorComponent, ErrorComponent],\r\n  templateUrl: './select-country.component.html',\r\n  styleUrl: './select-country.component.scss'\r\n})\r\nexport class SelectCountryComponent implements OnInit {\r\n  componentDestroyed = new Subject<any>();\r\n  countryArr!: any[];\r\n  @Input(\"kycForm\") kycForm!: FormGroup;\r\n  @Input('disabled') disabled: boolean = false;\r\n  @Input(\"currentFormGroup\") currentFormGroup!: FormGroup;\r\n  @Input(\"currentformControlName\") currentformControlName!: string;\r\n  @Input(\"matLabelTranslation\") matLabelTranslation!: string;\r\n  @Input(\"handlerOnBlur\") handlerOnBlur?: () => void;\r\n  @Input(\"specialClasses\") specialClasses!: string;\r\n  @Input(\"formFieldType\") formFieldType: 'DEFAULT' | 'CUSTOM-FORM-FIELD' = 'DEFAULT';\r\n\r\n  constructor( private kycS: KycService\r\n  ) {\r\n  }\r\n\r\n  ngOnInit(): void {\r\n      this.kycS.allCountries$\r\n          .pipe(\r\n              skipWhile(countries => !Array.isArray(countries)),\r\n              takeUntil(this.componentDestroyed)\r\n          )\r\n          .subscribe(countries => {\r\n              this.countryArr = countries;\r\n        });\r\n\r\n      this.countryArr = countryData\r\n\r\n      this.kycS.handleResetCountries$\r\n          .pipe(\r\n              switchMap(() => this.kycS.allCountries$)\r\n          )\r\n          .subscribe(allCountries => {\r\n              this.countryArr = allCountries;\r\n              this.currentFormGroup.get(this.currentformControlName)!.setValue('');\r\n          });\r\n      this.setDisabled();\r\n  };//#ngOnInit\r\n\r\n  handleCountryNameSearch(e: Event) {\r\n      this.countryArr = this.kycS.handleCountrySearch({event: e, action: 'NAME'})\r\n  }\r\n\r\n  trimLabel(label:any) {\r\n     const newLabel = label.replace(/\\s+/g, '');;\r\n     return newLabel\r\n  }\r\n\r\n\r\n  handleCountryNameSearchBlur(data: { event: Event, parentFormGroup: FormGroup, controlName: string }) {\r\n      const {event, parentFormGroup, controlName} = data;\r\n\r\n      if (!parentFormGroup) {\r\n          console.error(`you must provide a parentFormGroup, \\n given ${parentFormGroup}`);\r\n          return;\r\n      }\r\n      if (!controlName) {\r\n          console.error(`you must provide a controlName, \\n given ${controlName}`);\r\n          return;\r\n      }\r\n      if (!parentFormGroup.get(controlName)) {\r\n          console.error(`the control name (${controlName}) from parent form group is falsy`);\r\n          return;\r\n      }\r\n      let countrySearched = parentFormGroup.get(controlName)?.value?.toLowerCase();\r\n      let foundCountry = countryData.find(c => c.countryName.toLowerCase() === countrySearched || c.countryName.toLowerCase().includes(countrySearched));\r\n\r\n      if (!foundCountry) {\r\n          parentFormGroup.get(controlName)!.setValue('');\r\n          parentFormGroup.get(controlName)!.setErrors({ countryNotFound: true });\r\n          parentFormGroup.get(controlName)!.updateValueAndValidity();\r\n          this.countryArr = this.kycS.allCountries$.getValue();\r\n      } else {\r\n          parentFormGroup.get('countryCode')!.setValue(foundCountry.countryCode);\r\n      }\r\n      if (this.handlerOnBlur) {\r\n          this.handlerOnBlur();\r\n      }\r\n  }\r\n\r\n  setDisabled() {\r\n      if (this.disabled) {\r\n          this.currentFormGroup.controls[this.currentformControlName].disable();\r\n      }\r\n  }\r\n\r\n  restrictSpecialCharacters(event: any) {\r\n      if (event?.target?.value?.length === 0 && (event?.key === \"0\" || event?.key === \".\")) {\r\n        event?.preventDefault();\r\n      }\r\n      else {\r\n        if (event?.key == \".\" && event?.target?.value.includes(\".\")) {\r\n          event?.preventDefault();\r\n        }\r\n        const allowedKeys = /^[a-zA-Z0-9.]$/;\r\n        if (!allowedKeys.test(event.key) && !['Backspace', 'Tab', 'ArrowLeft', 'ArrowRight', 'Enter'].includes(event.key)) {\r\n          event.preventDefault();\r\n        }\r\n      }\r\n    }\r\n\r\n  ngOnDestroy() {\r\n      this.componentDestroyed.next(null);\r\n      this.componentDestroyed.complete();\r\n  };\r\n}\r\n",
            "styleUrl": "./select-country.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "kycS",
                        "type": "KycService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 28,
                "jsdoctags": [
                    {
                        "name": "kycS",
                        "type": "KycService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<ng-container [formGroup]=\"currentFormGroup\">\r\n    <ng-container [ngSwitch]=\"formFieldType\">\r\n        <mat-form-field class=\"country-field w-100\" appearance=\"fill\">\r\n            <mat-label>{{ matLabelTranslation }}</mat-label>\r\n            <input\r\n              type=\"text\"\r\n              matInput\r\n              id=\"country_field_2_{{ trimLabel(matLabelTranslation) }}\"\r\n              (input)=\"handleCountryNameSearch($event)\"\r\n              (keydown)=\"restrictSpecialCharacters($event)\"\r\n              (blur)=\"handleCountryNameSearchBlur({ event: $event, parentFormGroup: currentFormGroup, controlName: currentformControlName })\"\r\n              [formControlName]=\"currentformControlName\"\r\n              [ngClass]=\"{ 'disabled': disabled === true }\"\r\n              [matAutocompletePosition]=\"'below'\"\r\n              [matAutocomplete]=\"auto\"\r\n            />\r\n            <mat-autocomplete autoActiveFirstOption=\"true\" #auto=\"matAutocomplete\">\r\n              <mat-option *ngFor=\"let cd of countryArr\" [value]=\"cd.countryName\">\r\n                {{ cd.countryName }}\r\n              </mat-option>\r\n            </mat-autocomplete>\r\n            <app-error [controlName]=\"currentFormGroup.get(currentformControlName)!\"></app-error>\r\n          </mat-form-field>\r\n          \r\n        <!-- <ng-container *ngSwitchDefault>\r\n            <mat-form-field class=\"country-field\" appearance=\"fill\">\r\n                <mat-label>{{ matLabelTranslation }}</mat-label>\r\n                <input type=\"text\" matInput id=\"country_field_2_{{trimLabel(matLabelTranslation)}}\" (input)=\"handleCountryNameSearch($event)\" (keydown)=\"restrictSpecialCharacters($event)\"\r\n                    (blur)=\"handleCountryNameSearchBlur({event:$event, parentFormGroup: currentFormGroup, controlName: currentformControlName})\"\r\n                    formControlName=\"{{currentformControlName}}\" [ngClass]=\"{'disabled': disabled === true}\"\r\n                    [matAutocompletePosition]=\"'below'\" [matAutocomplete]=\"auto\">\r\n                <mat-autocomplete autoActiveFirstOption=\"true\" #auto=\"matAutocomplete\">\r\n                    <mat-option *ngFor=\"let cd of countryArr\" [value]=\"cd.countryName\">\r\n                        {{cd.countryName}}\r\n                    </mat-option>\r\n                </mat-autocomplete>\r\n                <app-error [controlName]=\"currentFormGroup.get(currentformControlName)\">\r\n                </app-error>\r\n            </mat-form-field>\r\n        </ng-container> -->\r\n    </ng-container>\r\n</ng-container>\r\n"
        },
        {
            "name": "SidebarComponent",
            "id": "component-SidebarComponent-1bb3e4e56296aa3b81d206ef4dd37e9b3326f2dac9c67dba18a9c82daa7ae6754ea178887855fc8bd1603433dc3c3470580692db955e3b35410bbeeb873c4c13",
            "file": "src/app/risk-dashboard/components/sidebar/sidebar.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-sidebar",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "sidebar.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "sidebar",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'sidebar'"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "hideSidebar",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "openSidebar",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "MatExpansionModule",
                    "type": "module"
                },
                {
                    "name": "RouterModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, ElementRef, ViewChild } from '@angular/core';\r\nimport { MatExpansionModule } from '@angular/material/expansion';\r\nimport { Router, RouterModule } from '@angular/router';\r\nexport interface MenuItem {\r\n  icon: string;\r\n  label: string;\r\n  badge?: string;\r\n  highlight?: boolean;\r\n}\r\n\r\n@Component({\r\n  selector: 'app-sidebar',\r\n  imports: [MatExpansionModule,RouterModule],\r\n  templateUrl:'sidebar.component.html',\r\n  styleUrl: 'sidebar.component.scss'\r\n})\r\nexport class SidebarComponent {\r\n  @ViewChild('sidebar') sidebar!: ElementRef;\r\n  constructor(private router:Router){\r\n\r\n  }\r\n  openSidebar() {\r\n    this.sidebar.nativeElement.classList.add('active');\r\n    document.body.classList.add('overflow-hidden');\r\n  }\r\n\r\n  hideSidebar() {\r\n    this.sidebar.nativeElement.classList.remove('active');\r\n    document.body.classList.remove('overflow-hidden');\r\n  }\r\n}\r\n",
            "styleUrl": "sidebar.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 18,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<div class=\"sidebar-background\" #sidebar>\r\n  <div class=\"sidebar\">\r\n    <!-- Logo -->\r\n    <div class=\"close-btn\">\r\n      <button class=\"men-close-btn\" (click)=\"hideSidebar()\">\r\n        <img src=\"images/close-icon.svg\" class=\"close-icn\" alt=\"close\">\r\n      </button>\r\n    </div>\r\n    <div class=\"side-bar-wrapper\">\r\n      <div class=\"logo\">\r\n        <img src=\"images/okoora-logo.svg\" class=\"main-logo\" alt=\"Logo\" />\r\n        <img src=\"images/logo-abcm-small.svg\" class=\"small-logo\" alt=\"Logo\" />\r\n      </div>\r\n      <div class=\"menu-list\">\r\n        <div class=\"first-divider\"></div>\r\n        <!-- Navigation -->\r\n        <a class=\"menu-item\"><i class=\"icon-dashboard\"></i> <span class=\"menu-text\">Dashboard</span></a>\r\n        <a class=\"menu-item\"><i class=\"icon-payments\"></i> <span class=\"menu-text\">Payments</span></a>\r\n        <a class=\"menu-item\"><i class=\"icon-funds\"></i> <span class=\"menu-text\">Received Funds</span></a>\r\n        <a class=\"menu-item\"><i class=\"icon-purchases\"></i> <span class=\"menu-text\">Purchases</span></a>\r\n        <a class=\"menu-item active\" routerLinkActive=\"active\" [routerLink]=\"['/cashflow']\">\r\n          <i class=\"icon-risk\"></i> <span class=\"menu-text\">Risk Manager</span> <span class=\"new-badge\">New</span>\r\n        </a>\r\n        <div class=\"second-divider\"></div>\r\n        <mat-accordion id=\"navReports\">\r\n          <mat-expansion-panel class=\"shadow-none mb-3 reports-expansion-panel\">\r\n            <mat-expansion-panel-header id=\"navReportsExpansion\" class=\"header-reports\">\r\n              <mat-panel-title class=\"panel-item\">\r\n                <i class=\"icon-reports\"></i> <span class=\"menu-text\">Reports</span>\r\n              </mat-panel-title>\r\n            </mat-expansion-panel-header>\r\n            <mat-panel-description class=\"sub-tabs-reports\">\r\n              <a id=\"all-transactions-link\">\r\n                <p class=\"submenu-name\">All transactions</p>\r\n              </a>\r\n              <a id=\"smartConvert-link\">\r\n                <p class=\"submenu-name\">Period end balance</p>\r\n              </a>\r\n              <hr class=\"bottom-line\">\r\n            </mat-panel-description>\r\n          </mat-expansion-panel>\r\n        </mat-accordion>\r\n        <a class=\"menu-item\"><i class=\"icon-alerts\"></i> <span class=\"menu-text\">Alerts</span></a>\r\n        <a class=\"menu-item\"><i class=\"icon-contacts\"></i> <span class=\"menu-text\">Contacts</span></a>\r\n        <a class=\"menu-item\"><i class=\"icon-help\"></i> <span class=\"menu-text\">Help</span></a>\r\n        <a class=\"menu-item marketplace\">\r\n          <i class=\"market-place\"></i> <span class=\"menu-text\">Marketplace</span>\r\n        </a>\r\n        <button id=\"downloadApp\" class=\"download-app\">\r\n          Download App\r\n        </button>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>"
        },
        {
            "name": "SmsVerificationComponent",
            "id": "component-SmsVerificationComponent-4b796c09815917bbbb13cc8566e8b08e4affdb517e4a17d916e371e7eb652b76ec41c949693535cd457ab3fdc1d147e667eeb7937d387d70b50441aae8787323",
            "file": "src/app/sign-up/fields/sms-verification/sms-verification.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sms-verification",
            "styleUrls": [
                "./sms-verification.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./sms-verification.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "formControlNameToCompareValue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 30,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "formControlNameToSetValue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "kycForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "FormGroup",
                    "decorators": []
                },
                {
                    "name": "loadingFromParent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "(value: boolean) => void",
                    "decorators": []
                },
                {
                    "name": "stepsObj",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "IStepsObj",
                    "decorators": []
                },
                {
                    "name": "timerTooltip",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "back",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 35,
                    "type": "EventEmitter"
                },
                {
                    "name": "call",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 34,
                    "type": "EventEmitter"
                },
                {
                    "name": "codeValidEvent",
                    "defaultValue": "new EventEmitter<boolean>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 36,
                    "type": "EventEmitter"
                },
                {
                    "name": "enterEvent",
                    "defaultValue": "new EventEmitter<string>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 32,
                    "type": "EventEmitter"
                },
                {
                    "name": "resend",
                    "defaultValue": "new EventEmitter<string>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 33,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_loadingFromParent",
                    "defaultValue": "new BehaviorSubject<boolean>(false)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "callInProcess",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "code",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 44
                },
                {
                    "name": "codeIsValid",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 46
                },
                {
                    "name": "codeStatus",
                    "defaultValue": "'DEFAULT'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TVerificationCodeStatus",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 49
                },
                {
                    "name": "componentDestroyed",
                    "defaultValue": "new Subject<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "digit1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "digit2",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "digit3",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "digit4",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 45
                },
                {
                    "name": "mail",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "performVerification$",
                    "defaultValue": "new Subject<IPerformVerification>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 61
                },
                {
                    "name": "refreshAPIError",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 48
                },
                {
                    "name": "resendCode",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 47
                },
                {
                    "name": "smsReturnType",
                    "defaultValue": "VerificationReturnType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 60
                },
                {
                    "name": "timer",
                    "defaultValue": "{\r\n      minutes: '0',\r\n      seconds: '00',\r\n      active: false\r\n    }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 50
                }
            ],
            "methodsClass": [
                {
                    "name": "checkVerification",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 96,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "handleActionByStep",
                    "args": [
                        {
                            "name": "data",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 153,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleErrorOverlayTryAgainClicked",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 335,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "loadingFromParent",
                    "args": [
                        {
                            "name": "value",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Input",
                            "stringifiedArguments": ""
                        }
                    ],
                    "modifierKind": [
                        170
                    ],
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 403,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 65,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onBack",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 348,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onCall",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 343,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onInputChange",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 89,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onResend",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 142,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "performEmailVerification",
                    "args": [
                        {
                            "name": "action",
                            "type": "\"SEND\" | \"CHECK\"",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 186,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "action",
                            "type": "\"SEND\" | \"CHECK\"",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "performPhoneVerification",
                    "args": [
                        {
                            "name": "action",
                            "type": "\"SEND\" | \"CHECK\"",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "phone",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 243,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "action",
                            "type": "\"SEND\" | \"CHECK\"",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "phone",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "processVerificationRequest",
                    "args": [
                        {
                            "name": "request",
                            "type": "Observable<>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 291,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "request",
                            "type": "Observable<>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "reset",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 357,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "restrictSpecialCharacters",
                    "args": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent | ClipboardEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 408,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent | ClipboardEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "startTimer",
                    "args": [
                        {
                            "name": "codeStatus",
                            "type": "TVerificationCodeStatus",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'DEFAULT'"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 366,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "codeStatus",
                            "type": "TVerificationCodeStatus",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'DEFAULT'",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "tryAgain",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 352,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "FormsModule",
                    "type": "module"
                },
                {
                    "name": "TranslateModule",
                    "type": "module"
                },
                {
                    "name": "MatTooltipModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, OnDestroy, OnInit, Output } from '@angular/core';\r\nimport { catchError, exhaustMap, filter, finalize, scan, takeUntil, takeWhile, throttleTime } from 'rxjs/operators';\r\nimport { BehaviorSubject, combineLatest, EMPTY, Observable, of, Subject, timer } from 'rxjs';\r\nimport { FormGroup, FormsModule } from '@angular/forms';\r\nimport { HttpErrorResponse } from '@angular/common/http';\r\nimport { MatTooltipModule } from '@angular/material/tooltip';\r\nimport { TranslateModule } from '@ngx-translate/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { IStepsObj, TVerificationCodeStatus, VerificationReturnType, IPerformVerification, EStepNumber, TSendMailResponse, EErrorMessages } from '../../kyc';\r\nimport { KycService } from '../../services/kyc.service';\r\n\r\n@Component({\r\n  selector: 'sms-verification',\r\n  standalone: true,\r\n  imports: [CommonModule, FormsModule, TranslateModule, MatTooltipModule],\r\n  templateUrl: './sms-verification.component.html',\r\n  styleUrls: ['./sms-verification.component.scss']\r\n})\r\nexport class SmsVerificationComponent implements OnInit, OnDestroy {\r\n  componentDestroyed = new Subject<any>();\r\n  private _loadingFromParent = new BehaviorSubject<boolean>(false);\r\n\r\n  @Input() loadingFromParent(value: boolean) {\r\n    this._loadingFromParent.next(value);\r\n  }\r\n  @Input('kycForm') kycForm!: FormGroup;\r\n  @Input('stepsObj') stepsObj!: IStepsObj;\r\n  @Input('timerTooltip') timerTooltip!: string;\r\n  @Input('formControlNameToSetValue') formControlNameToSetValue!: string;\r\n  @Input('formControlNameToCompareValue') formControlNameToCompareValue!: string;\r\n\r\n  @Output() enterEvent = new EventEmitter<string>();\r\n  @Output() resend = new EventEmitter<string>();\r\n  @Output() call = new EventEmitter();\r\n  @Output() back = new EventEmitter();\r\n  @Output('codeValidEvent') codeValidEvent = new EventEmitter<boolean>();\r\n\r\n  callInProcess!: boolean;\r\n  digit1!: string;\r\n  digit2!: string;\r\n  digit3!: string;\r\n  digit4!: string;\r\n  mail!: string;\r\n  code!: string;\r\n  loading: boolean = false;\r\n  codeIsValid: boolean = true;\r\n  resendCode = false;\r\n  refreshAPIError: boolean = false;\r\n  codeStatus: TVerificationCodeStatus = 'DEFAULT';\r\n  timer: {\r\n    minutes: string,\r\n    seconds: string,\r\n    active: boolean\r\n  } = {\r\n      minutes: '0',\r\n      seconds: '00',\r\n      active: false\r\n    };\r\n \r\n  smsReturnType = VerificationReturnType;\r\n  performVerification$ = new Subject<IPerformVerification>();\r\n\r\n  constructor(private KycS: KycService) { }\r\n\r\n  ngOnInit() {\r\n    if (!this.formControlNameToSetValue) {\r\n      console.warn(`formControlNameToSetValue must be set! at step ${this.stepsObj.currentStep} \\n given \"${this.formControlNameToSetValue}\"`);\r\n    }\r\n    if (!this.formControlNameToCompareValue) {\r\n      console.warn(`formControlNameToCompareValue must be set! at step ${this.stepsObj.currentStep} \\n given \"${this.formControlNameToCompareValue}\"`);\r\n    }\r\n\r\n    this._loadingFromParent.subscribe(loading => {\r\n      this.loading = loading;\r\n    });\r\n\r\n    this.KycS.verificationCodeStatus.pipe(\r\n      takeUntil(this.componentDestroyed)\r\n    ).subscribe(codeStatus => {\r\n      this.codeStatus = codeStatus;\r\n      if (codeStatus === 'DEFAULT' || codeStatus === 'INCORRECT') {\r\n        this.startTimer();\r\n      } else {\r\n        this.startTimer(codeStatus);\r\n      }\r\n    });\r\n  }\r\n\r\n  onInputChange(): void {\r\n    if (this.refreshAPIError) {\r\n      this.refreshAPIError = false;\r\n    }\r\n  }\r\n  \r\n\r\n  checkVerification() {\r\n    if (!this.digit1 || !this.digit2 || !this.digit3 || !this.digit4) {\r\n      return;\r\n    }\r\n  \r\n    this.code = this.digit1 + this.digit2 + this.digit3 + this.digit4;\r\n  \r\n    // Custom check for code 1111\r\n    if (this.code === '1111' || /[a-zA-Z]/.test(this.code)) {\r\n      this.refreshAPIError = true;\r\n      this.codeIsValid = false;\r\n      this.KycS.loading$.next(false);\r\n      return;\r\n    }\r\n  \r\n    if (!this.formControlNameToSetValue) {\r\n      console.warn(`formControlNameToSetValue must be set! at step ${this.stepsObj.currentStep} \\n given \"${this.formControlNameToSetValue}\"`);\r\n      return;\r\n    }\r\n    if (!this.kycForm.controls[`step_${this.stepsObj.currentStep}`].get(this.formControlNameToSetValue)) {\r\n      console.error(`form control with the name ${this.formControlNameToSetValue} does not exist in step_${this.stepsObj.currentStep}`);\r\n      return;\r\n    }\r\n    if (!this.formControlNameToCompareValue) {\r\n      console.warn(`formControlNameToCompareValue must be set! at step ${this.stepsObj.currentStep} \\n given \"${this.formControlNameToCompareValue}\"`);\r\n      return;\r\n    }\r\n    if (!this.kycForm.controls[`step_${this.stepsObj.currentStep}`].get(this.formControlNameToCompareValue)) {\r\n      console.error(`form control with the name ${this.formControlNameToCompareValue} does not exist in step_${this.stepsObj.currentStep}`);\r\n      return;\r\n    }\r\n  \r\n    this.resendCode = false;\r\n    this.codeIsValid = true;\r\n    this.loading = true;\r\n  \r\n    const control = this.kycForm.controls[`step_${this.stepsObj.currentStep}`].get(this.formControlNameToSetValue);\r\n    if (control) {\r\n      control.setValue(this.code);\r\n    } else {\r\n      console.error(`Control with name ${this.formControlNameToSetValue} is null or undefined.`);\r\n    }\r\n  \r\n    this.handleActionByStep({ action: 'CHECK' });\r\n  }\r\n\r\n  onResend() {\r\n    if (this.timer.active) {\r\n      console.warn(`Resend code called even though the timer is active.`);\r\n      return;\r\n    }\r\n\r\n    this.resendCode = true;\r\n    this.resend.emit();\r\n    this.handleActionByStep({ action: 'SEND' });\r\n  }\r\n\r\n  handleActionByStep(data: { action: 'SEND' | 'CHECK' }): void {\r\n    const { action: dynamicAction } = data;\r\n    let payload: any;\r\n    let verificationAction: 'CHECK_EMAIL_VERIFICATION' | 'SEND_EMAIL_VERIFICATION' | 'CHECK_PHONE_VERIFICATION' | 'SEND_PHONE_VERIFICATION';\r\n\r\n    switch (this.stepsObj.currentStep) {\r\n      case EStepNumber.emailConfirmation:\r\n        const userEmail = this.kycForm.getRawValue()?.step_2?.email;\r\n        if (!userEmail) return;\r\n        payload = { email: userEmail };\r\n        verificationAction = dynamicAction === 'SEND' ? 'SEND_EMAIL_VERIFICATION' : 'CHECK_EMAIL_VERIFICATION';\r\n        break;\r\n      case EStepNumber.phoneConfirmation:\r\n        const { phone_code, phone } = this.kycForm.getRawValue().step_4;\r\n        if (!phone_code || !phone) {\r\n          console.error('phone or phone code must have a value.');\r\n          return;\r\n        }\r\n        const phoneGenerated = `${phone_code}${phone}`;\r\n        payload = { phone: phoneGenerated };\r\n        verificationAction = dynamicAction === 'SEND' ? 'SEND_PHONE_VERIFICATION' : 'CHECK_PHONE_VERIFICATION';\r\n        break;\r\n      default:\r\n        console.error(`unhandled action occurred for ${this.stepsObj.currentStep}`);\r\n        return;\r\n    }\r\n\r\n    if (verificationAction === 'CHECK_EMAIL_VERIFICATION' || verificationAction === 'SEND_EMAIL_VERIFICATION') {\r\n      this.performEmailVerification(dynamicAction, payload.email);\r\n    } else if (verificationAction === 'CHECK_PHONE_VERIFICATION' || verificationAction === 'SEND_PHONE_VERIFICATION') {\r\n      this.performPhoneVerification(dynamicAction, payload.phone);\r\n    }\r\n  }\r\n  performEmailVerification(action: 'SEND' | 'CHECK', email: string): void {\r\n    let request: Observable<[string, any]>;\r\n\r\n    if (action === 'SEND') {\r\n        request = combineLatest([\r\n          of('SEND'),\r\n          of({}) // Emit a valid object to match the expected type [string, any]\r\n        ]) as Observable<[string, any]>;\r\n      } else if (action === 'CHECK') {\r\n        request = combineLatest([\r\n          of('CHECK'),\r\n          of({}) // Emit a valid object to match the expected type [string, any]\r\n        ]) as Observable<[string, any]>;\r\n    } else {\r\n      console.error(`Unhandled action ${action}`);\r\n      return;\r\n    }\r\n\r\n    request.subscribe({\r\n      next: ([action, res]: [string, any]) => {\r\n        switch (action) {\r\n          case 'SEND':\r\n            let response: TSendMailResponse = <TSendMailResponse>res;\r\n            if (response?.Success === VerificationReturnType.Success) {\r\n              this.startTimer();\r\n              this.KycS.loading$.next(false);\r\n            } else if (response?.PassedLimitError === VerificationReturnType.PassedLimitError) {\r\n              this.startTimer('PASSED_LIMIT');\r\n              this.KycS.loading$.next(false);\r\n            } else {\r\n              this.KycS.showError$.next({ hasError: true, msg: EErrorMessages.SomethingWentWrong });\r\n            }\r\n            break;\r\n          case 'CHECK':\r\n            if (res) { \r\n              this.codeStatus = 'VALID';\r\n              this.codeValidEvent.next(true);\r\n              this.KycS.loading$.next(false);\r\n              this.refreshAPIError = false;\r\n            } else {\r\n              this.codeStatus = 'INCORRECT';\r\n              this.codeIsValid = false;\r\n              this.KycS.loading$.next(false);\r\n            }\r\n            break;\r\n          default:\r\n            break;\r\n        }\r\n      },\r\n      error: (error) => {\r\n        if (error) {\r\n          this.refreshAPIError = true;\r\n        }\r\n      }\r\n    })\r\n  }\r\n\r\n  performPhoneVerification(action: 'SEND' | 'CHECK', phone: string): void {\r\n    let request: Observable<[string, any]> | null = null;\r\n\r\n    if (action === 'SEND') {\r\n      request = combineLatest([\r\n        of('SEND'),\r\n        of({}) // Replace with actual observable for sending SMS verification\r\n      ]);\r\n    } else if (action === 'CHECK') {\r\n      request = combineLatest([\r\n        of('CHECK'),\r\n        of({}) // Replace with actual observable for checking SMS verification\r\n      ]);\r\n    } else {\r\n      console.error(`Unhandled action ${action}`);\r\n      return;\r\n    }\r\n\r\n    request?.subscribe(([action, res]: [string, any]) => {\r\n      switch (action) {\r\n        case 'SEND':\r\n          let response: TSendMailResponse = <TSendMailResponse>res;\r\n          if (response?.Success === VerificationReturnType.Success) {\r\n            this.startTimer();\r\n            this.KycS.loading$.next(false);\r\n          } else if (response?.PassedLimitError === VerificationReturnType.PassedLimitError) {\r\n            this.startTimer('PASSED_LIMIT');\r\n            this.KycS.loading$.next(false);\r\n          } else {\r\n            this.KycS.showError$.next({ hasError: true, msg: EErrorMessages.SomethingWentWrong });\r\n          }\r\n          break;\r\n        case 'CHECK':\r\n          if (res) {\r\n            this.codeStatus = 'VALID';\r\n            this.codeValidEvent.next(true);\r\n            this.KycS.loading$.next(false);\r\n          } else {\r\n            this.codeStatus = 'INCORRECT';\r\n            this.codeIsValid = false;\r\n            this.KycS.loading$.next(false);\r\n          }\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n    });\r\n  }\r\n  processVerificationRequest(request: Observable<[string, any]>): void {\r\n    this.performVerification$.pipe(\r\n      throttleTime(300),\r\n      exhaustMap(({ action, payload }) => {\r\n        this.KycS.loading$.next(true);\r\n        return request;\r\n      }),\r\n      catchError((e: HttpErrorResponse) => {\r\n        console.error(e);\r\n        this.KycS.loading$.next(false);\r\n        return EMPTY;\r\n      })\r\n    ).subscribe(([action, res]: any) => {\r\n      switch (action) {\r\n        case 'SEND':\r\n          let response: TSendMailResponse = <TSendMailResponse>res;\r\n\r\n          if (response?.Success === VerificationReturnType.Success) {\r\n            this.startTimer();\r\n            this.KycS.loading$.next(false);\r\n          } else if (response?.PassedLimitError === VerificationReturnType.PassedLimitError) {\r\n            this.startTimer('PASSED_LIMIT');\r\n            this.KycS.loading$.next(false);\r\n          } else {\r\n            this.KycS.showError$.next({ hasError: true, msg: EErrorMessages.SomethingWentWrong });\r\n          }\r\n          break;\r\n        case 'CHECK':\r\n          if (res) {\r\n            this.codeStatus = 'VALID';\r\n            this.codeValidEvent.next(true);\r\n            this.KycS.loading$.next(false);\r\n          } else {\r\n            this.codeStatus = 'INCORRECT';\r\n            this.codeIsValid = false;\r\n            this.KycS.loading$.next(false);\r\n          }\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n    });\r\n  }\r\n\r\n  handleErrorOverlayTryAgainClicked(): void {\r\n    // this.KycS.errorOverlayTryAgainClicked$.pipe(\r\n    //   filter(r => !!r)\r\n    // ).subscribe(() => {\r\n    //   this.tryAgain();\r\n    // });\r\n  }\r\n\r\n  onCall() {\r\n    this.call.emit();\r\n    this.callInProcess = true;\r\n  }\r\n\r\n  onBack() {\r\n    this.back.emit();\r\n  }\r\n\r\n  tryAgain() {\r\n    this.codeIsValid = true;\r\n    this.reset();\r\n  }\r\n\r\n  reset() {\r\n    this.codeStatus = 'DEFAULT';\r\n    this.digit1 = '';\r\n    this.digit2 = '';\r\n    this.digit3 = '';\r\n    this.digit4 = '';\r\n    this.code = '';\r\n  }\r\n\r\n  startTimer(codeStatus: TVerificationCodeStatus = 'DEFAULT') {\r\n    this.timer.active = true;\r\n    let OneMinute: 60 = 60;\r\n    let tenMinutes: 600 = 600;\r\n\r\n    let timeToShow: typeof OneMinute | typeof tenMinutes | any; // 1min or 10 min\r\n    switch (codeStatus) {\r\n      case 'DEFAULT':\r\n      case 'INCORRECT':\r\n        timeToShow = OneMinute;\r\n        break;\r\n      case 'PASSED_LIMIT':\r\n        timeToShow = tenMinutes;\r\n        break;\r\n      default:\r\n        console.error(`Unhandled action in sms verification code status.\\n given: ${this.codeStatus}`);\r\n        break;\r\n    }\r\n\r\n    timer(0, 1000).pipe(\r\n      scan((acc: any) => {\r\n        const minutes: number = Math.floor(acc / 60);\r\n        const seconds: number = (minutes >= 1) ? acc - minutes * 60 : acc;\r\n        this.timer.minutes = minutes.toString();\r\n        this.timer.seconds = (seconds < 10) ? `0${seconds}` : seconds.toString();\r\n        return --acc;\r\n      }, timeToShow),\r\n      takeWhile(x => x >= 0),\r\n      takeUntil(this.componentDestroyed),\r\n      finalize(() => {\r\n        this.timer.minutes = `0`;\r\n        this.timer.seconds = `00`;\r\n        this.timer.active = false;\r\n      })\r\n    ).subscribe();\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.componentDestroyed.next(null);\r\n    this.componentDestroyed.complete();\r\n  }\r\n\r\n  restrictSpecialCharacters(event: KeyboardEvent | ClipboardEvent) {\r\n    const restrictedChars = ['<', '>', ';', ':', '=', '+', '(', ')'];\r\n\r\n    if (event instanceof KeyboardEvent) {\r\n      if (restrictedChars.includes(event.key)) {\r\n        event.preventDefault();\r\n      }\r\n    } else if (event instanceof ClipboardEvent) {\r\n      let pasteData = (event.clipboardData || (window as any).clipboardData).getData('text');\r\n      if (restrictedChars.some(char => pasteData.includes(char))) {\r\n        event.preventDefault();\r\n      }\r\n    }\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"../../../../assets/scss/variable\";\r\n@import \"../../../../assets/scss/components\";\r\n\r\n.sms-ver-wrapper {\r\n\r\n    img {\r\n        margin-right : 6rem;\r\n    }\r\n\r\n    .ver-title {\r\n        font-size : 24px;\r\n    }\r\n\r\n    .ver-sub-title {\r\n        margin-bottom : 4.6rem;\r\n    }\r\n\r\n    .masked-input {\r\n        height        : 55px;\r\n        width         : 82px;\r\n        border        : none;\r\n        border-bottom : 3px solid #111827;\r\n        border-radius : 0;\r\n        text-align    : center;\r\n        font-size     : 2.25rem;\r\n\r\n        &:not(:last-child) {\r\n            margin-right : 30px;\r\n        }\r\n        &:focus {\r\n            outline : none;\r\n            box-shadow: none;\r\n        }\r\n        @media screen and (max-width:767px) {\r\n            width :50px;\r\n            height : 40px;\r\n            &:not(:last-child) {\r\n                margin-right :20px;\r\n            }\r\n        }\r\n    }\r\n\r\n    .error-msg {\r\n        color: #B00;\r\n        font-family: $he_heebo;\r\n        font-size: 14px;\r\n        font-style: normal;\r\n        font-weight: 500;\r\n        line-height: 20px; /* 142.857% */\r\n    }\r\n}\r\n",
                    "styleUrl": "./sms-verification.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "KycS",
                        "type": "KycService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 61,
                "jsdoctags": [
                    {
                        "name": "KycS",
                        "type": "KycService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<div class=\"sms-ver-wrapper\">\r\n\r\n    <!-- <form name=\"formSms\" id=\"formSms\" (ngSubmit)=\"fSms.form.valid && checkVerification()\" #fSms=\"ngForm\" novalidate> -->\r\n\r\n        <div class=\"form-group mb-4\">\r\n\r\n            <div class=\"form-group form-group-input-wrapper d-flex justify-content-center\">\r\n                <input type=\"text\" [(ngModel)]=\"digit1\" name=\"digit1\" class=\"form-control masked-input\" #dOne\r\n                    #digit1Txt=\"ngModel\" (focus)=\"dOne.select()\"\r\n                    (input)=\"onInputChange(); dOne.value ? dTwo.select() : dOne.focus();\"\r\n                    required (paste)=\"restrictSpecialCharacters($event)\"\r\n                    (keydown)=\"restrictSpecialCharacters($event)\"\r\n                >\r\n                {{!digit1 ? dOne.focus() : null}}\r\n\r\n                <input type=\"text\" [(ngModel)]=\"digit2\" name=\"digit2\" class=\"form-control masked-input\" #dTwo\r\n                    #digit2Txt=\"ngModel\" (focus)=\"dTwo.select()\"\r\n                    (input)=\"onInputChange(); dTwo.value ? dThree.select() : dTwo.focus();\"\r\n                    (keydown.backspace)=\"dOne.select()\"\r\n                    required (paste)=\"restrictSpecialCharacters($event)\"\r\n            (keydown)=\"restrictSpecialCharacters($event)\"\r\n                >\r\n\r\n                <input type=\"text\" [(ngModel)]=\"digit3\" name=\"digit3\" class=\"form-control masked-input\" #dThree\r\n                    #digit3Txt=\"ngModel\" (focus)=\"dThree.select()\"\r\n                    (input)=\"onInputChange(); dThree.value ? dFour.select() : dThree.focus();\"\r\n                    (keydown.backspace)=\"dTwo.select()\"\r\n                    required (paste)=\"restrictSpecialCharacters($event)\"\r\n            (keydown)=\"restrictSpecialCharacters($event)\"\r\n                >\r\n\r\n                <input type=\"text\" [(ngModel)]=\"digit4\" name=\"digit4\" class=\"form-control masked-input\" #dFour\r\n                    #digit4Txt=\"ngModel\" (focus)=\"dFour.select()\"\r\n                    (keydown.backspace)=\"dThree.select(); dFour.value = '';\"\r\n                    (input)=\"onInputChange();dFour.value ? dFour.blur() : dFour.focus();\"\r\n                    (blur)=\"checkVerification()\"\r\n                    required (paste)=\"restrictSpecialCharacters($event)\"\r\n                    (keydown)=\"restrictSpecialCharacters($event)\">\r\n            </div>\r\n\r\n        </div>\r\n        <div class=\"error-msg\" *ngIf=\"refreshAPIError\">\r\n            <span>\r\n                The code you have entered is invalid. Please try again.\r\n            </span>\r\n        </div>\r\n\r\n        <!-- Code hasn't arrived -->\r\n        <ng-container>\r\n            <p class=\"disclaimer disclaimer--2\">\r\n                {{ 'KYC_Step_3.code_not_arrived' | translate }}\r\n                <!-- user passed the limit of resend codes -->\r\n\r\n                <!-- able to resend code -->\r\n                <ng-container *ngIf=\"!timer.active\">\r\n                    <a class=\"resend-code action-anchor\" (click)=\"onResend()\">{{ 'KYC_Step_3.resend_code' | translate }}</a>\r\n                </ng-container>\r\n                <!-- waiting to resend code -->\r\n                <ng-container *ngIf=\"timer.active\">\r\n                    <a\r\n                        class=\"retry-in action-anchor\"\r\n                        [matTooltip]=\"timerTooltip\"\r\n                        matTooltipClass=\"custom-tooltip\"\r\n                        aria-label=\"Button that displays a tooltip that can be programmatically disabled\"\r\n                    >\r\n                        {{ 'KYC_Step_3.you_can_retry' | translate }}\r\n                        {{timer.minutes}}:{{timer.seconds}}\r\n                    </a>\r\n                </ng-container>\r\n            </p>\r\n        </ng-container><!-- # Code hasn't arrived -->\r\n\r\n</div>\r\n"
        },
        {
            "name": "TradeViewChartComponent",
            "id": "component-TradeViewChartComponent-6876426098e969e790f607af79b194a22d07aa6b9222067bfad9571439a180bc3d5904b9b8e8afb2b2b7377a45eb8c5d3919de0ea8e1aa91c8ca8f43ee5ff422",
            "file": "src/app/risk-dashboard/components/dashboard/components/trade-view-chart/trade-view-chart.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-trade-view-chart",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./trade-view-chart.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "baseCurrency",
                    "defaultValue": "\"ILS\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "firstCurrency",
                    "defaultValue": "\"USD\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "selectedPeriod",
                    "defaultValue": "'1M'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "tradeRate",
                    "defaultValue": "3.4324",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_renderer2",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Renderer2",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "cashFlowExposureData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "currencyPair",
                    "defaultValue": "this.firstCurrency + this.baseCurrency",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "tradeViewChartRate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "tradingSource",
                    "defaultValue": "{\r\n    USDILS: \"SAXO:USDILS\",\r\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "methodsClass": [
                {
                    "name": "getExposureDetails",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "loadTradingViewScripts",
                    "args": [
                        {
                            "name": "currencyPair",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "period",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "currencyPair",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "period",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onPeriodChange",
                    "args": [
                        {
                            "name": "period",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "period",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "MatSelectModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectorRef, Component, Input, Renderer2, RendererFactory2 } from '@angular/core';\r\nimport { MatSelectModule } from '@angular/material/select';\r\n\r\n@Component({\r\n  selector: 'app-trade-view-chart',\r\n  imports: [MatSelectModule],\r\n  templateUrl: './trade-view-chart.component.html',\r\n  styleUrl: './trade-view-chart.component.scss'\r\n})\r\nexport class TradeViewChartComponent {\r\n  private _renderer2: Renderer2;\r\n  tradingSource: any = {\r\n    USDILS: \"SAXO:USDILS\",\r\n  };\r\n  @Input() tradeRate: any = 3.4324;\r\n  @Input() firstCurrency: string = \"USD\";\r\n  @Input() baseCurrency: string = \"ILS\";\r\n  currencyPair: string = this.firstCurrency + this.baseCurrency;\r\n  @Input() selectedPeriod: string = '1M';\r\n  tradeViewChartRate: any;\r\n  cashFlowExposureData: any;\r\n\r\n  constructor(private cd: ChangeDetectorRef, rendererFactory: RendererFactory2) {\r\n    this._renderer2 = rendererFactory.createRenderer(null, null);\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.getExposureDetails();\r\n  }\r\n\r\n  getExposureDetails() {\r\n    this.tradingSource = this.tradingSource;\r\n    this.loadTradingViewScripts(this.currencyPair, this.selectedPeriod);\r\n  }\r\n\r\n\r\n  onPeriodChange(period: string) {\r\n    this.selectedPeriod = period;\r\n    this.loadTradingViewScripts(this.currencyPair, period);\r\n  }\r\n\r\n  loadTradingViewScripts(currencyPair: string, period: string) {\r\n    const existingScript = document.getElementById(\"tradingViewScript\");\r\n    if (existingScript) {\r\n      existingScript.remove();\r\n    }\r\n\r\n    const script = this._renderer2.createElement(\"script\");\r\n    script.id = \"tradingViewScript\";\r\n    script.src = \"https://s3.tradingview.com/external-embedding/embed-widget-symbol-overview.js\";\r\n    script.type = \"text/javascript\";\r\n    script.async = true;\r\n    script.text = `\r\n        {\r\n          \"symbols\": [\r\n            [\r\n              \"${this.tradingSource[currencyPair]}|${period}\"\r\n            ]\r\n          ],\r\n          \"chartOnly\": true,\r\n          \"locale\": \"en\",\r\n          \"colorTheme\": \"light\",\r\n          \"autosize\": true,\r\n          \"showVolume\": false,\r\n          \"hideMA\": true,\r\n          \"hideDateRanges\": true,\r\n          \"hideMarketStatus\": true,\r\n          \"hideSymbolLogo\": false,\r\n          \"scalePosition\": \"right\",\r\n          \"scaleMode\": \"Normal\",\r\n          \"fontFamily\": \"-apple-system, BlinkMacSystemFont, Trebuchet MS, Roboto, Ubuntu, sans-serif\",\r\n          \"fontSize\": \"10\",\r\n          \"noTimeScale\": false,\r\n          \"valuesTracking\": \"1\",\r\n          \"changeMode\": \"price-and-percent\",\r\n          \"chartType\": \"area\",\r\n          \"maLineColor\": \"#089981\",\r\n          \"maLineWidth\": 1,\r\n          \"maLength\": 9,\r\n          \"lineWidth\": 1,\r\n          \"lineType\": 0,\r\n          \"lineColor\": \"#089981\",\r\n          \"topColor\": \"rgba(8,153,129, 0)\",\r\n          \"bottomColor\": \"rgba(8,153,129, 0)\",\r\n          \"isTransparent\": true\r\n        }`;\r\n\r\n    const chartContainer = document.getElementById(\"tradeViewChart\");\r\n    this._renderer2.appendChild(chartContainer, script);\r\n    this.cd.detectChanges();\r\n  }\r\n}\r\n",
            "styleUrl": "./trade-view-chart.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "rendererFactory",
                        "type": "RendererFactory2",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 21,
                "jsdoctags": [
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "rendererFactory",
                        "type": "RendererFactory2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<div class=\"trading-view-chart-container\">\r\n    <div class=\"tradeview-details\">\r\n      <div class=\"pair-container\">\r\n        <h3>{{ firstCurrency }}/{{ baseCurrency }}</h3>\r\n        <mat-select class=\"month-selector\" [(value)]=\"selectedPeriod\" panelClass=\"trading-view-chart-ddl\" placeholder=\"Select month\" (selectionChange)=\"onPeriodChange($event.value)\">\r\n          <mat-option value=\"1D\">1 Day</mat-option>\r\n          <mat-option value=\"1M\">1 Month</mat-option>\r\n          <mat-option value=\"3M\">3 Months</mat-option>\r\n          <mat-option value=\"1Y\">1 Year</mat-option>\r\n          <mat-option value=\"60M\">5 Years</mat-option>\r\n          <mat-option value=\"all\">All</mat-option>\r\n        </mat-select>\r\n      </div>\r\n      <h2>{{tradeRate}} <span>{{ baseCurrency }}</span></h2>\r\n    </div>\r\n    <div id=\"tradeViewChart\">\r\n    </div>\r\n  </div>"
        },
        {
            "name": "VolatilityChartComponent",
            "id": "component-VolatilityChartComponent-995dbe6b9095db8052d03d02485ab9687baae059c2207ee14c740293beff5f3cde7caf1d74d678b2b6e6e41158251f5b3758550fe660a8c45e89e8f8ac4867ef",
            "file": "src/app/risk-dashboard/components/dashboard/components/volatility-chart/volatility-chart.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-volatility-chart",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./volatility-chart.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "currentIndicatorValue",
                    "defaultValue": "11",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "maxVolatility",
                    "defaultValue": "15",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "minVolatility",
                    "defaultValue": "7",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "volatilityRank",
                    "defaultValue": "'volatile'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "currentDegree",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "degree",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "displayIndicatorValue",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "methodsClass": [
                {
                    "name": "animateIndicatorValue",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "animateNeedle",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "calculateDegree",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "NgbTooltipModule",
                    "type": "module"
                },
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { Component, Input } from '@angular/core';\r\nimport { NgbTooltipModule } from '@ng-bootstrap/ng-bootstrap';\r\n\r\n@Component({\r\n  selector: 'app-volatility-chart',\r\n  imports: [NgbTooltipModule, CommonModule],\r\n  templateUrl: './volatility-chart.component.html',\r\n  styleUrl: './volatility-chart.component.scss'\r\n})\r\nexport class VolatilityChartComponent {\r\n  @Input() currentIndicatorValue: number = 11;\r\n  displayIndicatorValue: number = 0;  // Will start from minVolatility and increment to currentIndicatorValue\r\n  @Input() minVolatility: number = 7;\r\n  @Input() maxVolatility: number = 15;\r\n\r\n  degree: number = 0;         // The target degree based on calculation\r\n  currentDegree: number = 0;  // This will incrementally change for smooth animation\r\n  @Input() volatilityRank: string = 'volatile';\r\n\r\n  ngOnInit() {\r\n    this.calculateDegree();\r\n    this.animateNeedle();\r\n    this.animateIndicatorValue();\r\n  }\r\n\r\n  calculateDegree() {\r\n    if (this.minVolatility && this.maxVolatility && this.currentIndicatorValue) {\r\n      // Calculate the degree based on the formula\r\n      this.degree = ((this.currentIndicatorValue - this.minVolatility) /\r\n        (this.maxVolatility - this.minVolatility)) * 180;\r\n    }\r\n  }\r\n\r\n  animateNeedle() {\r\n    const step = (this.degree - this.currentDegree) / 60; // Smooth steps\r\n    const interval = setInterval(() => {\r\n      if (Math.abs(this.currentDegree - this.degree) < Math.abs(step)) {\r\n        this.currentDegree = this.degree;\r\n        clearInterval(interval);  // Stop the animation when we reach the target degree\r\n      } else {\r\n        this.currentDegree += step;\r\n      }\r\n    }, 3);  // Update every ~16ms for smooth transition\r\n  }\r\n\r\n  animateIndicatorValue() {\r\n    const step = (this.currentIndicatorValue - this.displayIndicatorValue) / 60;  // Smooth steps for percentage increment\r\n    const interval = setInterval(() => {\r\n      if (Math.abs(this.displayIndicatorValue - this.currentIndicatorValue) < Math.abs(step)) {\r\n        this.displayIndicatorValue = this.currentIndicatorValue;\r\n        clearInterval(interval);  // Stop animation when we reach the target percentage\r\n      } else {\r\n        this.displayIndicatorValue += step;\r\n      }\r\n    }, 3);  // Update every 50ms for slower number increment\r\n  }\r\n\r\n}\r\n",
            "styleUrl": "./volatility-chart.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"vola-chart-wrapper\">\r\n    <div class=\"chart-desc\">\r\n      <div class=\"chart-head\">\r\n        <h5 class=\"info-title\">\r\n          <img class=\"title-img\" src=\"images/trending_down.svg\" alt=\"Volatility\" />\r\n          Volatility\r\n          <img src=\"images/annual-title-help-icon.svg\" \r\n               [ngbTooltip]=\"volatilityTool\"\r\n               placement=\"top-left\"\r\n               tooltipClass=\"risk-step3-tooltip--rm\" \r\n               class=\"title-tooltip\" />\r\n\r\n            <ng-template #volatilityTool>\r\n                Implied volatility measures the degree<br> of price fluctuations over time,<br> indicating the level of risk or uncertainty in the market\r\n            </ng-template>\r\n        </h5>\r\n      </div>\r\n      <div class=\"desc\">\r\n        <p>In the next few months the market is expected to be \r\n          <span [ngStyle]=\"{'color': volatilityRank.toLowerCase() === 'volatile' ? '#EE0C0C' : (volatilityRank.toLowerCase() === 'moderate' ? '#DAA61F' : '#079455')}\">\r\n            {{volatilityRank}}\r\n          </span>\r\n        </p>\r\n      </div>\r\n    </div>\r\n  \r\n    <div class=\"vola-chart\">\r\n      <div class=\"chart-inner\">\r\n        <img class=\"chart-round\" src=\"images/volatility-chart-img.svg\" alt=\"volatility_chart\" />\r\n        \r\n        <!-- Needle pointer with fixed rotation -->\r\n        <div class=\"indicator-wrap\" [style.transform]=\"'rotate(' + currentDegree + 'deg)'\">\r\n          <div class=\"pointer-wrap\">\r\n            <img class=\"pointer\" src=\"images/volatility-pointer.svg\" alt=\"volatility_chart\" />\r\n          </div>\r\n         \r\n          <div class=\"indicator-value\">\r\n            <p [style.transform]=\"'rotate(' + '-' + currentDegree + 'deg)'\"> \r\n              Current <span class=\"value\">{{currentIndicatorValue}}<span>%</span></span>\r\n            </p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n  \r\n      <div class=\"chart-info\">\r\n        <div class=\"info\">\r\n          <p class=\"year-text\">2 Years</p>\r\n          <p class=\"year-text\"><b>MIN</b> volatility</p>\r\n          <p class=\"per-text\">{{minVolatility == 0 ? 0 : minVolatility.toFixed(2) }}<span>%</span></p>\r\n        </div>\r\n        <div class=\"info right\">\r\n          <p class=\"year-text\">2 Years</p>\r\n          <p class=\"year-text\"><b>MAX</b> volatility</p>\r\n          <p class=\"per-text\">{{minVolatility == 0 ? 0 : maxVolatility.toFixed(2) }}<span>%</span></p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n  "
        }
    ],
    "modules": [
        {
            "name": "AppRoutingModule",
            "id": "module-AppRoutingModule-ab8aa89adfdf100b6a24281e14f7600e7152761d899ac9492c47cc67993b9c1b323c5be170a4cbd4da70c72566b467af288477e01deb5ed42f3735db205052dd",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app.routes.ts",
            "methods": [],
            "sourceCode": "import { RouterModule, Routes } from '@angular/router';\r\nimport { DashboardComponent } from './risk-dashboard/components/dashboard/dashboard.component';\r\nimport { NgModule } from '@angular/core';\r\nimport { HedgingProposalComponent } from './risk-dashboard/components/hedging-proposal/hedging-proposal.component';\r\nimport { CashflowExposureSteppersComponent } from './risk-dashboard/components/cashflow-exposure/cashflow-exposure-steppers/cashflow-exposure-steppers.component';\r\nimport { AdvancedPolicyComponent } from './risk-dashboard/components/advanced-policy/advanced-policy.component';\r\nimport { KycMainComponent } from './sign-up/kyc-main/kyc-main.component';\r\nimport { LoginComponent } from './login/login.component';\r\nimport { ResetPasswordComponent } from './login/reset-password/reset-password.component';\r\nimport { CodeVerificationComponent } from './login/code-verification/code-verification.component';\r\nimport { ChangePasswordComponent } from './login/change-password/change-password.component';\r\n\r\nexport const routes: Routes = [\r\n  { path: '', redirectTo: 'dashboard', pathMatch: 'full' as 'full' },\r\n  { path: 'dashboard', component: DashboardComponent },\r\n  { path: 'sign-up', component: KycMainComponent },\r\n  { path: 'login', component: LoginComponent},\r\n  { path: 'reset-password', component: ResetPasswordComponent},\r\n  { path: 'change-password', component: ChangePasswordComponent},\r\n  { path: 'code-verification', component: CodeVerificationComponent},\r\n  { path: 'hedging', component: HedgingProposalComponent },\r\n  { path: 'cashflow', component: CashflowExposureSteppersComponent },\r\n  { path: 'advanced-policy', component: AdvancedPolicyComponent },\r\n  { path: '**', redirectTo: 'dashboard' },\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class AppRoutingModule { }",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "AdvancePolicyData",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/risk-dashboard/advance-policy-json/advance-policy-data.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[{\r\n  \"firstheading\": \"Level of Exposure Certainty\",\r\n  \"questions\": \"How certain are you that your projected cash flow will be realized?\",\r\n  \"className\": \"policy-question-one\",\r\n  \"selectAnswer\": \"Select an answer\",\r\n  \"bottomDesc\": \"For example, if you have signed contracts guaranteeing revenue or expenditure for the next few months, this indicates high certainty.\",\r\n  \"Ans\": [\r\n    {\r\n      // \"a1\": \"Don't Know\",\r\n      \"a2\": \"Low\",\r\n      \"a3\": \"Medium\",\r\n      \"a4\": \"High\",\r\n      \"a5\": \"Very High\"\r\n    }\r\n  ]\r\n},\r\n{\r\n  \"firstheading\": \"Ability to Impact Customer or Supplier Price\",\r\n  \"questions\": \"To what extent can you influence customer pricing or supplier costs?\",\r\n  \"className\": \"policy-question-two\",\r\n  \"selectAnswer\": \"Select an answer\",\r\n  \"bottomDesc\": \"If exchange rates change, can you raise your prices or renegotiate costs with suppliers?\",\r\n  \"Ans\": [\r\n    {\r\n      // \"a1\": \"Don't Know\",\r\n      \"a2\": \"High\",\r\n      \"a3\": \"Medium\",\r\n      \"a4\": \"Low\",\r\n      \"a5\": \"No Impact\"\r\n    }\r\n  ]\r\n},\r\n{\r\n  \"firstheading\": \"Business Differentiation from Competitors in the Industry\",\r\n  \"questions\": \"How similar is your exposure to exchange rates compared to that of your main competitors?\",\r\n  \"className\": \"policy-question-three\",\r\n  \"selectAnswer\": \"Select an answer\",\r\n  \"bottomDesc\": \"Consider if your main competitors are also affected by exchange rate fluctuations. Are you able to handle these fluctuations better or differently?\",\r\n  \"Ans\": [\r\n    {\r\n      \"a1\": \"Don't Know\",\r\n      \"a2\": \"High\",\r\n      \"a3\": \"Medium\",\r\n      \"a4\": \"Low\",\r\n      \"a5\": \"Very Low\"\r\n    }\r\n  ]\r\n},\r\n{\r\n  \"firstheading\": \"Level of Business Competitiveness\",\r\n  \"questions\": \"How competitive is the industry your company operates in?\",\r\n  \"className\": \"policy-question-four\",\r\n  \"selectAnswer\": \"Select an answer\",\r\n  \"bottomDesc\": \"How competitive is the market you operate in? how difficult is it for you to adjust prices in response to currency value changes?\",\r\n  \"Ans\": [\r\n    {\r\n      \"a1\": \"Don't Know\",\r\n      \"a2\": \"Low\",\r\n      \"a3\": \"Medium\",\r\n      \"a4\": \"High\",\r\n      \"a5\": \"Very High\"\r\n    }\r\n  ]\r\n},\r\n{\r\n  \"firstheading\": \"Sensitivity to Credit Consumption\",\r\n  \"questions\": \"What is the company's ability to consume additional credit lines for possible collateral requirements?\",\r\n  \"className\": \"policy-question-five\",\r\n  \"selectAnswer\": \"Select an answer\",\r\n  \"bottomDesc\": \"If required, can your company easily access additional credit to manage potential currency risks?\",\r\n  \"Ans\": [\r\n    {\r\n      \"a1\": \"Don't Know\",\r\n      \"a2\": \"Very High\",\r\n      \"a3\": \"High\",\r\n      \"a4\": \"Medium\",\r\n      \"a5\": \"Low\"\r\n    }\r\n  ]\r\n},\r\n]"
            },
            {
                "name": "AdvancePolicyData",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/risk-dashboard/components/advanced-policy/components/advance-policy-data.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[{\r\n  \"firstheading\": \"Level of Exposure Certainty\",\r\n  \"questions\": \"How certain are you that your projected cash flow will be realized?\",\r\n  \"className\": \"policy-question-one\",\r\n  \"selectAnswer\": \"Select an answer\",\r\n  \"bottomDesc\": \"For example, if you have signed contracts guaranteeing revenue or expenditure for the next few months, this indicates high certainty.\",\r\n  \"Ans\": [\r\n    {\r\n      // \"a1\": \"Don't Know\",\r\n      \"a2\": \"Low\",\r\n      \"a3\": \"Medium\",\r\n      \"a4\": \"High\",\r\n      \"a5\": \"Very High\"\r\n    }\r\n  ]\r\n},\r\n{\r\n  \"firstheading\": \"Ability to Impact Customer or Supplier Price\",\r\n  \"questions\": \"To what extent can you influence customer pricing or supplier costs?\",\r\n  \"className\": \"policy-question-two\",\r\n  \"selectAnswer\": \"Select an answer\",\r\n  \"bottomDesc\": \"If exchange rates change, can you raise your prices or renegotiate costs with suppliers?\",\r\n  \"Ans\": [\r\n    {\r\n      // \"a1\": \"Don't Know\",\r\n      \"a2\": \"High\",\r\n      \"a3\": \"Medium\",\r\n      \"a4\": \"Low\",\r\n      \"a5\": \"No Impact\"\r\n    }\r\n  ]\r\n},\r\n{\r\n  \"firstheading\": \"Business Differentiation from Competitors in the Industry\",\r\n  \"questions\": \"How similar is your exposure to exchange rates compared to that of your main competitors?\",\r\n  \"className\": \"policy-question-three\",\r\n  \"selectAnswer\": \"Select an answer\",\r\n  \"bottomDesc\": \"Consider if your main competitors are also affected by exchange rate fluctuations. Are you able to handle these fluctuations better or differently?\",\r\n  \"Ans\": [\r\n    {\r\n      \"a1\": \"Don't Know\",\r\n      \"a2\": \"High\",\r\n      \"a3\": \"Medium\",\r\n      \"a4\": \"Low\",\r\n      \"a5\": \"Very Low\"\r\n    }\r\n  ]\r\n},\r\n{\r\n  \"firstheading\": \"Level of Business Competitiveness\",\r\n  \"questions\": \"How competitive is the industry your company operates in?\",\r\n  \"className\": \"policy-question-four\",\r\n  \"selectAnswer\": \"Select an answer\",\r\n  \"bottomDesc\": \"How competitive is the market you operate in? how difficult is it for you to adjust prices in response to currency value changes?\",\r\n  \"Ans\": [\r\n    {\r\n      \"a1\": \"Don't Know\",\r\n      \"a2\": \"Low\",\r\n      \"a3\": \"Medium\",\r\n      \"a4\": \"High\",\r\n      \"a5\": \"Very High\"\r\n    }\r\n  ]\r\n},\r\n{\r\n  \"firstheading\": \"Sensitivity to Credit Consumption\",\r\n  \"questions\": \"What is the company's ability to consume additional credit lines for possible collateral requirements?\",\r\n  \"className\": \"policy-question-five\",\r\n  \"selectAnswer\": \"Select an answer\",\r\n  \"bottomDesc\": \"If required, can your company easily access additional credit to manage potential currency risks?\",\r\n  \"Ans\": [\r\n    {\r\n      \"a1\": \"Don't Know\",\r\n      \"a2\": \"Very High\",\r\n      \"a3\": \"High\",\r\n      \"a4\": \"Medium\",\r\n      \"a5\": \"Low\"\r\n    }\r\n  ]\r\n},\r\n]"
            },
            {
                "name": "advancePolicyStep1Obj",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/risk-dashboard/components/advanced-policy/components/advance-policy-data.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n  \"pair\": \"USD/ILS\",\r\n  \"sign\": \"$\",\r\n  \"toCurrency\": \"US\",\r\n  \"flag\": \"https://okoora-stage-api2023.azurewebsites.net/Images/Flags/USD.png\",\r\n  \"code\": \"USD\",\r\n  \"baseCurrencyFlag\": \"https://okoora-stage-api2023.azurewebsites.net/Images/Flags/ILS.png\",\r\n  \"baseCurrency\": \"ILS\",\r\n  \"baseCurrencySign\": \"₪\",\r\n  \"cashFlowName\": \"test\",\r\n  \"monthlyAmount\": 4,\r\n}"
            },
            {
                "name": "ALLOWED_SPECIAL_CHARACTERS_REGEX",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/custom-validators.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "/[!@#$%^()_\\-[\\]\\{}|;':\",.\\/<>?]/"
            },
            {
                "name": "ALLOWED_SPECIAL_CHARACTERS_REGEX",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/sign-up/models/custom-validators.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "/[!@#$%^&*()\\[\\]{}\\\\\\-_+={}|\\\\:;'\",<>,.?/~`]/"
            },
            {
                "name": "appConfig",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/app.config.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ApplicationConfig",
                "defaultValue": "{\r\n  providers: [provideZoneChangeDetection({ eventCoalescing: true }), provideRouter(routes)]\r\n}"
            },
            {
                "name": "cashflowExposureRows",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/risk-dashboard/components/cashflow-exposure/components/cashflow-exposure-data.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\r\n  {\r\n      \"month\": \"Apr\",\r\n      \"year\": 2025,\r\n      \"buying\": \"0\",\r\n      \"selling\": \"100,000\",\r\n      \"totalNetValue\": 100000,\r\n      \"lastDay\": 30,\r\n      \"midDay\": 15,\r\n      \"openEditForBuying\": false,\r\n      \"openEditForSelling\": false,\r\n      \"errMsgForbuyingFlag\": false,\r\n      \"errMsgForsellingFlag\": false,\r\n      \"postPoneFlag\": false,\r\n      \"postPoneInactiveFlag\": true,\r\n      \"postPoneMonth\": \"Apr\",\r\n      \"monthNumber\": 3,\r\n      \"cashflowDate\": 15,\r\n      \"Month\": \"15/04/2025\",\r\n      \"dayOfExpity\": \"15\",\r\n      \"date\": new Date(2025, 4, 15),\r\n      \"disabledColumn\": false,\r\n  },\r\n  {\r\n      \"month\": \"May\",\r\n      \"year\": 2025,\r\n      \"buying\": \"0\",\r\n      \"selling\": \"100,000\",\r\n      \"totalNetValue\": 100000,\r\n      \"lastDay\": 31,\r\n      \"midDay\": 16,\r\n      \"openEditForBuying\": false,\r\n      \"openEditForSelling\": false,\r\n      \"errMsgForbuyingFlag\": false,\r\n      \"errMsgForsellingFlag\": false,\r\n      \"postPoneFlag\": false,\r\n      \"postPoneInactiveFlag\": true,\r\n      \"postPoneMonth\": \"May\",\r\n      \"monthNumber\": 4,\r\n      \"cashflowDate\": 15,\r\n      \"Month\": \"15/05/2025\",\r\n      \"dayOfExpity\": \"15\",\r\n      \"date\": new Date(2025, 5, 15),\r\n      \"disabledColumn\": false,\r\n  },\r\n  {\r\n      \"month\": \"Jun\",\r\n      \"year\": 2025,\r\n      \"buying\": \"0\",\r\n      \"selling\": \"100,000\",\r\n      \"totalNetValue\": 100000,\r\n      \"lastDay\": 30,\r\n      \"midDay\": 15,\r\n      \"openEditForBuying\": false,\r\n      \"openEditForSelling\": false,\r\n      \"errMsgForbuyingFlag\": false,\r\n      \"errMsgForsellingFlag\": false,\r\n      \"postPoneFlag\": false,\r\n      \"postPoneInactiveFlag\": true,\r\n      \"postPoneMonth\": \"Jun\",\r\n      \"monthNumber\": 5,\r\n      \"cashflowDate\": 15,\r\n      \"Month\": \"15/06/2025\",\r\n      \"dayOfExpity\": \"15\",\r\n      \"date\": new Date(2025, 6, 15),\r\n      \"disabledColumn\": false,\r\n  },\r\n  {\r\n      \"month\": \"Jul\",\r\n      \"year\": 2025,\r\n      \"buying\": \"0\",\r\n      \"selling\": \"100,000\",\r\n      \"totalNetValue\": 100000,\r\n      \"lastDay\": 31,\r\n      \"midDay\": 16,\r\n      \"openEditForBuying\": false,\r\n      \"openEditForSelling\": false,\r\n      \"errMsgForbuyingFlag\": false,\r\n      \"errMsgForsellingFlag\": false,\r\n      \"postPoneFlag\": false,\r\n      \"postPoneInactiveFlag\": true,\r\n      \"postPoneMonth\": \"Jul\",\r\n      \"monthNumber\": 6,\r\n      \"cashflowDate\": 15,\r\n      \"Month\": \"15/07/2025\",\r\n      \"dayOfExpity\": \"15\",\r\n      \"date\": new Date(2025, 7, 15),\r\n      \"disabledColumn\": false,\r\n  },\r\n  {\r\n      \"month\": \"Aug\",\r\n      \"year\": 2025,\r\n      \"buying\": \"0\",\r\n      \"selling\": \"100,000\",\r\n      \"totalNetValue\": 100000,\r\n      \"lastDay\": 31,\r\n      \"midDay\": 16,\r\n      \"openEditForBuying\": false,\r\n      \"openEditForSelling\": false,\r\n      \"errMsgForbuyingFlag\": false,\r\n      \"errMsgForsellingFlag\": false,\r\n      \"postPoneFlag\": false,\r\n      \"postPoneInactiveFlag\": true,\r\n      \"postPoneMonth\": \"Aug\",\r\n      \"monthNumber\": 7,\r\n      \"cashflowDate\": 15,\r\n      \"Month\": \"15/08/2025\",\r\n      \"dayOfExpity\": \"15\",\r\n      \"date\": new Date(2025, 8, 15)\r\n  },\r\n  {\r\n      \"month\": \"Sep\",\r\n      \"year\": 2025,\r\n      \"buying\": \"0\",\r\n      \"selling\": \"100,000\",\r\n      \"totalNetValue\": 100000,\r\n      \"lastDay\": 30,\r\n      \"midDay\": 15,\r\n      \"openEditForBuying\": false,\r\n      \"openEditForSelling\": false,\r\n      \"errMsgForbuyingFlag\": false,\r\n      \"errMsgForsellingFlag\": false,\r\n      \"postPoneFlag\": false,\r\n      \"postPoneInactiveFlag\": true,\r\n      \"postPoneMonth\": \"Sep\",\r\n      \"monthNumber\": 8,\r\n      \"cashflowDate\": 15,\r\n      \"Month\": \"15/09/2025\",\r\n      \"dayOfExpity\": \"15\",\r\n      \"date\": new Date(2025, 9, 15),\r\n      \"disabledColumn\": false,\r\n  },\r\n  {\r\n      \"month\": \"Oct\",\r\n      \"year\": 2025,\r\n      \"buying\": \"0\",\r\n      \"selling\": \"100,000\",\r\n      \"totalNetValue\": 100000,\r\n      \"lastDay\": 31,\r\n      \"midDay\": 16,\r\n      \"openEditForBuying\": false,\r\n      \"openEditForSelling\": false,\r\n      \"errMsgForbuyingFlag\": false,\r\n      \"errMsgForsellingFlag\": false,\r\n      \"postPoneFlag\": false,\r\n      \"postPoneInactiveFlag\": true,\r\n      \"postPoneMonth\": \"Oct\",\r\n      \"monthNumber\": 9,\r\n      \"cashflowDate\": 15,\r\n      \"Month\": \"15/10/2025\",\r\n      \"dayOfExpity\": \"15\",\r\n      \"date\": new Date(2025, 10, 15),\r\n      \"disabledColumn\": false,\r\n  },\r\n  {\r\n      \"month\": \"Nov\",\r\n      \"year\": 2025,\r\n      \"buying\": \"0\",\r\n      \"selling\": \"100,000\",\r\n      \"totalNetValue\": 100000,\r\n      \"lastDay\": 30,\r\n      \"midDay\": 15,\r\n      \"openEditForBuying\": false,\r\n      \"openEditForSelling\": false,\r\n      \"errMsgForbuyingFlag\": false,\r\n      \"errMsgForsellingFlag\": false,\r\n      \"postPoneFlag\": false,\r\n      \"postPoneInactiveFlag\": true,\r\n      \"postPoneMonth\": \"Nov\",\r\n      \"monthNumber\": 10,\r\n      \"cashflowDate\": 15,\r\n      \"Month\": \"15/11/2025\",\r\n      \"date\": new Date(2025, 11, 15),\r\n      \"disabledColumn\": false,\r\n  },\r\n  {\r\n      \"month\": \"Dec\",\r\n      \"year\": 2025,\r\n      \"buying\": \"0\",\r\n      \"selling\": \"100,000\",\r\n      \"totalNetValue\": 100000,\r\n      \"lastDay\": 31,\r\n      \"midDay\": 16,\r\n      \"openEditForBuying\": false,\r\n      \"openEditForSelling\": false,\r\n      \"errMsgForbuyingFlag\": false,\r\n      \"errMsgForsellingFlag\": false,\r\n      \"postPoneFlag\": false,\r\n      \"postPoneInactiveFlag\": true,\r\n      \"postPoneMonth\": \"Dec\",\r\n      \"monthNumber\": 11,\r\n      \"cashflowDate\": 15,\r\n      \"Month\": \"15/12/2025\",\r\n      \"dayOfExpity\": \"15\",\r\n      \"date\": new Date(2025, 12, 15),\r\n      \"disabledColumn\": false,\r\n  },\r\n  {\r\n      \"month\": \"Jan\",\r\n      \"year\": 2026,\r\n      \"buying\": \"0\",\r\n      \"selling\": \"100,000\",\r\n      \"totalNetValue\": 100000,\r\n      \"lastDay\": 31,\r\n      \"midDay\": 16,\r\n      \"openEditForBuying\": false,\r\n      \"openEditForSelling\": false,\r\n      \"errMsgForbuyingFlag\": false,\r\n      \"errMsgForsellingFlag\": false,\r\n      \"postPoneFlag\": false,\r\n      \"postPoneInactiveFlag\": true,\r\n      \"postPoneMonth\": \"Jan\",\r\n      \"monthNumber\": 0,\r\n      \"cashflowDate\": 15,\r\n      \"Month\": \"15/01/2026\",\r\n      \"dayOfExpity\": \"15\",\r\n      \"date\": new Date(2026, 1, 15),\r\n      \"disabledColumn\": false,\r\n  },\r\n  {\r\n      \"month\": \"Feb\",\r\n      \"year\": 2026,\r\n      \"buying\": \"0\",\r\n      \"selling\": \"100,000\",\r\n      \"totalNetValue\": 100000,\r\n      \"lastDay\": 28,\r\n      \"midDay\": 14,\r\n      \"openEditForBuying\": false,\r\n      \"openEditForSelling\": false,\r\n      \"errMsgForbuyingFlag\": false,\r\n      \"errMsgForsellingFlag\": false,\r\n      \"postPoneFlag\": false,\r\n      \"postPoneInactiveFlag\": true,\r\n      \"postPoneMonth\": \"Feb\",\r\n      \"monthNumber\": 1,\r\n      \"cashflowDate\": 15,\r\n      \"Month\": \"15/02/2026\",\r\n      \"dayOfExpity\": \"15\",\r\n      \"date\": new Date(2026, 2, 15),\r\n      \"disabledColumn\": false,\r\n  },\r\n  {\r\n      \"month\": \"Mar\",\r\n      \"year\": 2026,\r\n      \"buying\": \"0\",\r\n      \"selling\": \"100,000\",\r\n      \"totalNetValue\": 100000,\r\n      \"lastDay\": 31,\r\n      \"midDay\": 16,\r\n      \"openEditForBuying\": false,\r\n      \"openEditForSelling\": false,\r\n      \"errMsgForbuyingFlag\": false,\r\n      \"errMsgForsellingFlag\": false,\r\n      \"postPoneFlag\": false,\r\n      \"postPoneInactiveFlag\": true,\r\n      \"postPoneMonth\": \"Mar\",\r\n      \"monthNumber\": 2,\r\n      \"cashflowDate\": 15,\r\n      \"Month\": \"15/03/2026\",\r\n      \"dayOfExpity\": \"15\",\r\n      \"date\": new Date(2026, 3, 15),\r\n      \"disabledColumn\": false,\r\n  }\r\n]"
            },
            {
                "name": "countryData",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/sign-up/fields/country-data.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\r\n        {\r\n            \"countryName\": \"Albania\",\r\n            \"countryCode\": \"al\",\r\n            \"countryCode3Letters\": \"ALB\",\r\n            \"phoneCode\": 355,\r\n            \"score\": 2,\r\n            \"canRegister\": 1,\r\n            \"flag\": \"https://okoora-stage-api2023.azurewebsites.net//Images/CountryFlags/al.svg\"\r\n        },\r\n        {\r\n            \"countryName\": \"Algeria\",\r\n            \"countryCode\": \"dz\",\r\n            \"countryCode3Letters\": \"DZA\",\r\n            \"phoneCode\": 213,\r\n            \"score\": 1,\r\n            \"canRegister\": 0,\r\n            \"flag\": \"https://okoora-stage-api2023.azurewebsites.net//Images/CountryFlags/dz.svg\"\r\n        },\r\n        {\r\n            \"countryName\": \"Andorra\",\r\n            \"countryCode\": \"ad\",\r\n            \"countryCode3Letters\": \"AND\",\r\n            \"phoneCode\": 376,\r\n            \"score\": 2,\r\n            \"canRegister\": 0,\r\n            \"flag\": \"https://okoora-stage-api2023.azurewebsites.net//Images/CountryFlags/ad.svg\"\r\n        },\r\n        {\r\n            \"countryName\": \"Antarctica\",\r\n            \"countryCode\": \"aq\",\r\n            \"countryCode3Letters\": \"ATA\",\r\n            \"phoneCode\": 672,\r\n            \"score\": 4,\r\n            \"canRegister\": 0,\r\n            \"flag\": \"https://okoora-stage-api2023.azurewebsites.net//Images/CountryFlags/aq.svg\"\r\n        },\r\n        {\r\n            \"countryName\": \"Argentina\",\r\n            \"countryCode\": \"ar\",\r\n            \"countryCode3Letters\": \"ARG\",\r\n            \"phoneCode\": 54,\r\n            \"score\": 3,\r\n            \"canRegister\": 0,\r\n            \"flag\": \"https://okoora-stage-api2023.azurewebsites.net//Images/CountryFlags/ar.svg\"\r\n        },\r\n        {\r\n            \"countryName\": \"Armenia\",\r\n            \"countryCode\": \"am\",\r\n            \"countryCode3Letters\": \"ARM\",\r\n            \"phoneCode\": 374,\r\n            \"score\": 4,\r\n            \"canRegister\": 0,\r\n            \"flag\": \"https://okoora-stage-api2023.azurewebsites.net//Images/CountryFlags/am.svg\"\r\n        },\r\n        {\r\n            \"countryName\": \"Aruba\",\r\n            \"countryCode\": \"aw\",\r\n            \"countryCode3Letters\": \"ABW\",\r\n            \"phoneCode\": 297,\r\n            \"score\": 4,\r\n            \"canRegister\": 0,\r\n            \"flag\": \"https://okoora-stage-api2023.azurewebsites.net//Images/CountryFlags/aw.svg\"\r\n        },\r\n        {\r\n            \"countryName\": \"Australia\",\r\n            \"countryCode\": \"au\",\r\n            \"countryCode3Letters\": \"AUS\",\r\n            \"phoneCode\": 61,\r\n            \"score\": 3,\r\n            \"canRegister\": 1,\r\n            \"flag\": \"https://okoora-stage-api2023.azurewebsites.net//Images/CountryFlags/au.svg\"\r\n        },\r\n        {\r\n            \"countryName\": \"Austria\",\r\n            \"countryCode\": \"at\",\r\n            \"countryCode3Letters\": \"AUT\",\r\n            \"phoneCode\": 43,\r\n            \"score\": 1,\r\n            \"canRegister\": 1,\r\n            \"flag\": \"https://okoora-stage-api2023.azurewebsites.net//Images/CountryFlags/at.svg\"\r\n        },\r\n        {\r\n            \"countryName\": \"Azerbaijan\",\r\n            \"countryCode\": \"az\",\r\n            \"countryCode3Letters\": \"AZE\",\r\n            \"phoneCode\": 994,\r\n            \"score\": 2,\r\n            \"canRegister\": 0,\r\n            \"flag\": \"https://okoora-stage-api2023.azurewebsites.net//Images/CountryFlags/az.svg\"\r\n        },\r\n        {\r\n            \"countryName\": \"Bangladesh\",\r\n            \"countryCode\": \"bd\",\r\n            \"countryCode3Letters\": \"BGD\",\r\n            \"phoneCode\": 880,\r\n            \"score\": 2,\r\n            \"canRegister\": 1,\r\n            \"flag\": \"https://okoora-stage-api2023.azurewebsites.net//Images/CountryFlags/bd.svg\"\r\n        },\r\n        {\r\n            \"countryName\": \"Belgium\",\r\n            \"countryCode\": \"be\",\r\n            \"countryCode3Letters\": \"BEL\",\r\n            \"phoneCode\": 32,\r\n            \"score\": 1,\r\n            \"canRegister\": 1,\r\n            \"flag\": \"https://okoora-stage-api2023.azurewebsites.net//Images/CountryFlags/be.svg\"\r\n        },\r\n        {\r\n            \"countryName\": \"Belize\",\r\n            \"countryCode\": \"bz\",\r\n            \"countryCode3Letters\": \"BLZ\",\r\n            \"phoneCode\": 501,\r\n            \"score\": 4,\r\n            \"canRegister\": 1,\r\n            \"flag\": \"https://okoora-stage-api2023.azurewebsites.net//Images/CountryFlags/bz.svg\"\r\n        },\r\n        {\r\n            \"countryName\": \"Benin\",\r\n            \"countryCode\": \"bj\",\r\n            \"countryCode3Letters\": \"BEN\",\r\n            \"phoneCode\": 229,\r\n            \"score\": 4,\r\n            \"canRegister\": 1,\r\n            \"flag\": \"https://okoora-stage-api2023.azurewebsites.net//Images/CountryFlags/bj.svg\"\r\n        },\r\n        {\r\n            \"countryName\": \"Bhutan\",\r\n            \"countryCode\": \"bt\",\r\n            \"countryCode3Letters\": \"BTN\",\r\n            \"phoneCode\": 975,\r\n            \"score\": 4,\r\n            \"canRegister\": 1,\r\n            \"flag\": \"https://okoora-stage-api2023.azurewebsites.net//Images/CountryFlags/bt.svg\"\r\n        },\r\n        {\r\n            \"countryName\": \"Bolivia\",\r\n            \"countryCode\": \"bo\",\r\n            \"countryCode3Letters\": \"BOL\",\r\n            \"phoneCode\": 591,\r\n            \"score\": 2,\r\n            \"canRegister\": 1,\r\n            \"flag\": \"https://okoora-stage-api2023.azurewebsites.net//Images/CountryFlags/bo.svg\"\r\n        },\r\n        {\r\n            \"countryName\": \"Bosnia And Herzegovina\",\r\n            \"countryCode\": \"ba\",\r\n            \"countryCode3Letters\": \"BIH\",\r\n            \"phoneCode\": 387,\r\n            \"score\": 2,\r\n            \"canRegister\": 1,\r\n            \"flag\": \"https://okoora-stage-api2023.azurewebsites.net//Images/CountryFlags/ba.svg\"\r\n        },\r\n        {\r\n            \"countryName\": \"Botswana\",\r\n            \"countryCode\": \"bw\",\r\n            \"countryCode3Letters\": \"BWA\",\r\n            \"phoneCode\": 267,\r\n            \"score\": 2,\r\n            \"canRegister\": 1,\r\n            \"flag\": \"https://okoora-stage-api2023.azurewebsites.net//Images/CountryFlags/bw.svg\"\r\n        },\r\n        {\r\n            \"countryName\": \"Brazil\",\r\n            \"countryCode\": \"br\",\r\n            \"countryCode3Letters\": \"BRA\",\r\n            \"phoneCode\": 55,\r\n            \"score\": 5,\r\n            \"canRegister\": 1,\r\n            \"flag\": \"https://okoora-stage-api2023.azurewebsites.net//Images/CountryFlags/br.svg\"\r\n        },\r\n        {\r\n            \"countryName\": \"Brunei Darussalam\",\r\n            \"countryCode\": \"bn\",\r\n            \"countryCode3Letters\": \"BRN\",\r\n            \"phoneCode\": 673,\r\n            \"score\": 4,\r\n            \"canRegister\": 1,\r\n            \"flag\": \"https://okoora-stage-api2023.azurewebsites.net//Images/CountryFlags/bn.svg\"\r\n        },\r\n        {\r\n            \"countryName\": \"Bulgaria\",\r\n            \"countryCode\": \"bg\",\r\n            \"countryCode3Letters\": \"BGR\",\r\n            \"phoneCode\": 359,\r\n            \"score\": 4,\r\n            \"canRegister\": 1,\r\n            \"flag\": \"https://okoora-stage-api2023.azurewebsites.net//Images/CountryFlags/bg.svg\"\r\n        },\r\n        {\r\n            \"countryName\": \"Burkina Faso\",\r\n            \"countryCode\": \"bf\",\r\n            \"countryCode3Letters\": \"BFA\",\r\n            \"phoneCode\": 226,\r\n            \"score\": 4,\r\n            \"canRegister\": 1,\r\n            \"flag\": \"https://okoora-stage-api2023.azurewebsites.net//Images/CountryFlags/bf.svg\"\r\n        },\r\n        {\r\n            \"countryName\": \"Burundi\",\r\n            \"countryCode\": \"bi\",\r\n            \"countryCode3Letters\": \"BDI\",\r\n            \"phoneCode\": 257,\r\n            \"score\": 4,\r\n            \"canRegister\": 1,\r\n            \"flag\": \"https://okoora-stage-api2023.azurewebsites.net//Images/CountryFlags/bi.svg\"\r\n        },\r\n        {\r\n            \"countryName\": \"Cambodia\",\r\n            \"countryCode\": \"kh\",\r\n            \"countryCode3Letters\": \"KHM\",\r\n            \"phoneCode\": 855,\r\n            \"score\": 2,\r\n            \"canRegister\": 1,\r\n            \"flag\": \"https://okoora-stage-api2023.azurewebsites.net//Images/CountryFlags/kh.svg\"\r\n        },\r\n        {\r\n            \"countryName\": \"Cameroon\",\r\n            \"countryCode\": \"cm\",\r\n            \"countryCode3Letters\": \"CMR\",\r\n            \"phoneCode\": 237,\r\n            \"score\": 4,\r\n            \"canRegister\": 1,\r\n            \"flag\": \"https://okoora-stage-api2023.azurewebsites.net//Images/CountryFlags/cm.svg\"\r\n        },\r\n        {\r\n            \"countryName\": \"Canada\",\r\n            \"countryCode\": \"ca\",\r\n            \"countryCode3Letters\": \"CAN\",\r\n            \"phoneCode\": 1,\r\n            \"score\": 1,\r\n            \"canRegister\": 1,\r\n            \"flag\": \"https://okoora-stage-api2023.azurewebsites.net//Images/CountryFlags/ca.svg\"\r\n        },\r\n        {\r\n            \"countryName\": \"Cape Verde\",\r\n            \"countryCode\": \"cv\",\r\n            \"countryCode3Letters\": \"CPV\",\r\n            \"phoneCode\": 238,\r\n            \"score\": 4,\r\n            \"canRegister\": 1,\r\n            \"flag\": \"https://okoora-stage-api2023.azurewebsites.net//Images/CountryFlags/cv.svg\"\r\n        },\r\n        {\r\n            \"countryName\": \"Central African Republic\",\r\n            \"countryCode\": \"cf\",\r\n            \"countryCode3Letters\": \"CAF\",\r\n            \"phoneCode\": 236,\r\n            \"score\": 4,\r\n            \"canRegister\": 1,\r\n            \"flag\": \"https://okoora-stage-api2023.azurewebsites.net//Images/CountryFlags/cf.svg\"\r\n        },\r\n        {\r\n            \"countryName\": \"Chad\",\r\n            \"countryCode\": \"td\",\r\n            \"countryCode3Letters\": \"TCD\",\r\n            \"phoneCode\": 235,\r\n            \"score\": 5,\r\n            \"canRegister\": 1,\r\n            \"flag\": \"https://okoora-stage-api2023.azurewebsites.net//Images/CountryFlags/td.svg\"\r\n        },\r\n        {\r\n            \"countryName\": \"Chile\",\r\n            \"countryCode\": \"cl\",\r\n            \"countryCode3Letters\": \"CHL\",\r\n            \"phoneCode\": 56,\r\n            \"score\": 2,\r\n            \"canRegister\": 1,\r\n            \"flag\": \"https://okoora-stage-api2023.azurewebsites.net//Images/CountryFlags/cl.svg\"\r\n        },\r\n        {\r\n            \"countryName\": \"China\",\r\n            \"countryCode\": \"cn\",\r\n            \"countryCode3Letters\": \"CHN\",\r\n            \"phoneCode\": 86,\r\n            \"score\": 1,\r\n            \"canRegister\": 0,\r\n            \"flag\": \"https://okoora-stage-api2023.azurewebsites.net//Images/CountryFlags/cn.svg\"\r\n        },\r\n        {\r\n            \"countryName\": \"Israel\",\r\n            \"countryCode\": \"il\",\r\n            \"countryCode3Letters\": \"ISR\",\r\n            \"phoneCode\": 972,\r\n            \"score\": 5,\r\n            \"canRegister\": 1,\r\n            \"flag\": \"https://okoora-stage-api2023.azurewebsites.net//Images/CountryFlags/il.svg\"\r\n        },\r\n    ]"
            },
            {
                "name": "CountryData",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/sign-up/models/country.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "CountryDataType",
                "defaultValue": "{\r\n    \"AF\":{\r\n       \"country\": \"Afghanistan\",\r\n       \"countryCode\": \"AF\",\r\n       \"currencyCode\": \"AFN\",\r\n       \"phoneCode\": \"93\"\r\n   },\r\n    \"AX\":{\r\n       \"country\": \"Aland Islands\",\r\n       \"countryCode\": \"AX\",\r\n       \"currencyCode\": \"EUR\",\r\n       \"phoneCode\": \"358-18\"\r\n   },\r\n    \"AL\":{\r\n       \"country\": \"Albania\",\r\n       \"countryCode\": \"AL\",\r\n       \"currencyCode\": \"ALL\",\r\n       \"phoneCode\": \"355\"\r\n   },\r\n    \"DZ\":{\r\n       \"country\": \"Algeria\",\r\n       \"countryCode\": \"DZ\",\r\n       \"currencyCode\": \"DZD\",\r\n       \"phoneCode\": \"213\"\r\n   },\r\n    \"AS\":{\r\n       \"country\": \"American Samoa\",\r\n       \"countryCode\": \"AS\",\r\n       \"currencyCode\": \"USD\",\r\n       \"phoneCode\": \"1-684\"\r\n   },\r\n    \"AD\":{\r\n       \"country\": \"Andorra\",\r\n       \"countryCode\": \"AD\",\r\n       \"currencyCode\": \"EUR\",\r\n       \"phoneCode\": \"376\"\r\n   },\r\n    \"AO\":{\r\n       \"country\": \"Angola\",\r\n       \"countryCode\": \"AO\",\r\n       \"currencyCode\": \"AOA\",\r\n       \"phoneCode\": \"244\"\r\n   },\r\n    \"AI\":{\r\n       \"country\": \"Anguilla\",\r\n       \"countryCode\": \"AI\",\r\n       \"currencyCode\": \"XCD\",\r\n       \"phoneCode\": \"1-264\"\r\n   },\r\n    \"AQ\":{\r\n       \"country\": \"Antarctica\",\r\n       \"countryCode\": \"AQ\",\r\n       \"currencyCode\": \"\",\r\n       \"phoneCode\": \"\"\r\n   },\r\n    \"AG\":{\r\n       \"country\": \"Antigua and Barbuda\",\r\n       \"countryCode\": \"AG\",\r\n       \"currencyCode\": \"XCD\",\r\n       \"phoneCode\": \"1-268\"\r\n   },\r\n    \"AR\":{\r\n       \"country\": \"Argentina\",\r\n       \"countryCode\": \"AR\",\r\n       \"currencyCode\": \"ARS\",\r\n       \"phoneCode\": \"54\"\r\n   },\r\n    \"AM\":{\r\n       \"country\": \"Armenia\",\r\n       \"countryCode\": \"AM\",\r\n       \"currencyCode\": \"AMD\",\r\n       \"phoneCode\": \"374\"\r\n   },\r\n    \"AW\":{\r\n       \"country\": \"Aruba\",\r\n       \"countryCode\": \"AW\",\r\n       \"currencyCode\": \"AWG\",\r\n       \"phoneCode\": \"297\"\r\n   },\r\n    \"AU\":{\r\n       \"country\": \"Australia\",\r\n       \"countryCode\": \"AU\",\r\n       \"currencyCode\": \"AUD\",\r\n       \"phoneCode\": \"61\"\r\n   },\r\n    \"AT\":{\r\n       \"country\": \"Austria\",\r\n       \"countryCode\": \"AT\",\r\n       \"currencyCode\": \"EUR\",\r\n       \"phoneCode\": \"43\"\r\n   },\r\n    \"AZ\":{\r\n       \"country\": \"Azerbaijan\",\r\n       \"countryCode\": \"AZ\",\r\n       \"currencyCode\": \"AZN\",\r\n       \"phoneCode\": \"994\"\r\n   },\r\n    \"BS\":{\r\n       \"country\": \"Bahamas\",\r\n       \"countryCode\": \"BS\",\r\n       \"currencyCode\": \"BSD\",\r\n       \"phoneCode\": \"1-242\"\r\n   },\r\n    \"BH\":{\r\n       \"country\": \"Bahrain\",\r\n       \"countryCode\": \"BH\",\r\n       \"currencyCode\": \"BHD\",\r\n       \"phoneCode\": \"973\"\r\n   },\r\n    \"BD\":{\r\n       \"country\": \"Bangladesh\",\r\n       \"countryCode\": \"BD\",\r\n       \"currencyCode\": \"BDT\",\r\n       \"phoneCode\": \"880\"\r\n   },\r\n    \"BB\":{\r\n       \"country\": \"Barbados\",\r\n       \"countryCode\": \"BB\",\r\n       \"currencyCode\": \"BBD\",\r\n       \"phoneCode\": \"1-246\"\r\n   },\r\n    \"BY\":{\r\n       \"country\": \"Belarus\",\r\n       \"countryCode\": \"BY\",\r\n       \"currencyCode\": \"BYN\",\r\n       \"phoneCode\": \"375\"\r\n   },\r\n    \"BE\":{\r\n       \"country\": \"Belgium\",\r\n       \"countryCode\": \"BE\",\r\n       \"currencyCode\": \"EUR\",\r\n       \"phoneCode\": \"32\"\r\n   },\r\n    \"BZ\":{\r\n       \"country\": \"Belize\",\r\n       \"countryCode\": \"BZ\",\r\n       \"currencyCode\": \"BZD\",\r\n       \"phoneCode\": \"501\"\r\n   },\r\n    \"BJ\":{\r\n       \"country\": \"Benin\",\r\n       \"countryCode\": \"BJ\",\r\n       \"currencyCode\": \"XOF\",\r\n       \"phoneCode\": \"229\"\r\n   },\r\n    \"BM\":{\r\n       \"country\": \"Bermuda\",\r\n       \"countryCode\": \"BM\",\r\n       \"currencyCode\": \"BMD\",\r\n       \"phoneCode\": \"1-441\"\r\n   },\r\n    \"BT\":{\r\n       \"country\": \"Bhutan\",\r\n       \"countryCode\": \"BT\",\r\n       \"currencyCode\": \"BTN\",\r\n       \"phoneCode\": \"975\"\r\n   },\r\n    \"BO\":{\r\n       \"country\": \"Bolivia\",\r\n       \"countryCode\": \"BO\",\r\n       \"currencyCode\": \"BOB\",\r\n       \"phoneCode\": \"591\"\r\n   },\r\n    \"BQ\":{\r\n       \"country\": \"Bonaire, Saint Eustatius and Saba \",\r\n       \"countryCode\": \"BQ\",\r\n       \"currencyCode\": \"USD\",\r\n       \"phoneCode\": \"599\"\r\n   },\r\n    \"BA\":{\r\n       \"country\": \"Bosnia and Herzegovina\",\r\n       \"countryCode\": \"BA\",\r\n       \"currencyCode\": \"BAM\",\r\n       \"phoneCode\": \"387\"\r\n   },\r\n    \"BW\":{\r\n       \"country\": \"Botswana\",\r\n       \"countryCode\": \"BW\",\r\n       \"currencyCode\": \"BWP\",\r\n       \"phoneCode\": \"267\"\r\n   },\r\n    \"BV\":{\r\n       \"country\": \"Bouvet Island\",\r\n       \"countryCode\": \"BV\",\r\n       \"currencyCode\": \"NOK\",\r\n       \"phoneCode\": \"\"\r\n   },\r\n    \"BR\":{\r\n       \"country\": \"Brazil\",\r\n       \"countryCode\": \"BR\",\r\n       \"currencyCode\": \"BRL\",\r\n       \"phoneCode\": \"55\"\r\n   },\r\n    \"IO\":{\r\n       \"country\": \"British Indian Ocean Territory\",\r\n       \"countryCode\": \"IO\",\r\n       \"currencyCode\": \"USD\",\r\n       \"phoneCode\": \"246\"\r\n   },\r\n    \"VG\":{\r\n       \"country\": \"British Virgin Islands\",\r\n       \"countryCode\": \"VG\",\r\n       \"currencyCode\": \"USD\",\r\n       \"phoneCode\": \"1-284\"\r\n   },\r\n    \"BN\":{\r\n       \"country\": \"Brunei\",\r\n       \"countryCode\": \"BN\",\r\n       \"currencyCode\": \"BND\",\r\n       \"phoneCode\": \"673\"\r\n   },\r\n    \"BG\":{\r\n       \"country\": \"Bulgaria\",\r\n       \"countryCode\": \"BG\",\r\n       \"currencyCode\": \"BGN\",\r\n       \"phoneCode\": \"359\"\r\n   },\r\n    \"BF\":{\r\n       \"country\": \"Burkina Faso\",\r\n       \"countryCode\": \"BF\",\r\n       \"currencyCode\": \"XOF\",\r\n       \"phoneCode\": \"226\"\r\n   },\r\n    \"BI\":{\r\n       \"country\": \"Burundi\",\r\n       \"countryCode\": \"BI\",\r\n       \"currencyCode\": \"BIF\",\r\n       \"phoneCode\": \"257\"\r\n   },\r\n    \"KH\":{\r\n       \"country\": \"Cambodia\",\r\n       \"countryCode\": \"KH\",\r\n       \"currencyCode\": \"KHR\",\r\n       \"phoneCode\": \"855\"\r\n   },\r\n    \"CM\":{\r\n       \"country\": \"Cameroon\",\r\n       \"countryCode\": \"CM\",\r\n       \"currencyCode\": \"XAF\",\r\n       \"phoneCode\": \"237\"\r\n   },\r\n    \"CA\":{\r\n       \"country\": \"Canada\",\r\n       \"countryCode\": \"CA\",\r\n       \"currencyCode\": \"CAD\",\r\n       \"phoneCode\": \"1\"\r\n   },\r\n    \"IC\":{\r\n       \"country\": \"Canary Islands\",\r\n       \"countryCode\": \"IC\",\r\n       \"currencyCode\": \"EUR\",\r\n       \"phoneCode\": \"34\"\r\n   },\r\n    \"CV\":{\r\n       \"country\": \"Cape Verde\",\r\n       \"countryCode\": \"CV\",\r\n       \"currencyCode\": \"CVE\",\r\n       \"phoneCode\": \"238\"\r\n   },\r\n    \"KY\":{\r\n       \"country\": \"Cayman Islands\",\r\n       \"countryCode\": \"KY\",\r\n       \"currencyCode\": \"KYD\",\r\n       \"phoneCode\": \"1-345\"\r\n   },\r\n    \"CF\":{\r\n       \"country\": \"Central African Republic\",\r\n       \"countryCode\": \"CF\",\r\n       \"currencyCode\": \"XAF\",\r\n       \"phoneCode\": \"236\"\r\n   },\r\n    \"TD\":{\r\n       \"country\": \"Chad\",\r\n       \"countryCode\": \"TD\",\r\n       \"currencyCode\": \"XAF\",\r\n       \"phoneCode\": \"235\"\r\n   },\r\n    \"CL\":{\r\n       \"country\": \"Chile\",\r\n       \"countryCode\": \"CL\",\r\n       \"currencyCode\": \"CLP\",\r\n       \"phoneCode\": \"56\"\r\n   },\r\n    \"CN\":{\r\n       \"country\": \"China\",\r\n       \"countryCode\": \"CN\",\r\n       \"currencyCode\": \"CNY\",\r\n       \"phoneCode\": \"86\"\r\n   },\r\n    \"CX\":{\r\n       \"country\": \"Christmas Island\",\r\n       \"countryCode\": \"CX\",\r\n       \"currencyCode\": \"AUD\",\r\n       \"phoneCode\": \"61\"\r\n   },\r\n    \"CC\":{\r\n       \"country\": \"Cocos Islands\",\r\n       \"countryCode\": \"CC\",\r\n       \"currencyCode\": \"AUD\",\r\n       \"phoneCode\": \"61\"\r\n   },\r\n    \"CO\":{\r\n       \"country\": \"Colombia\",\r\n       \"countryCode\": \"CO\",\r\n       \"currencyCode\": \"COP\",\r\n       \"phoneCode\": \"57\"\r\n   },\r\n    \"KM\":{\r\n       \"country\": \"Comoros\",\r\n       \"countryCode\": \"KM\",\r\n       \"currencyCode\": \"KMF\",\r\n       \"phoneCode\": \"269\"\r\n   },\r\n    \"CK\":{\r\n       \"country\": \"Cook Islands\",\r\n       \"countryCode\": \"CK\",\r\n       \"currencyCode\": \"NZD\",\r\n       \"phoneCode\": \"682\"\r\n   },\r\n    \"CR\":{\r\n       \"country\": \"Costa Rica\",\r\n       \"countryCode\": \"CR\",\r\n       \"currencyCode\": \"CRC\",\r\n       \"phoneCode\": \"506\"\r\n   },\r\n    \"HR\":{\r\n       \"country\": \"Croatia\",\r\n       \"countryCode\": \"HR\",\r\n       \"currencyCode\": \"HRK\",\r\n       \"phoneCode\": \"385\"\r\n   },\r\n    \"CU\":{\r\n       \"country\": \"Cuba\",\r\n       \"countryCode\": \"CU\",\r\n       \"currencyCode\": \"CUP\",\r\n       \"phoneCode\": \"53\"\r\n   },\r\n    \"CW\":{\r\n       \"country\": \"Curacao\",\r\n       \"countryCode\": \"CW\",\r\n       \"currencyCode\": \"ANG\",\r\n       \"phoneCode\": \"599\"\r\n   },\r\n    \"CY\":{\r\n       \"country\": \"Cyprus\",\r\n       \"countryCode\": \"CY\",\r\n       \"currencyCode\": \"EUR\",\r\n       \"phoneCode\": \"357\"\r\n   },\r\n    \"CZ\":{\r\n       \"country\": \"Czech Republic\",\r\n       \"countryCode\": \"CZ\",\r\n       \"currencyCode\": \"CZK\",\r\n       \"phoneCode\": \"420\"\r\n   },\r\n    \"CD\":{\r\n       \"country\": \"Democratic Republic of the Congo\",\r\n       \"countryCode\": \"CD\",\r\n       \"currencyCode\": \"CDF\",\r\n       \"phoneCode\": \"243\"\r\n   },\r\n    \"DK\":{\r\n       \"country\": \"Denmark\",\r\n       \"countryCode\": \"DK\",\r\n       \"currencyCode\": \"DKK\",\r\n       \"phoneCode\": \"45\"\r\n   },\r\n    \"DJ\":{\r\n       \"country\": \"Djibouti\",\r\n       \"countryCode\": \"DJ\",\r\n       \"currencyCode\": \"DJF\",\r\n       \"phoneCode\": \"253\"\r\n   },\r\n    \"DM\":{\r\n       \"country\": \"Dominica\",\r\n       \"countryCode\": \"DM\",\r\n       \"currencyCode\": \"XCD\",\r\n       \"phoneCode\": \"1-767\"\r\n   },\r\n    \"DO\":{\r\n       \"country\": \"Dominican Republic\",\r\n       \"countryCode\": \"DO\",\r\n       \"currencyCode\": \"DOP\",\r\n       \"phoneCode\": \"1-809 and 1-829\"\r\n   },\r\n    \"TL\":{\r\n       \"country\": \"East Timor\",\r\n       \"countryCode\": \"TL\",\r\n       \"currencyCode\": \"USD\",\r\n       \"phoneCode\": \"670\"\r\n   },\r\n    \"EC\":{\r\n       \"country\": \"Ecuador\",\r\n       \"countryCode\": \"EC\",\r\n       \"currencyCode\": \"USD\",\r\n       \"phoneCode\": \"593\"\r\n   },\r\n    \"EG\":{\r\n       \"country\": \"Egypt\",\r\n       \"countryCode\": \"EG\",\r\n       \"currencyCode\": \"EGP\",\r\n       \"phoneCode\": \"20\"\r\n   },\r\n    \"SV\":{\r\n       \"country\": \"El Salvador\",\r\n       \"countryCode\": \"SV\",\r\n       \"currencyCode\": \"USD\",\r\n       \"phoneCode\": \"503\"\r\n   },\r\n    \"GQ\":{\r\n       \"country\": \"Equatorial Guinea\",\r\n       \"countryCode\": \"GQ\",\r\n       \"currencyCode\": \"XAF\",\r\n       \"phoneCode\": \"240\"\r\n   },\r\n    \"ER\":{\r\n       \"country\": \"Eritrea\",\r\n       \"countryCode\": \"ER\",\r\n       \"currencyCode\": \"ERN\",\r\n       \"phoneCode\": \"291\"\r\n   },\r\n    \"EE\":{\r\n       \"country\": \"Estonia\",\r\n       \"countryCode\": \"EE\",\r\n       \"currencyCode\": \"EUR\",\r\n       \"phoneCode\": \"372\"\r\n   },\r\n    \"ET\":{\r\n       \"country\": \"Ethiopia\",\r\n       \"countryCode\": \"ET\",\r\n       \"currencyCode\": \"ETB\",\r\n       \"phoneCode\": \"251\"\r\n   },\r\n    \"FK\":{\r\n       \"country\": \"Falkland Islands\",\r\n       \"countryCode\": \"FK\",\r\n       \"currencyCode\": \"FKP\",\r\n       \"phoneCode\": \"500\"\r\n   },\r\n    \"FO\":{\r\n       \"country\": \"Faroe Islands\",\r\n       \"countryCode\": \"FO\",\r\n       \"currencyCode\": \"DKK\",\r\n       \"phoneCode\": \"298\"\r\n   },\r\n    \"FJ\":{\r\n       \"country\": \"Fiji\",\r\n       \"countryCode\": \"FJ\",\r\n       \"currencyCode\": \"FJD\",\r\n       \"phoneCode\": \"679\"\r\n   },\r\n    \"FI\":{\r\n       \"country\": \"Finland\",\r\n       \"countryCode\": \"FI\",\r\n       \"currencyCode\": \"EUR\",\r\n       \"phoneCode\": \"358\"\r\n   },\r\n    \"FR\":{\r\n       \"country\": \"France\",\r\n       \"countryCode\": \"FR\",\r\n       \"currencyCode\": \"EUR\",\r\n       \"phoneCode\": \"33\"\r\n   },\r\n    \"GF\":{\r\n       \"country\": \"French Guiana\",\r\n       \"countryCode\": \"GF\",\r\n       \"currencyCode\": \"EUR\",\r\n       \"phoneCode\": \"594\"\r\n   },\r\n    \"PF\":{\r\n       \"country\": \"French Polynesia\",\r\n       \"countryCode\": \"PF\",\r\n       \"currencyCode\": \"XPF\",\r\n       \"phoneCode\": \"689\"\r\n   },\r\n    \"TF\":{\r\n       \"country\": \"French Southern Territories\",\r\n       \"countryCode\": \"TF\",\r\n       \"currencyCode\": \"EUR\",\r\n       \"phoneCode\": \"\"\r\n   },\r\n    \"GA\":{\r\n       \"country\": \"Gabon\",\r\n       \"countryCode\": \"GA\",\r\n       \"currencyCode\": \"XAF\",\r\n       \"phoneCode\": \"241\"\r\n   },\r\n    \"GM\":{\r\n       \"country\": \"Gambia\",\r\n       \"countryCode\": \"GM\",\r\n       \"currencyCode\": \"GMD\",\r\n       \"phoneCode\": \"220\"\r\n   },\r\n    \"GE\":{\r\n       \"country\": \"Georgia\",\r\n       \"countryCode\": \"GE\",\r\n       \"currencyCode\": \"GEL\",\r\n       \"phoneCode\": \"995\"\r\n   },\r\n    \"DE\":{\r\n       \"country\": \"Germany\",\r\n       \"countryCode\": \"DE\",\r\n       \"currencyCode\": \"EUR\",\r\n       \"phoneCode\": \"49\"\r\n   },\r\n    \"GH\":{\r\n       \"country\": \"Ghana\",\r\n       \"countryCode\": \"GH\",\r\n       \"currencyCode\": \"GHS\",\r\n       \"phoneCode\": \"233\"\r\n   },\r\n    \"GI\":{\r\n       \"country\": \"Gibraltar\",\r\n       \"countryCode\": \"GI\",\r\n       \"currencyCode\": \"GIP\",\r\n       \"phoneCode\": \"350\"\r\n   },\r\n    \"GR\":{\r\n       \"country\": \"Greece\",\r\n       \"countryCode\": \"GR\",\r\n       \"currencyCode\": \"EUR\",\r\n       \"phoneCode\": \"30\"\r\n   },\r\n    \"GL\":{\r\n       \"country\": \"Greenland\",\r\n       \"countryCode\": \"GL\",\r\n       \"currencyCode\": \"DKK\",\r\n       \"phoneCode\": \"299\"\r\n   },\r\n    \"GD\":{\r\n       \"country\": \"Grenada\",\r\n       \"countryCode\": \"GD\",\r\n       \"currencyCode\": \"XCD\",\r\n       \"phoneCode\": \"1-473\"\r\n   },\r\n    \"GP\":{\r\n       \"country\": \"Guadeloupe\",\r\n       \"countryCode\": \"GP\",\r\n       \"currencyCode\": \"EUR\",\r\n       \"phoneCode\": \"590\"\r\n   },\r\n    \"GU\":{\r\n       \"country\": \"Guam\",\r\n       \"countryCode\": \"GU\",\r\n       \"currencyCode\": \"USD\",\r\n       \"phoneCode\": \"1-671\"\r\n   },\r\n    \"GT\":{\r\n       \"country\": \"Guatemala\",\r\n       \"countryCode\": \"GT\",\r\n       \"currencyCode\": \"GTQ\",\r\n       \"phoneCode\": \"502\"\r\n   },\r\n    \"GG\":{\r\n       \"country\": \"Guernsey\",\r\n       \"countryCode\": \"GG\",\r\n       \"currencyCode\": \"GBP\",\r\n       \"phoneCode\": \"44-1481\"\r\n   },\r\n    \"GN\":{\r\n       \"country\": \"Guinea\",\r\n       \"countryCode\": \"GN\",\r\n       \"currencyCode\": \"GNF\",\r\n       \"phoneCode\": \"224\"\r\n   },\r\n    \"GW\":{\r\n       \"country\": \"Guinea-Bissau\",\r\n       \"countryCode\": \"GW\",\r\n       \"currencyCode\": \"XOF\",\r\n       \"phoneCode\": \"245\"\r\n   },\r\n    \"GY\":{\r\n       \"country\": \"Guyana\",\r\n       \"countryCode\": \"GY\",\r\n       \"currencyCode\": \"GYD\",\r\n       \"phoneCode\": \"592\"\r\n   },\r\n    \"HT\":{\r\n       \"country\": \"Haiti\",\r\n       \"countryCode\": \"HT\",\r\n       \"currencyCode\": \"HTG\",\r\n       \"phoneCode\": \"509\"\r\n   },\r\n    \"HM\":{\r\n       \"country\": \"Heard Island and McDonald Islands\",\r\n       \"countryCode\": \"HM\",\r\n       \"currencyCode\": \"AUD\",\r\n       \"phoneCode\": \" \"\r\n   },\r\n    \"HN\":{\r\n       \"country\": \"Honduras\",\r\n       \"countryCode\": \"HN\",\r\n       \"currencyCode\": \"HNL\",\r\n       \"phoneCode\": \"504\"\r\n   },\r\n    \"HK\":{\r\n       \"country\": \"Hong Kong\",\r\n       \"countryCode\": \"HK\",\r\n       \"currencyCode\": \"HKD\",\r\n       \"phoneCode\": \"852\"\r\n   },\r\n    \"HU\":{\r\n       \"country\": \"Hungary\",\r\n       \"countryCode\": \"HU\",\r\n       \"currencyCode\": \"HUF\",\r\n       \"phoneCode\": \"36\"\r\n   },\r\n    \"IS\":{\r\n       \"country\": \"Iceland\",\r\n       \"countryCode\": \"IS\",\r\n       \"currencyCode\": \"ISK\",\r\n       \"phoneCode\": \"354\"\r\n   },\r\n    \"IN\":{\r\n       \"country\": \"India\",\r\n       \"countryCode\": \"IN\",\r\n       \"currencyCode\": \"INR\",\r\n       \"phoneCode\": \"91\"\r\n   },\r\n    \"ID\":{\r\n       \"country\": \"Indonesia\",\r\n       \"countryCode\": \"ID\",\r\n       \"currencyCode\": \"IDR\",\r\n       \"phoneCode\": \"62\"\r\n   },\r\n    \"IR\":{\r\n       \"country\": \"Iran\",\r\n       \"countryCode\": \"IR\",\r\n       \"currencyCode\": \"IRR\",\r\n       \"phoneCode\": \"98\"\r\n   },\r\n    \"IQ\":{\r\n       \"country\": \"Iraq\",\r\n       \"countryCode\": \"IQ\",\r\n       \"currencyCode\": \"IQD\",\r\n       \"phoneCode\": \"964\"\r\n   },\r\n    \"IE\":{\r\n       \"country\": \"Ireland\",\r\n       \"countryCode\": \"IE\",\r\n       \"currencyCode\": \"EUR\",\r\n       \"phoneCode\": \"353\"\r\n   },\r\n    \"IM\":{\r\n       \"country\": \"Isle of Man\",\r\n       \"countryCode\": \"IM\",\r\n       \"currencyCode\": \"GBP\",\r\n       \"phoneCode\": \"44-1624\"\r\n   },\r\n    \"IL\":{\r\n       \"country\": \"Israel\",\r\n       \"countryCode\": \"IL\",\r\n       \"currencyCode\": \"ILS\",\r\n       \"phoneCode\": \"972\"\r\n   },\r\n    \"IT\":{\r\n       \"country\": \"Italy\",\r\n       \"countryCode\": \"IT\",\r\n       \"currencyCode\": \"EUR\",\r\n       \"phoneCode\": \"39\"\r\n   },\r\n    \"CI\":{\r\n       \"country\": \"Ivory Coast\",\r\n       \"countryCode\": \"CI\",\r\n       \"currencyCode\": \"XOF\",\r\n       \"phoneCode\": \"225\"\r\n   },\r\n    \"JM\":{\r\n       \"country\": \"Jamaica\",\r\n       \"countryCode\": \"JM\",\r\n       \"currencyCode\": \"JMD\",\r\n       \"phoneCode\": \"1-876\"\r\n   },\r\n    \"JP\":{\r\n       \"country\": \"Japan\",\r\n       \"countryCode\": \"JP\",\r\n       \"currencyCode\": \"JPY\",\r\n       \"phoneCode\": \"81\"\r\n   },\r\n    \"JE\":{\r\n       \"country\": \"Jersey\",\r\n       \"countryCode\": \"JE\",\r\n       \"currencyCode\": \"GBP\",\r\n       \"phoneCode\": \"44-1534\"\r\n   },\r\n    \"JO\":{\r\n       \"country\": \"Jordan\",\r\n       \"countryCode\": \"JO\",\r\n       \"currencyCode\": \"JOD\",\r\n       \"phoneCode\": \"962\"\r\n   },\r\n    \"KZ\":{\r\n       \"country\": \"Kazakhstan\",\r\n       \"countryCode\": \"KZ\",\r\n       \"currencyCode\": \"KZT\",\r\n       \"phoneCode\": \"7\"\r\n   },\r\n    \"KE\":{\r\n       \"country\": \"Kenya\",\r\n       \"countryCode\": \"KE\",\r\n       \"currencyCode\": \"KES\",\r\n       \"phoneCode\": \"254\"\r\n   },\r\n    \"KI\":{\r\n       \"country\": \"Kiribati\",\r\n       \"countryCode\": \"KI\",\r\n       \"currencyCode\": \"AUD\",\r\n       \"phoneCode\": \"686\"\r\n   },\r\n    \"XK\":{\r\n       \"country\": \"Kosovo\",\r\n       \"countryCode\": \"XK\",\r\n       \"currencyCode\": \"EUR\",\r\n       \"phoneCode\": \"\"\r\n   },\r\n    \"KW\":{\r\n       \"country\": \"Kuwait\",\r\n       \"countryCode\": \"KW\",\r\n       \"currencyCode\": \"KWD\",\r\n       \"phoneCode\": \"965\"\r\n   },\r\n    \"KG\":{\r\n       \"country\": \"Kyrgyzstan\",\r\n       \"countryCode\": \"KG\",\r\n       \"currencyCode\": \"KGS\",\r\n       \"phoneCode\": \"996\"\r\n   },\r\n    \"LA\":{\r\n       \"country\": \"Laos\",\r\n       \"countryCode\": \"LA\",\r\n       \"currencyCode\": \"LAK\",\r\n       \"phoneCode\": \"856\"\r\n   },\r\n    \"LV\":{\r\n       \"country\": \"Latvia\",\r\n       \"countryCode\": \"LV\",\r\n       \"currencyCode\": \"EUR\",\r\n       \"phoneCode\": \"371\"\r\n   },\r\n    \"LB\":{\r\n       \"country\": \"Lebanon\",\r\n       \"countryCode\": \"LB\",\r\n       \"currencyCode\": \"LBP\",\r\n       \"phoneCode\": \"961\"\r\n   },\r\n    \"LS\":{\r\n       \"country\": \"Lesotho\",\r\n       \"countryCode\": \"LS\",\r\n       \"currencyCode\": \"LSL\",\r\n       \"phoneCode\": \"266\"\r\n   },\r\n    \"LR\":{\r\n       \"country\": \"Liberia\",\r\n       \"countryCode\": \"LR\",\r\n       \"currencyCode\": \"LRD\",\r\n       \"phoneCode\": \"231\"\r\n   },\r\n    \"LY\":{\r\n       \"country\": \"Libya\",\r\n       \"countryCode\": \"LY\",\r\n       \"currencyCode\": \"LYD\",\r\n       \"phoneCode\": \"218\"\r\n   },\r\n    \"LI\":{\r\n       \"country\": \"Liechtenstein\",\r\n       \"countryCode\": \"LI\",\r\n       \"currencyCode\": \"CHF\",\r\n       \"phoneCode\": \"423\"\r\n   },\r\n    \"LT\":{\r\n       \"country\": \"Lithuania\",\r\n       \"countryCode\": \"LT\",\r\n       \"currencyCode\": \"EUR\",\r\n       \"phoneCode\": \"370\"\r\n   },\r\n    \"LU\":{\r\n       \"country\": \"Luxembourg\",\r\n       \"countryCode\": \"LU\",\r\n       \"currencyCode\": \"EUR\",\r\n       \"phoneCode\": \"352\"\r\n   },\r\n    \"MO\":{\r\n       \"country\": \"Macao\",\r\n       \"countryCode\": \"MO\",\r\n       \"currencyCode\": \"MOP\",\r\n       \"phoneCode\": \"853\"\r\n   },\r\n    \"MK\":{\r\n       \"country\": \"Macedonia\",\r\n       \"countryCode\": \"MK\",\r\n       \"currencyCode\": \"MKD\",\r\n       \"phoneCode\": \"389\"\r\n   },\r\n    \"MG\":{\r\n       \"country\": \"Madagascar\",\r\n       \"countryCode\": \"MG\",\r\n       \"currencyCode\": \"MGA\",\r\n       \"phoneCode\": \"261\"\r\n   },\r\n    \"MW\":{\r\n       \"country\": \"Malawi\",\r\n       \"countryCode\": \"MW\",\r\n       \"currencyCode\": \"MWK\",\r\n       \"phoneCode\": \"265\"\r\n   },\r\n    \"MY\":{\r\n       \"country\": \"Malaysia\",\r\n       \"countryCode\": \"MY\",\r\n       \"currencyCode\": \"MYR\",\r\n       \"phoneCode\": \"60\"\r\n   },\r\n    \"MV\":{\r\n       \"country\": \"Maldives\",\r\n       \"countryCode\": \"MV\",\r\n       \"currencyCode\": \"MVR\",\r\n       \"phoneCode\": \"960\"\r\n   },\r\n    \"ML\":{\r\n       \"country\": \"Mali\",\r\n       \"countryCode\": \"ML\",\r\n       \"currencyCode\": \"XOF\",\r\n       \"phoneCode\": \"223\"\r\n   },\r\n    \"MT\":{\r\n       \"country\": \"Malta\",\r\n       \"countryCode\": \"MT\",\r\n       \"currencyCode\": \"EUR\",\r\n       \"phoneCode\": \"356\"\r\n   },\r\n    \"MH\":{\r\n       \"country\": \"Marshall Islands\",\r\n       \"countryCode\": \"MH\",\r\n       \"currencyCode\": \"USD\",\r\n       \"phoneCode\": \"692\"\r\n   },\r\n    \"MQ\":{\r\n       \"country\": \"Martinique\",\r\n       \"countryCode\": \"MQ\",\r\n       \"currencyCode\": \"EUR\",\r\n       \"phoneCode\": \"596\"\r\n   },\r\n    \"MR\":{\r\n       \"country\": \"Mauritania\",\r\n       \"countryCode\": \"MR\",\r\n       \"currencyCode\": \"MRO\",\r\n       \"phoneCode\": \"222\"\r\n   },\r\n    \"MU\":{\r\n       \"country\": \"Mauritius\",\r\n       \"countryCode\": \"MU\",\r\n       \"currencyCode\": \"MUR\",\r\n       \"phoneCode\": \"230\"\r\n   },\r\n    \"YT\":{\r\n       \"country\": \"Mayotte\",\r\n       \"countryCode\": \"YT\",\r\n       \"currencyCode\": \"EUR\",\r\n       \"phoneCode\": \"262\"\r\n   },\r\n    \"MX\":{\r\n       \"country\": \"Mexico\",\r\n       \"countryCode\": \"MX\",\r\n       \"currencyCode\": \"MXN\",\r\n       \"phoneCode\": \"52\"\r\n   },\r\n    \"FM\":{\r\n       \"country\": \"Micronesia\",\r\n       \"countryCode\": \"FM\",\r\n       \"currencyCode\": \"USD\",\r\n       \"phoneCode\": \"691\"\r\n   },\r\n    \"MD\":{\r\n       \"country\": \"Moldova\",\r\n       \"countryCode\": \"MD\",\r\n       \"currencyCode\": \"MDL\",\r\n       \"phoneCode\": \"373\"\r\n   },\r\n    \"MC\":{\r\n       \"country\": \"Monaco\",\r\n       \"countryCode\": \"MC\",\r\n       \"currencyCode\": \"EUR\",\r\n       \"phoneCode\": \"377\"\r\n   },\r\n    \"MN\":{\r\n       \"country\": \"Mongolia\",\r\n       \"countryCode\": \"MN\",\r\n       \"currencyCode\": \"MNT\",\r\n       \"phoneCode\": \"976\"\r\n   },\r\n    \"ME\":{\r\n       \"country\": \"Montenegro\",\r\n       \"countryCode\": \"ME\",\r\n       \"currencyCode\": \"EUR\",\r\n       \"phoneCode\": \"382\"\r\n   },\r\n    \"MS\":{\r\n       \"country\": \"Montserrat\",\r\n       \"countryCode\": \"MS\",\r\n       \"currencyCode\": \"XCD\",\r\n       \"phoneCode\": \"1-664\"\r\n   },\r\n    \"MA\":{\r\n       \"country\": \"Morocco\",\r\n       \"countryCode\": \"MA\",\r\n       \"currencyCode\": \"MAD\",\r\n       \"phoneCode\": \"212\"\r\n   },\r\n    \"MZ\":{\r\n       \"country\": \"Mozambique\",\r\n       \"countryCode\": \"MZ\",\r\n       \"currencyCode\": \"MZN\",\r\n       \"phoneCode\": \"258\"\r\n   },\r\n    \"MM\":{\r\n       \"country\": \"Myanmar\",\r\n       \"countryCode\": \"MM\",\r\n       \"currencyCode\": \"MMK\",\r\n       \"phoneCode\": \"95\"\r\n   },\r\n    \"NA\":{\r\n       \"country\": \"Namibia\",\r\n       \"countryCode\": \"NA\",\r\n       \"currencyCode\": \"NAD\",\r\n       \"phoneCode\": \"264\"\r\n   },\r\n    \"NR\":{\r\n       \"country\": \"Nauru\",\r\n       \"countryCode\": \"NR\",\r\n       \"currencyCode\": \"AUD\",\r\n       \"phoneCode\": \"674\"\r\n   },\r\n    \"NP\":{\r\n       \"country\": \"Nepal\",\r\n       \"countryCode\": \"NP\",\r\n       \"currencyCode\": \"NPR\",\r\n       \"phoneCode\": \"977\"\r\n   },\r\n    \"NL\":{\r\n       \"country\": \"Netherlands\",\r\n       \"countryCode\": \"NL\",\r\n       \"currencyCode\": \"EUR\",\r\n       \"phoneCode\": \"31\"\r\n   },\r\n    \"NC\":{\r\n       \"country\": \"New Caledonia\",\r\n       \"countryCode\": \"NC\",\r\n       \"currencyCode\": \"XPF\",\r\n       \"phoneCode\": \"687\"\r\n   },\r\n    \"NZ\":{\r\n       \"country\": \"New Zealand\",\r\n       \"countryCode\": \"NZ\",\r\n       \"currencyCode\": \"NZD\",\r\n       \"phoneCode\": \"64\"\r\n   },\r\n    \"NI\":{\r\n       \"country\": \"Nicaragua\",\r\n       \"countryCode\": \"NI\",\r\n       \"currencyCode\": \"NIO\",\r\n       \"phoneCode\": \"505\"\r\n   },\r\n    \"NE\":{\r\n       \"country\": \"Niger\",\r\n       \"countryCode\": \"NE\",\r\n       \"currencyCode\": \"XOF\",\r\n       \"phoneCode\": \"227\"\r\n   },\r\n    \"NG\":{\r\n       \"country\": \"Nigeria\",\r\n       \"countryCode\": \"NG\",\r\n       \"currencyCode\": \"NGN\",\r\n       \"phoneCode\": \"234\"\r\n   },\r\n    \"NU\":{\r\n       \"country\": \"Niue\",\r\n       \"countryCode\": \"NU\",\r\n       \"currencyCode\": \"NZD\",\r\n       \"phoneCode\": \"683\"\r\n   },\r\n    \"NF\":{\r\n       \"country\": \"Norfolk Island\",\r\n       \"countryCode\": \"NF\",\r\n       \"currencyCode\": \"AUD\",\r\n       \"phoneCode\": \"672\"\r\n   },\r\n    \"KP\":{\r\n       \"country\": \"North Korea\",\r\n       \"countryCode\": \"KP\",\r\n       \"currencyCode\": \"KPW\",\r\n       \"phoneCode\": \"850\"\r\n   },\r\n    \"MP\":{\r\n       \"country\": \"Northern Mariana Islands\",\r\n       \"countryCode\": \"MP\",\r\n       \"currencyCode\": \"USD\",\r\n       \"phoneCode\": \"1-670\"\r\n   },\r\n    \"NO\":{\r\n       \"country\": \"Norway\",\r\n       \"countryCode\": \"NO\",\r\n       \"currencyCode\": \"NOK\",\r\n       \"phoneCode\": \"47\"\r\n   },\r\n    \"OM\":{\r\n       \"country\": \"Oman\",\r\n       \"countryCode\": \"OM\",\r\n       \"currencyCode\": \"OMR\",\r\n       \"phoneCode\": \"968\"\r\n   },\r\n    \"PK\":{\r\n       \"country\": \"Pakistan\",\r\n       \"countryCode\": \"PK\",\r\n       \"currencyCode\": \"PKR\",\r\n       \"phoneCode\": \"92\"\r\n   },\r\n    \"PW\":{\r\n       \"country\": \"Palau\",\r\n       \"countryCode\": \"PW\",\r\n       \"currencyCode\": \"USD\",\r\n       \"phoneCode\": \"680\"\r\n   },\r\n    \"PS\":{\r\n       \"country\": \"Palestinian Territory\",\r\n       \"countryCode\": \"PS\",\r\n       \"currencyCode\": \"ILS\",\r\n       \"phoneCode\": \"970\"\r\n   },\r\n    \"PA\":{\r\n       \"country\": \"Panama\",\r\n       \"countryCode\": \"PA\",\r\n       \"currencyCode\": \"PAB\",\r\n       \"phoneCode\": \"507\"\r\n   },\r\n    \"PG\":{\r\n       \"country\": \"Papua New Guinea\",\r\n       \"countryCode\": \"PG\",\r\n       \"currencyCode\": \"PGK\",\r\n       \"phoneCode\": \"675\"\r\n   },\r\n    \"PY\":{\r\n       \"country\": \"Paraguay\",\r\n       \"countryCode\": \"PY\",\r\n       \"currencyCode\": \"PYG\",\r\n       \"phoneCode\": \"595\"\r\n   },\r\n    \"PE\":{\r\n       \"country\": \"Peru\",\r\n       \"countryCode\": \"PE\",\r\n       \"currencyCode\": \"PEN\",\r\n       \"phoneCode\": \"51\"\r\n   },\r\n    \"PH\":{\r\n       \"country\": \"Philippines\",\r\n       \"countryCode\": \"PH\",\r\n       \"currencyCode\": \"PHP\",\r\n       \"phoneCode\": \"63\"\r\n   },\r\n    \"PN\":{\r\n       \"country\": \"Pitcairn\",\r\n       \"countryCode\": \"PN\",\r\n       \"currencyCode\": \"NZD\",\r\n       \"phoneCode\": \"870\"\r\n   },\r\n    \"PL\":{\r\n       \"country\": \"Poland\",\r\n       \"countryCode\": \"PL\",\r\n       \"currencyCode\": \"PLN\",\r\n       \"phoneCode\": \"48\"\r\n   },\r\n    \"PT\":{\r\n       \"country\": \"Portugal\",\r\n       \"countryCode\": \"PT\",\r\n       \"currencyCode\": \"EUR\",\r\n       \"phoneCode\": \"351\"\r\n   },\r\n    \"PR\":{\r\n       \"country\": \"Puerto Rico\",\r\n       \"countryCode\": \"PR\",\r\n       \"currencyCode\": \"USD\",\r\n       \"phoneCode\": \"1-787 and 1-939\"\r\n   },\r\n    \"QA\":{\r\n       \"country\": \"Qatar\",\r\n       \"countryCode\": \"QA\",\r\n       \"currencyCode\": \"QAR\",\r\n       \"phoneCode\": \"974\"\r\n   },\r\n    \"CG\":{\r\n       \"country\": \"Republic of the Congo\",\r\n       \"countryCode\": \"CG\",\r\n       \"currencyCode\": \"XAF\",\r\n       \"phoneCode\": \"242\"\r\n   },\r\n    \"RE\":{\r\n       \"country\": \"Reunion\",\r\n       \"countryCode\": \"RE\",\r\n       \"currencyCode\": \"EUR\",\r\n       \"phoneCode\": \"262\"\r\n   },\r\n    \"RO\":{\r\n       \"country\": \"Romania\",\r\n       \"countryCode\": \"RO\",\r\n       \"currencyCode\": \"RON\",\r\n       \"phoneCode\": \"40\"\r\n   },\r\n    \"RU\":{\r\n       \"country\": \"Russia\",\r\n       \"countryCode\": \"RU\",\r\n       \"currencyCode\": \"RUB\",\r\n       \"phoneCode\": \"7\"\r\n   },\r\n    \"RW\":{\r\n       \"country\": \"Rwanda\",\r\n       \"countryCode\": \"RW\",\r\n       \"currencyCode\": \"RWF\",\r\n       \"phoneCode\": \"250\"\r\n   },\r\n    \"BL\":{\r\n       \"country\": \"Saint Barthelemy\",\r\n       \"countryCode\": \"BL\",\r\n       \"currencyCode\": \"EUR\",\r\n       \"phoneCode\": \"590\"\r\n   },\r\n    \"SH\":{\r\n       \"country\": \"Saint Helena\",\r\n       \"countryCode\": \"SH\",\r\n       \"currencyCode\": \"SHP\",\r\n       \"phoneCode\": \"290\"\r\n   },\r\n    \"KN\":{\r\n       \"country\": \"Saint Kitts and Nevis\",\r\n       \"countryCode\": \"KN\",\r\n       \"currencyCode\": \"XCD\",\r\n       \"phoneCode\": \"1-869\"\r\n   },\r\n    \"LC\":{\r\n       \"country\": \"Saint Lucia\",\r\n       \"countryCode\": \"LC\",\r\n       \"currencyCode\": \"XCD\",\r\n       \"phoneCode\": \"1-758\"\r\n   },\r\n    \"MF\":{\r\n       \"country\": \"Saint Martin\",\r\n       \"countryCode\": \"MF\",\r\n       \"currencyCode\": \"EUR\",\r\n       \"phoneCode\": \"590\"\r\n   },\r\n    \"PM\":{\r\n       \"country\": \"Saint Pierre and Miquelon\",\r\n       \"countryCode\": \"PM\",\r\n       \"currencyCode\": \"EUR\",\r\n       \"phoneCode\": \"508\"\r\n   },\r\n    \"VC\":{\r\n       \"country\": \"Saint Vincent and the Grenadines\",\r\n       \"countryCode\": \"VC\",\r\n       \"currencyCode\": \"XCD\",\r\n       \"phoneCode\": \"1-784\"\r\n   },\r\n    \"WS\":{\r\n       \"country\": \"Samoa\",\r\n       \"countryCode\": \"WS\",\r\n       \"currencyCode\": \"WST\",\r\n       \"phoneCode\": \"685\"\r\n   },\r\n    \"SM\":{\r\n       \"country\": \"San Marino\",\r\n       \"countryCode\": \"SM\",\r\n       \"currencyCode\": \"EUR\",\r\n       \"phoneCode\": \"378\"\r\n   },\r\n    \"ST\":{\r\n       \"country\": \"Sao Tome and Principe\",\r\n       \"countryCode\": \"ST\",\r\n       \"currencyCode\": \"STD\",\r\n       \"phoneCode\": \"239\"\r\n   },\r\n    \"SA\":{\r\n       \"country\": \"Saudi Arabia\",\r\n       \"countryCode\": \"SA\",\r\n       \"currencyCode\": \"SAR\",\r\n       \"phoneCode\": \"966\"\r\n   },\r\n    \"SN\":{\r\n       \"country\": \"Senegal\",\r\n       \"countryCode\": \"SN\",\r\n       \"currencyCode\": \"XOF\",\r\n       \"phoneCode\": \"221\"\r\n   },\r\n    \"RS\":{\r\n       \"country\": \"Serbia\",\r\n       \"countryCode\": \"RS\",\r\n       \"currencyCode\": \"RSD\",\r\n       \"phoneCode\": \"381\"\r\n   },\r\n    \"SC\":{\r\n       \"country\": \"Seychelles\",\r\n       \"countryCode\": \"SC\",\r\n       \"currencyCode\": \"SCR\",\r\n       \"phoneCode\": \"248\"\r\n   },\r\n    \"SL\":{\r\n       \"country\": \"Sierra Leone\",\r\n       \"countryCode\": \"SL\",\r\n       \"currencyCode\": \"SLL\",\r\n       \"phoneCode\": \"232\"\r\n   },\r\n    \"SG\":{\r\n       \"country\": \"Singapore\",\r\n       \"countryCode\": \"SG\",\r\n       \"currencyCode\": \"SGD\",\r\n       \"phoneCode\": \"65\"\r\n   },\r\n    \"SX\":{\r\n       \"country\": \"Sint Maarten\",\r\n       \"countryCode\": \"SX\",\r\n       \"currencyCode\": \"ANG\",\r\n       \"phoneCode\": \"599\"\r\n   },\r\n    \"SK\":{\r\n       \"country\": \"Slovakia\",\r\n       \"countryCode\": \"SK\",\r\n       \"currencyCode\": \"EUR\",\r\n       \"phoneCode\": \"421\"\r\n   },\r\n    \"SI\":{\r\n       \"country\": \"Slovenia\",\r\n       \"countryCode\": \"SI\",\r\n       \"currencyCode\": \"EUR\",\r\n       \"phoneCode\": \"386\"\r\n   },\r\n    \"SB\":{\r\n       \"country\": \"Solomon Islands\",\r\n       \"countryCode\": \"SB\",\r\n       \"currencyCode\": \"SBD\",\r\n       \"phoneCode\": \"677\"\r\n   },\r\n    \"SO\":{\r\n       \"country\": \"Somalia\",\r\n       \"countryCode\": \"SO\",\r\n       \"currencyCode\": \"SOS\",\r\n       \"phoneCode\": \"252\"\r\n   },\r\n    \"ZA\":{\r\n       \"country\": \"South Africa\",\r\n       \"countryCode\": \"ZA\",\r\n       \"currencyCode\": \"ZAR\",\r\n       \"phoneCode\": \"27\"\r\n   },\r\n    \"GS\":{\r\n       \"country\": \"South Georgia and the South Sandwich Islands\",\r\n       \"countryCode\": \"GS\",\r\n       \"currencyCode\": \"GBP\",\r\n       \"phoneCode\": \"\"\r\n   },\r\n    \"KR\":{\r\n       \"country\": \"South Korea\",\r\n       \"countryCode\": \"KR\",\r\n       \"currencyCode\": \"KRW\",\r\n       \"phoneCode\": \"82\"\r\n   },\r\n    \"SS\":{\r\n       \"country\": \"South Sudan\",\r\n       \"countryCode\": \"SS\",\r\n       \"currencyCode\": \"SSP\",\r\n       \"phoneCode\": \"211\"\r\n   },\r\n    \"ES\":{\r\n       \"country\": \"Spain\",\r\n       \"countryCode\": \"ES\",\r\n       \"currencyCode\": \"EUR\",\r\n       \"phoneCode\": \"34\"\r\n   },\r\n    \"LK\":{\r\n       \"country\": \"Sri Lanka\",\r\n       \"countryCode\": \"LK\",\r\n       \"currencyCode\": \"LKR\",\r\n       \"phoneCode\": \"94\"\r\n   },\r\n    \"SD\":{\r\n       \"country\": \"Sudan\",\r\n       \"countryCode\": \"SD\",\r\n       \"currencyCode\": \"SDG\",\r\n       \"phoneCode\": \"249\"\r\n   },\r\n    \"SR\":{\r\n       \"country\": \"Suriname\",\r\n       \"countryCode\": \"SR\",\r\n       \"currencyCode\": \"SRD\",\r\n       \"phoneCode\": \"597\"\r\n   },\r\n    \"SJ\":{\r\n       \"country\": \"Svalbard and Jan Mayen\",\r\n       \"countryCode\": \"SJ\",\r\n       \"currencyCode\": \"NOK\",\r\n       \"phoneCode\": \"47\"\r\n   },\r\n    \"SZ\":{\r\n       \"country\": \"Swaziland\",\r\n       \"countryCode\": \"SZ\",\r\n       \"currencyCode\": \"SZL\",\r\n       \"phoneCode\": \"268\"\r\n   },\r\n    \"SE\":{\r\n       \"country\": \"Sweden\",\r\n       \"countryCode\": \"SE\",\r\n       \"currencyCode\": \"SEK\",\r\n       \"phoneCode\": \"46\"\r\n   },\r\n    \"CH\":{\r\n       \"country\": \"Switzerland\",\r\n       \"countryCode\": \"CH\",\r\n       \"currencyCode\": \"CHF\",\r\n       \"phoneCode\": \"41\"\r\n   },\r\n    \"SY\":{\r\n       \"country\": \"Syria\",\r\n       \"countryCode\": \"SY\",\r\n       \"currencyCode\": \"SYP\",\r\n       \"phoneCode\": \"963\"\r\n   },\r\n    \"TW\":{\r\n       \"country\": \"Taiwan\",\r\n       \"countryCode\": \"TW\",\r\n       \"currencyCode\": \"TWD\",\r\n       \"phoneCode\": \"886\"\r\n   },\r\n    \"TJ\":{\r\n       \"country\": \"Tajikistan\",\r\n       \"countryCode\": \"TJ\",\r\n       \"currencyCode\": \"TJS\",\r\n       \"phoneCode\": \"992\"\r\n   },\r\n    \"TZ\":{\r\n       \"country\": \"Tanzania\",\r\n       \"countryCode\": \"TZ\",\r\n       \"currencyCode\": \"TZS\",\r\n       \"phoneCode\": \"255\"\r\n   },\r\n    \"TH\":{\r\n       \"country\": \"Thailand\",\r\n       \"countryCode\": \"TH\",\r\n       \"currencyCode\": \"THB\",\r\n       \"phoneCode\": \"66\"\r\n   },\r\n    \"TG\":{\r\n       \"country\": \"Togo\",\r\n       \"countryCode\": \"TG\",\r\n       \"currencyCode\": \"XOF\",\r\n       \"phoneCode\": \"228\"\r\n   },\r\n    \"TK\":{\r\n       \"country\": \"Tokelau\",\r\n       \"countryCode\": \"TK\",\r\n       \"currencyCode\": \"NZD\",\r\n       \"phoneCode\": \"690\"\r\n   },\r\n    \"TO\":{\r\n       \"country\": \"Tonga\",\r\n       \"countryCode\": \"TO\",\r\n       \"currencyCode\": \"TOP\",\r\n       \"phoneCode\": \"676\"\r\n   },\r\n    \"TT\":{\r\n       \"country\": \"Trinidad and Tobago\",\r\n       \"countryCode\": \"TT\",\r\n       \"currencyCode\": \"TTD\",\r\n       \"phoneCode\": \"1-868\"\r\n   },\r\n    \"TN\":{\r\n       \"country\": \"Tunisia\",\r\n       \"countryCode\": \"TN\",\r\n       \"currencyCode\": \"TND\",\r\n       \"phoneCode\": \"216\"\r\n   },\r\n    \"TR\":{\r\n       \"country\": \"Turkey\",\r\n       \"countryCode\": \"TR\",\r\n       \"currencyCode\": \"TRY\",\r\n       \"phoneCode\": \"90\"\r\n   },\r\n    \"TM\":{\r\n       \"country\": \"Turkmenistan\",\r\n       \"countryCode\": \"TM\",\r\n       \"currencyCode\": \"TMT\",\r\n       \"phoneCode\": \"993\"\r\n   },\r\n    \"TC\":{\r\n       \"country\": \"Turks and Caicos Islands\",\r\n       \"countryCode\": \"TC\",\r\n       \"currencyCode\": \"USD\",\r\n       \"phoneCode\": \"1-649\"\r\n   },\r\n    \"TV\":{\r\n       \"country\": \"Tuvalu\",\r\n       \"countryCode\": \"TV\",\r\n       \"currencyCode\": \"AUD\",\r\n       \"phoneCode\": \"688\"\r\n   },\r\n    \"VI\":{\r\n       \"country\": \"U.S. Virgin Islands\",\r\n       \"countryCode\": \"VI\",\r\n       \"currencyCode\": \"USD\",\r\n       \"phoneCode\": \"1-340\"\r\n   },\r\n    \"UG\":{\r\n       \"country\": \"Uganda\",\r\n       \"countryCode\": \"UG\",\r\n       \"currencyCode\": \"UGX\",\r\n       \"phoneCode\": \"256\"\r\n   },\r\n    \"UA\":{\r\n       \"country\": \"Ukraine\",\r\n       \"countryCode\": \"UA\",\r\n       \"currencyCode\": \"UAH\",\r\n       \"phoneCode\": \"380\"\r\n   },\r\n    \"AE\":{\r\n       \"country\": \"United Arab Emirates\",\r\n       \"countryCode\": \"AE\",\r\n       \"currencyCode\": \"AED\",\r\n       \"phoneCode\": \"971\"\r\n   },\r\n    \"GB\":{\r\n       \"country\": \"United Kingdom\",\r\n       \"countryCode\": \"GB\",\r\n       \"currencyCode\": \"GBP\",\r\n       \"phoneCode\": \"44\"\r\n   },\r\n    \"US\":{\r\n       \"country\": \"United States\",\r\n       \"countryCode\": \"US\",\r\n       \"currencyCode\": \"USD\",\r\n       \"phoneCode\": \"1\"\r\n   },\r\n    \"UM\":{\r\n       \"country\": \"United States Minor Outlying Islands\",\r\n       \"countryCode\": \"UM\",\r\n       \"currencyCode\": \"USD\",\r\n       \"phoneCode\": \"1\"\r\n   },\r\n    \"UY\":{\r\n       \"country\": \"Uruguay\",\r\n       \"countryCode\": \"UY\",\r\n       \"currencyCode\": \"UYU\",\r\n       \"phoneCode\": \"598\"\r\n   },\r\n    \"UZ\":{\r\n       \"country\": \"Uzbekistan\",\r\n       \"countryCode\": \"UZ\",\r\n       \"currencyCode\": \"UZS\",\r\n       \"phoneCode\": \"998\"\r\n   },\r\n    \"VU\":{\r\n       \"country\": \"Vanuatu\",\r\n       \"countryCode\": \"VU\",\r\n       \"currencyCode\": \"VUV\",\r\n       \"phoneCode\": \"678\"\r\n   },\r\n    \"VA\":{\r\n       \"country\": \"Vatican\",\r\n       \"countryCode\": \"VA\",\r\n       \"currencyCode\": \"EUR\",\r\n       \"phoneCode\": \"379\"\r\n   },\r\n    \"VE\":{\r\n       \"country\": \"Venezuela\",\r\n       \"countryCode\": \"VE\",\r\n       \"currencyCode\": \"VEF\",\r\n       \"phoneCode\": \"58\"\r\n   },\r\n    \"VN\":{\r\n       \"country\": \"Vietnam\",\r\n       \"countryCode\": \"VN\",\r\n       \"currencyCode\": \"VND\",\r\n       \"phoneCode\": \"84\"\r\n   },\r\n    \"WF\":{\r\n       \"country\": \"Wallis and Futuna\",\r\n       \"countryCode\": \"WF\",\r\n       \"currencyCode\": \"XPF\",\r\n       \"phoneCode\": \"681\"\r\n   },\r\n    \"EH\":{\r\n       \"country\": \"Western Sahara\",\r\n       \"countryCode\": \"EH\",\r\n       \"currencyCode\": \"MAD\",\r\n       \"phoneCode\": \"212\"\r\n   },\r\n    \"YE\":{\r\n       \"country\": \"Yemen\",\r\n       \"countryCode\": \"YE\",\r\n       \"currencyCode\": \"YER\",\r\n       \"phoneCode\": \"967\"\r\n   },\r\n    \"ZM\":{\r\n       \"country\": \"Zambia\",\r\n       \"countryCode\": \"ZM\",\r\n       \"currencyCode\": \"ZMK\",\r\n       \"phoneCode\": \"260\"\r\n   },\r\n   \"ZW\":{\r\n       \"country\": \"Zimbabwe\",\r\n       \"countryCode\": \"ZW\",\r\n       \"currencyCode\": \"ZWL\",\r\n       \"phoneCode\": \"263\"\r\n   }\r\n}"
            },
            {
                "name": "customMinValidator",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/custom-validators.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(data:{min:number, errorObjectName: string}): ValidatorFn  => {\r\n    const {min, errorObjectName} = data;\r\n    return (control: AbstractControl): { [key: string]: {message: string, min:number,actual:number} } | null => {\r\n        // if the value given is empty string then we return null because these fields are optional\r\n        if(control.value >= min){\r\n            return null;\r\n        } else {\r\n            return {\r\n                [errorObjectName]: {\r\n                    min,\r\n                    actual: control.value,\r\n                    message: 'Min amount not provided.'\r\n                }\r\n            }\r\n        }\r\n    }\r\n}"
            },
            {
                "name": "customNumberMustBeMultipliedByValidator",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/custom-validators.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(multipliedBy:number): ValidatorFn  => {\r\n    return (control: AbstractControl): { [key: string]: {message: string, min:number,actual:number} } | null => {\r\n        // if the value given is empty string then we return null because these fields are optional\r\n        if( +control.value % multipliedBy === 0){\r\n            return null;\r\n        } else {\r\n            return {\r\n                ['mustBeMultipliedBy']: {\r\n                    min: multipliedBy,\r\n                    actual: control.value,\r\n                    message: `Number must be multiplies by ${multipliedBy}`\r\n                }\r\n            }\r\n        }\r\n    }\r\n}"
            },
            {
                "name": "detailsToShow",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/sign-up/models/kyc.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "IDetailsToShow",
                "defaultValue": "{\r\n    step_1: {\r\n        detailName: EDetailsToShowNames.DEFAULT,\r\n    },\r\n    step_2: {\r\n        detailName: EDetailsToShowNames.email,\r\n    },\r\n    step_3: {\r\n        detailName: EDetailsToShowNames.emailConfirmation,\r\n    },\r\n    step_4:{\r\n        detailName: EDetailsToShowNames.phone,\r\n    },\r\n    step_5: {\r\n        detailName: EDetailsToShowNames.phoneConfirmation,\r\n    },\r\n    step_6: {\r\n        detailName: EDetailsToShowNames.createdPassword\r\n    },\r\n    step_7: {\r\n        detailName: EDetailsToShowNames.personalDetails\r\n    },\r\n    step_8: {\r\n        detailName: EDetailsToShowNames.personalAddress\r\n    },\r\n}"
            },
            {
                "name": "emailValidators",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/custom-validators.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ValidatorFn[]",
                "defaultValue": "[Validators.required, Validators.email]"
            },
            {
                "name": "enAndNumbersAndSpaceValidators",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/custom-validators.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ValidatorFn",
                "defaultValue": "Validators.pattern(onlyEnglishAndNumbersAndSpaceRgx)"
            },
            {
                "name": "hebrewPattern",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/sign-up/kyc-address/kyc-address.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "/^[\\'\\\"\\`\\.\\s\\u0590-\\u05fe]+$/i"
            },
            {
                "name": "hedgeAllRows",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/risk-dashboard/components/hedging-proposal/hedging-static-data.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\r\n  {\r\n      \"expiryDate\": \"17/11/2025\",\r\n      \"hedgeRate\": 4.4568,\r\n      \"protectAmount\": 8,\r\n      \"recommendedHedgeAmount\": 8,\r\n      \"maxHedge_amount\": 25,\r\n      \"collateral\": 3.475,\r\n      \"totalExposureAmount\": 25,\r\n      \"openEditForSelling\": false,\r\n      \"status\": {\r\n          \"type\": 1,\r\n          \"descriprion\": \"Created\"\r\n      },\r\n      \"maxHedgeAmount\": 25,\r\n      \"recomendedHedgeAmount\": 8,\r\n      \"hedge\": {\r\n          \"strategyId\": 132866,\r\n          \"hedgeRate\": 4.4568,\r\n          \"expiryDate\": \"17/11/2025\",\r\n          \"price\": 0,\r\n          \"collateral\": 3.475,\r\n          \"productName\": \"LOCK & UP\",\r\n          \"productType\": 1,\r\n          \"notionalCurrency\": \"CHF\",\r\n          \"notionalCurrencySign\": \"CHF\",\r\n          \"secondCurrency\": \"ILS\",\r\n          \"secondCurrencySign\": \"₪\",\r\n          \"collateralCurrency\": \"ILS\",\r\n          \"liabilityRate\": 4.4568,\r\n          \"protectAmount\": 8\r\n      },\r\n      \"totalExposure\": 25,\r\n      \"alreadyHedge\": 0,\r\n      \"date\": \"17/11/2025\"\r\n  },\r\n  {\r\n      \"expiryDate\": \"15/08/2025\",\r\n      \"hedgeRate\": 4.4202,\r\n      \"protectAmount\": 14.1,\r\n      \"recommendedHedgeAmount\": 14.1,\r\n      \"maxHedge_amount\": 50,\r\n      \"collateral\": 6.125,\r\n      \"totalExposureAmount\": 50,\r\n      \"openEditForSelling\": false,\r\n      \"status\": {\r\n          \"type\": 1,\r\n          \"descriprion\": \"Created\"\r\n      },\r\n      \"maxHedgeAmount\": 50,\r\n      \"recomendedHedgeAmount\": 14.1,\r\n      \"hedge\": {\r\n          \"strategyId\": 132867,\r\n          \"hedgeRate\": 4.4202,\r\n          \"expiryDate\": \"15/08/2025\",\r\n          \"price\": 0,\r\n          \"collateral\": 6.125,\r\n          \"productName\": \"LOCK & UP\",\r\n          \"productType\": 1,\r\n          \"notionalCurrency\": \"CHF\",\r\n          \"notionalCurrencySign\": \"CHF\",\r\n          \"secondCurrency\": \"ILS\",\r\n          \"secondCurrencySign\": \"₪\",\r\n          \"collateralCurrency\": \"ILS\",\r\n          \"liabilityRate\": 4.4202,\r\n          \"protectAmount\": 14.1\r\n      },\r\n      \"totalExposure\": 50,\r\n      \"alreadyHedge\": 0,\r\n      \"date\": \"15/08/2025\"\r\n  },\r\n  {\r\n      \"expiryDate\": \"15/09/2025\",\r\n      \"hedgeRate\": 4.4324,\r\n      \"protectAmount\": 11.75,\r\n      \"recommendedHedgeAmount\": 11.75,\r\n      \"maxHedge_amount\": 25,\r\n      \"collateral\": 5.104,\r\n      \"totalExposureAmount\": 25,\r\n      \"openEditForSelling\": false,\r\n      \"status\": {\r\n          \"type\": 1,\r\n          \"descriprion\": \"Created\"\r\n      },\r\n      \"maxHedgeAmount\": 25,\r\n      \"recomendedHedgeAmount\": 11.75,\r\n      \"hedge\": {\r\n          \"strategyId\": 132869,\r\n          \"hedgeRate\": 4.4324,\r\n          \"expiryDate\": \"15/09/2025\",\r\n          \"price\": 0,\r\n          \"collateral\": 5.104,\r\n          \"productName\": \"LOCK & UP\",\r\n          \"productType\": 1,\r\n          \"notionalCurrency\": \"CHF\",\r\n          \"notionalCurrencySign\": \"CHF\",\r\n          \"secondCurrency\": \"ILS\",\r\n          \"secondCurrencySign\": \"₪\",\r\n          \"collateralCurrency\": \"ILS\",\r\n          \"liabilityRate\": 4.4324,\r\n          \"protectAmount\": 11.75\r\n      },\r\n      \"totalExposure\": 25,\r\n      \"alreadyHedge\": 0,\r\n      \"date\": \"15/09/2025\"\r\n  },\r\n  {\r\n      \"expiryDate\": \"15/10/2025\",\r\n      \"hedgeRate\": 4.4446,\r\n      \"protectAmount\": 11.75,\r\n      \"recommendedHedgeAmount\": 11.75,\r\n      \"maxHedge_amount\": 25,\r\n      \"collateral\": 5.104,\r\n      \"totalExposureAmount\": 25,\r\n      \"openEditForSelling\": false,\r\n      \"status\": {\r\n          \"type\": 1,\r\n          \"descriprion\": \"Created\"\r\n      },\r\n      \"maxHedgeAmount\": 25,\r\n      \"recomendedHedgeAmount\": 11.75,\r\n      \"hedge\": {\r\n          \"strategyId\": 132854,\r\n          \"hedgeRate\": 4.4446,\r\n          \"expiryDate\": \"15/10/2025\",\r\n          \"price\": 0,\r\n          \"collateral\": 5.104,\r\n          \"productName\": \"LOCK & UP\",\r\n          \"productType\": 1,\r\n          \"notionalCurrency\": \"CHF\",\r\n          \"notionalCurrencySign\": \"CHF\",\r\n          \"secondCurrency\": \"ILS\",\r\n          \"secondCurrencySign\": \"₪\",\r\n          \"collateralCurrency\": \"ILS\",\r\n          \"liabilityRate\": 4.4446,\r\n          \"protectAmount\": 11.75\r\n      },\r\n      \"totalExposure\": 25,\r\n      \"alreadyHedge\": 0,\r\n      \"date\": \"15/10/2025\"\r\n  },\r\n  {\r\n      \"expiryDate\": \"16/02/2026\",\r\n      \"hedgeRate\": 4.4926,\r\n      \"protectAmount\": 4.25,\r\n      \"recommendedHedgeAmount\": 4.25,\r\n      \"maxHedge_amount\": 25,\r\n      \"collateral\": 1.846,\r\n      \"totalExposureAmount\": 25,\r\n      \"openEditForSelling\": false,\r\n      \"status\": {\r\n          \"type\": 1,\r\n          \"descriprion\": \"Created\"\r\n      },\r\n      \"maxHedgeAmount\": 25,\r\n      \"recomendedHedgeAmount\": 4.25,\r\n      \"hedge\": {\r\n          \"strategyId\": 132858,\r\n          \"hedgeRate\": 4.4926,\r\n          \"expiryDate\": \"16/02/2026\",\r\n          \"price\": 0,\r\n          \"collateral\": 1.846,\r\n          \"productName\": \"LOCK & UP\",\r\n          \"productType\": 1,\r\n          \"notionalCurrency\": \"CHF\",\r\n          \"notionalCurrencySign\": \"CHF\",\r\n          \"secondCurrency\": \"ILS\",\r\n          \"secondCurrencySign\": \"₪\",\r\n          \"collateralCurrency\": \"ILS\",\r\n          \"liabilityRate\": 4.4926,\r\n          \"protectAmount\": 4.25\r\n      },\r\n      \"totalExposure\": 25,\r\n      \"alreadyHedge\": 0,\r\n      \"date\": \"16/02/2026\"\r\n  },\r\n  {\r\n      \"expiryDate\": \"15/01/2026\",\r\n      \"hedgeRate\": 4.4813,\r\n      \"protectAmount\": 8,\r\n      \"recommendedHedgeAmount\": 8,\r\n      \"maxHedge_amount\": 25,\r\n      \"collateral\": 3.475,\r\n      \"totalExposureAmount\": 25,\r\n      \"openEditForSelling\": false,\r\n      \"status\": {\r\n          \"type\": 1,\r\n          \"descriprion\": \"Created\"\r\n      },\r\n      \"maxHedgeAmount\": 25,\r\n      \"recomendedHedgeAmount\": 8,\r\n      \"hedge\": {\r\n          \"strategyId\": 132856,\r\n          \"hedgeRate\": 4.4813,\r\n          \"expiryDate\": \"15/01/2026\",\r\n          \"price\": 0,\r\n          \"collateral\": 3.475,\r\n          \"productName\": \"LOCK & UP\",\r\n          \"productType\": 1,\r\n          \"notionalCurrency\": \"CHF\",\r\n          \"notionalCurrencySign\": \"CHF\",\r\n          \"secondCurrency\": \"ILS\",\r\n          \"secondCurrencySign\": \"₪\",\r\n          \"collateralCurrency\": \"ILS\",\r\n          \"liabilityRate\": 4.4813,\r\n          \"protectAmount\": 8\r\n      },\r\n      \"totalExposure\": 25,\r\n      \"alreadyHedge\": 0,\r\n      \"date\": \"15/01/2026\"\r\n  },\r\n  {\r\n      \"expiryDate\": \"16/03/2026\",\r\n      \"hedgeRate\": 4.5039,\r\n      \"protectAmount\": 4.25,\r\n      \"recommendedHedgeAmount\": 4.25,\r\n      \"maxHedge_amount\": 25,\r\n      \"collateral\": 1.846,\r\n      \"totalExposureAmount\": 25,\r\n      \"openEditForSelling\": false,\r\n      \"status\": {\r\n          \"type\": 1,\r\n          \"descriprion\": \"Created\"\r\n      },\r\n      \"maxHedgeAmount\": 25,\r\n      \"recomendedHedgeAmount\": 4.25,\r\n      \"hedge\": {\r\n          \"strategyId\": 132868,\r\n          \"hedgeRate\": 4.5039,\r\n          \"expiryDate\": \"16/03/2026\",\r\n          \"price\": 0,\r\n          \"collateral\": 1.846,\r\n          \"productName\": \"LOCK & UP\",\r\n          \"productType\": 1,\r\n          \"notionalCurrency\": \"CHF\",\r\n          \"notionalCurrencySign\": \"CHF\",\r\n          \"secondCurrency\": \"ILS\",\r\n          \"secondCurrencySign\": \"₪\",\r\n          \"collateralCurrency\": \"ILS\",\r\n          \"liabilityRate\": 4.5039,\r\n          \"protectAmount\": 4.25\r\n      },\r\n      \"totalExposure\": 25,\r\n      \"alreadyHedge\": 0,\r\n      \"date\": \"16/03/2026\"\r\n  },\r\n  {\r\n      \"expiryDate\": \"15/04/2026\",\r\n      \"hedgeRate\": 4.5152,\r\n      \"protectAmount\": 4.25,\r\n      \"recommendedHedgeAmount\": 4.25,\r\n      \"maxHedge_amount\": 25,\r\n      \"collateral\": 1.846,\r\n      \"totalExposureAmount\": 25,\r\n      \"openEditForSelling\": false,\r\n      \"status\": {\r\n          \"type\": 1,\r\n          \"descriprion\": \"Created\"\r\n      },\r\n      \"maxHedgeAmount\": 25,\r\n      \"recomendedHedgeAmount\": 4.25,\r\n      \"hedge\": {\r\n          \"strategyId\": 132862,\r\n          \"hedgeRate\": 4.5152,\r\n          \"expiryDate\": \"15/04/2026\",\r\n          \"price\": 0,\r\n          \"collateral\": 1.846,\r\n          \"productName\": \"LOCK & UP\",\r\n          \"productType\": 1,\r\n          \"notionalCurrency\": \"CHF\",\r\n          \"notionalCurrencySign\": \"CHF\",\r\n          \"secondCurrency\": \"ILS\",\r\n          \"secondCurrencySign\": \"₪\",\r\n          \"collateralCurrency\": \"ILS\",\r\n          \"liabilityRate\": 4.5152,\r\n          \"protectAmount\": 4.25\r\n      },\r\n      \"totalExposure\": 25,\r\n      \"alreadyHedge\": 0,\r\n      \"date\": \"15/04/2026\"\r\n  },\r\n  {\r\n      \"expiryDate\": \"15/05/2026\",\r\n      \"hedgeRate\": 4.5152,\r\n      \"protectAmount\": 4.25,\r\n      \"recommendedHedgeAmount\": 4.25,\r\n      \"maxHedge_amount\": 25,\r\n      \"collateral\": 1.846,\r\n      \"totalExposureAmount\": 25,\r\n      \"openEditForSelling\": false,\r\n      \"status\": {\r\n          \"type\": 1,\r\n          \"descriprion\": \"Created\"\r\n      },\r\n      \"maxHedgeAmount\": 25,\r\n      \"recomendedHedgeAmount\": 4.25,\r\n      \"hedge\": {\r\n          \"strategyId\": 132853,\r\n          \"hedgeRate\": 4.5152,\r\n          \"expiryDate\": \"15/05/2026\",\r\n          \"price\": 0,\r\n          \"collateral\": 1.846,\r\n          \"productName\": \"LOCK & UP\",\r\n          \"productType\": 1,\r\n          \"notionalCurrency\": \"CHF\",\r\n          \"notionalCurrencySign\": \"CHF\",\r\n          \"secondCurrency\": \"ILS\",\r\n          \"secondCurrencySign\": \"₪\",\r\n          \"collateralCurrency\": \"ILS\",\r\n          \"liabilityRate\": 4.5152,\r\n          \"protectAmount\": 4.25\r\n      },\r\n      \"totalExposure\": 25,\r\n      \"alreadyHedge\": 0,\r\n      \"date\": \"15/05/2026\"\r\n  },\r\n  {\r\n      \"expiryDate\": \"15/06/2026\",\r\n      \"hedgeRate\": 4.5152,\r\n      \"protectAmount\": 4.25,\r\n      \"recommendedHedgeAmount\": 4.25,\r\n      \"maxHedge_amount\": 25,\r\n      \"collateral\": 1.846,\r\n      \"totalExposureAmount\": 25,\r\n      \"openEditForSelling\": false,\r\n      \"status\": {\r\n          \"type\": 1,\r\n          \"descriprion\": \"Created\"\r\n      },\r\n      \"maxHedgeAmount\": 25,\r\n      \"recomendedHedgeAmount\": 4.25,\r\n      \"hedge\": {\r\n          \"strategyId\": 132871,\r\n          \"hedgeRate\": 4.5152,\r\n          \"expiryDate\": \"15/06/2026\",\r\n          \"price\": 0,\r\n          \"collateral\": 1.846,\r\n          \"productName\": \"LOCK & UP\",\r\n          \"productType\": 1,\r\n          \"notionalCurrency\": \"CHF\",\r\n          \"notionalCurrencySign\": \"CHF\",\r\n          \"secondCurrency\": \"ILS\",\r\n          \"secondCurrencySign\": \"₪\",\r\n          \"collateralCurrency\": \"ILS\",\r\n          \"liabilityRate\": 4.5152,\r\n          \"protectAmount\": 4.25\r\n      },\r\n      \"totalExposure\": 25,\r\n      \"alreadyHedge\": 0,\r\n      \"date\": \"15/06/2026\"\r\n  },\r\n  {\r\n      \"expiryDate\": \"15/07/2026\",\r\n      \"hedgeRate\": 4.5152,\r\n      \"protectAmount\": 4.25,\r\n      \"recommendedHedgeAmount\": 4.25,\r\n      \"maxHedge_amount\": 25,\r\n      \"collateral\": 1.846,\r\n      \"totalExposureAmount\": 25,\r\n      \"openEditForSelling\": false,\r\n      \"status\": {\r\n          \"type\": 1,\r\n          \"descriprion\": \"Created\"\r\n      },\r\n      \"maxHedgeAmount\": 25,\r\n      \"recomendedHedgeAmount\": 4.25,\r\n      \"hedge\": {\r\n          \"strategyId\": 132855,\r\n          \"hedgeRate\": 4.5152,\r\n          \"expiryDate\": \"15/07/2026\",\r\n          \"price\": 0,\r\n          \"collateral\": 1.846,\r\n          \"productName\": \"LOCK & UP\",\r\n          \"productType\": 1,\r\n          \"notionalCurrency\": \"CHF\",\r\n          \"notionalCurrencySign\": \"CHF\",\r\n          \"secondCurrency\": \"ILS\",\r\n          \"secondCurrencySign\": \"₪\",\r\n          \"collateralCurrency\": \"ILS\",\r\n          \"liabilityRate\": 4.5152,\r\n          \"protectAmount\": 4.25\r\n      },\r\n      \"totalExposure\": 25,\r\n      \"alreadyHedge\": 0,\r\n      \"date\": \"15/07/2026\"\r\n  }\r\n]"
            },
            {
                "name": "hedgeData",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/risk-dashboard/components/hedging-proposal/hedging-static-data.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n  \"totalHedgeAmount\": 100.35,\r\n  \"hedgeCurrency\": {\r\n    \"code\": \"CHF\",\r\n    \"sign\": \"CHF\",\r\n    \"flag\": null,\r\n    \"currencyName\": null\r\n  },\r\n  \"totalHedgePercent\": 33.5625,\r\n  \"avgHedgeRate\": 4.3747526315789473684210526316,\r\n  \"liabilityRate\": 4.3747526315789473684210526316,\r\n  \"requiredCollateral\": 67.637,\r\n  \"price\": 0.0,\r\n  \"collateralAndPriceCur\": {\r\n    \"code\": \"ILS\",\r\n    \"sign\": \"₪\",\r\n    \"flag\": null,\r\n    \"currencyName\": null\r\n  },\r\n  \"direction\": 2,\r\n  \"currencyPair\": \"CHF/ILS\",\r\n  \"hedgingType\": 1,\r\n  \"monthlyHedge\": [\r\n    {\r\n      \"status\": {\r\n        \"type\": 3,\r\n        \"descriprion\": \"Don't need to create hedge for zero reccomended hedge\"\r\n      },\r\n      \"maxHedgeAmount\": 5.00,\r\n      \"recomendedHedgeAmount\": 0.00,\r\n      \"hedge\": null,\r\n      \"totalExposure\": 5.00,\r\n      \"alreadyHedge\": 0.0,\r\n      \"date\": \"15/06/2025\",\r\n      \"hedgeError\": false\r\n    },\r\n    {\r\n      \"status\": {\r\n        \"type\": 1,\r\n        \"descriprion\": \"Created\"\r\n      },\r\n      \"maxHedgeAmount\": 25.00,\r\n      \"recomendedHedgeAmount\": 10.50,\r\n      \"hedge\": {\r\n        \"strategyId\": 132575,\r\n        \"hedgeRate\": 4.3121,\r\n        \"expiryDate\": \"17/11/2025\",\r\n        \"price\": 0.0,\r\n        \"collateral\": 4.408,\r\n        \"productName\": \"LOCK & UP\",\r\n        \"productType\": 1,\r\n        \"notionalCurrency\": \"CHF\",\r\n        \"notionalCurrencySign\": \"CHF\",\r\n        \"secondCurrency\": \"ILS\",\r\n        \"secondCurrencySign\": \"₪\",\r\n        \"collateralCurrency\": \"ILS\",\r\n        \"liabilityRate\": 4.3121,\r\n        \"protectAmount\": 10.50\r\n      },\r\n      \"totalExposure\": 25.00,\r\n      \"alreadyHedge\": 0.0,\r\n      \"date\": \"17/11/2025\",\r\n      \"hedgeError\": true\r\n    },\r\n    {\r\n      \"status\": {\r\n        \"type\": 5,\r\n        \"descriprion\": \"Already purchased the entire protection deal for the month\"\r\n      },\r\n      \"maxHedgeAmount\": 0.0,\r\n      \"recomendedHedgeAmount\": 0.0,\r\n      \"hedge\": null,\r\n      \"totalExposure\": 0.0,\r\n      \"alreadyHedge\": 0.0,\r\n      \"date\": \"15/07/2025\",\r\n      \"hedgeError\": false\r\n    },\r\n    {\r\n      \"status\": {\r\n        \"type\": 1,\r\n        \"descriprion\": \"Created\"\r\n      },\r\n      \"maxHedgeAmount\": 50.00,\r\n      \"recomendedHedgeAmount\": 17.10,\r\n      \"hedge\": {\r\n        \"strategyId\": 132567,\r\n        \"hedgeRate\": 4.2749,\r\n        \"expiryDate\": \"15/08/2025\",\r\n        \"price\": 0.0,\r\n        \"collateral\": 7.179,\r\n        \"productName\": \"LOCK & UP\",\r\n        \"productType\": 1,\r\n        \"notionalCurrency\": \"CHF\",\r\n        \"notionalCurrencySign\": \"CHF\",\r\n        \"secondCurrency\": \"ILS\",\r\n        \"secondCurrencySign\": \"₪\",\r\n        \"collateralCurrency\": \"ILS\",\r\n        \"liabilityRate\": 4.2749,\r\n        \"protectAmount\": 17.10\r\n      },\r\n      \"totalExposure\": 50.00,\r\n      \"alreadyHedge\": 0.0,\r\n      \"date\": \"15/08/2025\",\r\n      \"hedgeError\": false\r\n    },\r\n    {\r\n      \"status\": {\r\n        \"type\": 1,\r\n        \"descriprion\": \"Created\"\r\n      },\r\n      \"maxHedgeAmount\": 25.00,\r\n      \"recomendedHedgeAmount\": 14.25,\r\n      \"hedge\": {\r\n        \"strategyId\": 132573,\r\n        \"hedgeRate\": 4.2872,\r\n        \"expiryDate\": \"15/09/2025\",\r\n        \"price\": 0.0,\r\n        \"collateral\": 5.983,\r\n        \"productName\": \"LOCK & UP\",\r\n        \"productType\": 1,\r\n        \"notionalCurrency\": \"CHF\",\r\n        \"notionalCurrencySign\": \"CHF\",\r\n        \"secondCurrency\": \"ILS\",\r\n        \"secondCurrencySign\": \"₪\",\r\n        \"collateralCurrency\": \"ILS\",\r\n        \"liabilityRate\": 4.2872,\r\n        \"protectAmount\": 14.25\r\n      },\r\n      \"totalExposure\": 25.00,\r\n      \"alreadyHedge\": 0.0,\r\n      \"date\": \"15/09/2025\",\r\n      \"hedgeError\": false\r\n    },\r\n    {\r\n      \"status\": {\r\n        \"type\": 1,\r\n        \"descriprion\": \"Created\"\r\n      },\r\n      \"maxHedgeAmount\": 25.00,\r\n      \"recomendedHedgeAmount\": 14.25,\r\n      \"hedge\": {\r\n        \"strategyId\": 132566,\r\n        \"hedgeRate\": 4.2996,\r\n        \"expiryDate\": \"15/10/2025\",\r\n        \"price\": 0.0,\r\n        \"collateral\": 5.983,\r\n        \"productName\": \"LOCK & UP\",\r\n        \"productType\": 1,\r\n        \"notionalCurrency\": \"CHF\",\r\n        \"notionalCurrencySign\": \"CHF\",\r\n        \"secondCurrency\": \"ILS\",\r\n        \"secondCurrencySign\": \"₪\",\r\n        \"collateralCurrency\": \"ILS\",\r\n        \"liabilityRate\": 4.2996,\r\n        \"protectAmount\": 14.25\r\n      },\r\n      \"totalExposure\": 25.00,\r\n      \"alreadyHedge\": 0.0,\r\n      \"date\": \"15/10/2025\",\r\n      \"hedgeError\": false\r\n    },\r\n    {\r\n      \"status\": {\r\n        \"type\": 1,\r\n        \"descriprion\": \"Created\"\r\n      },\r\n      \"maxHedgeAmount\": 25.00,\r\n      \"recomendedHedgeAmount\": 6.75,\r\n      \"hedge\": {\r\n        \"strategyId\": 132570,\r\n        \"hedgeRate\": 4.3491,\r\n        \"expiryDate\": \"16/02/2026\",\r\n        \"price\": 0.0,\r\n        \"collateral\": 2.834,\r\n        \"productName\": \"LOCK & UP\",\r\n        \"productType\": 1,\r\n        \"notionalCurrency\": \"CHF\",\r\n        \"notionalCurrencySign\": \"CHF\",\r\n        \"secondCurrency\": \"ILS\",\r\n        \"secondCurrencySign\": \"₪\",\r\n        \"collateralCurrency\": \"ILS\",\r\n        \"liabilityRate\": 4.3491,\r\n        \"protectAmount\": 6.75\r\n      },\r\n      \"totalExposure\": 25.00,\r\n      \"alreadyHedge\": 0.0,\r\n      \"date\": \"16/02/2026\",\r\n      \"hedgeError\": false\r\n    },\r\n    {\r\n      \"status\": {\r\n        \"type\": 1,\r\n        \"descriprion\": \"Created\"\r\n      },\r\n      \"maxHedgeAmount\": 25.00,\r\n      \"recomendedHedgeAmount\": 10.50,\r\n      \"hedge\": {\r\n        \"strategyId\": 132577,\r\n        \"hedgeRate\": 4.3373,\r\n        \"expiryDate\": \"15/01/2026\",\r\n        \"price\": 0.0,\r\n        \"collateral\": 4.408,\r\n        \"productName\": \"LOCK & UP\",\r\n        \"productType\": 1,\r\n        \"notionalCurrency\": \"CHF\",\r\n        \"notionalCurrencySign\": \"CHF\",\r\n        \"secondCurrency\": \"ILS\",\r\n        \"secondCurrencySign\": \"₪\",\r\n        \"collateralCurrency\": \"ILS\",\r\n        \"liabilityRate\": 4.3373,\r\n        \"protectAmount\": 10.50\r\n      },\r\n      \"totalExposure\": 25.00,\r\n      \"alreadyHedge\": 0.0,\r\n      \"date\": \"15/01/2026\",\r\n      \"hedgeError\": false\r\n    },\r\n    {\r\n      \"status\": {\r\n        \"type\": 1,\r\n        \"descriprion\": \"Created\"\r\n      },\r\n      \"maxHedgeAmount\": 25.00,\r\n      \"recomendedHedgeAmount\": 6.75,\r\n      \"hedge\": {\r\n        \"strategyId\": 132564,\r\n        \"hedgeRate\": 4.3609,\r\n        \"expiryDate\": \"16/03/2026\",\r\n        \"price\": 0.0,\r\n        \"collateral\": 2.834,\r\n        \"productName\": \"LOCK & UP\",\r\n        \"productType\": 1,\r\n        \"notionalCurrency\": \"CHF\",\r\n        \"notionalCurrencySign\": \"CHF\",\r\n        \"secondCurrency\": \"ILS\",\r\n        \"secondCurrencySign\": \"₪\",\r\n        \"collateralCurrency\": \"ILS\",\r\n        \"liabilityRate\": 4.3609,\r\n        \"protectAmount\": 6.75\r\n      },\r\n      \"totalExposure\": 25.00,\r\n      \"alreadyHedge\": 0.0,\r\n      \"date\": \"16/03/2026\",\r\n      \"hedgeError\": false\r\n    },\r\n    {\r\n      \"status\": {\r\n        \"type\": 1,\r\n        \"descriprion\": \"Created\"\r\n      },\r\n      \"maxHedgeAmount\": 25.00,\r\n      \"recomendedHedgeAmount\": 6.75,\r\n      \"hedge\": {\r\n        \"strategyId\": 132569,\r\n        \"hedgeRate\": 4.3728,\r\n        \"expiryDate\": \"15/04/2026\",\r\n        \"price\": 0.0,\r\n        \"collateral\": 2.834,\r\n        \"productName\": \"LOCK & UP\",\r\n        \"productType\": 1,\r\n        \"notionalCurrency\": \"CHF\",\r\n        \"notionalCurrencySign\": \"CHF\",\r\n        \"secondCurrency\": \"ILS\",\r\n        \"secondCurrencySign\": \"₪\",\r\n        \"collateralCurrency\": \"ILS\",\r\n        \"liabilityRate\": 4.3728,\r\n        \"protectAmount\": 6.75\r\n      },\r\n      \"totalExposure\": 25.00,\r\n      \"alreadyHedge\": 0.0,\r\n      \"date\": \"15/04/2026\",\r\n      \"hedgeError\": false\r\n    },\r\n    {\r\n      \"status\": {\r\n        \"type\": 1,\r\n        \"descriprion\": \"Created\"\r\n      },\r\n      \"maxHedgeAmount\": 25.00,\r\n      \"recomendedHedgeAmount\": 6.75,\r\n      \"hedge\": {\r\n        \"strategyId\": 132565,\r\n        \"hedgeRate\": 4.3728,\r\n        \"expiryDate\": \"15/05/2026\",\r\n        \"price\": 0.0,\r\n        \"collateral\": 2.834,\r\n        \"productName\": \"LOCK & UP\",\r\n        \"productType\": 1,\r\n        \"notionalCurrency\": \"CHF\",\r\n        \"notionalCurrencySign\": \"CHF\",\r\n        \"secondCurrency\": \"ILS\",\r\n        \"secondCurrencySign\": \"₪\",\r\n        \"collateralCurrency\": \"ILS\",\r\n        \"liabilityRate\": 4.3728,\r\n        \"protectAmount\": 6.75\r\n      },\r\n      \"totalExposure\": 25.00,\r\n      \"alreadyHedge\": 0.0,\r\n      \"date\": \"15/05/2026\",\r\n      \"hedgeError\": false\r\n    },\r\n    {\r\n      \"status\": {\r\n        \"type\": 1,\r\n        \"descriprion\": \"Created\"\r\n      },\r\n      \"maxHedgeAmount\": 25.00,\r\n      \"recomendedHedgeAmount\": 6.75,\r\n      \"hedge\": {\r\n        \"strategyId\": 132571,\r\n        \"hedgeRate\": 4.3728,\r\n        \"expiryDate\": \"15/06/2026\",\r\n        \"price\": 0.0,\r\n        \"collateral\": 2.834,\r\n        \"productName\": \"LOCK & UP\",\r\n        \"productType\": 1,\r\n        \"notionalCurrency\": \"CHF\",\r\n        \"notionalCurrencySign\": \"CHF\",\r\n        \"secondCurrency\": \"ILS\",\r\n        \"secondCurrencySign\": \"₪\",\r\n        \"collateralCurrency\": \"ILS\",\r\n        \"liabilityRate\": 4.3728,\r\n        \"protectAmount\": 6.75\r\n      },\r\n      \"totalExposure\": 25.00,\r\n      \"alreadyHedge\": 0.0,\r\n      \"date\": \"15/06/2026\",\r\n      \"hedgeError\": false\r\n    },\r\n  ]\r\n}"
            },
            {
                "name": "HedgingTypeDisplayNames",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/risk-dashboard/components/enums/hedgingData.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "{\r\n    [HedgingType.Forward]: \"Forward\",\r\n    [HedgingType.Vanilla]: \"Vanilla\",\r\n    [HedgingType.Range]: \"Range\",\r\n}"
            },
            {
                "name": "inWalletValidator",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/custom-validators.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(inWallet:number, currency:string, translateService:TranslateService, numberPipe:any, currencySymbolPipe:any): ValidatorFn  => {\r\n    return (control: AbstractControl): { [key: string]: {message: string} } | null => {\r\n        if (+Math.floor(control.value) > Math.floor(inWallet)) {\r\n            return {\r\n                not_enough_in_wallet: {\r\n                    message: `${translateService.instant('FORMS_ERRORS.max_amount_should_be')} ${numberPipe.transform(inWallet ?? 0, '1.0-2')}${currencySymbolPipe.transform(currency)}`,\r\n                }\r\n            };\r\n        }\r\n\r\n        return null;\r\n    };\r\n}",
                "rawdescription": "checks if the input value is greater than the amount in users wallet\r\nif true we set a custom error {not_enough_in_wallet} in the formcontrol",
                "description": "<p>checks if the input value is greater than the amount in users wallet\nif true we set a custom error {not_enough_in_wallet} in the formcontrol</p>\n"
            },
            {
                "name": "MATERIAL_DATEPICKER_FORMATS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/risk-dashboard/components/cashflow-exposure/components/cashflow-exposure-details/cashflow-exposure-details.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n  parse: {\r\n    dateInput: 'DD/MMM/YYYY',\r\n  },\r\n  display: {\r\n    dateInput: 'DD/MMM/YYYY',\r\n    monthYearLabel: 'MMMM YYYY',\r\n    dateA11yLabel: 'DD/MMM/YYYY',\r\n    monthYearA11yLabel: 'MMMM YYYY',\r\n  },\r\n}"
            },
            {
                "name": "monthlyExposureObject",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/risk-dashboard/components/cashflow-exposure/components/cashflow-exposure-data.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n  \"pair\": \"USD/ILS\",\r\n  \"sign\": \"$\",\r\n  \"toCurrency\": \"USD\",\r\n  \"selectedExposure\": \"Selling\",\r\n  \"monthlyAmount\": 100000,\r\n  \"monthlyPeriod\": 12,\r\n  \"flag\": \"https://okoora-stage-api2023.azurewebsites.net/Images/Flags/USD.png\",\r\n  \"code\": \"USD\",\r\n  \"baseCurrencyFlag\": \"https://okoora-stage-api2023.azurewebsites.net/Images/Flags/ILS.png\",\r\n  \"baseCurrency\": \"ILS\",\r\n  \"baseCurrencySign\": \"₪\"\r\n}"
            },
            {
                "name": "onlyEnglishAndNumbersAndSpaceRgx",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/custom-validators.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "/^[a-zA-Z0-9,.\\s-\\/']+$/",
                "rawdescription": "Regular expressions",
                "description": "<p>Regular expressions</p>\n"
            },
            {
                "name": "onlyEnglishAndNumbersAndSpaceValidator",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/custom-validators.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(): any  => {\r\n    return (control: AbstractControl):any => {\r\n        // if the value given is empty string then we return null because these fields are optional\r\n        if(control.value===\"\"){\r\n            return null;\r\n        }\r\n        if (!onlyEnglishAndNumbersAndSpaceRgx.test(control.value)) {\r\n            return {\r\n                not_english_and_numbers_and_space: {\r\n                    message: \"Only English letters and numbers are allowed.\",\r\n                }\r\n            };\r\n        }\r\n    }\r\n}"
            },
            {
                "name": "onlyEnglishAndSpaceRgx",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/custom-validators.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "/^[a-zA-Z\\s]+$/"
            },
            {
                "name": "onlyEnglishAndSpaceValidator",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/custom-validators.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(): ValidatorFn  => {\r\n    return (control: AbstractControl): any => {\r\n        // if the value given is empty string then we return null because these fields are optional\r\n        if(control.value===\"\"){\r\n            return null;\r\n        }\r\n        if (!onlyEnglishAndSpaceRgx.test(control.value)) {\r\n            return {\r\n                not_english_and_numbers_and_space: {\r\n                    message: \"Only English letters are allowed.\",\r\n                }\r\n            };\r\n        }\r\n    }\r\n}"
            },
            {
                "name": "onlyEnglishCharactersRgx",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/custom-validators.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "/^[A-Za-z]+$/"
            },
            {
                "name": "onlyEnglishCharactersValidator",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/custom-validators.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(): any => {\r\n    return (control: AbstractControl): any => {\r\n      if (control.value === \"\") {\r\n        return null;\r\n      }\r\n      if (!onlyEnglishCharactersRgx.test(control.value)) {\r\n        return {\r\n            only_english_characters: {\r\n            message: \"Only English letters are allowed.\",\r\n          },\r\n        };\r\n      }\r\n      return null;\r\n    };\r\n}"
            },
            {
                "name": "onlyNumbersValidators",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/custom-validators.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ValidatorFn",
                "defaultValue": "Validators.pattern(/^[0-9]*$/)"
            },
            {
                "name": "onlyValidIdNumber",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/custom-validators.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(): ValidatorFn => {\r\n    return (control: AbstractControl):any => {\r\n\r\n        if (!environment.production && !SubjectService.idValidation) {\r\n            return null;\r\n        }\r\n\r\n        const id = control.value;\r\n        // if the value given is empty string then we return null because these fields are optional\r\n        if (id === \"\") {\r\n            return null;\r\n        }\r\n        if (String(id).trim().length != 9 || !validateID(id)) {\r\n            return {\r\n                not_valid_id_number: {\r\n                    message: \"Valid ID Number Only\"\r\n                }\r\n            };\r\n        }\r\n    }\r\n}",
                "rawdescription": "validate that the entered ID number which the user has entered is a valid one",
                "description": "<p>validate that the entered ID number which the user has entered is a valid one</p>\n"
            },
            {
                "name": "PASSWORD_REGEX",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/custom-validators.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "/^(?=.*?[A-Z])(?=.*?[a-z])[!@#$%^()_[\\]\\{}|;':\",.\\/<>?a-zA-Z0-9-]+$/"
            },
            {
                "name": "PASSWORD_REGEX",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/sign-up/models/custom-validators.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "/^(?=.*?[A-Z])(?=.*?[a-z])[!@#$%^&*()\\[\\]{}\\\\\\-_+={}|\\\\:;'\",<>,.?/~`a-zA-Z0-9-]+$/"
            },
            {
                "name": "passwordRgxPatternValidator",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/custom-validators.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(): ValidatorFn  => {\r\n    return (control: AbstractControl): { [key: string]: {message: string} } | null => {\r\n        // if the value given is empty string then we return null because these fields are optional\r\n        if(control.value===\"\"){\r\n            return null;\r\n        }\r\n        if (!PASSWORD_REGEX.test(control.value)) {\r\n            return {\r\n                passwordSpecialCharaters: {\r\n                    message: \"One of the characters entered is invalid.\",\r\n                }\r\n            };\r\n        }\r\n        return null;\r\n    }\r\n}",
                "rawdescription": "Custom Validators",
                "description": "<p>Custom Validators</p>\n"
            },
            {
                "name": "passwordRgxPatternValidator",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/sign-up/models/custom-validators.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(): ValidatorFn  => {\r\n    return (control: AbstractControl): { [key: string]: {message: string} } | null => {\r\n        // if the value given is empty string then we return null because these fields are optional\r\n        if(control.value===\"\"){\r\n            return null;\r\n        }\r\n        if (!PASSWORD_REGEX.test(control.value)) {\r\n            return {\r\n                passwordSpecialCharaters: {\r\n                    message: \"One of the characters entered is invalid.\",\r\n                }\r\n            };\r\n        }\r\n        return null;\r\n    }\r\n}"
            },
            {
                "name": "phoneValidators",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/custom-validators.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ValidatorFn[]",
                "defaultValue": "[Validators.required, Validators.pattern(/^[0-9]{10,15}$/)]"
            },
            {
                "name": "pwdConfirming",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/custom-validators.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(data:{key: string, confirmationKey: string}): any  => {\r\n    const {key, confirmationKey} = data;\r\n\r\n    return (group: FormGroup): any => {\r\n        const input = group.controls[key];\r\n        const confirmationInput = group.controls[confirmationKey];\r\n        return input.value !== confirmationInput.value ? {passwordNotEquivalent: true} : null\r\n    };\r\n}"
            },
            {
                "name": "pwdConfirming",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/sign-up/kyc-create-password/kyc-create-password.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(data: { key: string, confirmationKey: string }): ValidatorFn => {\r\n    const { key, confirmationKey } = data;\r\n\r\n    return (group: any) => {\r\n        const input = group.controls[key];\r\n        const confirmationInput = group.controls[confirmationKey];\r\n        return input.value !== confirmationInput.value ? { passwordNotEquivalent: true } : null\r\n    };\r\n}"
            },
            {
                "name": "residentRegex",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/custom-validators.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "/^[A-Za-z\\u0590-\\u05FF0-9]{1,100}$/"
            },
            {
                "name": "SupportedCountries",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/sign-up/models/country.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "['israel']"
            },
            {
                "name": "VALID_LINK_REGEX",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/custom-validators.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "/(www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b([-a-zA-Z0-9()@:%_\\+.~#?&//=]*)/"
            },
            {
                "name": "validateID",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/custom-validators.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(id:any) => {\r\n   id = String(id).trim();\r\n   if (id.length > 9 || isNaN(id)) return false;\r\n   id = id.length < 9 ? (\"00000000\" + id).slice(-9) : id;\r\n   return Array.from(id, Number).reduce((counter, digit, i) => {\r\n     const step = digit * ((i % 2) + 1);\r\n     return counter + (step > 9 ? step - 9 : step);\r\n   }) % 10 === 0;\r\n }",
                "rawdescription": "checks whether a given value is a valid id number or not",
                "description": "<p>checks whether a given value is a valid id number or not</p>\n"
            },
            {
                "name": "validateID",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/sign-up/models/custom-validators.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(id:any) => {\r\n    id = String(id).trim();\r\n    if (id.length > 9 || isNaN(id)) return false;\r\n    id = id.length < 9 ? (\"00000000\" + id).slice(-9) : id;\r\n    return Array.from(id, Number).reduce((counter, digit, i) => {\r\n      const step = digit * ((i % 2) + 1);\r\n      return counter + (step > 9 ? step - 9 : step);\r\n    }) % 10 === 0;\r\n  }"
            },
            {
                "name": "valueMustBeEqualOrNotValidator",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/custom-validators.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(data:{valueToCheck:unknown, action:'EQUAL_TO'|'NOT_EQUAL_TO', errorObjectName?: string}): ValidatorFn  => {\r\n    const {valueToCheck, action} = data;\r\n    return (control: AbstractControl): { [key: string]: {message: string, actual:number} } | null => {\r\n        // if the value given is empty string then we return null because these fields are optional\r\n        const toReturnOnInvalid = {\r\n            [data?.errorObjectName ?? 'valueMustBeEqualTo']: {\r\n                actual: control.value,\r\n                message: `value must be ${action}: ${valueToCheck}`\r\n            }\r\n        };\r\n\r\n        switch (action) {\r\n            case \"EQUAL_TO\":\r\n                if ((valueToCheck)) {\r\n                    if (control.value === valueToCheck) {\r\n                        return null;\r\n                    }\r\n                } else if ((valueToCheck)) {\r\n                    if ((valueToCheck as any).includes(control.value)) {\r\n                        return null;\r\n                    }\r\n                }\r\n                break;\r\n            case \"NOT_EQUAL_TO\":\r\n                if ((valueToCheck)) {\r\n                    if (control.value !== valueToCheck) {\r\n                        return null;\r\n                    }\r\n                } else if ((valueToCheck)) {\r\n                    if (!(valueToCheck as any).includes(control.value)) {\r\n                        return null;\r\n                    }\r\n                }\r\n                break;\r\n            default:\r\n                const exhaust:never = action;\r\n        }\r\n\r\n        return toReturnOnInvalid;\r\n    }\r\n}"
            },
            {
                "name": "walletData",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/risk-dashboard/components/cashflow-exposure/components/cashflow-exposure-data.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\r\n    {\r\n        \"code\": \"GBP\",\r\n        \"defaultCurrency\": false,\r\n        \"sign\": \"£\",\r\n        \"flag\": \"https://okoora-stage-api2023.azurewebsites.net/Images/Flags/GBP.png\",\r\n        \"currencyName\": \"British Pound Sterling\"\r\n    },\r\n    {\r\n        \"code\": \"JPY\",\r\n        \"defaultCurrency\": false,\r\n        \"sign\": \"￥\",\r\n        \"flag\": \"https://okoora-stage-api2023.azurewebsites.net/Images/Flags/JPY.png\",\r\n        \"currencyName\": \"Japanese Yen\"\r\n    },\r\n    {\r\n        \"code\": \"USD\",\r\n        \"defaultCurrency\": false,\r\n        \"sign\": \"$\",\r\n        \"flag\": \"https://okoora-stage-api2023.azurewebsites.net/Images/Flags/USD.png\",\r\n        \"currencyName\": \"United States Dollar\"\r\n    },\r\n    {\r\n        \"code\": \"PLN\",\r\n        \"defaultCurrency\": false,\r\n        \"sign\": \"zł\",\r\n        \"flag\": \"https://okoora-stage-api2023.azurewebsites.net/Images/Flags/PLN.png\",\r\n        \"currencyName\": \"Polish Zloty\"\r\n    },\r\n    {\r\n        \"code\": \"ILS\",\r\n        \"defaultCurrency\": true,\r\n        \"sign\": \"₪\",\r\n        \"flag\": \"https://okoora-stage-api2023.azurewebsites.net/Images/Flags/ILS.png\",\r\n        \"currencyName\": \"Israeli Shekel\"\r\n    }\r\n]"
            },
            {
                "name": "websitesValidators",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/custom-validators.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ValidatorFn[]",
                "defaultValue": "[Validators.minLength(2), Validators.maxLength(100), Validators.pattern(VALID_LINK_REGEX)]"
            }
        ],
        "functions": [
            {
                "name": "strictEmailValidator",
                "file": "src/app/shared/custom-validators.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [],
                "returnType": "ValidatorFn"
            }
        ],
        "typealiases": [
            {
                "name": "ChartOptions",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/risk-dashboard/components/dashboard/components/momentum-indicator-chart/momentum-indicator-chart.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 187
            },
            {
                "name": "CountryDataType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/sign-up/models/country.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 187
            },
            {
                "name": "EmailVerificationPerCustomerResponse",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/sign-up/kyc.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 187
            },
            {
                "name": "EmailVerificationPerCustomerResponse",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/sign-up/models/kyc.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 187
            },
            {
                "name": "IPerformVerification",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "ICheckEmailVerification | ISendEmailVerification | ICheckPhoneVerification | ISendPhoneVerification",
                "file": "src/app/sign-up/kyc.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "IPerformVerification",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "ICheckEmailVerification | ISendEmailVerification | ICheckPhoneVerification | ISendPhoneVerification",
                "file": "src/app/sign-up/models/kyc.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "LanguageType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "src/app/sign-up/types/global.type.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 199
            },
            {
                "name": "StepActionType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "src/app/sign-up/types/global.type.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 199
            },
            {
                "name": "TBusinessTypes",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "EBusinessType.companyAccount | EBusinessType.privateAccount",
                "file": "src/app/sign-up/kyc.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "TBusinessTypes",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "EBusinessType.companyAccount | EBusinessType.privateAccount",
                "file": "src/app/sign-up/models/kyc.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "TSendMailResponse",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/sign-up/kyc.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 187
            },
            {
                "name": "TSendMailResponse",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/sign-up/models/kyc.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 187
            },
            {
                "name": "TSiteSource",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "SiteSource.Ofakim | SiteSource.Okoora",
                "file": "src/app/sign-up/kyc.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "TSiteSource",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "SiteSource.Ofakim | SiteSource.Okoora",
                "file": "src/app/sign-up/models/kyc.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "TVerificationCodeStatus",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"DEFAULT\" | \"INCORRECT\" | \"VALID\" | \"PASSED_LIMIT\"",
                "file": "src/app/sign-up/kyc.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "TVerificationCodeStatus",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"DEFAULT\" | \"INCORRECT\" | \"VALID\" | \"PASSED_LIMIT\"",
                "file": "src/app/sign-up/models/kyc.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "ValidationErrors",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/shared/custom-validators.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 187
            },
            {
                "name": "VerificationReturnTypeOptions",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "VerificationReturnType.Success | VerificationReturnType.GeneralError | VerificationReturnType.PassedLimitError",
                "file": "src/app/sign-up/kyc.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "VerificationReturnTypeOptions",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "VerificationReturnType.Success | VerificationReturnType.GeneralError | VerificationReturnType.PassedLimitError",
                "file": "src/app/sign-up/models/kyc.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            }
        ],
        "enumerations": [
            {
                "name": "AdvancePolicyQuestions",
                "childs": [
                    {
                        "name": "CertaintyExposureLevel",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": 1
                    },
                    {
                        "name": "AbilityImpactCustomer",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": 2
                    },
                    {
                        "name": "DifferentiationFromCompetitors",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": 3
                    },
                    {
                        "name": "CompetitivenessLevel",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": 4
                    },
                    {
                        "name": "CreditSensitivity",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": 9
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/risk-dashboard/components/enums/advancePolicyQuestions.ts"
            },
            {
                "name": "BuySell",
                "childs": [
                    {
                        "name": "Buy",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": 1
                    },
                    {
                        "name": "Sell",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": 2
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/risk-dashboard/components/cashflow-exposure/components/cashflow-exposure-step2/cashflow-exposure-step2.component.ts"
            },
            {
                "name": "EBusinessType",
                "childs": [
                    {
                        "name": "companyAccount",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "companyAcc"
                    },
                    {
                        "name": "privateAccount",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "privateAcc"
                    },
                    {
                        "name": "invitedAccount",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "invitedAcc"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/sign-up/kyc.ts"
            },
            {
                "name": "EBusinessType",
                "childs": [
                    {
                        "name": "companyAccount",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "companyAcc"
                    },
                    {
                        "name": "privateAccount",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "privateAcc"
                    },
                    {
                        "name": "invitedAccount",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "invitedAcc"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/sign-up/models/kyc.ts"
            },
            {
                "name": "EDetailsToShowNames",
                "childs": [
                    {
                        "name": "DEFAULT",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "DEFAULT"
                    },
                    {
                        "name": "companyAcc",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "companyAcc"
                    },
                    {
                        "name": "privateAcc",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "privateAcc"
                    },
                    {
                        "name": "invitedAcc",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "invitedAcc"
                    },
                    {
                        "name": "email",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "email"
                    },
                    {
                        "name": "emailConfirmation",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "emailConfirmation"
                    },
                    {
                        "name": "phone",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "phone"
                    },
                    {
                        "name": "phoneConfirmation",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "phoneConfirmation"
                    },
                    {
                        "name": "createdPassword",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "createdPassword"
                    },
                    {
                        "name": "personalDetails",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "personalDetails"
                    },
                    {
                        "name": "personalAddress",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "personalAddress"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/sign-up/kyc.ts"
            },
            {
                "name": "EDetailsToShowNames",
                "childs": [
                    {
                        "name": "DEFAULT",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "DEFAULT"
                    },
                    {
                        "name": "companyAcc",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "companyAcc"
                    },
                    {
                        "name": "privateAcc",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "privateAcc"
                    },
                    {
                        "name": "invitedAcc",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "invitedAcc"
                    },
                    {
                        "name": "email",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "email"
                    },
                    {
                        "name": "emailConfirmation",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "emailConfirmation"
                    },
                    {
                        "name": "phone",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "phone"
                    },
                    {
                        "name": "phoneConfirmation",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "phoneConfirmation"
                    },
                    {
                        "name": "createdPassword",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "createdPassword"
                    },
                    {
                        "name": "personalDetails",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "personalDetails"
                    },
                    {
                        "name": "personalAddress",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "personalAddress"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/sign-up/models/kyc.ts"
            },
            {
                "name": "EErrorMessages",
                "childs": [
                    {
                        "name": "SomethingWentWrong",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Something went wrong."
                    },
                    {
                        "name": "FillAllFields",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Please fill all fields in order to continue"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/sign-up/kyc.ts"
            },
            {
                "name": "EErrorMessages",
                "childs": [
                    {
                        "name": "SomethingWentWrong",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Something went wrong."
                    },
                    {
                        "name": "FillAllFields",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Please fill all fields in order to continue"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/sign-up/models/kyc.ts"
            },
            {
                "name": "EKycStatus",
                "childs": [
                    {
                        "name": "basicKYC",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": 1
                    },
                    {
                        "name": "partialKYC",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": 2
                    },
                    {
                        "name": "fullKYC",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": 3
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/sign-up/kyc.ts"
            },
            {
                "name": "EKycStatus",
                "childs": [
                    {
                        "name": "basicKYC",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": 1
                    },
                    {
                        "name": "partialKYC",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": 2
                    },
                    {
                        "name": "fullKYC",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": 3
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/sign-up/models/kyc.ts"
            },
            {
                "name": "EStepNumber",
                "childs": [
                    {
                        "name": "typeOfBusiness",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": 1
                    },
                    {
                        "name": "email",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": 2
                    },
                    {
                        "name": "emailConfirmation",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": 3
                    },
                    {
                        "name": "phone",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": 4
                    },
                    {
                        "name": "phoneConfirmation",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": 5
                    },
                    {
                        "name": "createPassword",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": 6
                    },
                    {
                        "name": "personalDetails",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": 7
                    },
                    {
                        "name": "personalAddress",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": 8
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/sign-up/kyc.ts"
            },
            {
                "name": "EStepNumber",
                "childs": [
                    {
                        "name": "typeOfBusiness",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": 1
                    },
                    {
                        "name": "email",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": 2
                    },
                    {
                        "name": "emailConfirmation",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": 3
                    },
                    {
                        "name": "phone",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": 4
                    },
                    {
                        "name": "phoneConfirmation",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": 5
                    },
                    {
                        "name": "createPassword",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": 6
                    },
                    {
                        "name": "personalDetails",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": 7
                    },
                    {
                        "name": "personalAddress",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": 8
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/sign-up/models/kyc.ts"
            },
            {
                "name": "HedgingType",
                "childs": [
                    {
                        "name": "Forward",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": 1
                    },
                    {
                        "name": "Vanilla",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": 2
                    },
                    {
                        "name": "Range",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": 3
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/risk-dashboard/components/enums/hedgingData.ts"
            },
            {
                "name": "SiteSource",
                "childs": [
                    {
                        "name": "Ofakim",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": 1
                    },
                    {
                        "name": "Okoora",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": 2
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/sign-up/kyc.ts"
            },
            {
                "name": "SiteSource",
                "childs": [
                    {
                        "name": "Ofakim",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": 1
                    },
                    {
                        "name": "Okoora",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": 2
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/sign-up/models/kyc.ts"
            },
            {
                "name": "VerificationReturnType",
                "childs": [
                    {
                        "name": "Success",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": 1
                    },
                    {
                        "name": "GeneralError",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": 2
                    },
                    {
                        "name": "PassedLimitError",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": 3
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/sign-up/kyc.ts"
            },
            {
                "name": "VerificationReturnType",
                "childs": [
                    {
                        "name": "Success",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": 1
                    },
                    {
                        "name": "GeneralError",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": 2
                    },
                    {
                        "name": "PassedLimitError",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": 3
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/sign-up/models/kyc.ts"
            }
        ],
        "groupedVariables": {
            "src/app/risk-dashboard/advance-policy-json/advance-policy-data.ts": [
                {
                    "name": "AdvancePolicyData",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/risk-dashboard/advance-policy-json/advance-policy-data.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[{\r\n  \"firstheading\": \"Level of Exposure Certainty\",\r\n  \"questions\": \"How certain are you that your projected cash flow will be realized?\",\r\n  \"className\": \"policy-question-one\",\r\n  \"selectAnswer\": \"Select an answer\",\r\n  \"bottomDesc\": \"For example, if you have signed contracts guaranteeing revenue or expenditure for the next few months, this indicates high certainty.\",\r\n  \"Ans\": [\r\n    {\r\n      // \"a1\": \"Don't Know\",\r\n      \"a2\": \"Low\",\r\n      \"a3\": \"Medium\",\r\n      \"a4\": \"High\",\r\n      \"a5\": \"Very High\"\r\n    }\r\n  ]\r\n},\r\n{\r\n  \"firstheading\": \"Ability to Impact Customer or Supplier Price\",\r\n  \"questions\": \"To what extent can you influence customer pricing or supplier costs?\",\r\n  \"className\": \"policy-question-two\",\r\n  \"selectAnswer\": \"Select an answer\",\r\n  \"bottomDesc\": \"If exchange rates change, can you raise your prices or renegotiate costs with suppliers?\",\r\n  \"Ans\": [\r\n    {\r\n      // \"a1\": \"Don't Know\",\r\n      \"a2\": \"High\",\r\n      \"a3\": \"Medium\",\r\n      \"a4\": \"Low\",\r\n      \"a5\": \"No Impact\"\r\n    }\r\n  ]\r\n},\r\n{\r\n  \"firstheading\": \"Business Differentiation from Competitors in the Industry\",\r\n  \"questions\": \"How similar is your exposure to exchange rates compared to that of your main competitors?\",\r\n  \"className\": \"policy-question-three\",\r\n  \"selectAnswer\": \"Select an answer\",\r\n  \"bottomDesc\": \"Consider if your main competitors are also affected by exchange rate fluctuations. Are you able to handle these fluctuations better or differently?\",\r\n  \"Ans\": [\r\n    {\r\n      \"a1\": \"Don't Know\",\r\n      \"a2\": \"High\",\r\n      \"a3\": \"Medium\",\r\n      \"a4\": \"Low\",\r\n      \"a5\": \"Very Low\"\r\n    }\r\n  ]\r\n},\r\n{\r\n  \"firstheading\": \"Level of Business Competitiveness\",\r\n  \"questions\": \"How competitive is the industry your company operates in?\",\r\n  \"className\": \"policy-question-four\",\r\n  \"selectAnswer\": \"Select an answer\",\r\n  \"bottomDesc\": \"How competitive is the market you operate in? how difficult is it for you to adjust prices in response to currency value changes?\",\r\n  \"Ans\": [\r\n    {\r\n      \"a1\": \"Don't Know\",\r\n      \"a2\": \"Low\",\r\n      \"a3\": \"Medium\",\r\n      \"a4\": \"High\",\r\n      \"a5\": \"Very High\"\r\n    }\r\n  ]\r\n},\r\n{\r\n  \"firstheading\": \"Sensitivity to Credit Consumption\",\r\n  \"questions\": \"What is the company's ability to consume additional credit lines for possible collateral requirements?\",\r\n  \"className\": \"policy-question-five\",\r\n  \"selectAnswer\": \"Select an answer\",\r\n  \"bottomDesc\": \"If required, can your company easily access additional credit to manage potential currency risks?\",\r\n  \"Ans\": [\r\n    {\r\n      \"a1\": \"Don't Know\",\r\n      \"a2\": \"Very High\",\r\n      \"a3\": \"High\",\r\n      \"a4\": \"Medium\",\r\n      \"a5\": \"Low\"\r\n    }\r\n  ]\r\n},\r\n]"
                }
            ],
            "src/app/risk-dashboard/components/advanced-policy/components/advance-policy-data.ts": [
                {
                    "name": "AdvancePolicyData",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/risk-dashboard/components/advanced-policy/components/advance-policy-data.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[{\r\n  \"firstheading\": \"Level of Exposure Certainty\",\r\n  \"questions\": \"How certain are you that your projected cash flow will be realized?\",\r\n  \"className\": \"policy-question-one\",\r\n  \"selectAnswer\": \"Select an answer\",\r\n  \"bottomDesc\": \"For example, if you have signed contracts guaranteeing revenue or expenditure for the next few months, this indicates high certainty.\",\r\n  \"Ans\": [\r\n    {\r\n      // \"a1\": \"Don't Know\",\r\n      \"a2\": \"Low\",\r\n      \"a3\": \"Medium\",\r\n      \"a4\": \"High\",\r\n      \"a5\": \"Very High\"\r\n    }\r\n  ]\r\n},\r\n{\r\n  \"firstheading\": \"Ability to Impact Customer or Supplier Price\",\r\n  \"questions\": \"To what extent can you influence customer pricing or supplier costs?\",\r\n  \"className\": \"policy-question-two\",\r\n  \"selectAnswer\": \"Select an answer\",\r\n  \"bottomDesc\": \"If exchange rates change, can you raise your prices or renegotiate costs with suppliers?\",\r\n  \"Ans\": [\r\n    {\r\n      // \"a1\": \"Don't Know\",\r\n      \"a2\": \"High\",\r\n      \"a3\": \"Medium\",\r\n      \"a4\": \"Low\",\r\n      \"a5\": \"No Impact\"\r\n    }\r\n  ]\r\n},\r\n{\r\n  \"firstheading\": \"Business Differentiation from Competitors in the Industry\",\r\n  \"questions\": \"How similar is your exposure to exchange rates compared to that of your main competitors?\",\r\n  \"className\": \"policy-question-three\",\r\n  \"selectAnswer\": \"Select an answer\",\r\n  \"bottomDesc\": \"Consider if your main competitors are also affected by exchange rate fluctuations. Are you able to handle these fluctuations better or differently?\",\r\n  \"Ans\": [\r\n    {\r\n      \"a1\": \"Don't Know\",\r\n      \"a2\": \"High\",\r\n      \"a3\": \"Medium\",\r\n      \"a4\": \"Low\",\r\n      \"a5\": \"Very Low\"\r\n    }\r\n  ]\r\n},\r\n{\r\n  \"firstheading\": \"Level of Business Competitiveness\",\r\n  \"questions\": \"How competitive is the industry your company operates in?\",\r\n  \"className\": \"policy-question-four\",\r\n  \"selectAnswer\": \"Select an answer\",\r\n  \"bottomDesc\": \"How competitive is the market you operate in? how difficult is it for you to adjust prices in response to currency value changes?\",\r\n  \"Ans\": [\r\n    {\r\n      \"a1\": \"Don't Know\",\r\n      \"a2\": \"Low\",\r\n      \"a3\": \"Medium\",\r\n      \"a4\": \"High\",\r\n      \"a5\": \"Very High\"\r\n    }\r\n  ]\r\n},\r\n{\r\n  \"firstheading\": \"Sensitivity to Credit Consumption\",\r\n  \"questions\": \"What is the company's ability to consume additional credit lines for possible collateral requirements?\",\r\n  \"className\": \"policy-question-five\",\r\n  \"selectAnswer\": \"Select an answer\",\r\n  \"bottomDesc\": \"If required, can your company easily access additional credit to manage potential currency risks?\",\r\n  \"Ans\": [\r\n    {\r\n      \"a1\": \"Don't Know\",\r\n      \"a2\": \"Very High\",\r\n      \"a3\": \"High\",\r\n      \"a4\": \"Medium\",\r\n      \"a5\": \"Low\"\r\n    }\r\n  ]\r\n},\r\n]"
                },
                {
                    "name": "advancePolicyStep1Obj",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/risk-dashboard/components/advanced-policy/components/advance-policy-data.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n  \"pair\": \"USD/ILS\",\r\n  \"sign\": \"$\",\r\n  \"toCurrency\": \"US\",\r\n  \"flag\": \"https://okoora-stage-api2023.azurewebsites.net/Images/Flags/USD.png\",\r\n  \"code\": \"USD\",\r\n  \"baseCurrencyFlag\": \"https://okoora-stage-api2023.azurewebsites.net/Images/Flags/ILS.png\",\r\n  \"baseCurrency\": \"ILS\",\r\n  \"baseCurrencySign\": \"₪\",\r\n  \"cashFlowName\": \"test\",\r\n  \"monthlyAmount\": 4,\r\n}"
                }
            ],
            "src/app/shared/custom-validators.ts": [
                {
                    "name": "ALLOWED_SPECIAL_CHARACTERS_REGEX",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/custom-validators.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "/[!@#$%^()_\\-[\\]\\{}|;':\",.\\/<>?]/"
                },
                {
                    "name": "customMinValidator",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/custom-validators.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(data:{min:number, errorObjectName: string}): ValidatorFn  => {\r\n    const {min, errorObjectName} = data;\r\n    return (control: AbstractControl): { [key: string]: {message: string, min:number,actual:number} } | null => {\r\n        // if the value given is empty string then we return null because these fields are optional\r\n        if(control.value >= min){\r\n            return null;\r\n        } else {\r\n            return {\r\n                [errorObjectName]: {\r\n                    min,\r\n                    actual: control.value,\r\n                    message: 'Min amount not provided.'\r\n                }\r\n            }\r\n        }\r\n    }\r\n}"
                },
                {
                    "name": "customNumberMustBeMultipliedByValidator",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/custom-validators.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(multipliedBy:number): ValidatorFn  => {\r\n    return (control: AbstractControl): { [key: string]: {message: string, min:number,actual:number} } | null => {\r\n        // if the value given is empty string then we return null because these fields are optional\r\n        if( +control.value % multipliedBy === 0){\r\n            return null;\r\n        } else {\r\n            return {\r\n                ['mustBeMultipliedBy']: {\r\n                    min: multipliedBy,\r\n                    actual: control.value,\r\n                    message: `Number must be multiplies by ${multipliedBy}`\r\n                }\r\n            }\r\n        }\r\n    }\r\n}"
                },
                {
                    "name": "emailValidators",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/custom-validators.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ValidatorFn[]",
                    "defaultValue": "[Validators.required, Validators.email]"
                },
                {
                    "name": "enAndNumbersAndSpaceValidators",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/custom-validators.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ValidatorFn",
                    "defaultValue": "Validators.pattern(onlyEnglishAndNumbersAndSpaceRgx)"
                },
                {
                    "name": "inWalletValidator",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/custom-validators.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(inWallet:number, currency:string, translateService:TranslateService, numberPipe:any, currencySymbolPipe:any): ValidatorFn  => {\r\n    return (control: AbstractControl): { [key: string]: {message: string} } | null => {\r\n        if (+Math.floor(control.value) > Math.floor(inWallet)) {\r\n            return {\r\n                not_enough_in_wallet: {\r\n                    message: `${translateService.instant('FORMS_ERRORS.max_amount_should_be')} ${numberPipe.transform(inWallet ?? 0, '1.0-2')}${currencySymbolPipe.transform(currency)}`,\r\n                }\r\n            };\r\n        }\r\n\r\n        return null;\r\n    };\r\n}",
                    "rawdescription": "checks if the input value is greater than the amount in users wallet\r\nif true we set a custom error {not_enough_in_wallet} in the formcontrol",
                    "description": "<p>checks if the input value is greater than the amount in users wallet\nif true we set a custom error {not_enough_in_wallet} in the formcontrol</p>\n"
                },
                {
                    "name": "onlyEnglishAndNumbersAndSpaceRgx",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/custom-validators.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "/^[a-zA-Z0-9,.\\s-\\/']+$/",
                    "rawdescription": "Regular expressions",
                    "description": "<p>Regular expressions</p>\n"
                },
                {
                    "name": "onlyEnglishAndNumbersAndSpaceValidator",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/custom-validators.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(): any  => {\r\n    return (control: AbstractControl):any => {\r\n        // if the value given is empty string then we return null because these fields are optional\r\n        if(control.value===\"\"){\r\n            return null;\r\n        }\r\n        if (!onlyEnglishAndNumbersAndSpaceRgx.test(control.value)) {\r\n            return {\r\n                not_english_and_numbers_and_space: {\r\n                    message: \"Only English letters and numbers are allowed.\",\r\n                }\r\n            };\r\n        }\r\n    }\r\n}"
                },
                {
                    "name": "onlyEnglishAndSpaceRgx",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/custom-validators.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "/^[a-zA-Z\\s]+$/"
                },
                {
                    "name": "onlyEnglishAndSpaceValidator",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/custom-validators.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(): ValidatorFn  => {\r\n    return (control: AbstractControl): any => {\r\n        // if the value given is empty string then we return null because these fields are optional\r\n        if(control.value===\"\"){\r\n            return null;\r\n        }\r\n        if (!onlyEnglishAndSpaceRgx.test(control.value)) {\r\n            return {\r\n                not_english_and_numbers_and_space: {\r\n                    message: \"Only English letters are allowed.\",\r\n                }\r\n            };\r\n        }\r\n    }\r\n}"
                },
                {
                    "name": "onlyEnglishCharactersRgx",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/custom-validators.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "/^[A-Za-z]+$/"
                },
                {
                    "name": "onlyEnglishCharactersValidator",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/custom-validators.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(): any => {\r\n    return (control: AbstractControl): any => {\r\n      if (control.value === \"\") {\r\n        return null;\r\n      }\r\n      if (!onlyEnglishCharactersRgx.test(control.value)) {\r\n        return {\r\n            only_english_characters: {\r\n            message: \"Only English letters are allowed.\",\r\n          },\r\n        };\r\n      }\r\n      return null;\r\n    };\r\n}"
                },
                {
                    "name": "onlyNumbersValidators",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/custom-validators.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ValidatorFn",
                    "defaultValue": "Validators.pattern(/^[0-9]*$/)"
                },
                {
                    "name": "onlyValidIdNumber",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/custom-validators.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(): ValidatorFn => {\r\n    return (control: AbstractControl):any => {\r\n\r\n        if (!environment.production && !SubjectService.idValidation) {\r\n            return null;\r\n        }\r\n\r\n        const id = control.value;\r\n        // if the value given is empty string then we return null because these fields are optional\r\n        if (id === \"\") {\r\n            return null;\r\n        }\r\n        if (String(id).trim().length != 9 || !validateID(id)) {\r\n            return {\r\n                not_valid_id_number: {\r\n                    message: \"Valid ID Number Only\"\r\n                }\r\n            };\r\n        }\r\n    }\r\n}",
                    "rawdescription": "validate that the entered ID number which the user has entered is a valid one",
                    "description": "<p>validate that the entered ID number which the user has entered is a valid one</p>\n"
                },
                {
                    "name": "PASSWORD_REGEX",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/custom-validators.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "/^(?=.*?[A-Z])(?=.*?[a-z])[!@#$%^()_[\\]\\{}|;':\",.\\/<>?a-zA-Z0-9-]+$/"
                },
                {
                    "name": "passwordRgxPatternValidator",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/custom-validators.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(): ValidatorFn  => {\r\n    return (control: AbstractControl): { [key: string]: {message: string} } | null => {\r\n        // if the value given is empty string then we return null because these fields are optional\r\n        if(control.value===\"\"){\r\n            return null;\r\n        }\r\n        if (!PASSWORD_REGEX.test(control.value)) {\r\n            return {\r\n                passwordSpecialCharaters: {\r\n                    message: \"One of the characters entered is invalid.\",\r\n                }\r\n            };\r\n        }\r\n        return null;\r\n    }\r\n}",
                    "rawdescription": "Custom Validators",
                    "description": "<p>Custom Validators</p>\n"
                },
                {
                    "name": "phoneValidators",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/custom-validators.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ValidatorFn[]",
                    "defaultValue": "[Validators.required, Validators.pattern(/^[0-9]{10,15}$/)]"
                },
                {
                    "name": "pwdConfirming",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/custom-validators.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(data:{key: string, confirmationKey: string}): any  => {\r\n    const {key, confirmationKey} = data;\r\n\r\n    return (group: FormGroup): any => {\r\n        const input = group.controls[key];\r\n        const confirmationInput = group.controls[confirmationKey];\r\n        return input.value !== confirmationInput.value ? {passwordNotEquivalent: true} : null\r\n    };\r\n}"
                },
                {
                    "name": "residentRegex",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/custom-validators.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "/^[A-Za-z\\u0590-\\u05FF0-9]{1,100}$/"
                },
                {
                    "name": "VALID_LINK_REGEX",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/custom-validators.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "/(www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b([-a-zA-Z0-9()@:%_\\+.~#?&//=]*)/"
                },
                {
                    "name": "validateID",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/custom-validators.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(id:any) => {\r\n   id = String(id).trim();\r\n   if (id.length > 9 || isNaN(id)) return false;\r\n   id = id.length < 9 ? (\"00000000\" + id).slice(-9) : id;\r\n   return Array.from(id, Number).reduce((counter, digit, i) => {\r\n     const step = digit * ((i % 2) + 1);\r\n     return counter + (step > 9 ? step - 9 : step);\r\n   }) % 10 === 0;\r\n }",
                    "rawdescription": "checks whether a given value is a valid id number or not",
                    "description": "<p>checks whether a given value is a valid id number or not</p>\n"
                },
                {
                    "name": "valueMustBeEqualOrNotValidator",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/custom-validators.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(data:{valueToCheck:unknown, action:'EQUAL_TO'|'NOT_EQUAL_TO', errorObjectName?: string}): ValidatorFn  => {\r\n    const {valueToCheck, action} = data;\r\n    return (control: AbstractControl): { [key: string]: {message: string, actual:number} } | null => {\r\n        // if the value given is empty string then we return null because these fields are optional\r\n        const toReturnOnInvalid = {\r\n            [data?.errorObjectName ?? 'valueMustBeEqualTo']: {\r\n                actual: control.value,\r\n                message: `value must be ${action}: ${valueToCheck}`\r\n            }\r\n        };\r\n\r\n        switch (action) {\r\n            case \"EQUAL_TO\":\r\n                if ((valueToCheck)) {\r\n                    if (control.value === valueToCheck) {\r\n                        return null;\r\n                    }\r\n                } else if ((valueToCheck)) {\r\n                    if ((valueToCheck as any).includes(control.value)) {\r\n                        return null;\r\n                    }\r\n                }\r\n                break;\r\n            case \"NOT_EQUAL_TO\":\r\n                if ((valueToCheck)) {\r\n                    if (control.value !== valueToCheck) {\r\n                        return null;\r\n                    }\r\n                } else if ((valueToCheck)) {\r\n                    if (!(valueToCheck as any).includes(control.value)) {\r\n                        return null;\r\n                    }\r\n                }\r\n                break;\r\n            default:\r\n                const exhaust:never = action;\r\n        }\r\n\r\n        return toReturnOnInvalid;\r\n    }\r\n}"
                },
                {
                    "name": "websitesValidators",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/custom-validators.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ValidatorFn[]",
                    "defaultValue": "[Validators.minLength(2), Validators.maxLength(100), Validators.pattern(VALID_LINK_REGEX)]"
                }
            ],
            "src/app/sign-up/models/custom-validators.ts": [
                {
                    "name": "ALLOWED_SPECIAL_CHARACTERS_REGEX",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/sign-up/models/custom-validators.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "/[!@#$%^&*()\\[\\]{}\\\\\\-_+={}|\\\\:;'\",<>,.?/~`]/"
                },
                {
                    "name": "PASSWORD_REGEX",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/sign-up/models/custom-validators.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "/^(?=.*?[A-Z])(?=.*?[a-z])[!@#$%^&*()\\[\\]{}\\\\\\-_+={}|\\\\:;'\",<>,.?/~`a-zA-Z0-9-]+$/"
                },
                {
                    "name": "passwordRgxPatternValidator",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/sign-up/models/custom-validators.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(): ValidatorFn  => {\r\n    return (control: AbstractControl): { [key: string]: {message: string} } | null => {\r\n        // if the value given is empty string then we return null because these fields are optional\r\n        if(control.value===\"\"){\r\n            return null;\r\n        }\r\n        if (!PASSWORD_REGEX.test(control.value)) {\r\n            return {\r\n                passwordSpecialCharaters: {\r\n                    message: \"One of the characters entered is invalid.\",\r\n                }\r\n            };\r\n        }\r\n        return null;\r\n    }\r\n}"
                },
                {
                    "name": "validateID",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/sign-up/models/custom-validators.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(id:any) => {\r\n    id = String(id).trim();\r\n    if (id.length > 9 || isNaN(id)) return false;\r\n    id = id.length < 9 ? (\"00000000\" + id).slice(-9) : id;\r\n    return Array.from(id, Number).reduce((counter, digit, i) => {\r\n      const step = digit * ((i % 2) + 1);\r\n      return counter + (step > 9 ? step - 9 : step);\r\n    }) % 10 === 0;\r\n  }"
                }
            ],
            "src/app/app.config.ts": [
                {
                    "name": "appConfig",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/app.config.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ApplicationConfig",
                    "defaultValue": "{\r\n  providers: [provideZoneChangeDetection({ eventCoalescing: true }), provideRouter(routes)]\r\n}"
                }
            ],
            "src/app/risk-dashboard/components/cashflow-exposure/components/cashflow-exposure-data.ts": [
                {
                    "name": "cashflowExposureRows",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/risk-dashboard/components/cashflow-exposure/components/cashflow-exposure-data.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\r\n  {\r\n      \"month\": \"Apr\",\r\n      \"year\": 2025,\r\n      \"buying\": \"0\",\r\n      \"selling\": \"100,000\",\r\n      \"totalNetValue\": 100000,\r\n      \"lastDay\": 30,\r\n      \"midDay\": 15,\r\n      \"openEditForBuying\": false,\r\n      \"openEditForSelling\": false,\r\n      \"errMsgForbuyingFlag\": false,\r\n      \"errMsgForsellingFlag\": false,\r\n      \"postPoneFlag\": false,\r\n      \"postPoneInactiveFlag\": true,\r\n      \"postPoneMonth\": \"Apr\",\r\n      \"monthNumber\": 3,\r\n      \"cashflowDate\": 15,\r\n      \"Month\": \"15/04/2025\",\r\n      \"dayOfExpity\": \"15\",\r\n      \"date\": new Date(2025, 4, 15),\r\n      \"disabledColumn\": false,\r\n  },\r\n  {\r\n      \"month\": \"May\",\r\n      \"year\": 2025,\r\n      \"buying\": \"0\",\r\n      \"selling\": \"100,000\",\r\n      \"totalNetValue\": 100000,\r\n      \"lastDay\": 31,\r\n      \"midDay\": 16,\r\n      \"openEditForBuying\": false,\r\n      \"openEditForSelling\": false,\r\n      \"errMsgForbuyingFlag\": false,\r\n      \"errMsgForsellingFlag\": false,\r\n      \"postPoneFlag\": false,\r\n      \"postPoneInactiveFlag\": true,\r\n      \"postPoneMonth\": \"May\",\r\n      \"monthNumber\": 4,\r\n      \"cashflowDate\": 15,\r\n      \"Month\": \"15/05/2025\",\r\n      \"dayOfExpity\": \"15\",\r\n      \"date\": new Date(2025, 5, 15),\r\n      \"disabledColumn\": false,\r\n  },\r\n  {\r\n      \"month\": \"Jun\",\r\n      \"year\": 2025,\r\n      \"buying\": \"0\",\r\n      \"selling\": \"100,000\",\r\n      \"totalNetValue\": 100000,\r\n      \"lastDay\": 30,\r\n      \"midDay\": 15,\r\n      \"openEditForBuying\": false,\r\n      \"openEditForSelling\": false,\r\n      \"errMsgForbuyingFlag\": false,\r\n      \"errMsgForsellingFlag\": false,\r\n      \"postPoneFlag\": false,\r\n      \"postPoneInactiveFlag\": true,\r\n      \"postPoneMonth\": \"Jun\",\r\n      \"monthNumber\": 5,\r\n      \"cashflowDate\": 15,\r\n      \"Month\": \"15/06/2025\",\r\n      \"dayOfExpity\": \"15\",\r\n      \"date\": new Date(2025, 6, 15),\r\n      \"disabledColumn\": false,\r\n  },\r\n  {\r\n      \"month\": \"Jul\",\r\n      \"year\": 2025,\r\n      \"buying\": \"0\",\r\n      \"selling\": \"100,000\",\r\n      \"totalNetValue\": 100000,\r\n      \"lastDay\": 31,\r\n      \"midDay\": 16,\r\n      \"openEditForBuying\": false,\r\n      \"openEditForSelling\": false,\r\n      \"errMsgForbuyingFlag\": false,\r\n      \"errMsgForsellingFlag\": false,\r\n      \"postPoneFlag\": false,\r\n      \"postPoneInactiveFlag\": true,\r\n      \"postPoneMonth\": \"Jul\",\r\n      \"monthNumber\": 6,\r\n      \"cashflowDate\": 15,\r\n      \"Month\": \"15/07/2025\",\r\n      \"dayOfExpity\": \"15\",\r\n      \"date\": new Date(2025, 7, 15),\r\n      \"disabledColumn\": false,\r\n  },\r\n  {\r\n      \"month\": \"Aug\",\r\n      \"year\": 2025,\r\n      \"buying\": \"0\",\r\n      \"selling\": \"100,000\",\r\n      \"totalNetValue\": 100000,\r\n      \"lastDay\": 31,\r\n      \"midDay\": 16,\r\n      \"openEditForBuying\": false,\r\n      \"openEditForSelling\": false,\r\n      \"errMsgForbuyingFlag\": false,\r\n      \"errMsgForsellingFlag\": false,\r\n      \"postPoneFlag\": false,\r\n      \"postPoneInactiveFlag\": true,\r\n      \"postPoneMonth\": \"Aug\",\r\n      \"monthNumber\": 7,\r\n      \"cashflowDate\": 15,\r\n      \"Month\": \"15/08/2025\",\r\n      \"dayOfExpity\": \"15\",\r\n      \"date\": new Date(2025, 8, 15)\r\n  },\r\n  {\r\n      \"month\": \"Sep\",\r\n      \"year\": 2025,\r\n      \"buying\": \"0\",\r\n      \"selling\": \"100,000\",\r\n      \"totalNetValue\": 100000,\r\n      \"lastDay\": 30,\r\n      \"midDay\": 15,\r\n      \"openEditForBuying\": false,\r\n      \"openEditForSelling\": false,\r\n      \"errMsgForbuyingFlag\": false,\r\n      \"errMsgForsellingFlag\": false,\r\n      \"postPoneFlag\": false,\r\n      \"postPoneInactiveFlag\": true,\r\n      \"postPoneMonth\": \"Sep\",\r\n      \"monthNumber\": 8,\r\n      \"cashflowDate\": 15,\r\n      \"Month\": \"15/09/2025\",\r\n      \"dayOfExpity\": \"15\",\r\n      \"date\": new Date(2025, 9, 15),\r\n      \"disabledColumn\": false,\r\n  },\r\n  {\r\n      \"month\": \"Oct\",\r\n      \"year\": 2025,\r\n      \"buying\": \"0\",\r\n      \"selling\": \"100,000\",\r\n      \"totalNetValue\": 100000,\r\n      \"lastDay\": 31,\r\n      \"midDay\": 16,\r\n      \"openEditForBuying\": false,\r\n      \"openEditForSelling\": false,\r\n      \"errMsgForbuyingFlag\": false,\r\n      \"errMsgForsellingFlag\": false,\r\n      \"postPoneFlag\": false,\r\n      \"postPoneInactiveFlag\": true,\r\n      \"postPoneMonth\": \"Oct\",\r\n      \"monthNumber\": 9,\r\n      \"cashflowDate\": 15,\r\n      \"Month\": \"15/10/2025\",\r\n      \"dayOfExpity\": \"15\",\r\n      \"date\": new Date(2025, 10, 15),\r\n      \"disabledColumn\": false,\r\n  },\r\n  {\r\n      \"month\": \"Nov\",\r\n      \"year\": 2025,\r\n      \"buying\": \"0\",\r\n      \"selling\": \"100,000\",\r\n      \"totalNetValue\": 100000,\r\n      \"lastDay\": 30,\r\n      \"midDay\": 15,\r\n      \"openEditForBuying\": false,\r\n      \"openEditForSelling\": false,\r\n      \"errMsgForbuyingFlag\": false,\r\n      \"errMsgForsellingFlag\": false,\r\n      \"postPoneFlag\": false,\r\n      \"postPoneInactiveFlag\": true,\r\n      \"postPoneMonth\": \"Nov\",\r\n      \"monthNumber\": 10,\r\n      \"cashflowDate\": 15,\r\n      \"Month\": \"15/11/2025\",\r\n      \"date\": new Date(2025, 11, 15),\r\n      \"disabledColumn\": false,\r\n  },\r\n  {\r\n      \"month\": \"Dec\",\r\n      \"year\": 2025,\r\n      \"buying\": \"0\",\r\n      \"selling\": \"100,000\",\r\n      \"totalNetValue\": 100000,\r\n      \"lastDay\": 31,\r\n      \"midDay\": 16,\r\n      \"openEditForBuying\": false,\r\n      \"openEditForSelling\": false,\r\n      \"errMsgForbuyingFlag\": false,\r\n      \"errMsgForsellingFlag\": false,\r\n      \"postPoneFlag\": false,\r\n      \"postPoneInactiveFlag\": true,\r\n      \"postPoneMonth\": \"Dec\",\r\n      \"monthNumber\": 11,\r\n      \"cashflowDate\": 15,\r\n      \"Month\": \"15/12/2025\",\r\n      \"dayOfExpity\": \"15\",\r\n      \"date\": new Date(2025, 12, 15),\r\n      \"disabledColumn\": false,\r\n  },\r\n  {\r\n      \"month\": \"Jan\",\r\n      \"year\": 2026,\r\n      \"buying\": \"0\",\r\n      \"selling\": \"100,000\",\r\n      \"totalNetValue\": 100000,\r\n      \"lastDay\": 31,\r\n      \"midDay\": 16,\r\n      \"openEditForBuying\": false,\r\n      \"openEditForSelling\": false,\r\n      \"errMsgForbuyingFlag\": false,\r\n      \"errMsgForsellingFlag\": false,\r\n      \"postPoneFlag\": false,\r\n      \"postPoneInactiveFlag\": true,\r\n      \"postPoneMonth\": \"Jan\",\r\n      \"monthNumber\": 0,\r\n      \"cashflowDate\": 15,\r\n      \"Month\": \"15/01/2026\",\r\n      \"dayOfExpity\": \"15\",\r\n      \"date\": new Date(2026, 1, 15),\r\n      \"disabledColumn\": false,\r\n  },\r\n  {\r\n      \"month\": \"Feb\",\r\n      \"year\": 2026,\r\n      \"buying\": \"0\",\r\n      \"selling\": \"100,000\",\r\n      \"totalNetValue\": 100000,\r\n      \"lastDay\": 28,\r\n      \"midDay\": 14,\r\n      \"openEditForBuying\": false,\r\n      \"openEditForSelling\": false,\r\n      \"errMsgForbuyingFlag\": false,\r\n      \"errMsgForsellingFlag\": false,\r\n      \"postPoneFlag\": false,\r\n      \"postPoneInactiveFlag\": true,\r\n      \"postPoneMonth\": \"Feb\",\r\n      \"monthNumber\": 1,\r\n      \"cashflowDate\": 15,\r\n      \"Month\": \"15/02/2026\",\r\n      \"dayOfExpity\": \"15\",\r\n      \"date\": new Date(2026, 2, 15),\r\n      \"disabledColumn\": false,\r\n  },\r\n  {\r\n      \"month\": \"Mar\",\r\n      \"year\": 2026,\r\n      \"buying\": \"0\",\r\n      \"selling\": \"100,000\",\r\n      \"totalNetValue\": 100000,\r\n      \"lastDay\": 31,\r\n      \"midDay\": 16,\r\n      \"openEditForBuying\": false,\r\n      \"openEditForSelling\": false,\r\n      \"errMsgForbuyingFlag\": false,\r\n      \"errMsgForsellingFlag\": false,\r\n      \"postPoneFlag\": false,\r\n      \"postPoneInactiveFlag\": true,\r\n      \"postPoneMonth\": \"Mar\",\r\n      \"monthNumber\": 2,\r\n      \"cashflowDate\": 15,\r\n      \"Month\": \"15/03/2026\",\r\n      \"dayOfExpity\": \"15\",\r\n      \"date\": new Date(2026, 3, 15),\r\n      \"disabledColumn\": false,\r\n  }\r\n]"
                },
                {
                    "name": "monthlyExposureObject",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/risk-dashboard/components/cashflow-exposure/components/cashflow-exposure-data.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n  \"pair\": \"USD/ILS\",\r\n  \"sign\": \"$\",\r\n  \"toCurrency\": \"USD\",\r\n  \"selectedExposure\": \"Selling\",\r\n  \"monthlyAmount\": 100000,\r\n  \"monthlyPeriod\": 12,\r\n  \"flag\": \"https://okoora-stage-api2023.azurewebsites.net/Images/Flags/USD.png\",\r\n  \"code\": \"USD\",\r\n  \"baseCurrencyFlag\": \"https://okoora-stage-api2023.azurewebsites.net/Images/Flags/ILS.png\",\r\n  \"baseCurrency\": \"ILS\",\r\n  \"baseCurrencySign\": \"₪\"\r\n}"
                },
                {
                    "name": "walletData",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/risk-dashboard/components/cashflow-exposure/components/cashflow-exposure-data.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\r\n    {\r\n        \"code\": \"GBP\",\r\n        \"defaultCurrency\": false,\r\n        \"sign\": \"£\",\r\n        \"flag\": \"https://okoora-stage-api2023.azurewebsites.net/Images/Flags/GBP.png\",\r\n        \"currencyName\": \"British Pound Sterling\"\r\n    },\r\n    {\r\n        \"code\": \"JPY\",\r\n        \"defaultCurrency\": false,\r\n        \"sign\": \"￥\",\r\n        \"flag\": \"https://okoora-stage-api2023.azurewebsites.net/Images/Flags/JPY.png\",\r\n        \"currencyName\": \"Japanese Yen\"\r\n    },\r\n    {\r\n        \"code\": \"USD\",\r\n        \"defaultCurrency\": false,\r\n        \"sign\": \"$\",\r\n        \"flag\": \"https://okoora-stage-api2023.azurewebsites.net/Images/Flags/USD.png\",\r\n        \"currencyName\": \"United States Dollar\"\r\n    },\r\n    {\r\n        \"code\": \"PLN\",\r\n        \"defaultCurrency\": false,\r\n        \"sign\": \"zł\",\r\n        \"flag\": \"https://okoora-stage-api2023.azurewebsites.net/Images/Flags/PLN.png\",\r\n        \"currencyName\": \"Polish Zloty\"\r\n    },\r\n    {\r\n        \"code\": \"ILS\",\r\n        \"defaultCurrency\": true,\r\n        \"sign\": \"₪\",\r\n        \"flag\": \"https://okoora-stage-api2023.azurewebsites.net/Images/Flags/ILS.png\",\r\n        \"currencyName\": \"Israeli Shekel\"\r\n    }\r\n]"
                }
            ],
            "src/app/sign-up/fields/country-data.ts": [
                {
                    "name": "countryData",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/sign-up/fields/country-data.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\r\n        {\r\n            \"countryName\": \"Albania\",\r\n            \"countryCode\": \"al\",\r\n            \"countryCode3Letters\": \"ALB\",\r\n            \"phoneCode\": 355,\r\n            \"score\": 2,\r\n            \"canRegister\": 1,\r\n            \"flag\": \"https://okoora-stage-api2023.azurewebsites.net//Images/CountryFlags/al.svg\"\r\n        },\r\n        {\r\n            \"countryName\": \"Algeria\",\r\n            \"countryCode\": \"dz\",\r\n            \"countryCode3Letters\": \"DZA\",\r\n            \"phoneCode\": 213,\r\n            \"score\": 1,\r\n            \"canRegister\": 0,\r\n            \"flag\": \"https://okoora-stage-api2023.azurewebsites.net//Images/CountryFlags/dz.svg\"\r\n        },\r\n        {\r\n            \"countryName\": \"Andorra\",\r\n            \"countryCode\": \"ad\",\r\n            \"countryCode3Letters\": \"AND\",\r\n            \"phoneCode\": 376,\r\n            \"score\": 2,\r\n            \"canRegister\": 0,\r\n            \"flag\": \"https://okoora-stage-api2023.azurewebsites.net//Images/CountryFlags/ad.svg\"\r\n        },\r\n        {\r\n            \"countryName\": \"Antarctica\",\r\n            \"countryCode\": \"aq\",\r\n            \"countryCode3Letters\": \"ATA\",\r\n            \"phoneCode\": 672,\r\n            \"score\": 4,\r\n            \"canRegister\": 0,\r\n            \"flag\": \"https://okoora-stage-api2023.azurewebsites.net//Images/CountryFlags/aq.svg\"\r\n        },\r\n        {\r\n            \"countryName\": \"Argentina\",\r\n            \"countryCode\": \"ar\",\r\n            \"countryCode3Letters\": \"ARG\",\r\n            \"phoneCode\": 54,\r\n            \"score\": 3,\r\n            \"canRegister\": 0,\r\n            \"flag\": \"https://okoora-stage-api2023.azurewebsites.net//Images/CountryFlags/ar.svg\"\r\n        },\r\n        {\r\n            \"countryName\": \"Armenia\",\r\n            \"countryCode\": \"am\",\r\n            \"countryCode3Letters\": \"ARM\",\r\n            \"phoneCode\": 374,\r\n            \"score\": 4,\r\n            \"canRegister\": 0,\r\n            \"flag\": \"https://okoora-stage-api2023.azurewebsites.net//Images/CountryFlags/am.svg\"\r\n        },\r\n        {\r\n            \"countryName\": \"Aruba\",\r\n            \"countryCode\": \"aw\",\r\n            \"countryCode3Letters\": \"ABW\",\r\n            \"phoneCode\": 297,\r\n            \"score\": 4,\r\n            \"canRegister\": 0,\r\n            \"flag\": \"https://okoora-stage-api2023.azurewebsites.net//Images/CountryFlags/aw.svg\"\r\n        },\r\n        {\r\n            \"countryName\": \"Australia\",\r\n            \"countryCode\": \"au\",\r\n            \"countryCode3Letters\": \"AUS\",\r\n            \"phoneCode\": 61,\r\n            \"score\": 3,\r\n            \"canRegister\": 1,\r\n            \"flag\": \"https://okoora-stage-api2023.azurewebsites.net//Images/CountryFlags/au.svg\"\r\n        },\r\n        {\r\n            \"countryName\": \"Austria\",\r\n            \"countryCode\": \"at\",\r\n            \"countryCode3Letters\": \"AUT\",\r\n            \"phoneCode\": 43,\r\n            \"score\": 1,\r\n            \"canRegister\": 1,\r\n            \"flag\": \"https://okoora-stage-api2023.azurewebsites.net//Images/CountryFlags/at.svg\"\r\n        },\r\n        {\r\n            \"countryName\": \"Azerbaijan\",\r\n            \"countryCode\": \"az\",\r\n            \"countryCode3Letters\": \"AZE\",\r\n            \"phoneCode\": 994,\r\n            \"score\": 2,\r\n            \"canRegister\": 0,\r\n            \"flag\": \"https://okoora-stage-api2023.azurewebsites.net//Images/CountryFlags/az.svg\"\r\n        },\r\n        {\r\n            \"countryName\": \"Bangladesh\",\r\n            \"countryCode\": \"bd\",\r\n            \"countryCode3Letters\": \"BGD\",\r\n            \"phoneCode\": 880,\r\n            \"score\": 2,\r\n            \"canRegister\": 1,\r\n            \"flag\": \"https://okoora-stage-api2023.azurewebsites.net//Images/CountryFlags/bd.svg\"\r\n        },\r\n        {\r\n            \"countryName\": \"Belgium\",\r\n            \"countryCode\": \"be\",\r\n            \"countryCode3Letters\": \"BEL\",\r\n            \"phoneCode\": 32,\r\n            \"score\": 1,\r\n            \"canRegister\": 1,\r\n            \"flag\": \"https://okoora-stage-api2023.azurewebsites.net//Images/CountryFlags/be.svg\"\r\n        },\r\n        {\r\n            \"countryName\": \"Belize\",\r\n            \"countryCode\": \"bz\",\r\n            \"countryCode3Letters\": \"BLZ\",\r\n            \"phoneCode\": 501,\r\n            \"score\": 4,\r\n            \"canRegister\": 1,\r\n            \"flag\": \"https://okoora-stage-api2023.azurewebsites.net//Images/CountryFlags/bz.svg\"\r\n        },\r\n        {\r\n            \"countryName\": \"Benin\",\r\n            \"countryCode\": \"bj\",\r\n            \"countryCode3Letters\": \"BEN\",\r\n            \"phoneCode\": 229,\r\n            \"score\": 4,\r\n            \"canRegister\": 1,\r\n            \"flag\": \"https://okoora-stage-api2023.azurewebsites.net//Images/CountryFlags/bj.svg\"\r\n        },\r\n        {\r\n            \"countryName\": \"Bhutan\",\r\n            \"countryCode\": \"bt\",\r\n            \"countryCode3Letters\": \"BTN\",\r\n            \"phoneCode\": 975,\r\n            \"score\": 4,\r\n            \"canRegister\": 1,\r\n            \"flag\": \"https://okoora-stage-api2023.azurewebsites.net//Images/CountryFlags/bt.svg\"\r\n        },\r\n        {\r\n            \"countryName\": \"Bolivia\",\r\n            \"countryCode\": \"bo\",\r\n            \"countryCode3Letters\": \"BOL\",\r\n            \"phoneCode\": 591,\r\n            \"score\": 2,\r\n            \"canRegister\": 1,\r\n            \"flag\": \"https://okoora-stage-api2023.azurewebsites.net//Images/CountryFlags/bo.svg\"\r\n        },\r\n        {\r\n            \"countryName\": \"Bosnia And Herzegovina\",\r\n            \"countryCode\": \"ba\",\r\n            \"countryCode3Letters\": \"BIH\",\r\n            \"phoneCode\": 387,\r\n            \"score\": 2,\r\n            \"canRegister\": 1,\r\n            \"flag\": \"https://okoora-stage-api2023.azurewebsites.net//Images/CountryFlags/ba.svg\"\r\n        },\r\n        {\r\n            \"countryName\": \"Botswana\",\r\n            \"countryCode\": \"bw\",\r\n            \"countryCode3Letters\": \"BWA\",\r\n            \"phoneCode\": 267,\r\n            \"score\": 2,\r\n            \"canRegister\": 1,\r\n            \"flag\": \"https://okoora-stage-api2023.azurewebsites.net//Images/CountryFlags/bw.svg\"\r\n        },\r\n        {\r\n            \"countryName\": \"Brazil\",\r\n            \"countryCode\": \"br\",\r\n            \"countryCode3Letters\": \"BRA\",\r\n            \"phoneCode\": 55,\r\n            \"score\": 5,\r\n            \"canRegister\": 1,\r\n            \"flag\": \"https://okoora-stage-api2023.azurewebsites.net//Images/CountryFlags/br.svg\"\r\n        },\r\n        {\r\n            \"countryName\": \"Brunei Darussalam\",\r\n            \"countryCode\": \"bn\",\r\n            \"countryCode3Letters\": \"BRN\",\r\n            \"phoneCode\": 673,\r\n            \"score\": 4,\r\n            \"canRegister\": 1,\r\n            \"flag\": \"https://okoora-stage-api2023.azurewebsites.net//Images/CountryFlags/bn.svg\"\r\n        },\r\n        {\r\n            \"countryName\": \"Bulgaria\",\r\n            \"countryCode\": \"bg\",\r\n            \"countryCode3Letters\": \"BGR\",\r\n            \"phoneCode\": 359,\r\n            \"score\": 4,\r\n            \"canRegister\": 1,\r\n            \"flag\": \"https://okoora-stage-api2023.azurewebsites.net//Images/CountryFlags/bg.svg\"\r\n        },\r\n        {\r\n            \"countryName\": \"Burkina Faso\",\r\n            \"countryCode\": \"bf\",\r\n            \"countryCode3Letters\": \"BFA\",\r\n            \"phoneCode\": 226,\r\n            \"score\": 4,\r\n            \"canRegister\": 1,\r\n            \"flag\": \"https://okoora-stage-api2023.azurewebsites.net//Images/CountryFlags/bf.svg\"\r\n        },\r\n        {\r\n            \"countryName\": \"Burundi\",\r\n            \"countryCode\": \"bi\",\r\n            \"countryCode3Letters\": \"BDI\",\r\n            \"phoneCode\": 257,\r\n            \"score\": 4,\r\n            \"canRegister\": 1,\r\n            \"flag\": \"https://okoora-stage-api2023.azurewebsites.net//Images/CountryFlags/bi.svg\"\r\n        },\r\n        {\r\n            \"countryName\": \"Cambodia\",\r\n            \"countryCode\": \"kh\",\r\n            \"countryCode3Letters\": \"KHM\",\r\n            \"phoneCode\": 855,\r\n            \"score\": 2,\r\n            \"canRegister\": 1,\r\n            \"flag\": \"https://okoora-stage-api2023.azurewebsites.net//Images/CountryFlags/kh.svg\"\r\n        },\r\n        {\r\n            \"countryName\": \"Cameroon\",\r\n            \"countryCode\": \"cm\",\r\n            \"countryCode3Letters\": \"CMR\",\r\n            \"phoneCode\": 237,\r\n            \"score\": 4,\r\n            \"canRegister\": 1,\r\n            \"flag\": \"https://okoora-stage-api2023.azurewebsites.net//Images/CountryFlags/cm.svg\"\r\n        },\r\n        {\r\n            \"countryName\": \"Canada\",\r\n            \"countryCode\": \"ca\",\r\n            \"countryCode3Letters\": \"CAN\",\r\n            \"phoneCode\": 1,\r\n            \"score\": 1,\r\n            \"canRegister\": 1,\r\n            \"flag\": \"https://okoora-stage-api2023.azurewebsites.net//Images/CountryFlags/ca.svg\"\r\n        },\r\n        {\r\n            \"countryName\": \"Cape Verde\",\r\n            \"countryCode\": \"cv\",\r\n            \"countryCode3Letters\": \"CPV\",\r\n            \"phoneCode\": 238,\r\n            \"score\": 4,\r\n            \"canRegister\": 1,\r\n            \"flag\": \"https://okoora-stage-api2023.azurewebsites.net//Images/CountryFlags/cv.svg\"\r\n        },\r\n        {\r\n            \"countryName\": \"Central African Republic\",\r\n            \"countryCode\": \"cf\",\r\n            \"countryCode3Letters\": \"CAF\",\r\n            \"phoneCode\": 236,\r\n            \"score\": 4,\r\n            \"canRegister\": 1,\r\n            \"flag\": \"https://okoora-stage-api2023.azurewebsites.net//Images/CountryFlags/cf.svg\"\r\n        },\r\n        {\r\n            \"countryName\": \"Chad\",\r\n            \"countryCode\": \"td\",\r\n            \"countryCode3Letters\": \"TCD\",\r\n            \"phoneCode\": 235,\r\n            \"score\": 5,\r\n            \"canRegister\": 1,\r\n            \"flag\": \"https://okoora-stage-api2023.azurewebsites.net//Images/CountryFlags/td.svg\"\r\n        },\r\n        {\r\n            \"countryName\": \"Chile\",\r\n            \"countryCode\": \"cl\",\r\n            \"countryCode3Letters\": \"CHL\",\r\n            \"phoneCode\": 56,\r\n            \"score\": 2,\r\n            \"canRegister\": 1,\r\n            \"flag\": \"https://okoora-stage-api2023.azurewebsites.net//Images/CountryFlags/cl.svg\"\r\n        },\r\n        {\r\n            \"countryName\": \"China\",\r\n            \"countryCode\": \"cn\",\r\n            \"countryCode3Letters\": \"CHN\",\r\n            \"phoneCode\": 86,\r\n            \"score\": 1,\r\n            \"canRegister\": 0,\r\n            \"flag\": \"https://okoora-stage-api2023.azurewebsites.net//Images/CountryFlags/cn.svg\"\r\n        },\r\n        {\r\n            \"countryName\": \"Israel\",\r\n            \"countryCode\": \"il\",\r\n            \"countryCode3Letters\": \"ISR\",\r\n            \"phoneCode\": 972,\r\n            \"score\": 5,\r\n            \"canRegister\": 1,\r\n            \"flag\": \"https://okoora-stage-api2023.azurewebsites.net//Images/CountryFlags/il.svg\"\r\n        },\r\n    ]"
                }
            ],
            "src/app/sign-up/models/country.ts": [
                {
                    "name": "CountryData",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/sign-up/models/country.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CountryDataType",
                    "defaultValue": "{\r\n    \"AF\":{\r\n       \"country\": \"Afghanistan\",\r\n       \"countryCode\": \"AF\",\r\n       \"currencyCode\": \"AFN\",\r\n       \"phoneCode\": \"93\"\r\n   },\r\n    \"AX\":{\r\n       \"country\": \"Aland Islands\",\r\n       \"countryCode\": \"AX\",\r\n       \"currencyCode\": \"EUR\",\r\n       \"phoneCode\": \"358-18\"\r\n   },\r\n    \"AL\":{\r\n       \"country\": \"Albania\",\r\n       \"countryCode\": \"AL\",\r\n       \"currencyCode\": \"ALL\",\r\n       \"phoneCode\": \"355\"\r\n   },\r\n    \"DZ\":{\r\n       \"country\": \"Algeria\",\r\n       \"countryCode\": \"DZ\",\r\n       \"currencyCode\": \"DZD\",\r\n       \"phoneCode\": \"213\"\r\n   },\r\n    \"AS\":{\r\n       \"country\": \"American Samoa\",\r\n       \"countryCode\": \"AS\",\r\n       \"currencyCode\": \"USD\",\r\n       \"phoneCode\": \"1-684\"\r\n   },\r\n    \"AD\":{\r\n       \"country\": \"Andorra\",\r\n       \"countryCode\": \"AD\",\r\n       \"currencyCode\": \"EUR\",\r\n       \"phoneCode\": \"376\"\r\n   },\r\n    \"AO\":{\r\n       \"country\": \"Angola\",\r\n       \"countryCode\": \"AO\",\r\n       \"currencyCode\": \"AOA\",\r\n       \"phoneCode\": \"244\"\r\n   },\r\n    \"AI\":{\r\n       \"country\": \"Anguilla\",\r\n       \"countryCode\": \"AI\",\r\n       \"currencyCode\": \"XCD\",\r\n       \"phoneCode\": \"1-264\"\r\n   },\r\n    \"AQ\":{\r\n       \"country\": \"Antarctica\",\r\n       \"countryCode\": \"AQ\",\r\n       \"currencyCode\": \"\",\r\n       \"phoneCode\": \"\"\r\n   },\r\n    \"AG\":{\r\n       \"country\": \"Antigua and Barbuda\",\r\n       \"countryCode\": \"AG\",\r\n       \"currencyCode\": \"XCD\",\r\n       \"phoneCode\": \"1-268\"\r\n   },\r\n    \"AR\":{\r\n       \"country\": \"Argentina\",\r\n       \"countryCode\": \"AR\",\r\n       \"currencyCode\": \"ARS\",\r\n       \"phoneCode\": \"54\"\r\n   },\r\n    \"AM\":{\r\n       \"country\": \"Armenia\",\r\n       \"countryCode\": \"AM\",\r\n       \"currencyCode\": \"AMD\",\r\n       \"phoneCode\": \"374\"\r\n   },\r\n    \"AW\":{\r\n       \"country\": \"Aruba\",\r\n       \"countryCode\": \"AW\",\r\n       \"currencyCode\": \"AWG\",\r\n       \"phoneCode\": \"297\"\r\n   },\r\n    \"AU\":{\r\n       \"country\": \"Australia\",\r\n       \"countryCode\": \"AU\",\r\n       \"currencyCode\": \"AUD\",\r\n       \"phoneCode\": \"61\"\r\n   },\r\n    \"AT\":{\r\n       \"country\": \"Austria\",\r\n       \"countryCode\": \"AT\",\r\n       \"currencyCode\": \"EUR\",\r\n       \"phoneCode\": \"43\"\r\n   },\r\n    \"AZ\":{\r\n       \"country\": \"Azerbaijan\",\r\n       \"countryCode\": \"AZ\",\r\n       \"currencyCode\": \"AZN\",\r\n       \"phoneCode\": \"994\"\r\n   },\r\n    \"BS\":{\r\n       \"country\": \"Bahamas\",\r\n       \"countryCode\": \"BS\",\r\n       \"currencyCode\": \"BSD\",\r\n       \"phoneCode\": \"1-242\"\r\n   },\r\n    \"BH\":{\r\n       \"country\": \"Bahrain\",\r\n       \"countryCode\": \"BH\",\r\n       \"currencyCode\": \"BHD\",\r\n       \"phoneCode\": \"973\"\r\n   },\r\n    \"BD\":{\r\n       \"country\": \"Bangladesh\",\r\n       \"countryCode\": \"BD\",\r\n       \"currencyCode\": \"BDT\",\r\n       \"phoneCode\": \"880\"\r\n   },\r\n    \"BB\":{\r\n       \"country\": \"Barbados\",\r\n       \"countryCode\": \"BB\",\r\n       \"currencyCode\": \"BBD\",\r\n       \"phoneCode\": \"1-246\"\r\n   },\r\n    \"BY\":{\r\n       \"country\": \"Belarus\",\r\n       \"countryCode\": \"BY\",\r\n       \"currencyCode\": \"BYN\",\r\n       \"phoneCode\": \"375\"\r\n   },\r\n    \"BE\":{\r\n       \"country\": \"Belgium\",\r\n       \"countryCode\": \"BE\",\r\n       \"currencyCode\": \"EUR\",\r\n       \"phoneCode\": \"32\"\r\n   },\r\n    \"BZ\":{\r\n       \"country\": \"Belize\",\r\n       \"countryCode\": \"BZ\",\r\n       \"currencyCode\": \"BZD\",\r\n       \"phoneCode\": \"501\"\r\n   },\r\n    \"BJ\":{\r\n       \"country\": \"Benin\",\r\n       \"countryCode\": \"BJ\",\r\n       \"currencyCode\": \"XOF\",\r\n       \"phoneCode\": \"229\"\r\n   },\r\n    \"BM\":{\r\n       \"country\": \"Bermuda\",\r\n       \"countryCode\": \"BM\",\r\n       \"currencyCode\": \"BMD\",\r\n       \"phoneCode\": \"1-441\"\r\n   },\r\n    \"BT\":{\r\n       \"country\": \"Bhutan\",\r\n       \"countryCode\": \"BT\",\r\n       \"currencyCode\": \"BTN\",\r\n       \"phoneCode\": \"975\"\r\n   },\r\n    \"BO\":{\r\n       \"country\": \"Bolivia\",\r\n       \"countryCode\": \"BO\",\r\n       \"currencyCode\": \"BOB\",\r\n       \"phoneCode\": \"591\"\r\n   },\r\n    \"BQ\":{\r\n       \"country\": \"Bonaire, Saint Eustatius and Saba \",\r\n       \"countryCode\": \"BQ\",\r\n       \"currencyCode\": \"USD\",\r\n       \"phoneCode\": \"599\"\r\n   },\r\n    \"BA\":{\r\n       \"country\": \"Bosnia and Herzegovina\",\r\n       \"countryCode\": \"BA\",\r\n       \"currencyCode\": \"BAM\",\r\n       \"phoneCode\": \"387\"\r\n   },\r\n    \"BW\":{\r\n       \"country\": \"Botswana\",\r\n       \"countryCode\": \"BW\",\r\n       \"currencyCode\": \"BWP\",\r\n       \"phoneCode\": \"267\"\r\n   },\r\n    \"BV\":{\r\n       \"country\": \"Bouvet Island\",\r\n       \"countryCode\": \"BV\",\r\n       \"currencyCode\": \"NOK\",\r\n       \"phoneCode\": \"\"\r\n   },\r\n    \"BR\":{\r\n       \"country\": \"Brazil\",\r\n       \"countryCode\": \"BR\",\r\n       \"currencyCode\": \"BRL\",\r\n       \"phoneCode\": \"55\"\r\n   },\r\n    \"IO\":{\r\n       \"country\": \"British Indian Ocean Territory\",\r\n       \"countryCode\": \"IO\",\r\n       \"currencyCode\": \"USD\",\r\n       \"phoneCode\": \"246\"\r\n   },\r\n    \"VG\":{\r\n       \"country\": \"British Virgin Islands\",\r\n       \"countryCode\": \"VG\",\r\n       \"currencyCode\": \"USD\",\r\n       \"phoneCode\": \"1-284\"\r\n   },\r\n    \"BN\":{\r\n       \"country\": \"Brunei\",\r\n       \"countryCode\": \"BN\",\r\n       \"currencyCode\": \"BND\",\r\n       \"phoneCode\": \"673\"\r\n   },\r\n    \"BG\":{\r\n       \"country\": \"Bulgaria\",\r\n       \"countryCode\": \"BG\",\r\n       \"currencyCode\": \"BGN\",\r\n       \"phoneCode\": \"359\"\r\n   },\r\n    \"BF\":{\r\n       \"country\": \"Burkina Faso\",\r\n       \"countryCode\": \"BF\",\r\n       \"currencyCode\": \"XOF\",\r\n       \"phoneCode\": \"226\"\r\n   },\r\n    \"BI\":{\r\n       \"country\": \"Burundi\",\r\n       \"countryCode\": \"BI\",\r\n       \"currencyCode\": \"BIF\",\r\n       \"phoneCode\": \"257\"\r\n   },\r\n    \"KH\":{\r\n       \"country\": \"Cambodia\",\r\n       \"countryCode\": \"KH\",\r\n       \"currencyCode\": \"KHR\",\r\n       \"phoneCode\": \"855\"\r\n   },\r\n    \"CM\":{\r\n       \"country\": \"Cameroon\",\r\n       \"countryCode\": \"CM\",\r\n       \"currencyCode\": \"XAF\",\r\n       \"phoneCode\": \"237\"\r\n   },\r\n    \"CA\":{\r\n       \"country\": \"Canada\",\r\n       \"countryCode\": \"CA\",\r\n       \"currencyCode\": \"CAD\",\r\n       \"phoneCode\": \"1\"\r\n   },\r\n    \"IC\":{\r\n       \"country\": \"Canary Islands\",\r\n       \"countryCode\": \"IC\",\r\n       \"currencyCode\": \"EUR\",\r\n       \"phoneCode\": \"34\"\r\n   },\r\n    \"CV\":{\r\n       \"country\": \"Cape Verde\",\r\n       \"countryCode\": \"CV\",\r\n       \"currencyCode\": \"CVE\",\r\n       \"phoneCode\": \"238\"\r\n   },\r\n    \"KY\":{\r\n       \"country\": \"Cayman Islands\",\r\n       \"countryCode\": \"KY\",\r\n       \"currencyCode\": \"KYD\",\r\n       \"phoneCode\": \"1-345\"\r\n   },\r\n    \"CF\":{\r\n       \"country\": \"Central African Republic\",\r\n       \"countryCode\": \"CF\",\r\n       \"currencyCode\": \"XAF\",\r\n       \"phoneCode\": \"236\"\r\n   },\r\n    \"TD\":{\r\n       \"country\": \"Chad\",\r\n       \"countryCode\": \"TD\",\r\n       \"currencyCode\": \"XAF\",\r\n       \"phoneCode\": \"235\"\r\n   },\r\n    \"CL\":{\r\n       \"country\": \"Chile\",\r\n       \"countryCode\": \"CL\",\r\n       \"currencyCode\": \"CLP\",\r\n       \"phoneCode\": \"56\"\r\n   },\r\n    \"CN\":{\r\n       \"country\": \"China\",\r\n       \"countryCode\": \"CN\",\r\n       \"currencyCode\": \"CNY\",\r\n       \"phoneCode\": \"86\"\r\n   },\r\n    \"CX\":{\r\n       \"country\": \"Christmas Island\",\r\n       \"countryCode\": \"CX\",\r\n       \"currencyCode\": \"AUD\",\r\n       \"phoneCode\": \"61\"\r\n   },\r\n    \"CC\":{\r\n       \"country\": \"Cocos Islands\",\r\n       \"countryCode\": \"CC\",\r\n       \"currencyCode\": \"AUD\",\r\n       \"phoneCode\": \"61\"\r\n   },\r\n    \"CO\":{\r\n       \"country\": \"Colombia\",\r\n       \"countryCode\": \"CO\",\r\n       \"currencyCode\": \"COP\",\r\n       \"phoneCode\": \"57\"\r\n   },\r\n    \"KM\":{\r\n       \"country\": \"Comoros\",\r\n       \"countryCode\": \"KM\",\r\n       \"currencyCode\": \"KMF\",\r\n       \"phoneCode\": \"269\"\r\n   },\r\n    \"CK\":{\r\n       \"country\": \"Cook Islands\",\r\n       \"countryCode\": \"CK\",\r\n       \"currencyCode\": \"NZD\",\r\n       \"phoneCode\": \"682\"\r\n   },\r\n    \"CR\":{\r\n       \"country\": \"Costa Rica\",\r\n       \"countryCode\": \"CR\",\r\n       \"currencyCode\": \"CRC\",\r\n       \"phoneCode\": \"506\"\r\n   },\r\n    \"HR\":{\r\n       \"country\": \"Croatia\",\r\n       \"countryCode\": \"HR\",\r\n       \"currencyCode\": \"HRK\",\r\n       \"phoneCode\": \"385\"\r\n   },\r\n    \"CU\":{\r\n       \"country\": \"Cuba\",\r\n       \"countryCode\": \"CU\",\r\n       \"currencyCode\": \"CUP\",\r\n       \"phoneCode\": \"53\"\r\n   },\r\n    \"CW\":{\r\n       \"country\": \"Curacao\",\r\n       \"countryCode\": \"CW\",\r\n       \"currencyCode\": \"ANG\",\r\n       \"phoneCode\": \"599\"\r\n   },\r\n    \"CY\":{\r\n       \"country\": \"Cyprus\",\r\n       \"countryCode\": \"CY\",\r\n       \"currencyCode\": \"EUR\",\r\n       \"phoneCode\": \"357\"\r\n   },\r\n    \"CZ\":{\r\n       \"country\": \"Czech Republic\",\r\n       \"countryCode\": \"CZ\",\r\n       \"currencyCode\": \"CZK\",\r\n       \"phoneCode\": \"420\"\r\n   },\r\n    \"CD\":{\r\n       \"country\": \"Democratic Republic of the Congo\",\r\n       \"countryCode\": \"CD\",\r\n       \"currencyCode\": \"CDF\",\r\n       \"phoneCode\": \"243\"\r\n   },\r\n    \"DK\":{\r\n       \"country\": \"Denmark\",\r\n       \"countryCode\": \"DK\",\r\n       \"currencyCode\": \"DKK\",\r\n       \"phoneCode\": \"45\"\r\n   },\r\n    \"DJ\":{\r\n       \"country\": \"Djibouti\",\r\n       \"countryCode\": \"DJ\",\r\n       \"currencyCode\": \"DJF\",\r\n       \"phoneCode\": \"253\"\r\n   },\r\n    \"DM\":{\r\n       \"country\": \"Dominica\",\r\n       \"countryCode\": \"DM\",\r\n       \"currencyCode\": \"XCD\",\r\n       \"phoneCode\": \"1-767\"\r\n   },\r\n    \"DO\":{\r\n       \"country\": \"Dominican Republic\",\r\n       \"countryCode\": \"DO\",\r\n       \"currencyCode\": \"DOP\",\r\n       \"phoneCode\": \"1-809 and 1-829\"\r\n   },\r\n    \"TL\":{\r\n       \"country\": \"East Timor\",\r\n       \"countryCode\": \"TL\",\r\n       \"currencyCode\": \"USD\",\r\n       \"phoneCode\": \"670\"\r\n   },\r\n    \"EC\":{\r\n       \"country\": \"Ecuador\",\r\n       \"countryCode\": \"EC\",\r\n       \"currencyCode\": \"USD\",\r\n       \"phoneCode\": \"593\"\r\n   },\r\n    \"EG\":{\r\n       \"country\": \"Egypt\",\r\n       \"countryCode\": \"EG\",\r\n       \"currencyCode\": \"EGP\",\r\n       \"phoneCode\": \"20\"\r\n   },\r\n    \"SV\":{\r\n       \"country\": \"El Salvador\",\r\n       \"countryCode\": \"SV\",\r\n       \"currencyCode\": \"USD\",\r\n       \"phoneCode\": \"503\"\r\n   },\r\n    \"GQ\":{\r\n       \"country\": \"Equatorial Guinea\",\r\n       \"countryCode\": \"GQ\",\r\n       \"currencyCode\": \"XAF\",\r\n       \"phoneCode\": \"240\"\r\n   },\r\n    \"ER\":{\r\n       \"country\": \"Eritrea\",\r\n       \"countryCode\": \"ER\",\r\n       \"currencyCode\": \"ERN\",\r\n       \"phoneCode\": \"291\"\r\n   },\r\n    \"EE\":{\r\n       \"country\": \"Estonia\",\r\n       \"countryCode\": \"EE\",\r\n       \"currencyCode\": \"EUR\",\r\n       \"phoneCode\": \"372\"\r\n   },\r\n    \"ET\":{\r\n       \"country\": \"Ethiopia\",\r\n       \"countryCode\": \"ET\",\r\n       \"currencyCode\": \"ETB\",\r\n       \"phoneCode\": \"251\"\r\n   },\r\n    \"FK\":{\r\n       \"country\": \"Falkland Islands\",\r\n       \"countryCode\": \"FK\",\r\n       \"currencyCode\": \"FKP\",\r\n       \"phoneCode\": \"500\"\r\n   },\r\n    \"FO\":{\r\n       \"country\": \"Faroe Islands\",\r\n       \"countryCode\": \"FO\",\r\n       \"currencyCode\": \"DKK\",\r\n       \"phoneCode\": \"298\"\r\n   },\r\n    \"FJ\":{\r\n       \"country\": \"Fiji\",\r\n       \"countryCode\": \"FJ\",\r\n       \"currencyCode\": \"FJD\",\r\n       \"phoneCode\": \"679\"\r\n   },\r\n    \"FI\":{\r\n       \"country\": \"Finland\",\r\n       \"countryCode\": \"FI\",\r\n       \"currencyCode\": \"EUR\",\r\n       \"phoneCode\": \"358\"\r\n   },\r\n    \"FR\":{\r\n       \"country\": \"France\",\r\n       \"countryCode\": \"FR\",\r\n       \"currencyCode\": \"EUR\",\r\n       \"phoneCode\": \"33\"\r\n   },\r\n    \"GF\":{\r\n       \"country\": \"French Guiana\",\r\n       \"countryCode\": \"GF\",\r\n       \"currencyCode\": \"EUR\",\r\n       \"phoneCode\": \"594\"\r\n   },\r\n    \"PF\":{\r\n       \"country\": \"French Polynesia\",\r\n       \"countryCode\": \"PF\",\r\n       \"currencyCode\": \"XPF\",\r\n       \"phoneCode\": \"689\"\r\n   },\r\n    \"TF\":{\r\n       \"country\": \"French Southern Territories\",\r\n       \"countryCode\": \"TF\",\r\n       \"currencyCode\": \"EUR\",\r\n       \"phoneCode\": \"\"\r\n   },\r\n    \"GA\":{\r\n       \"country\": \"Gabon\",\r\n       \"countryCode\": \"GA\",\r\n       \"currencyCode\": \"XAF\",\r\n       \"phoneCode\": \"241\"\r\n   },\r\n    \"GM\":{\r\n       \"country\": \"Gambia\",\r\n       \"countryCode\": \"GM\",\r\n       \"currencyCode\": \"GMD\",\r\n       \"phoneCode\": \"220\"\r\n   },\r\n    \"GE\":{\r\n       \"country\": \"Georgia\",\r\n       \"countryCode\": \"GE\",\r\n       \"currencyCode\": \"GEL\",\r\n       \"phoneCode\": \"995\"\r\n   },\r\n    \"DE\":{\r\n       \"country\": \"Germany\",\r\n       \"countryCode\": \"DE\",\r\n       \"currencyCode\": \"EUR\",\r\n       \"phoneCode\": \"49\"\r\n   },\r\n    \"GH\":{\r\n       \"country\": \"Ghana\",\r\n       \"countryCode\": \"GH\",\r\n       \"currencyCode\": \"GHS\",\r\n       \"phoneCode\": \"233\"\r\n   },\r\n    \"GI\":{\r\n       \"country\": \"Gibraltar\",\r\n       \"countryCode\": \"GI\",\r\n       \"currencyCode\": \"GIP\",\r\n       \"phoneCode\": \"350\"\r\n   },\r\n    \"GR\":{\r\n       \"country\": \"Greece\",\r\n       \"countryCode\": \"GR\",\r\n       \"currencyCode\": \"EUR\",\r\n       \"phoneCode\": \"30\"\r\n   },\r\n    \"GL\":{\r\n       \"country\": \"Greenland\",\r\n       \"countryCode\": \"GL\",\r\n       \"currencyCode\": \"DKK\",\r\n       \"phoneCode\": \"299\"\r\n   },\r\n    \"GD\":{\r\n       \"country\": \"Grenada\",\r\n       \"countryCode\": \"GD\",\r\n       \"currencyCode\": \"XCD\",\r\n       \"phoneCode\": \"1-473\"\r\n   },\r\n    \"GP\":{\r\n       \"country\": \"Guadeloupe\",\r\n       \"countryCode\": \"GP\",\r\n       \"currencyCode\": \"EUR\",\r\n       \"phoneCode\": \"590\"\r\n   },\r\n    \"GU\":{\r\n       \"country\": \"Guam\",\r\n       \"countryCode\": \"GU\",\r\n       \"currencyCode\": \"USD\",\r\n       \"phoneCode\": \"1-671\"\r\n   },\r\n    \"GT\":{\r\n       \"country\": \"Guatemala\",\r\n       \"countryCode\": \"GT\",\r\n       \"currencyCode\": \"GTQ\",\r\n       \"phoneCode\": \"502\"\r\n   },\r\n    \"GG\":{\r\n       \"country\": \"Guernsey\",\r\n       \"countryCode\": \"GG\",\r\n       \"currencyCode\": \"GBP\",\r\n       \"phoneCode\": \"44-1481\"\r\n   },\r\n    \"GN\":{\r\n       \"country\": \"Guinea\",\r\n       \"countryCode\": \"GN\",\r\n       \"currencyCode\": \"GNF\",\r\n       \"phoneCode\": \"224\"\r\n   },\r\n    \"GW\":{\r\n       \"country\": \"Guinea-Bissau\",\r\n       \"countryCode\": \"GW\",\r\n       \"currencyCode\": \"XOF\",\r\n       \"phoneCode\": \"245\"\r\n   },\r\n    \"GY\":{\r\n       \"country\": \"Guyana\",\r\n       \"countryCode\": \"GY\",\r\n       \"currencyCode\": \"GYD\",\r\n       \"phoneCode\": \"592\"\r\n   },\r\n    \"HT\":{\r\n       \"country\": \"Haiti\",\r\n       \"countryCode\": \"HT\",\r\n       \"currencyCode\": \"HTG\",\r\n       \"phoneCode\": \"509\"\r\n   },\r\n    \"HM\":{\r\n       \"country\": \"Heard Island and McDonald Islands\",\r\n       \"countryCode\": \"HM\",\r\n       \"currencyCode\": \"AUD\",\r\n       \"phoneCode\": \" \"\r\n   },\r\n    \"HN\":{\r\n       \"country\": \"Honduras\",\r\n       \"countryCode\": \"HN\",\r\n       \"currencyCode\": \"HNL\",\r\n       \"phoneCode\": \"504\"\r\n   },\r\n    \"HK\":{\r\n       \"country\": \"Hong Kong\",\r\n       \"countryCode\": \"HK\",\r\n       \"currencyCode\": \"HKD\",\r\n       \"phoneCode\": \"852\"\r\n   },\r\n    \"HU\":{\r\n       \"country\": \"Hungary\",\r\n       \"countryCode\": \"HU\",\r\n       \"currencyCode\": \"HUF\",\r\n       \"phoneCode\": \"36\"\r\n   },\r\n    \"IS\":{\r\n       \"country\": \"Iceland\",\r\n       \"countryCode\": \"IS\",\r\n       \"currencyCode\": \"ISK\",\r\n       \"phoneCode\": \"354\"\r\n   },\r\n    \"IN\":{\r\n       \"country\": \"India\",\r\n       \"countryCode\": \"IN\",\r\n       \"currencyCode\": \"INR\",\r\n       \"phoneCode\": \"91\"\r\n   },\r\n    \"ID\":{\r\n       \"country\": \"Indonesia\",\r\n       \"countryCode\": \"ID\",\r\n       \"currencyCode\": \"IDR\",\r\n       \"phoneCode\": \"62\"\r\n   },\r\n    \"IR\":{\r\n       \"country\": \"Iran\",\r\n       \"countryCode\": \"IR\",\r\n       \"currencyCode\": \"IRR\",\r\n       \"phoneCode\": \"98\"\r\n   },\r\n    \"IQ\":{\r\n       \"country\": \"Iraq\",\r\n       \"countryCode\": \"IQ\",\r\n       \"currencyCode\": \"IQD\",\r\n       \"phoneCode\": \"964\"\r\n   },\r\n    \"IE\":{\r\n       \"country\": \"Ireland\",\r\n       \"countryCode\": \"IE\",\r\n       \"currencyCode\": \"EUR\",\r\n       \"phoneCode\": \"353\"\r\n   },\r\n    \"IM\":{\r\n       \"country\": \"Isle of Man\",\r\n       \"countryCode\": \"IM\",\r\n       \"currencyCode\": \"GBP\",\r\n       \"phoneCode\": \"44-1624\"\r\n   },\r\n    \"IL\":{\r\n       \"country\": \"Israel\",\r\n       \"countryCode\": \"IL\",\r\n       \"currencyCode\": \"ILS\",\r\n       \"phoneCode\": \"972\"\r\n   },\r\n    \"IT\":{\r\n       \"country\": \"Italy\",\r\n       \"countryCode\": \"IT\",\r\n       \"currencyCode\": \"EUR\",\r\n       \"phoneCode\": \"39\"\r\n   },\r\n    \"CI\":{\r\n       \"country\": \"Ivory Coast\",\r\n       \"countryCode\": \"CI\",\r\n       \"currencyCode\": \"XOF\",\r\n       \"phoneCode\": \"225\"\r\n   },\r\n    \"JM\":{\r\n       \"country\": \"Jamaica\",\r\n       \"countryCode\": \"JM\",\r\n       \"currencyCode\": \"JMD\",\r\n       \"phoneCode\": \"1-876\"\r\n   },\r\n    \"JP\":{\r\n       \"country\": \"Japan\",\r\n       \"countryCode\": \"JP\",\r\n       \"currencyCode\": \"JPY\",\r\n       \"phoneCode\": \"81\"\r\n   },\r\n    \"JE\":{\r\n       \"country\": \"Jersey\",\r\n       \"countryCode\": \"JE\",\r\n       \"currencyCode\": \"GBP\",\r\n       \"phoneCode\": \"44-1534\"\r\n   },\r\n    \"JO\":{\r\n       \"country\": \"Jordan\",\r\n       \"countryCode\": \"JO\",\r\n       \"currencyCode\": \"JOD\",\r\n       \"phoneCode\": \"962\"\r\n   },\r\n    \"KZ\":{\r\n       \"country\": \"Kazakhstan\",\r\n       \"countryCode\": \"KZ\",\r\n       \"currencyCode\": \"KZT\",\r\n       \"phoneCode\": \"7\"\r\n   },\r\n    \"KE\":{\r\n       \"country\": \"Kenya\",\r\n       \"countryCode\": \"KE\",\r\n       \"currencyCode\": \"KES\",\r\n       \"phoneCode\": \"254\"\r\n   },\r\n    \"KI\":{\r\n       \"country\": \"Kiribati\",\r\n       \"countryCode\": \"KI\",\r\n       \"currencyCode\": \"AUD\",\r\n       \"phoneCode\": \"686\"\r\n   },\r\n    \"XK\":{\r\n       \"country\": \"Kosovo\",\r\n       \"countryCode\": \"XK\",\r\n       \"currencyCode\": \"EUR\",\r\n       \"phoneCode\": \"\"\r\n   },\r\n    \"KW\":{\r\n       \"country\": \"Kuwait\",\r\n       \"countryCode\": \"KW\",\r\n       \"currencyCode\": \"KWD\",\r\n       \"phoneCode\": \"965\"\r\n   },\r\n    \"KG\":{\r\n       \"country\": \"Kyrgyzstan\",\r\n       \"countryCode\": \"KG\",\r\n       \"currencyCode\": \"KGS\",\r\n       \"phoneCode\": \"996\"\r\n   },\r\n    \"LA\":{\r\n       \"country\": \"Laos\",\r\n       \"countryCode\": \"LA\",\r\n       \"currencyCode\": \"LAK\",\r\n       \"phoneCode\": \"856\"\r\n   },\r\n    \"LV\":{\r\n       \"country\": \"Latvia\",\r\n       \"countryCode\": \"LV\",\r\n       \"currencyCode\": \"EUR\",\r\n       \"phoneCode\": \"371\"\r\n   },\r\n    \"LB\":{\r\n       \"country\": \"Lebanon\",\r\n       \"countryCode\": \"LB\",\r\n       \"currencyCode\": \"LBP\",\r\n       \"phoneCode\": \"961\"\r\n   },\r\n    \"LS\":{\r\n       \"country\": \"Lesotho\",\r\n       \"countryCode\": \"LS\",\r\n       \"currencyCode\": \"LSL\",\r\n       \"phoneCode\": \"266\"\r\n   },\r\n    \"LR\":{\r\n       \"country\": \"Liberia\",\r\n       \"countryCode\": \"LR\",\r\n       \"currencyCode\": \"LRD\",\r\n       \"phoneCode\": \"231\"\r\n   },\r\n    \"LY\":{\r\n       \"country\": \"Libya\",\r\n       \"countryCode\": \"LY\",\r\n       \"currencyCode\": \"LYD\",\r\n       \"phoneCode\": \"218\"\r\n   },\r\n    \"LI\":{\r\n       \"country\": \"Liechtenstein\",\r\n       \"countryCode\": \"LI\",\r\n       \"currencyCode\": \"CHF\",\r\n       \"phoneCode\": \"423\"\r\n   },\r\n    \"LT\":{\r\n       \"country\": \"Lithuania\",\r\n       \"countryCode\": \"LT\",\r\n       \"currencyCode\": \"EUR\",\r\n       \"phoneCode\": \"370\"\r\n   },\r\n    \"LU\":{\r\n       \"country\": \"Luxembourg\",\r\n       \"countryCode\": \"LU\",\r\n       \"currencyCode\": \"EUR\",\r\n       \"phoneCode\": \"352\"\r\n   },\r\n    \"MO\":{\r\n       \"country\": \"Macao\",\r\n       \"countryCode\": \"MO\",\r\n       \"currencyCode\": \"MOP\",\r\n       \"phoneCode\": \"853\"\r\n   },\r\n    \"MK\":{\r\n       \"country\": \"Macedonia\",\r\n       \"countryCode\": \"MK\",\r\n       \"currencyCode\": \"MKD\",\r\n       \"phoneCode\": \"389\"\r\n   },\r\n    \"MG\":{\r\n       \"country\": \"Madagascar\",\r\n       \"countryCode\": \"MG\",\r\n       \"currencyCode\": \"MGA\",\r\n       \"phoneCode\": \"261\"\r\n   },\r\n    \"MW\":{\r\n       \"country\": \"Malawi\",\r\n       \"countryCode\": \"MW\",\r\n       \"currencyCode\": \"MWK\",\r\n       \"phoneCode\": \"265\"\r\n   },\r\n    \"MY\":{\r\n       \"country\": \"Malaysia\",\r\n       \"countryCode\": \"MY\",\r\n       \"currencyCode\": \"MYR\",\r\n       \"phoneCode\": \"60\"\r\n   },\r\n    \"MV\":{\r\n       \"country\": \"Maldives\",\r\n       \"countryCode\": \"MV\",\r\n       \"currencyCode\": \"MVR\",\r\n       \"phoneCode\": \"960\"\r\n   },\r\n    \"ML\":{\r\n       \"country\": \"Mali\",\r\n       \"countryCode\": \"ML\",\r\n       \"currencyCode\": \"XOF\",\r\n       \"phoneCode\": \"223\"\r\n   },\r\n    \"MT\":{\r\n       \"country\": \"Malta\",\r\n       \"countryCode\": \"MT\",\r\n       \"currencyCode\": \"EUR\",\r\n       \"phoneCode\": \"356\"\r\n   },\r\n    \"MH\":{\r\n       \"country\": \"Marshall Islands\",\r\n       \"countryCode\": \"MH\",\r\n       \"currencyCode\": \"USD\",\r\n       \"phoneCode\": \"692\"\r\n   },\r\n    \"MQ\":{\r\n       \"country\": \"Martinique\",\r\n       \"countryCode\": \"MQ\",\r\n       \"currencyCode\": \"EUR\",\r\n       \"phoneCode\": \"596\"\r\n   },\r\n    \"MR\":{\r\n       \"country\": \"Mauritania\",\r\n       \"countryCode\": \"MR\",\r\n       \"currencyCode\": \"MRO\",\r\n       \"phoneCode\": \"222\"\r\n   },\r\n    \"MU\":{\r\n       \"country\": \"Mauritius\",\r\n       \"countryCode\": \"MU\",\r\n       \"currencyCode\": \"MUR\",\r\n       \"phoneCode\": \"230\"\r\n   },\r\n    \"YT\":{\r\n       \"country\": \"Mayotte\",\r\n       \"countryCode\": \"YT\",\r\n       \"currencyCode\": \"EUR\",\r\n       \"phoneCode\": \"262\"\r\n   },\r\n    \"MX\":{\r\n       \"country\": \"Mexico\",\r\n       \"countryCode\": \"MX\",\r\n       \"currencyCode\": \"MXN\",\r\n       \"phoneCode\": \"52\"\r\n   },\r\n    \"FM\":{\r\n       \"country\": \"Micronesia\",\r\n       \"countryCode\": \"FM\",\r\n       \"currencyCode\": \"USD\",\r\n       \"phoneCode\": \"691\"\r\n   },\r\n    \"MD\":{\r\n       \"country\": \"Moldova\",\r\n       \"countryCode\": \"MD\",\r\n       \"currencyCode\": \"MDL\",\r\n       \"phoneCode\": \"373\"\r\n   },\r\n    \"MC\":{\r\n       \"country\": \"Monaco\",\r\n       \"countryCode\": \"MC\",\r\n       \"currencyCode\": \"EUR\",\r\n       \"phoneCode\": \"377\"\r\n   },\r\n    \"MN\":{\r\n       \"country\": \"Mongolia\",\r\n       \"countryCode\": \"MN\",\r\n       \"currencyCode\": \"MNT\",\r\n       \"phoneCode\": \"976\"\r\n   },\r\n    \"ME\":{\r\n       \"country\": \"Montenegro\",\r\n       \"countryCode\": \"ME\",\r\n       \"currencyCode\": \"EUR\",\r\n       \"phoneCode\": \"382\"\r\n   },\r\n    \"MS\":{\r\n       \"country\": \"Montserrat\",\r\n       \"countryCode\": \"MS\",\r\n       \"currencyCode\": \"XCD\",\r\n       \"phoneCode\": \"1-664\"\r\n   },\r\n    \"MA\":{\r\n       \"country\": \"Morocco\",\r\n       \"countryCode\": \"MA\",\r\n       \"currencyCode\": \"MAD\",\r\n       \"phoneCode\": \"212\"\r\n   },\r\n    \"MZ\":{\r\n       \"country\": \"Mozambique\",\r\n       \"countryCode\": \"MZ\",\r\n       \"currencyCode\": \"MZN\",\r\n       \"phoneCode\": \"258\"\r\n   },\r\n    \"MM\":{\r\n       \"country\": \"Myanmar\",\r\n       \"countryCode\": \"MM\",\r\n       \"currencyCode\": \"MMK\",\r\n       \"phoneCode\": \"95\"\r\n   },\r\n    \"NA\":{\r\n       \"country\": \"Namibia\",\r\n       \"countryCode\": \"NA\",\r\n       \"currencyCode\": \"NAD\",\r\n       \"phoneCode\": \"264\"\r\n   },\r\n    \"NR\":{\r\n       \"country\": \"Nauru\",\r\n       \"countryCode\": \"NR\",\r\n       \"currencyCode\": \"AUD\",\r\n       \"phoneCode\": \"674\"\r\n   },\r\n    \"NP\":{\r\n       \"country\": \"Nepal\",\r\n       \"countryCode\": \"NP\",\r\n       \"currencyCode\": \"NPR\",\r\n       \"phoneCode\": \"977\"\r\n   },\r\n    \"NL\":{\r\n       \"country\": \"Netherlands\",\r\n       \"countryCode\": \"NL\",\r\n       \"currencyCode\": \"EUR\",\r\n       \"phoneCode\": \"31\"\r\n   },\r\n    \"NC\":{\r\n       \"country\": \"New Caledonia\",\r\n       \"countryCode\": \"NC\",\r\n       \"currencyCode\": \"XPF\",\r\n       \"phoneCode\": \"687\"\r\n   },\r\n    \"NZ\":{\r\n       \"country\": \"New Zealand\",\r\n       \"countryCode\": \"NZ\",\r\n       \"currencyCode\": \"NZD\",\r\n       \"phoneCode\": \"64\"\r\n   },\r\n    \"NI\":{\r\n       \"country\": \"Nicaragua\",\r\n       \"countryCode\": \"NI\",\r\n       \"currencyCode\": \"NIO\",\r\n       \"phoneCode\": \"505\"\r\n   },\r\n    \"NE\":{\r\n       \"country\": \"Niger\",\r\n       \"countryCode\": \"NE\",\r\n       \"currencyCode\": \"XOF\",\r\n       \"phoneCode\": \"227\"\r\n   },\r\n    \"NG\":{\r\n       \"country\": \"Nigeria\",\r\n       \"countryCode\": \"NG\",\r\n       \"currencyCode\": \"NGN\",\r\n       \"phoneCode\": \"234\"\r\n   },\r\n    \"NU\":{\r\n       \"country\": \"Niue\",\r\n       \"countryCode\": \"NU\",\r\n       \"currencyCode\": \"NZD\",\r\n       \"phoneCode\": \"683\"\r\n   },\r\n    \"NF\":{\r\n       \"country\": \"Norfolk Island\",\r\n       \"countryCode\": \"NF\",\r\n       \"currencyCode\": \"AUD\",\r\n       \"phoneCode\": \"672\"\r\n   },\r\n    \"KP\":{\r\n       \"country\": \"North Korea\",\r\n       \"countryCode\": \"KP\",\r\n       \"currencyCode\": \"KPW\",\r\n       \"phoneCode\": \"850\"\r\n   },\r\n    \"MP\":{\r\n       \"country\": \"Northern Mariana Islands\",\r\n       \"countryCode\": \"MP\",\r\n       \"currencyCode\": \"USD\",\r\n       \"phoneCode\": \"1-670\"\r\n   },\r\n    \"NO\":{\r\n       \"country\": \"Norway\",\r\n       \"countryCode\": \"NO\",\r\n       \"currencyCode\": \"NOK\",\r\n       \"phoneCode\": \"47\"\r\n   },\r\n    \"OM\":{\r\n       \"country\": \"Oman\",\r\n       \"countryCode\": \"OM\",\r\n       \"currencyCode\": \"OMR\",\r\n       \"phoneCode\": \"968\"\r\n   },\r\n    \"PK\":{\r\n       \"country\": \"Pakistan\",\r\n       \"countryCode\": \"PK\",\r\n       \"currencyCode\": \"PKR\",\r\n       \"phoneCode\": \"92\"\r\n   },\r\n    \"PW\":{\r\n       \"country\": \"Palau\",\r\n       \"countryCode\": \"PW\",\r\n       \"currencyCode\": \"USD\",\r\n       \"phoneCode\": \"680\"\r\n   },\r\n    \"PS\":{\r\n       \"country\": \"Palestinian Territory\",\r\n       \"countryCode\": \"PS\",\r\n       \"currencyCode\": \"ILS\",\r\n       \"phoneCode\": \"970\"\r\n   },\r\n    \"PA\":{\r\n       \"country\": \"Panama\",\r\n       \"countryCode\": \"PA\",\r\n       \"currencyCode\": \"PAB\",\r\n       \"phoneCode\": \"507\"\r\n   },\r\n    \"PG\":{\r\n       \"country\": \"Papua New Guinea\",\r\n       \"countryCode\": \"PG\",\r\n       \"currencyCode\": \"PGK\",\r\n       \"phoneCode\": \"675\"\r\n   },\r\n    \"PY\":{\r\n       \"country\": \"Paraguay\",\r\n       \"countryCode\": \"PY\",\r\n       \"currencyCode\": \"PYG\",\r\n       \"phoneCode\": \"595\"\r\n   },\r\n    \"PE\":{\r\n       \"country\": \"Peru\",\r\n       \"countryCode\": \"PE\",\r\n       \"currencyCode\": \"PEN\",\r\n       \"phoneCode\": \"51\"\r\n   },\r\n    \"PH\":{\r\n       \"country\": \"Philippines\",\r\n       \"countryCode\": \"PH\",\r\n       \"currencyCode\": \"PHP\",\r\n       \"phoneCode\": \"63\"\r\n   },\r\n    \"PN\":{\r\n       \"country\": \"Pitcairn\",\r\n       \"countryCode\": \"PN\",\r\n       \"currencyCode\": \"NZD\",\r\n       \"phoneCode\": \"870\"\r\n   },\r\n    \"PL\":{\r\n       \"country\": \"Poland\",\r\n       \"countryCode\": \"PL\",\r\n       \"currencyCode\": \"PLN\",\r\n       \"phoneCode\": \"48\"\r\n   },\r\n    \"PT\":{\r\n       \"country\": \"Portugal\",\r\n       \"countryCode\": \"PT\",\r\n       \"currencyCode\": \"EUR\",\r\n       \"phoneCode\": \"351\"\r\n   },\r\n    \"PR\":{\r\n       \"country\": \"Puerto Rico\",\r\n       \"countryCode\": \"PR\",\r\n       \"currencyCode\": \"USD\",\r\n       \"phoneCode\": \"1-787 and 1-939\"\r\n   },\r\n    \"QA\":{\r\n       \"country\": \"Qatar\",\r\n       \"countryCode\": \"QA\",\r\n       \"currencyCode\": \"QAR\",\r\n       \"phoneCode\": \"974\"\r\n   },\r\n    \"CG\":{\r\n       \"country\": \"Republic of the Congo\",\r\n       \"countryCode\": \"CG\",\r\n       \"currencyCode\": \"XAF\",\r\n       \"phoneCode\": \"242\"\r\n   },\r\n    \"RE\":{\r\n       \"country\": \"Reunion\",\r\n       \"countryCode\": \"RE\",\r\n       \"currencyCode\": \"EUR\",\r\n       \"phoneCode\": \"262\"\r\n   },\r\n    \"RO\":{\r\n       \"country\": \"Romania\",\r\n       \"countryCode\": \"RO\",\r\n       \"currencyCode\": \"RON\",\r\n       \"phoneCode\": \"40\"\r\n   },\r\n    \"RU\":{\r\n       \"country\": \"Russia\",\r\n       \"countryCode\": \"RU\",\r\n       \"currencyCode\": \"RUB\",\r\n       \"phoneCode\": \"7\"\r\n   },\r\n    \"RW\":{\r\n       \"country\": \"Rwanda\",\r\n       \"countryCode\": \"RW\",\r\n       \"currencyCode\": \"RWF\",\r\n       \"phoneCode\": \"250\"\r\n   },\r\n    \"BL\":{\r\n       \"country\": \"Saint Barthelemy\",\r\n       \"countryCode\": \"BL\",\r\n       \"currencyCode\": \"EUR\",\r\n       \"phoneCode\": \"590\"\r\n   },\r\n    \"SH\":{\r\n       \"country\": \"Saint Helena\",\r\n       \"countryCode\": \"SH\",\r\n       \"currencyCode\": \"SHP\",\r\n       \"phoneCode\": \"290\"\r\n   },\r\n    \"KN\":{\r\n       \"country\": \"Saint Kitts and Nevis\",\r\n       \"countryCode\": \"KN\",\r\n       \"currencyCode\": \"XCD\",\r\n       \"phoneCode\": \"1-869\"\r\n   },\r\n    \"LC\":{\r\n       \"country\": \"Saint Lucia\",\r\n       \"countryCode\": \"LC\",\r\n       \"currencyCode\": \"XCD\",\r\n       \"phoneCode\": \"1-758\"\r\n   },\r\n    \"MF\":{\r\n       \"country\": \"Saint Martin\",\r\n       \"countryCode\": \"MF\",\r\n       \"currencyCode\": \"EUR\",\r\n       \"phoneCode\": \"590\"\r\n   },\r\n    \"PM\":{\r\n       \"country\": \"Saint Pierre and Miquelon\",\r\n       \"countryCode\": \"PM\",\r\n       \"currencyCode\": \"EUR\",\r\n       \"phoneCode\": \"508\"\r\n   },\r\n    \"VC\":{\r\n       \"country\": \"Saint Vincent and the Grenadines\",\r\n       \"countryCode\": \"VC\",\r\n       \"currencyCode\": \"XCD\",\r\n       \"phoneCode\": \"1-784\"\r\n   },\r\n    \"WS\":{\r\n       \"country\": \"Samoa\",\r\n       \"countryCode\": \"WS\",\r\n       \"currencyCode\": \"WST\",\r\n       \"phoneCode\": \"685\"\r\n   },\r\n    \"SM\":{\r\n       \"country\": \"San Marino\",\r\n       \"countryCode\": \"SM\",\r\n       \"currencyCode\": \"EUR\",\r\n       \"phoneCode\": \"378\"\r\n   },\r\n    \"ST\":{\r\n       \"country\": \"Sao Tome and Principe\",\r\n       \"countryCode\": \"ST\",\r\n       \"currencyCode\": \"STD\",\r\n       \"phoneCode\": \"239\"\r\n   },\r\n    \"SA\":{\r\n       \"country\": \"Saudi Arabia\",\r\n       \"countryCode\": \"SA\",\r\n       \"currencyCode\": \"SAR\",\r\n       \"phoneCode\": \"966\"\r\n   },\r\n    \"SN\":{\r\n       \"country\": \"Senegal\",\r\n       \"countryCode\": \"SN\",\r\n       \"currencyCode\": \"XOF\",\r\n       \"phoneCode\": \"221\"\r\n   },\r\n    \"RS\":{\r\n       \"country\": \"Serbia\",\r\n       \"countryCode\": \"RS\",\r\n       \"currencyCode\": \"RSD\",\r\n       \"phoneCode\": \"381\"\r\n   },\r\n    \"SC\":{\r\n       \"country\": \"Seychelles\",\r\n       \"countryCode\": \"SC\",\r\n       \"currencyCode\": \"SCR\",\r\n       \"phoneCode\": \"248\"\r\n   },\r\n    \"SL\":{\r\n       \"country\": \"Sierra Leone\",\r\n       \"countryCode\": \"SL\",\r\n       \"currencyCode\": \"SLL\",\r\n       \"phoneCode\": \"232\"\r\n   },\r\n    \"SG\":{\r\n       \"country\": \"Singapore\",\r\n       \"countryCode\": \"SG\",\r\n       \"currencyCode\": \"SGD\",\r\n       \"phoneCode\": \"65\"\r\n   },\r\n    \"SX\":{\r\n       \"country\": \"Sint Maarten\",\r\n       \"countryCode\": \"SX\",\r\n       \"currencyCode\": \"ANG\",\r\n       \"phoneCode\": \"599\"\r\n   },\r\n    \"SK\":{\r\n       \"country\": \"Slovakia\",\r\n       \"countryCode\": \"SK\",\r\n       \"currencyCode\": \"EUR\",\r\n       \"phoneCode\": \"421\"\r\n   },\r\n    \"SI\":{\r\n       \"country\": \"Slovenia\",\r\n       \"countryCode\": \"SI\",\r\n       \"currencyCode\": \"EUR\",\r\n       \"phoneCode\": \"386\"\r\n   },\r\n    \"SB\":{\r\n       \"country\": \"Solomon Islands\",\r\n       \"countryCode\": \"SB\",\r\n       \"currencyCode\": \"SBD\",\r\n       \"phoneCode\": \"677\"\r\n   },\r\n    \"SO\":{\r\n       \"country\": \"Somalia\",\r\n       \"countryCode\": \"SO\",\r\n       \"currencyCode\": \"SOS\",\r\n       \"phoneCode\": \"252\"\r\n   },\r\n    \"ZA\":{\r\n       \"country\": \"South Africa\",\r\n       \"countryCode\": \"ZA\",\r\n       \"currencyCode\": \"ZAR\",\r\n       \"phoneCode\": \"27\"\r\n   },\r\n    \"GS\":{\r\n       \"country\": \"South Georgia and the South Sandwich Islands\",\r\n       \"countryCode\": \"GS\",\r\n       \"currencyCode\": \"GBP\",\r\n       \"phoneCode\": \"\"\r\n   },\r\n    \"KR\":{\r\n       \"country\": \"South Korea\",\r\n       \"countryCode\": \"KR\",\r\n       \"currencyCode\": \"KRW\",\r\n       \"phoneCode\": \"82\"\r\n   },\r\n    \"SS\":{\r\n       \"country\": \"South Sudan\",\r\n       \"countryCode\": \"SS\",\r\n       \"currencyCode\": \"SSP\",\r\n       \"phoneCode\": \"211\"\r\n   },\r\n    \"ES\":{\r\n       \"country\": \"Spain\",\r\n       \"countryCode\": \"ES\",\r\n       \"currencyCode\": \"EUR\",\r\n       \"phoneCode\": \"34\"\r\n   },\r\n    \"LK\":{\r\n       \"country\": \"Sri Lanka\",\r\n       \"countryCode\": \"LK\",\r\n       \"currencyCode\": \"LKR\",\r\n       \"phoneCode\": \"94\"\r\n   },\r\n    \"SD\":{\r\n       \"country\": \"Sudan\",\r\n       \"countryCode\": \"SD\",\r\n       \"currencyCode\": \"SDG\",\r\n       \"phoneCode\": \"249\"\r\n   },\r\n    \"SR\":{\r\n       \"country\": \"Suriname\",\r\n       \"countryCode\": \"SR\",\r\n       \"currencyCode\": \"SRD\",\r\n       \"phoneCode\": \"597\"\r\n   },\r\n    \"SJ\":{\r\n       \"country\": \"Svalbard and Jan Mayen\",\r\n       \"countryCode\": \"SJ\",\r\n       \"currencyCode\": \"NOK\",\r\n       \"phoneCode\": \"47\"\r\n   },\r\n    \"SZ\":{\r\n       \"country\": \"Swaziland\",\r\n       \"countryCode\": \"SZ\",\r\n       \"currencyCode\": \"SZL\",\r\n       \"phoneCode\": \"268\"\r\n   },\r\n    \"SE\":{\r\n       \"country\": \"Sweden\",\r\n       \"countryCode\": \"SE\",\r\n       \"currencyCode\": \"SEK\",\r\n       \"phoneCode\": \"46\"\r\n   },\r\n    \"CH\":{\r\n       \"country\": \"Switzerland\",\r\n       \"countryCode\": \"CH\",\r\n       \"currencyCode\": \"CHF\",\r\n       \"phoneCode\": \"41\"\r\n   },\r\n    \"SY\":{\r\n       \"country\": \"Syria\",\r\n       \"countryCode\": \"SY\",\r\n       \"currencyCode\": \"SYP\",\r\n       \"phoneCode\": \"963\"\r\n   },\r\n    \"TW\":{\r\n       \"country\": \"Taiwan\",\r\n       \"countryCode\": \"TW\",\r\n       \"currencyCode\": \"TWD\",\r\n       \"phoneCode\": \"886\"\r\n   },\r\n    \"TJ\":{\r\n       \"country\": \"Tajikistan\",\r\n       \"countryCode\": \"TJ\",\r\n       \"currencyCode\": \"TJS\",\r\n       \"phoneCode\": \"992\"\r\n   },\r\n    \"TZ\":{\r\n       \"country\": \"Tanzania\",\r\n       \"countryCode\": \"TZ\",\r\n       \"currencyCode\": \"TZS\",\r\n       \"phoneCode\": \"255\"\r\n   },\r\n    \"TH\":{\r\n       \"country\": \"Thailand\",\r\n       \"countryCode\": \"TH\",\r\n       \"currencyCode\": \"THB\",\r\n       \"phoneCode\": \"66\"\r\n   },\r\n    \"TG\":{\r\n       \"country\": \"Togo\",\r\n       \"countryCode\": \"TG\",\r\n       \"currencyCode\": \"XOF\",\r\n       \"phoneCode\": \"228\"\r\n   },\r\n    \"TK\":{\r\n       \"country\": \"Tokelau\",\r\n       \"countryCode\": \"TK\",\r\n       \"currencyCode\": \"NZD\",\r\n       \"phoneCode\": \"690\"\r\n   },\r\n    \"TO\":{\r\n       \"country\": \"Tonga\",\r\n       \"countryCode\": \"TO\",\r\n       \"currencyCode\": \"TOP\",\r\n       \"phoneCode\": \"676\"\r\n   },\r\n    \"TT\":{\r\n       \"country\": \"Trinidad and Tobago\",\r\n       \"countryCode\": \"TT\",\r\n       \"currencyCode\": \"TTD\",\r\n       \"phoneCode\": \"1-868\"\r\n   },\r\n    \"TN\":{\r\n       \"country\": \"Tunisia\",\r\n       \"countryCode\": \"TN\",\r\n       \"currencyCode\": \"TND\",\r\n       \"phoneCode\": \"216\"\r\n   },\r\n    \"TR\":{\r\n       \"country\": \"Turkey\",\r\n       \"countryCode\": \"TR\",\r\n       \"currencyCode\": \"TRY\",\r\n       \"phoneCode\": \"90\"\r\n   },\r\n    \"TM\":{\r\n       \"country\": \"Turkmenistan\",\r\n       \"countryCode\": \"TM\",\r\n       \"currencyCode\": \"TMT\",\r\n       \"phoneCode\": \"993\"\r\n   },\r\n    \"TC\":{\r\n       \"country\": \"Turks and Caicos Islands\",\r\n       \"countryCode\": \"TC\",\r\n       \"currencyCode\": \"USD\",\r\n       \"phoneCode\": \"1-649\"\r\n   },\r\n    \"TV\":{\r\n       \"country\": \"Tuvalu\",\r\n       \"countryCode\": \"TV\",\r\n       \"currencyCode\": \"AUD\",\r\n       \"phoneCode\": \"688\"\r\n   },\r\n    \"VI\":{\r\n       \"country\": \"U.S. Virgin Islands\",\r\n       \"countryCode\": \"VI\",\r\n       \"currencyCode\": \"USD\",\r\n       \"phoneCode\": \"1-340\"\r\n   },\r\n    \"UG\":{\r\n       \"country\": \"Uganda\",\r\n       \"countryCode\": \"UG\",\r\n       \"currencyCode\": \"UGX\",\r\n       \"phoneCode\": \"256\"\r\n   },\r\n    \"UA\":{\r\n       \"country\": \"Ukraine\",\r\n       \"countryCode\": \"UA\",\r\n       \"currencyCode\": \"UAH\",\r\n       \"phoneCode\": \"380\"\r\n   },\r\n    \"AE\":{\r\n       \"country\": \"United Arab Emirates\",\r\n       \"countryCode\": \"AE\",\r\n       \"currencyCode\": \"AED\",\r\n       \"phoneCode\": \"971\"\r\n   },\r\n    \"GB\":{\r\n       \"country\": \"United Kingdom\",\r\n       \"countryCode\": \"GB\",\r\n       \"currencyCode\": \"GBP\",\r\n       \"phoneCode\": \"44\"\r\n   },\r\n    \"US\":{\r\n       \"country\": \"United States\",\r\n       \"countryCode\": \"US\",\r\n       \"currencyCode\": \"USD\",\r\n       \"phoneCode\": \"1\"\r\n   },\r\n    \"UM\":{\r\n       \"country\": \"United States Minor Outlying Islands\",\r\n       \"countryCode\": \"UM\",\r\n       \"currencyCode\": \"USD\",\r\n       \"phoneCode\": \"1\"\r\n   },\r\n    \"UY\":{\r\n       \"country\": \"Uruguay\",\r\n       \"countryCode\": \"UY\",\r\n       \"currencyCode\": \"UYU\",\r\n       \"phoneCode\": \"598\"\r\n   },\r\n    \"UZ\":{\r\n       \"country\": \"Uzbekistan\",\r\n       \"countryCode\": \"UZ\",\r\n       \"currencyCode\": \"UZS\",\r\n       \"phoneCode\": \"998\"\r\n   },\r\n    \"VU\":{\r\n       \"country\": \"Vanuatu\",\r\n       \"countryCode\": \"VU\",\r\n       \"currencyCode\": \"VUV\",\r\n       \"phoneCode\": \"678\"\r\n   },\r\n    \"VA\":{\r\n       \"country\": \"Vatican\",\r\n       \"countryCode\": \"VA\",\r\n       \"currencyCode\": \"EUR\",\r\n       \"phoneCode\": \"379\"\r\n   },\r\n    \"VE\":{\r\n       \"country\": \"Venezuela\",\r\n       \"countryCode\": \"VE\",\r\n       \"currencyCode\": \"VEF\",\r\n       \"phoneCode\": \"58\"\r\n   },\r\n    \"VN\":{\r\n       \"country\": \"Vietnam\",\r\n       \"countryCode\": \"VN\",\r\n       \"currencyCode\": \"VND\",\r\n       \"phoneCode\": \"84\"\r\n   },\r\n    \"WF\":{\r\n       \"country\": \"Wallis and Futuna\",\r\n       \"countryCode\": \"WF\",\r\n       \"currencyCode\": \"XPF\",\r\n       \"phoneCode\": \"681\"\r\n   },\r\n    \"EH\":{\r\n       \"country\": \"Western Sahara\",\r\n       \"countryCode\": \"EH\",\r\n       \"currencyCode\": \"MAD\",\r\n       \"phoneCode\": \"212\"\r\n   },\r\n    \"YE\":{\r\n       \"country\": \"Yemen\",\r\n       \"countryCode\": \"YE\",\r\n       \"currencyCode\": \"YER\",\r\n       \"phoneCode\": \"967\"\r\n   },\r\n    \"ZM\":{\r\n       \"country\": \"Zambia\",\r\n       \"countryCode\": \"ZM\",\r\n       \"currencyCode\": \"ZMK\",\r\n       \"phoneCode\": \"260\"\r\n   },\r\n   \"ZW\":{\r\n       \"country\": \"Zimbabwe\",\r\n       \"countryCode\": \"ZW\",\r\n       \"currencyCode\": \"ZWL\",\r\n       \"phoneCode\": \"263\"\r\n   }\r\n}"
                },
                {
                    "name": "SupportedCountries",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/sign-up/models/country.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "['israel']"
                }
            ],
            "src/app/sign-up/models/kyc.ts": [
                {
                    "name": "detailsToShow",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/sign-up/models/kyc.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IDetailsToShow",
                    "defaultValue": "{\r\n    step_1: {\r\n        detailName: EDetailsToShowNames.DEFAULT,\r\n    },\r\n    step_2: {\r\n        detailName: EDetailsToShowNames.email,\r\n    },\r\n    step_3: {\r\n        detailName: EDetailsToShowNames.emailConfirmation,\r\n    },\r\n    step_4:{\r\n        detailName: EDetailsToShowNames.phone,\r\n    },\r\n    step_5: {\r\n        detailName: EDetailsToShowNames.phoneConfirmation,\r\n    },\r\n    step_6: {\r\n        detailName: EDetailsToShowNames.createdPassword\r\n    },\r\n    step_7: {\r\n        detailName: EDetailsToShowNames.personalDetails\r\n    },\r\n    step_8: {\r\n        detailName: EDetailsToShowNames.personalAddress\r\n    },\r\n}"
                }
            ],
            "src/app/sign-up/kyc-address/kyc-address.component.ts": [
                {
                    "name": "hebrewPattern",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/sign-up/kyc-address/kyc-address.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "/^[\\'\\\"\\`\\.\\s\\u0590-\\u05fe]+$/i"
                }
            ],
            "src/app/risk-dashboard/components/hedging-proposal/hedging-static-data.ts": [
                {
                    "name": "hedgeAllRows",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/risk-dashboard/components/hedging-proposal/hedging-static-data.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\r\n  {\r\n      \"expiryDate\": \"17/11/2025\",\r\n      \"hedgeRate\": 4.4568,\r\n      \"protectAmount\": 8,\r\n      \"recommendedHedgeAmount\": 8,\r\n      \"maxHedge_amount\": 25,\r\n      \"collateral\": 3.475,\r\n      \"totalExposureAmount\": 25,\r\n      \"openEditForSelling\": false,\r\n      \"status\": {\r\n          \"type\": 1,\r\n          \"descriprion\": \"Created\"\r\n      },\r\n      \"maxHedgeAmount\": 25,\r\n      \"recomendedHedgeAmount\": 8,\r\n      \"hedge\": {\r\n          \"strategyId\": 132866,\r\n          \"hedgeRate\": 4.4568,\r\n          \"expiryDate\": \"17/11/2025\",\r\n          \"price\": 0,\r\n          \"collateral\": 3.475,\r\n          \"productName\": \"LOCK & UP\",\r\n          \"productType\": 1,\r\n          \"notionalCurrency\": \"CHF\",\r\n          \"notionalCurrencySign\": \"CHF\",\r\n          \"secondCurrency\": \"ILS\",\r\n          \"secondCurrencySign\": \"₪\",\r\n          \"collateralCurrency\": \"ILS\",\r\n          \"liabilityRate\": 4.4568,\r\n          \"protectAmount\": 8\r\n      },\r\n      \"totalExposure\": 25,\r\n      \"alreadyHedge\": 0,\r\n      \"date\": \"17/11/2025\"\r\n  },\r\n  {\r\n      \"expiryDate\": \"15/08/2025\",\r\n      \"hedgeRate\": 4.4202,\r\n      \"protectAmount\": 14.1,\r\n      \"recommendedHedgeAmount\": 14.1,\r\n      \"maxHedge_amount\": 50,\r\n      \"collateral\": 6.125,\r\n      \"totalExposureAmount\": 50,\r\n      \"openEditForSelling\": false,\r\n      \"status\": {\r\n          \"type\": 1,\r\n          \"descriprion\": \"Created\"\r\n      },\r\n      \"maxHedgeAmount\": 50,\r\n      \"recomendedHedgeAmount\": 14.1,\r\n      \"hedge\": {\r\n          \"strategyId\": 132867,\r\n          \"hedgeRate\": 4.4202,\r\n          \"expiryDate\": \"15/08/2025\",\r\n          \"price\": 0,\r\n          \"collateral\": 6.125,\r\n          \"productName\": \"LOCK & UP\",\r\n          \"productType\": 1,\r\n          \"notionalCurrency\": \"CHF\",\r\n          \"notionalCurrencySign\": \"CHF\",\r\n          \"secondCurrency\": \"ILS\",\r\n          \"secondCurrencySign\": \"₪\",\r\n          \"collateralCurrency\": \"ILS\",\r\n          \"liabilityRate\": 4.4202,\r\n          \"protectAmount\": 14.1\r\n      },\r\n      \"totalExposure\": 50,\r\n      \"alreadyHedge\": 0,\r\n      \"date\": \"15/08/2025\"\r\n  },\r\n  {\r\n      \"expiryDate\": \"15/09/2025\",\r\n      \"hedgeRate\": 4.4324,\r\n      \"protectAmount\": 11.75,\r\n      \"recommendedHedgeAmount\": 11.75,\r\n      \"maxHedge_amount\": 25,\r\n      \"collateral\": 5.104,\r\n      \"totalExposureAmount\": 25,\r\n      \"openEditForSelling\": false,\r\n      \"status\": {\r\n          \"type\": 1,\r\n          \"descriprion\": \"Created\"\r\n      },\r\n      \"maxHedgeAmount\": 25,\r\n      \"recomendedHedgeAmount\": 11.75,\r\n      \"hedge\": {\r\n          \"strategyId\": 132869,\r\n          \"hedgeRate\": 4.4324,\r\n          \"expiryDate\": \"15/09/2025\",\r\n          \"price\": 0,\r\n          \"collateral\": 5.104,\r\n          \"productName\": \"LOCK & UP\",\r\n          \"productType\": 1,\r\n          \"notionalCurrency\": \"CHF\",\r\n          \"notionalCurrencySign\": \"CHF\",\r\n          \"secondCurrency\": \"ILS\",\r\n          \"secondCurrencySign\": \"₪\",\r\n          \"collateralCurrency\": \"ILS\",\r\n          \"liabilityRate\": 4.4324,\r\n          \"protectAmount\": 11.75\r\n      },\r\n      \"totalExposure\": 25,\r\n      \"alreadyHedge\": 0,\r\n      \"date\": \"15/09/2025\"\r\n  },\r\n  {\r\n      \"expiryDate\": \"15/10/2025\",\r\n      \"hedgeRate\": 4.4446,\r\n      \"protectAmount\": 11.75,\r\n      \"recommendedHedgeAmount\": 11.75,\r\n      \"maxHedge_amount\": 25,\r\n      \"collateral\": 5.104,\r\n      \"totalExposureAmount\": 25,\r\n      \"openEditForSelling\": false,\r\n      \"status\": {\r\n          \"type\": 1,\r\n          \"descriprion\": \"Created\"\r\n      },\r\n      \"maxHedgeAmount\": 25,\r\n      \"recomendedHedgeAmount\": 11.75,\r\n      \"hedge\": {\r\n          \"strategyId\": 132854,\r\n          \"hedgeRate\": 4.4446,\r\n          \"expiryDate\": \"15/10/2025\",\r\n          \"price\": 0,\r\n          \"collateral\": 5.104,\r\n          \"productName\": \"LOCK & UP\",\r\n          \"productType\": 1,\r\n          \"notionalCurrency\": \"CHF\",\r\n          \"notionalCurrencySign\": \"CHF\",\r\n          \"secondCurrency\": \"ILS\",\r\n          \"secondCurrencySign\": \"₪\",\r\n          \"collateralCurrency\": \"ILS\",\r\n          \"liabilityRate\": 4.4446,\r\n          \"protectAmount\": 11.75\r\n      },\r\n      \"totalExposure\": 25,\r\n      \"alreadyHedge\": 0,\r\n      \"date\": \"15/10/2025\"\r\n  },\r\n  {\r\n      \"expiryDate\": \"16/02/2026\",\r\n      \"hedgeRate\": 4.4926,\r\n      \"protectAmount\": 4.25,\r\n      \"recommendedHedgeAmount\": 4.25,\r\n      \"maxHedge_amount\": 25,\r\n      \"collateral\": 1.846,\r\n      \"totalExposureAmount\": 25,\r\n      \"openEditForSelling\": false,\r\n      \"status\": {\r\n          \"type\": 1,\r\n          \"descriprion\": \"Created\"\r\n      },\r\n      \"maxHedgeAmount\": 25,\r\n      \"recomendedHedgeAmount\": 4.25,\r\n      \"hedge\": {\r\n          \"strategyId\": 132858,\r\n          \"hedgeRate\": 4.4926,\r\n          \"expiryDate\": \"16/02/2026\",\r\n          \"price\": 0,\r\n          \"collateral\": 1.846,\r\n          \"productName\": \"LOCK & UP\",\r\n          \"productType\": 1,\r\n          \"notionalCurrency\": \"CHF\",\r\n          \"notionalCurrencySign\": \"CHF\",\r\n          \"secondCurrency\": \"ILS\",\r\n          \"secondCurrencySign\": \"₪\",\r\n          \"collateralCurrency\": \"ILS\",\r\n          \"liabilityRate\": 4.4926,\r\n          \"protectAmount\": 4.25\r\n      },\r\n      \"totalExposure\": 25,\r\n      \"alreadyHedge\": 0,\r\n      \"date\": \"16/02/2026\"\r\n  },\r\n  {\r\n      \"expiryDate\": \"15/01/2026\",\r\n      \"hedgeRate\": 4.4813,\r\n      \"protectAmount\": 8,\r\n      \"recommendedHedgeAmount\": 8,\r\n      \"maxHedge_amount\": 25,\r\n      \"collateral\": 3.475,\r\n      \"totalExposureAmount\": 25,\r\n      \"openEditForSelling\": false,\r\n      \"status\": {\r\n          \"type\": 1,\r\n          \"descriprion\": \"Created\"\r\n      },\r\n      \"maxHedgeAmount\": 25,\r\n      \"recomendedHedgeAmount\": 8,\r\n      \"hedge\": {\r\n          \"strategyId\": 132856,\r\n          \"hedgeRate\": 4.4813,\r\n          \"expiryDate\": \"15/01/2026\",\r\n          \"price\": 0,\r\n          \"collateral\": 3.475,\r\n          \"productName\": \"LOCK & UP\",\r\n          \"productType\": 1,\r\n          \"notionalCurrency\": \"CHF\",\r\n          \"notionalCurrencySign\": \"CHF\",\r\n          \"secondCurrency\": \"ILS\",\r\n          \"secondCurrencySign\": \"₪\",\r\n          \"collateralCurrency\": \"ILS\",\r\n          \"liabilityRate\": 4.4813,\r\n          \"protectAmount\": 8\r\n      },\r\n      \"totalExposure\": 25,\r\n      \"alreadyHedge\": 0,\r\n      \"date\": \"15/01/2026\"\r\n  },\r\n  {\r\n      \"expiryDate\": \"16/03/2026\",\r\n      \"hedgeRate\": 4.5039,\r\n      \"protectAmount\": 4.25,\r\n      \"recommendedHedgeAmount\": 4.25,\r\n      \"maxHedge_amount\": 25,\r\n      \"collateral\": 1.846,\r\n      \"totalExposureAmount\": 25,\r\n      \"openEditForSelling\": false,\r\n      \"status\": {\r\n          \"type\": 1,\r\n          \"descriprion\": \"Created\"\r\n      },\r\n      \"maxHedgeAmount\": 25,\r\n      \"recomendedHedgeAmount\": 4.25,\r\n      \"hedge\": {\r\n          \"strategyId\": 132868,\r\n          \"hedgeRate\": 4.5039,\r\n          \"expiryDate\": \"16/03/2026\",\r\n          \"price\": 0,\r\n          \"collateral\": 1.846,\r\n          \"productName\": \"LOCK & UP\",\r\n          \"productType\": 1,\r\n          \"notionalCurrency\": \"CHF\",\r\n          \"notionalCurrencySign\": \"CHF\",\r\n          \"secondCurrency\": \"ILS\",\r\n          \"secondCurrencySign\": \"₪\",\r\n          \"collateralCurrency\": \"ILS\",\r\n          \"liabilityRate\": 4.5039,\r\n          \"protectAmount\": 4.25\r\n      },\r\n      \"totalExposure\": 25,\r\n      \"alreadyHedge\": 0,\r\n      \"date\": \"16/03/2026\"\r\n  },\r\n  {\r\n      \"expiryDate\": \"15/04/2026\",\r\n      \"hedgeRate\": 4.5152,\r\n      \"protectAmount\": 4.25,\r\n      \"recommendedHedgeAmount\": 4.25,\r\n      \"maxHedge_amount\": 25,\r\n      \"collateral\": 1.846,\r\n      \"totalExposureAmount\": 25,\r\n      \"openEditForSelling\": false,\r\n      \"status\": {\r\n          \"type\": 1,\r\n          \"descriprion\": \"Created\"\r\n      },\r\n      \"maxHedgeAmount\": 25,\r\n      \"recomendedHedgeAmount\": 4.25,\r\n      \"hedge\": {\r\n          \"strategyId\": 132862,\r\n          \"hedgeRate\": 4.5152,\r\n          \"expiryDate\": \"15/04/2026\",\r\n          \"price\": 0,\r\n          \"collateral\": 1.846,\r\n          \"productName\": \"LOCK & UP\",\r\n          \"productType\": 1,\r\n          \"notionalCurrency\": \"CHF\",\r\n          \"notionalCurrencySign\": \"CHF\",\r\n          \"secondCurrency\": \"ILS\",\r\n          \"secondCurrencySign\": \"₪\",\r\n          \"collateralCurrency\": \"ILS\",\r\n          \"liabilityRate\": 4.5152,\r\n          \"protectAmount\": 4.25\r\n      },\r\n      \"totalExposure\": 25,\r\n      \"alreadyHedge\": 0,\r\n      \"date\": \"15/04/2026\"\r\n  },\r\n  {\r\n      \"expiryDate\": \"15/05/2026\",\r\n      \"hedgeRate\": 4.5152,\r\n      \"protectAmount\": 4.25,\r\n      \"recommendedHedgeAmount\": 4.25,\r\n      \"maxHedge_amount\": 25,\r\n      \"collateral\": 1.846,\r\n      \"totalExposureAmount\": 25,\r\n      \"openEditForSelling\": false,\r\n      \"status\": {\r\n          \"type\": 1,\r\n          \"descriprion\": \"Created\"\r\n      },\r\n      \"maxHedgeAmount\": 25,\r\n      \"recomendedHedgeAmount\": 4.25,\r\n      \"hedge\": {\r\n          \"strategyId\": 132853,\r\n          \"hedgeRate\": 4.5152,\r\n          \"expiryDate\": \"15/05/2026\",\r\n          \"price\": 0,\r\n          \"collateral\": 1.846,\r\n          \"productName\": \"LOCK & UP\",\r\n          \"productType\": 1,\r\n          \"notionalCurrency\": \"CHF\",\r\n          \"notionalCurrencySign\": \"CHF\",\r\n          \"secondCurrency\": \"ILS\",\r\n          \"secondCurrencySign\": \"₪\",\r\n          \"collateralCurrency\": \"ILS\",\r\n          \"liabilityRate\": 4.5152,\r\n          \"protectAmount\": 4.25\r\n      },\r\n      \"totalExposure\": 25,\r\n      \"alreadyHedge\": 0,\r\n      \"date\": \"15/05/2026\"\r\n  },\r\n  {\r\n      \"expiryDate\": \"15/06/2026\",\r\n      \"hedgeRate\": 4.5152,\r\n      \"protectAmount\": 4.25,\r\n      \"recommendedHedgeAmount\": 4.25,\r\n      \"maxHedge_amount\": 25,\r\n      \"collateral\": 1.846,\r\n      \"totalExposureAmount\": 25,\r\n      \"openEditForSelling\": false,\r\n      \"status\": {\r\n          \"type\": 1,\r\n          \"descriprion\": \"Created\"\r\n      },\r\n      \"maxHedgeAmount\": 25,\r\n      \"recomendedHedgeAmount\": 4.25,\r\n      \"hedge\": {\r\n          \"strategyId\": 132871,\r\n          \"hedgeRate\": 4.5152,\r\n          \"expiryDate\": \"15/06/2026\",\r\n          \"price\": 0,\r\n          \"collateral\": 1.846,\r\n          \"productName\": \"LOCK & UP\",\r\n          \"productType\": 1,\r\n          \"notionalCurrency\": \"CHF\",\r\n          \"notionalCurrencySign\": \"CHF\",\r\n          \"secondCurrency\": \"ILS\",\r\n          \"secondCurrencySign\": \"₪\",\r\n          \"collateralCurrency\": \"ILS\",\r\n          \"liabilityRate\": 4.5152,\r\n          \"protectAmount\": 4.25\r\n      },\r\n      \"totalExposure\": 25,\r\n      \"alreadyHedge\": 0,\r\n      \"date\": \"15/06/2026\"\r\n  },\r\n  {\r\n      \"expiryDate\": \"15/07/2026\",\r\n      \"hedgeRate\": 4.5152,\r\n      \"protectAmount\": 4.25,\r\n      \"recommendedHedgeAmount\": 4.25,\r\n      \"maxHedge_amount\": 25,\r\n      \"collateral\": 1.846,\r\n      \"totalExposureAmount\": 25,\r\n      \"openEditForSelling\": false,\r\n      \"status\": {\r\n          \"type\": 1,\r\n          \"descriprion\": \"Created\"\r\n      },\r\n      \"maxHedgeAmount\": 25,\r\n      \"recomendedHedgeAmount\": 4.25,\r\n      \"hedge\": {\r\n          \"strategyId\": 132855,\r\n          \"hedgeRate\": 4.5152,\r\n          \"expiryDate\": \"15/07/2026\",\r\n          \"price\": 0,\r\n          \"collateral\": 1.846,\r\n          \"productName\": \"LOCK & UP\",\r\n          \"productType\": 1,\r\n          \"notionalCurrency\": \"CHF\",\r\n          \"notionalCurrencySign\": \"CHF\",\r\n          \"secondCurrency\": \"ILS\",\r\n          \"secondCurrencySign\": \"₪\",\r\n          \"collateralCurrency\": \"ILS\",\r\n          \"liabilityRate\": 4.5152,\r\n          \"protectAmount\": 4.25\r\n      },\r\n      \"totalExposure\": 25,\r\n      \"alreadyHedge\": 0,\r\n      \"date\": \"15/07/2026\"\r\n  }\r\n]"
                },
                {
                    "name": "hedgeData",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/risk-dashboard/components/hedging-proposal/hedging-static-data.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n  \"totalHedgeAmount\": 100.35,\r\n  \"hedgeCurrency\": {\r\n    \"code\": \"CHF\",\r\n    \"sign\": \"CHF\",\r\n    \"flag\": null,\r\n    \"currencyName\": null\r\n  },\r\n  \"totalHedgePercent\": 33.5625,\r\n  \"avgHedgeRate\": 4.3747526315789473684210526316,\r\n  \"liabilityRate\": 4.3747526315789473684210526316,\r\n  \"requiredCollateral\": 67.637,\r\n  \"price\": 0.0,\r\n  \"collateralAndPriceCur\": {\r\n    \"code\": \"ILS\",\r\n    \"sign\": \"₪\",\r\n    \"flag\": null,\r\n    \"currencyName\": null\r\n  },\r\n  \"direction\": 2,\r\n  \"currencyPair\": \"CHF/ILS\",\r\n  \"hedgingType\": 1,\r\n  \"monthlyHedge\": [\r\n    {\r\n      \"status\": {\r\n        \"type\": 3,\r\n        \"descriprion\": \"Don't need to create hedge for zero reccomended hedge\"\r\n      },\r\n      \"maxHedgeAmount\": 5.00,\r\n      \"recomendedHedgeAmount\": 0.00,\r\n      \"hedge\": null,\r\n      \"totalExposure\": 5.00,\r\n      \"alreadyHedge\": 0.0,\r\n      \"date\": \"15/06/2025\",\r\n      \"hedgeError\": false\r\n    },\r\n    {\r\n      \"status\": {\r\n        \"type\": 1,\r\n        \"descriprion\": \"Created\"\r\n      },\r\n      \"maxHedgeAmount\": 25.00,\r\n      \"recomendedHedgeAmount\": 10.50,\r\n      \"hedge\": {\r\n        \"strategyId\": 132575,\r\n        \"hedgeRate\": 4.3121,\r\n        \"expiryDate\": \"17/11/2025\",\r\n        \"price\": 0.0,\r\n        \"collateral\": 4.408,\r\n        \"productName\": \"LOCK & UP\",\r\n        \"productType\": 1,\r\n        \"notionalCurrency\": \"CHF\",\r\n        \"notionalCurrencySign\": \"CHF\",\r\n        \"secondCurrency\": \"ILS\",\r\n        \"secondCurrencySign\": \"₪\",\r\n        \"collateralCurrency\": \"ILS\",\r\n        \"liabilityRate\": 4.3121,\r\n        \"protectAmount\": 10.50\r\n      },\r\n      \"totalExposure\": 25.00,\r\n      \"alreadyHedge\": 0.0,\r\n      \"date\": \"17/11/2025\",\r\n      \"hedgeError\": true\r\n    },\r\n    {\r\n      \"status\": {\r\n        \"type\": 5,\r\n        \"descriprion\": \"Already purchased the entire protection deal for the month\"\r\n      },\r\n      \"maxHedgeAmount\": 0.0,\r\n      \"recomendedHedgeAmount\": 0.0,\r\n      \"hedge\": null,\r\n      \"totalExposure\": 0.0,\r\n      \"alreadyHedge\": 0.0,\r\n      \"date\": \"15/07/2025\",\r\n      \"hedgeError\": false\r\n    },\r\n    {\r\n      \"status\": {\r\n        \"type\": 1,\r\n        \"descriprion\": \"Created\"\r\n      },\r\n      \"maxHedgeAmount\": 50.00,\r\n      \"recomendedHedgeAmount\": 17.10,\r\n      \"hedge\": {\r\n        \"strategyId\": 132567,\r\n        \"hedgeRate\": 4.2749,\r\n        \"expiryDate\": \"15/08/2025\",\r\n        \"price\": 0.0,\r\n        \"collateral\": 7.179,\r\n        \"productName\": \"LOCK & UP\",\r\n        \"productType\": 1,\r\n        \"notionalCurrency\": \"CHF\",\r\n        \"notionalCurrencySign\": \"CHF\",\r\n        \"secondCurrency\": \"ILS\",\r\n        \"secondCurrencySign\": \"₪\",\r\n        \"collateralCurrency\": \"ILS\",\r\n        \"liabilityRate\": 4.2749,\r\n        \"protectAmount\": 17.10\r\n      },\r\n      \"totalExposure\": 50.00,\r\n      \"alreadyHedge\": 0.0,\r\n      \"date\": \"15/08/2025\",\r\n      \"hedgeError\": false\r\n    },\r\n    {\r\n      \"status\": {\r\n        \"type\": 1,\r\n        \"descriprion\": \"Created\"\r\n      },\r\n      \"maxHedgeAmount\": 25.00,\r\n      \"recomendedHedgeAmount\": 14.25,\r\n      \"hedge\": {\r\n        \"strategyId\": 132573,\r\n        \"hedgeRate\": 4.2872,\r\n        \"expiryDate\": \"15/09/2025\",\r\n        \"price\": 0.0,\r\n        \"collateral\": 5.983,\r\n        \"productName\": \"LOCK & UP\",\r\n        \"productType\": 1,\r\n        \"notionalCurrency\": \"CHF\",\r\n        \"notionalCurrencySign\": \"CHF\",\r\n        \"secondCurrency\": \"ILS\",\r\n        \"secondCurrencySign\": \"₪\",\r\n        \"collateralCurrency\": \"ILS\",\r\n        \"liabilityRate\": 4.2872,\r\n        \"protectAmount\": 14.25\r\n      },\r\n      \"totalExposure\": 25.00,\r\n      \"alreadyHedge\": 0.0,\r\n      \"date\": \"15/09/2025\",\r\n      \"hedgeError\": false\r\n    },\r\n    {\r\n      \"status\": {\r\n        \"type\": 1,\r\n        \"descriprion\": \"Created\"\r\n      },\r\n      \"maxHedgeAmount\": 25.00,\r\n      \"recomendedHedgeAmount\": 14.25,\r\n      \"hedge\": {\r\n        \"strategyId\": 132566,\r\n        \"hedgeRate\": 4.2996,\r\n        \"expiryDate\": \"15/10/2025\",\r\n        \"price\": 0.0,\r\n        \"collateral\": 5.983,\r\n        \"productName\": \"LOCK & UP\",\r\n        \"productType\": 1,\r\n        \"notionalCurrency\": \"CHF\",\r\n        \"notionalCurrencySign\": \"CHF\",\r\n        \"secondCurrency\": \"ILS\",\r\n        \"secondCurrencySign\": \"₪\",\r\n        \"collateralCurrency\": \"ILS\",\r\n        \"liabilityRate\": 4.2996,\r\n        \"protectAmount\": 14.25\r\n      },\r\n      \"totalExposure\": 25.00,\r\n      \"alreadyHedge\": 0.0,\r\n      \"date\": \"15/10/2025\",\r\n      \"hedgeError\": false\r\n    },\r\n    {\r\n      \"status\": {\r\n        \"type\": 1,\r\n        \"descriprion\": \"Created\"\r\n      },\r\n      \"maxHedgeAmount\": 25.00,\r\n      \"recomendedHedgeAmount\": 6.75,\r\n      \"hedge\": {\r\n        \"strategyId\": 132570,\r\n        \"hedgeRate\": 4.3491,\r\n        \"expiryDate\": \"16/02/2026\",\r\n        \"price\": 0.0,\r\n        \"collateral\": 2.834,\r\n        \"productName\": \"LOCK & UP\",\r\n        \"productType\": 1,\r\n        \"notionalCurrency\": \"CHF\",\r\n        \"notionalCurrencySign\": \"CHF\",\r\n        \"secondCurrency\": \"ILS\",\r\n        \"secondCurrencySign\": \"₪\",\r\n        \"collateralCurrency\": \"ILS\",\r\n        \"liabilityRate\": 4.3491,\r\n        \"protectAmount\": 6.75\r\n      },\r\n      \"totalExposure\": 25.00,\r\n      \"alreadyHedge\": 0.0,\r\n      \"date\": \"16/02/2026\",\r\n      \"hedgeError\": false\r\n    },\r\n    {\r\n      \"status\": {\r\n        \"type\": 1,\r\n        \"descriprion\": \"Created\"\r\n      },\r\n      \"maxHedgeAmount\": 25.00,\r\n      \"recomendedHedgeAmount\": 10.50,\r\n      \"hedge\": {\r\n        \"strategyId\": 132577,\r\n        \"hedgeRate\": 4.3373,\r\n        \"expiryDate\": \"15/01/2026\",\r\n        \"price\": 0.0,\r\n        \"collateral\": 4.408,\r\n        \"productName\": \"LOCK & UP\",\r\n        \"productType\": 1,\r\n        \"notionalCurrency\": \"CHF\",\r\n        \"notionalCurrencySign\": \"CHF\",\r\n        \"secondCurrency\": \"ILS\",\r\n        \"secondCurrencySign\": \"₪\",\r\n        \"collateralCurrency\": \"ILS\",\r\n        \"liabilityRate\": 4.3373,\r\n        \"protectAmount\": 10.50\r\n      },\r\n      \"totalExposure\": 25.00,\r\n      \"alreadyHedge\": 0.0,\r\n      \"date\": \"15/01/2026\",\r\n      \"hedgeError\": false\r\n    },\r\n    {\r\n      \"status\": {\r\n        \"type\": 1,\r\n        \"descriprion\": \"Created\"\r\n      },\r\n      \"maxHedgeAmount\": 25.00,\r\n      \"recomendedHedgeAmount\": 6.75,\r\n      \"hedge\": {\r\n        \"strategyId\": 132564,\r\n        \"hedgeRate\": 4.3609,\r\n        \"expiryDate\": \"16/03/2026\",\r\n        \"price\": 0.0,\r\n        \"collateral\": 2.834,\r\n        \"productName\": \"LOCK & UP\",\r\n        \"productType\": 1,\r\n        \"notionalCurrency\": \"CHF\",\r\n        \"notionalCurrencySign\": \"CHF\",\r\n        \"secondCurrency\": \"ILS\",\r\n        \"secondCurrencySign\": \"₪\",\r\n        \"collateralCurrency\": \"ILS\",\r\n        \"liabilityRate\": 4.3609,\r\n        \"protectAmount\": 6.75\r\n      },\r\n      \"totalExposure\": 25.00,\r\n      \"alreadyHedge\": 0.0,\r\n      \"date\": \"16/03/2026\",\r\n      \"hedgeError\": false\r\n    },\r\n    {\r\n      \"status\": {\r\n        \"type\": 1,\r\n        \"descriprion\": \"Created\"\r\n      },\r\n      \"maxHedgeAmount\": 25.00,\r\n      \"recomendedHedgeAmount\": 6.75,\r\n      \"hedge\": {\r\n        \"strategyId\": 132569,\r\n        \"hedgeRate\": 4.3728,\r\n        \"expiryDate\": \"15/04/2026\",\r\n        \"price\": 0.0,\r\n        \"collateral\": 2.834,\r\n        \"productName\": \"LOCK & UP\",\r\n        \"productType\": 1,\r\n        \"notionalCurrency\": \"CHF\",\r\n        \"notionalCurrencySign\": \"CHF\",\r\n        \"secondCurrency\": \"ILS\",\r\n        \"secondCurrencySign\": \"₪\",\r\n        \"collateralCurrency\": \"ILS\",\r\n        \"liabilityRate\": 4.3728,\r\n        \"protectAmount\": 6.75\r\n      },\r\n      \"totalExposure\": 25.00,\r\n      \"alreadyHedge\": 0.0,\r\n      \"date\": \"15/04/2026\",\r\n      \"hedgeError\": false\r\n    },\r\n    {\r\n      \"status\": {\r\n        \"type\": 1,\r\n        \"descriprion\": \"Created\"\r\n      },\r\n      \"maxHedgeAmount\": 25.00,\r\n      \"recomendedHedgeAmount\": 6.75,\r\n      \"hedge\": {\r\n        \"strategyId\": 132565,\r\n        \"hedgeRate\": 4.3728,\r\n        \"expiryDate\": \"15/05/2026\",\r\n        \"price\": 0.0,\r\n        \"collateral\": 2.834,\r\n        \"productName\": \"LOCK & UP\",\r\n        \"productType\": 1,\r\n        \"notionalCurrency\": \"CHF\",\r\n        \"notionalCurrencySign\": \"CHF\",\r\n        \"secondCurrency\": \"ILS\",\r\n        \"secondCurrencySign\": \"₪\",\r\n        \"collateralCurrency\": \"ILS\",\r\n        \"liabilityRate\": 4.3728,\r\n        \"protectAmount\": 6.75\r\n      },\r\n      \"totalExposure\": 25.00,\r\n      \"alreadyHedge\": 0.0,\r\n      \"date\": \"15/05/2026\",\r\n      \"hedgeError\": false\r\n    },\r\n    {\r\n      \"status\": {\r\n        \"type\": 1,\r\n        \"descriprion\": \"Created\"\r\n      },\r\n      \"maxHedgeAmount\": 25.00,\r\n      \"recomendedHedgeAmount\": 6.75,\r\n      \"hedge\": {\r\n        \"strategyId\": 132571,\r\n        \"hedgeRate\": 4.3728,\r\n        \"expiryDate\": \"15/06/2026\",\r\n        \"price\": 0.0,\r\n        \"collateral\": 2.834,\r\n        \"productName\": \"LOCK & UP\",\r\n        \"productType\": 1,\r\n        \"notionalCurrency\": \"CHF\",\r\n        \"notionalCurrencySign\": \"CHF\",\r\n        \"secondCurrency\": \"ILS\",\r\n        \"secondCurrencySign\": \"₪\",\r\n        \"collateralCurrency\": \"ILS\",\r\n        \"liabilityRate\": 4.3728,\r\n        \"protectAmount\": 6.75\r\n      },\r\n      \"totalExposure\": 25.00,\r\n      \"alreadyHedge\": 0.0,\r\n      \"date\": \"15/06/2026\",\r\n      \"hedgeError\": false\r\n    },\r\n  ]\r\n}"
                }
            ],
            "src/app/risk-dashboard/components/enums/hedgingData.ts": [
                {
                    "name": "HedgingTypeDisplayNames",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/risk-dashboard/components/enums/hedgingData.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "{\r\n    [HedgingType.Forward]: \"Forward\",\r\n    [HedgingType.Vanilla]: \"Vanilla\",\r\n    [HedgingType.Range]: \"Range\",\r\n}"
                }
            ],
            "src/app/risk-dashboard/components/cashflow-exposure/components/cashflow-exposure-details/cashflow-exposure-details.component.ts": [
                {
                    "name": "MATERIAL_DATEPICKER_FORMATS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/risk-dashboard/components/cashflow-exposure/components/cashflow-exposure-details/cashflow-exposure-details.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n  parse: {\r\n    dateInput: 'DD/MMM/YYYY',\r\n  },\r\n  display: {\r\n    dateInput: 'DD/MMM/YYYY',\r\n    monthYearLabel: 'MMMM YYYY',\r\n    dateA11yLabel: 'DD/MMM/YYYY',\r\n    monthYearA11yLabel: 'MMMM YYYY',\r\n  },\r\n}"
                }
            ],
            "src/app/sign-up/kyc-create-password/kyc-create-password.component.ts": [
                {
                    "name": "pwdConfirming",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/sign-up/kyc-create-password/kyc-create-password.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(data: { key: string, confirmationKey: string }): ValidatorFn => {\r\n    const { key, confirmationKey } = data;\r\n\r\n    return (group: any) => {\r\n        const input = group.controls[key];\r\n        const confirmationInput = group.controls[confirmationKey];\r\n        return input.value !== confirmationInput.value ? { passwordNotEquivalent: true } : null\r\n    };\r\n}"
                }
            ]
        },
        "groupedFunctions": {
            "src/app/shared/custom-validators.ts": [
                {
                    "name": "strictEmailValidator",
                    "file": "src/app/shared/custom-validators.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [],
                    "returnType": "ValidatorFn"
                }
            ]
        },
        "groupedEnumerations": {
            "src/app/risk-dashboard/components/enums/advancePolicyQuestions.ts": [
                {
                    "name": "AdvancePolicyQuestions",
                    "childs": [
                        {
                            "name": "CertaintyExposureLevel",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": 1
                        },
                        {
                            "name": "AbilityImpactCustomer",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": 2
                        },
                        {
                            "name": "DifferentiationFromCompetitors",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": 3
                        },
                        {
                            "name": "CompetitivenessLevel",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": 4
                        },
                        {
                            "name": "CreditSensitivity",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": 9
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/risk-dashboard/components/enums/advancePolicyQuestions.ts"
                }
            ],
            "src/app/risk-dashboard/components/cashflow-exposure/components/cashflow-exposure-step2/cashflow-exposure-step2.component.ts": [
                {
                    "name": "BuySell",
                    "childs": [
                        {
                            "name": "Buy",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": 1
                        },
                        {
                            "name": "Sell",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": 2
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/risk-dashboard/components/cashflow-exposure/components/cashflow-exposure-step2/cashflow-exposure-step2.component.ts"
                }
            ],
            "src/app/sign-up/kyc.ts": [
                {
                    "name": "EBusinessType",
                    "childs": [
                        {
                            "name": "companyAccount",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "companyAcc"
                        },
                        {
                            "name": "privateAccount",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "privateAcc"
                        },
                        {
                            "name": "invitedAccount",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "invitedAcc"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/sign-up/kyc.ts"
                },
                {
                    "name": "EDetailsToShowNames",
                    "childs": [
                        {
                            "name": "DEFAULT",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "DEFAULT"
                        },
                        {
                            "name": "companyAcc",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "companyAcc"
                        },
                        {
                            "name": "privateAcc",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "privateAcc"
                        },
                        {
                            "name": "invitedAcc",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "invitedAcc"
                        },
                        {
                            "name": "email",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "email"
                        },
                        {
                            "name": "emailConfirmation",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "emailConfirmation"
                        },
                        {
                            "name": "phone",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "phone"
                        },
                        {
                            "name": "phoneConfirmation",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "phoneConfirmation"
                        },
                        {
                            "name": "createdPassword",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "createdPassword"
                        },
                        {
                            "name": "personalDetails",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "personalDetails"
                        },
                        {
                            "name": "personalAddress",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "personalAddress"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/sign-up/kyc.ts"
                },
                {
                    "name": "EErrorMessages",
                    "childs": [
                        {
                            "name": "SomethingWentWrong",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "Something went wrong."
                        },
                        {
                            "name": "FillAllFields",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "Please fill all fields in order to continue"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/sign-up/kyc.ts"
                },
                {
                    "name": "EKycStatus",
                    "childs": [
                        {
                            "name": "basicKYC",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": 1
                        },
                        {
                            "name": "partialKYC",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": 2
                        },
                        {
                            "name": "fullKYC",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": 3
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/sign-up/kyc.ts"
                },
                {
                    "name": "EStepNumber",
                    "childs": [
                        {
                            "name": "typeOfBusiness",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": 1
                        },
                        {
                            "name": "email",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": 2
                        },
                        {
                            "name": "emailConfirmation",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": 3
                        },
                        {
                            "name": "phone",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": 4
                        },
                        {
                            "name": "phoneConfirmation",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": 5
                        },
                        {
                            "name": "createPassword",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": 6
                        },
                        {
                            "name": "personalDetails",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": 7
                        },
                        {
                            "name": "personalAddress",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": 8
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/sign-up/kyc.ts"
                },
                {
                    "name": "SiteSource",
                    "childs": [
                        {
                            "name": "Ofakim",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": 1
                        },
                        {
                            "name": "Okoora",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": 2
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/sign-up/kyc.ts"
                },
                {
                    "name": "VerificationReturnType",
                    "childs": [
                        {
                            "name": "Success",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": 1
                        },
                        {
                            "name": "GeneralError",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": 2
                        },
                        {
                            "name": "PassedLimitError",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": 3
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/sign-up/kyc.ts"
                }
            ],
            "src/app/sign-up/models/kyc.ts": [
                {
                    "name": "EBusinessType",
                    "childs": [
                        {
                            "name": "companyAccount",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "companyAcc"
                        },
                        {
                            "name": "privateAccount",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "privateAcc"
                        },
                        {
                            "name": "invitedAccount",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "invitedAcc"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/sign-up/models/kyc.ts"
                },
                {
                    "name": "EDetailsToShowNames",
                    "childs": [
                        {
                            "name": "DEFAULT",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "DEFAULT"
                        },
                        {
                            "name": "companyAcc",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "companyAcc"
                        },
                        {
                            "name": "privateAcc",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "privateAcc"
                        },
                        {
                            "name": "invitedAcc",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "invitedAcc"
                        },
                        {
                            "name": "email",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "email"
                        },
                        {
                            "name": "emailConfirmation",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "emailConfirmation"
                        },
                        {
                            "name": "phone",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "phone"
                        },
                        {
                            "name": "phoneConfirmation",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "phoneConfirmation"
                        },
                        {
                            "name": "createdPassword",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "createdPassword"
                        },
                        {
                            "name": "personalDetails",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "personalDetails"
                        },
                        {
                            "name": "personalAddress",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "personalAddress"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/sign-up/models/kyc.ts"
                },
                {
                    "name": "EErrorMessages",
                    "childs": [
                        {
                            "name": "SomethingWentWrong",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "Something went wrong."
                        },
                        {
                            "name": "FillAllFields",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "Please fill all fields in order to continue"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/sign-up/models/kyc.ts"
                },
                {
                    "name": "EKycStatus",
                    "childs": [
                        {
                            "name": "basicKYC",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": 1
                        },
                        {
                            "name": "partialKYC",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": 2
                        },
                        {
                            "name": "fullKYC",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": 3
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/sign-up/models/kyc.ts"
                },
                {
                    "name": "EStepNumber",
                    "childs": [
                        {
                            "name": "typeOfBusiness",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": 1
                        },
                        {
                            "name": "email",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": 2
                        },
                        {
                            "name": "emailConfirmation",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": 3
                        },
                        {
                            "name": "phone",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": 4
                        },
                        {
                            "name": "phoneConfirmation",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": 5
                        },
                        {
                            "name": "createPassword",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": 6
                        },
                        {
                            "name": "personalDetails",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": 7
                        },
                        {
                            "name": "personalAddress",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": 8
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/sign-up/models/kyc.ts"
                },
                {
                    "name": "SiteSource",
                    "childs": [
                        {
                            "name": "Ofakim",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": 1
                        },
                        {
                            "name": "Okoora",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": 2
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/sign-up/models/kyc.ts"
                },
                {
                    "name": "VerificationReturnType",
                    "childs": [
                        {
                            "name": "Success",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": 1
                        },
                        {
                            "name": "GeneralError",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": 2
                        },
                        {
                            "name": "PassedLimitError",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": 3
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/sign-up/models/kyc.ts"
                }
            ],
            "src/app/risk-dashboard/components/enums/hedgingData.ts": [
                {
                    "name": "HedgingType",
                    "childs": [
                        {
                            "name": "Forward",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": 1
                        },
                        {
                            "name": "Vanilla",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": 2
                        },
                        {
                            "name": "Range",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": 3
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/risk-dashboard/components/enums/hedgingData.ts"
                }
            ]
        },
        "groupedTypeAliases": {
            "src/app/risk-dashboard/components/dashboard/components/momentum-indicator-chart/momentum-indicator-chart.component.ts": [
                {
                    "name": "ChartOptions",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/risk-dashboard/components/dashboard/components/momentum-indicator-chart/momentum-indicator-chart.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 187
                }
            ],
            "src/app/sign-up/models/country.ts": [
                {
                    "name": "CountryDataType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/sign-up/models/country.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 187
                }
            ],
            "src/app/sign-up/kyc.ts": [
                {
                    "name": "EmailVerificationPerCustomerResponse",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/sign-up/kyc.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 187
                },
                {
                    "name": "IPerformVerification",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "ICheckEmailVerification | ISendEmailVerification | ICheckPhoneVerification | ISendPhoneVerification",
                    "file": "src/app/sign-up/kyc.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                },
                {
                    "name": "TBusinessTypes",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "EBusinessType.companyAccount | EBusinessType.privateAccount",
                    "file": "src/app/sign-up/kyc.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                },
                {
                    "name": "TSendMailResponse",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/sign-up/kyc.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 187
                },
                {
                    "name": "TSiteSource",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "SiteSource.Ofakim | SiteSource.Okoora",
                    "file": "src/app/sign-up/kyc.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                },
                {
                    "name": "TVerificationCodeStatus",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"DEFAULT\" | \"INCORRECT\" | \"VALID\" | \"PASSED_LIMIT\"",
                    "file": "src/app/sign-up/kyc.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                },
                {
                    "name": "VerificationReturnTypeOptions",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "VerificationReturnType.Success | VerificationReturnType.GeneralError | VerificationReturnType.PassedLimitError",
                    "file": "src/app/sign-up/kyc.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                }
            ],
            "src/app/sign-up/models/kyc.ts": [
                {
                    "name": "EmailVerificationPerCustomerResponse",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/sign-up/models/kyc.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 187
                },
                {
                    "name": "IPerformVerification",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "ICheckEmailVerification | ISendEmailVerification | ICheckPhoneVerification | ISendPhoneVerification",
                    "file": "src/app/sign-up/models/kyc.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                },
                {
                    "name": "TBusinessTypes",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "EBusinessType.companyAccount | EBusinessType.privateAccount",
                    "file": "src/app/sign-up/models/kyc.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                },
                {
                    "name": "TSendMailResponse",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/sign-up/models/kyc.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 187
                },
                {
                    "name": "TSiteSource",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "SiteSource.Ofakim | SiteSource.Okoora",
                    "file": "src/app/sign-up/models/kyc.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                },
                {
                    "name": "TVerificationCodeStatus",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"DEFAULT\" | \"INCORRECT\" | \"VALID\" | \"PASSED_LIMIT\"",
                    "file": "src/app/sign-up/models/kyc.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                },
                {
                    "name": "VerificationReturnTypeOptions",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "VerificationReturnType.Success | VerificationReturnType.GeneralError | VerificationReturnType.PassedLimitError",
                    "file": "src/app/sign-up/models/kyc.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                }
            ],
            "src/app/sign-up/types/global.type.ts": [
                {
                    "name": "LanguageType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "src/app/sign-up/types/global.type.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 199
                },
                {
                    "name": "StepActionType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "src/app/sign-up/types/global.type.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 199
                }
            ],
            "src/app/shared/custom-validators.ts": [
                {
                    "name": "ValidationErrors",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/shared/custom-validators.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 187
                }
            ]
        }
    },
    "routes": [],
    "coverage": {
        "count": 3,
        "status": "low",
        "files": [
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/app.config.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "appConfig",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/login/change-password/change-password.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ChangePasswordComponent",
                "coveragePercent": 0,
                "coverageCount": "0/29",
                "status": "low"
            },
            {
                "filePath": "src/app/login/code-verification/code-verification.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CodeVerificationComponent",
                "coveragePercent": 0,
                "coverageCount": "0/41",
                "status": "low"
            },
            {
                "filePath": "src/app/login/login.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LoginComponent",
                "coveragePercent": 0,
                "coverageCount": "0/20",
                "status": "low"
            },
            {
                "filePath": "src/app/login/reset-password/reset-password.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ResetPasswordComponent",
                "coveragePercent": 0,
                "coverageCount": "0/28",
                "status": "low"
            },
            {
                "filePath": "src/app/risk-dashboard/advance-policy-json/advance-policy-data.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "AdvancePolicyData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/risk-dashboard/components/advanced-policy/advanced-policy.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AdvancedPolicyComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/risk-dashboard/components/advanced-policy/components/advance-policy-data.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "AdvancePolicyData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/risk-dashboard/components/advanced-policy/components/advance-policy-data.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "advancePolicyStep1Obj",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/risk-dashboard/components/advanced-policy/components/advanced-policy-step1/advanced-policy-step1.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AdvancedPolicyStep1Component",
                "coveragePercent": 0,
                "coverageCount": "0/37",
                "status": "low"
            },
            {
                "filePath": "src/app/risk-dashboard/components/advanced-policy/components/advanced-policy-step2/advanced-policy-step2.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AdvancedPolicyStep2Component",
                "coveragePercent": 0,
                "coverageCount": "0/30",
                "status": "low"
            },
            {
                "filePath": "src/app/risk-dashboard/components/advanced-policy/components/advanced-policy-step3/advanced-policy-step3.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AdvancedPolicyStep3Component",
                "coveragePercent": 0,
                "coverageCount": "0/18",
                "status": "low"
            },
            {
                "filePath": "src/app/risk-dashboard/components/cashflow-exposure/cashflow-exposure-steppers/cashflow-exposure-steppers.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CashflowExposureSteppersComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/risk-dashboard/components/cashflow-exposure/components/cashflow-exposure-data.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "cashflowExposureRows",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/risk-dashboard/components/cashflow-exposure/components/cashflow-exposure-data.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "monthlyExposureObject",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/risk-dashboard/components/cashflow-exposure/components/cashflow-exposure-data.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "walletData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/risk-dashboard/components/cashflow-exposure/components/cashflow-exposure-details/cashflow-exposure-details.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CashflowExposureDetailsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/50",
                "status": "low"
            },
            {
                "filePath": "src/app/risk-dashboard/components/cashflow-exposure/components/cashflow-exposure-details/cashflow-exposure-details.component.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "CustomDateAdapter",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/risk-dashboard/components/cashflow-exposure/components/cashflow-exposure-details/cashflow-exposure-details.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MATERIAL_DATEPICKER_FORMATS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/risk-dashboard/components/cashflow-exposure/components/cashflow-exposure-step1/cashflow-exposure-step1.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CashflowExposureStep1Component",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/risk-dashboard/components/cashflow-exposure/components/cashflow-exposure-step2/cashflow-exposure-step2.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CashflowExposureStep2Component",
                "coveragePercent": 0,
                "coverageCount": "0/48",
                "status": "low"
            },
            {
                "filePath": "src/app/risk-dashboard/components/cashflow-exposure/components/monthly-exposure-details/monthly-exposure-details.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MonthlyExposureDetailsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/risk-dashboard/components/dashboard/components/annual-exposure-details/annual-exposure-details.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AnnualExposureDetailsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/risk-dashboard/components/dashboard/components/breadcrumb-wallet/breadcrumb-wallet.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BreadcrumbWalletComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/risk-dashboard/components/dashboard/components/charts-tabs/charts-tabs.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ChartsTabsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/risk-dashboard/components/dashboard/components/exposure-rate-chart/exposure-rate-chart.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ExposureRateChartComponent",
                "coveragePercent": 0,
                "coverageCount": "0/48",
                "status": "low"
            },
            {
                "filePath": "src/app/risk-dashboard/components/dashboard/components/momentum-indicator-chart/momentum-indicator-chart.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MomentumIndicatorChartComponent",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "src/app/risk-dashboard/components/dashboard/components/momentum-indicator-chart/momentum-indicator-chart.component.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "ChartOptions",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/risk-dashboard/components/dashboard/components/monthly-exposure-chart/monthly-exposure-chart.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MonthlyExposureChartComponent",
                "coveragePercent": 0,
                "coverageCount": "0/34",
                "status": "low"
            },
            {
                "filePath": "src/app/risk-dashboard/components/dashboard/components/risk-estimate-chart/risk-estimate-chart.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "RiskEstimateChartComponent",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/risk-dashboard/components/dashboard/components/trade-view-chart/trade-view-chart.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TradeViewChartComponent",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "src/app/risk-dashboard/components/dashboard/components/volatility-chart/volatility-chart.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "VolatilityChartComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/risk-dashboard/components/dashboard/dashboard.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DashboardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/risk-dashboard/components/enums/hedgingData.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "HedgingTypeDisplayNames",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/risk-dashboard/components/header/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "src/app/risk-dashboard/components/hedging-proposal/components/hedge-all-drawer/hedge-all-drawer.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HedgeAllDrawerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/24",
                "status": "low"
            },
            {
                "filePath": "src/app/risk-dashboard/components/hedging-proposal/components/hedge-tandc-details/hedge-tandc-details.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HedgeTandcDetailsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/risk-dashboard/components/hedging-proposal/components/quick-hedge-drawer/quick-hedge-drawer.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "QuickHedgeDrawerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "src/app/risk-dashboard/components/hedging-proposal/components/traderoom-components/active-protection-traderoom/active-protection-traderoom.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ActiveProtectionTraderoomComponent",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "src/app/risk-dashboard/components/hedging-proposal/components/traderoom-components/agents-busy-traderoom/agents-busy-traderoom.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AgentsBusyTraderoomComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/risk-dashboard/components/hedging-proposal/components/traderoom-components/cancelled-traderoom/cancelled-traderoom.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CancelledTraderoomComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/risk-dashboard/components/hedging-proposal/components/traderoom-components/connected-traderoom/connected-traderoom.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ConnectedTraderoomComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/risk-dashboard/components/hedging-proposal/components/traderoom-components/connecting-traderoom/connecting-traderoom.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ConnectingTraderoomComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/risk-dashboard/components/hedging-proposal/hedging-data.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "HedgingDataService",
                "coveragePercent": 0,
                "coverageCount": "0/28",
                "status": "low"
            },
            {
                "filePath": "src/app/risk-dashboard/components/hedging-proposal/hedging-proposal.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HedgingProposalComponent",
                "coveragePercent": 0,
                "coverageCount": "0/58",
                "status": "low"
            },
            {
                "filePath": "src/app/risk-dashboard/components/hedging-proposal/hedging-proposal.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "PeriodicElement",
                "coveragePercent": 0,
                "coverageCount": "0/19",
                "status": "low"
            },
            {
                "filePath": "src/app/risk-dashboard/components/hedging-proposal/hedging-static-data.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "hedgeAllRows",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/risk-dashboard/components/hedging-proposal/hedging-static-data.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "hedgeData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/risk-dashboard/components/model/advance-policy-model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "AdvancePolicyModel",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/risk-dashboard/components/model/advance-policy-model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Answer",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/risk-dashboard/components/sidebar/sidebar.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SidebarComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/risk-dashboard/components/sidebar/sidebar.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "MenuItem",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/custom-validators.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "strictEmailValidator",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/custom-validators.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ALLOWED_SPECIAL_CHARACTERS_REGEX",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/custom-validators.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "customMinValidator",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/custom-validators.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "customNumberMustBeMultipliedByValidator",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/custom-validators.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "emailValidators",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/custom-validators.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "enAndNumbersAndSpaceValidators",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/custom-validators.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "inWalletValidator",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "src/app/shared/custom-validators.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "onlyEnglishAndNumbersAndSpaceRgx",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "src/app/shared/custom-validators.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "onlyEnglishAndNumbersAndSpaceValidator",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/custom-validators.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "onlyEnglishAndSpaceRgx",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/custom-validators.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "onlyEnglishAndSpaceValidator",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/custom-validators.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "onlyEnglishCharactersRgx",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/custom-validators.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "onlyEnglishCharactersValidator",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/custom-validators.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "onlyNumbersValidators",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/custom-validators.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "onlyValidIdNumber",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "src/app/shared/custom-validators.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "PASSWORD_REGEX",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/custom-validators.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "passwordRgxPatternValidator",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "src/app/shared/custom-validators.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "phoneValidators",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/custom-validators.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "pwdConfirming",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/custom-validators.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "residentRegex",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/custom-validators.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "VALID_LINK_REGEX",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/custom-validators.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "validateID",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "src/app/shared/custom-validators.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "valueMustBeEqualOrNotValidator",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/custom-validators.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "websitesValidators",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/custom-validators.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "ValidationErrors",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/sign-up/fields/country-data.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "countryData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/sign-up/fields/error/error.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ErrorComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/sign-up/fields/select-country/select-country.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SelectCountryComponent",
                "coveragePercent": 0,
                "coverageCount": "0/19",
                "status": "low"
            },
            {
                "filePath": "src/app/sign-up/fields/sms-verification/sms-verification.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SmsVerificationComponent",
                "coveragePercent": 0,
                "coverageCount": "0/47",
                "status": "low"
            },
            {
                "filePath": "src/app/sign-up/kyc-address/kyc-address.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "KycAddressComponent",
                "coveragePercent": 0,
                "coverageCount": "0/22",
                "status": "low"
            },
            {
                "filePath": "src/app/sign-up/kyc-address/kyc-address.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "hebrewPattern",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/sign-up/kyc-create-password/kyc-create-password.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "KycCreatePasswordComponent",
                "coveragePercent": 0,
                "coverageCount": "0/43",
                "status": "low"
            },
            {
                "filePath": "src/app/sign-up/kyc-create-password/kyc-create-password.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "pwdConfirming",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/sign-up/kyc-email-confirm/kyc-email-confirm.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "KycEmailConfirmComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/sign-up/kyc-main/kyc-main.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "KycMainComponent",
                "coveragePercent": 10,
                "coverageCount": "5/48",
                "status": "low"
            },
            {
                "filePath": "src/app/sign-up/kyc-one/kyc-one.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "KycOneComponent",
                "coveragePercent": 0,
                "coverageCount": "0/19",
                "status": "low"
            },
            {
                "filePath": "src/app/sign-up/kyc-personal-details/kyc-personal-details.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "KycPersonalDetailsComponent",
                "coveragePercent": 2,
                "coverageCount": "1/39",
                "status": "low"
            },
            {
                "filePath": "src/app/sign-up/kyc-phone/kyc-phone.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "KycPhoneComponent",
                "coveragePercent": 0,
                "coverageCount": "0/17",
                "status": "low"
            },
            {
                "filePath": "src/app/sign-up/kyc-two/kyc-two.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "KycTwoComponent",
                "coveragePercent": 0,
                "coverageCount": "0/19",
                "status": "low"
            },
            {
                "filePath": "src/app/sign-up/kyc.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CountriesData",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/sign-up/kyc.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ICheckEmailVerification",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/sign-up/kyc.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ICheckPhoneVerification",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/sign-up/kyc.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IErrorData",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/sign-up/kyc.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IKycData",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/sign-up/kyc.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IKYCFormGroups",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/sign-up/kyc.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ISendEmailVerification",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/sign-up/kyc.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ISendPhoneVerification",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/sign-up/kyc.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IStepsObj",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/sign-up/kyc.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "EmailVerificationPerCustomerResponse",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/sign-up/kyc.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "IPerformVerification",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/sign-up/kyc.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "TBusinessTypes",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/sign-up/kyc.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "TSendMailResponse",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/sign-up/kyc.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "TSiteSource",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/sign-up/kyc.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "TVerificationCodeStatus",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/sign-up/kyc.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "VerificationReturnTypeOptions",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/sign-up/models/country.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "CountryData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/sign-up/models/country.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SupportedCountries",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/sign-up/models/country.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "CountryDataType",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/sign-up/models/custom-validators.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ALLOWED_SPECIAL_CHARACTERS_REGEX",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/sign-up/models/custom-validators.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "PASSWORD_REGEX",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/sign-up/models/custom-validators.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "passwordRgxPatternValidator",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/sign-up/models/custom-validators.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "validateID",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/sign-up/models/general.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IGlobalData",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/sign-up/models/kyc.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CountriesData",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/sign-up/models/kyc.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ICheckEmailVerification",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/sign-up/models/kyc.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ICheckPhoneVerification",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/sign-up/models/kyc.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IDetailsToShow",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/sign-up/models/kyc.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IErrorData",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/sign-up/models/kyc.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IKycData",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/sign-up/models/kyc.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IKYCFormGroups",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/sign-up/models/kyc.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ISendEmailVerification",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/sign-up/models/kyc.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ISendPhoneVerification",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/sign-up/models/kyc.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IStepsObj",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/sign-up/models/kyc.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "detailsToShow",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/sign-up/models/kyc.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "EmailVerificationPerCustomerResponse",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/sign-up/models/kyc.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "IPerformVerification",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/sign-up/models/kyc.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "TBusinessTypes",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/sign-up/models/kyc.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "TSendMailResponse",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/sign-up/models/kyc.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "TSiteSource",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/sign-up/models/kyc.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "TVerificationCodeStatus",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/sign-up/models/kyc.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "VerificationReturnTypeOptions",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/sign-up/services/kyc.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "KycService",
                "coveragePercent": 0,
                "coverageCount": "0/23",
                "status": "low"
            },
            {
                "filePath": "src/app/sign-up/services/subject.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "SubjectService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/sign-up/types/global.type.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "LanguageType",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/sign-up/types/global.type.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "StepActionType",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}